// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_call_analytics_category_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateCallAnalyticsCategoryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.category_name {
        object.key("CategoryName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.rules {
        let mut array_3 = object.key("Rules").start_array();
        for item_4 in var_2 {
             {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::json_ser::serialize_union_crate_model_rule(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.input_type {
        object.key("InputType").string(var_6.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_language_model_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateLanguageModelInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_7) = &input.language_code {
        object.key("LanguageCode").string(var_7.as_str());
    }
    if let Some(var_8) = &input.base_model_name {
        object.key("BaseModelName").string(var_8.as_str());
    }
    if let Some(var_9) = &input.model_name {
        object.key("ModelName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.input_data_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_input_data_config(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("Tags").start_array();
        for item_14 in var_12 {
             {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_medical_vocabulary_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateMedicalVocabularyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_16) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_16.as_str());
    }
    if let Some(var_17) = &input.language_code {
        object.key("LanguageCode").string(var_17.as_str());
    }
    if let Some(var_18) = &input.vocabulary_file_uri {
        object.key("VocabularyFileUri").string(var_18.as_str());
    }
    if let Some(var_19) = &input.tags {
        let mut array_20 = object.key("Tags").start_array();
        for item_21 in var_19 {
             {
                #[allow(unused_mut)]
                let mut object_22 = array_20.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_22, item_21)?;
                object_22.finish();
            }
        }
        array_20.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_vocabulary_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateVocabularyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_23) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_23.as_str());
    }
    if let Some(var_24) = &input.language_code {
        object.key("LanguageCode").string(var_24.as_str());
    }
    if let Some(var_25) = &input.phrases {
        let mut array_26 = object.key("Phrases").start_array();
        for item_27 in var_25 {
             {
                array_26.value().string(item_27.as_str());
            }
        }
        array_26.finish();
    }
    if let Some(var_28) = &input.vocabulary_file_uri {
        object.key("VocabularyFileUri").string(var_28.as_str());
    }
    if let Some(var_29) = &input.tags {
        let mut array_30 = object.key("Tags").start_array();
        for item_31 in var_29 {
             {
                #[allow(unused_mut)]
                let mut object_32 = array_30.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_32, item_31)?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_vocabulary_filter_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateVocabularyFilterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_33) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_33.as_str());
    }
    if let Some(var_34) = &input.language_code {
        object.key("LanguageCode").string(var_34.as_str());
    }
    if let Some(var_35) = &input.words {
        let mut array_36 = object.key("Words").start_array();
        for item_37 in var_35 {
             {
                array_36.value().string(item_37.as_str());
            }
        }
        array_36.finish();
    }
    if let Some(var_38) = &input.vocabulary_filter_file_uri {
        object.key("VocabularyFilterFileUri").string(var_38.as_str());
    }
    if let Some(var_39) = &input.tags {
        let mut array_40 = object.key("Tags").start_array();
        for item_41 in var_39 {
             {
                #[allow(unused_mut)]
                let mut object_42 = array_40.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_42, item_41)?;
                object_42.finish();
            }
        }
        array_40.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_call_analytics_category_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteCallAnalyticsCategoryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_43) = &input.category_name {
        object.key("CategoryName").string(var_43.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_call_analytics_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteCallAnalyticsJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_44) = &input.call_analytics_job_name {
        object.key("CallAnalyticsJobName").string(var_44.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_language_model_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteLanguageModelInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_45) = &input.model_name {
        object.key("ModelName").string(var_45.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_medical_transcription_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteMedicalTranscriptionJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_46) = &input.medical_transcription_job_name {
        object.key("MedicalTranscriptionJobName").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_medical_vocabulary_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteMedicalVocabularyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_47) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_47.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_transcription_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteTranscriptionJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_48) = &input.transcription_job_name {
        object.key("TranscriptionJobName").string(var_48.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_vocabulary_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteVocabularyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_49) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_49.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_vocabulary_filter_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteVocabularyFilterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_50) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_50.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_language_model_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeLanguageModelInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_51) = &input.model_name {
        object.key("ModelName").string(var_51.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_call_analytics_category_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCallAnalyticsCategoryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_52) = &input.category_name {
        object.key("CategoryName").string(var_52.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_call_analytics_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCallAnalyticsJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_53) = &input.call_analytics_job_name {
        object.key("CallAnalyticsJobName").string(var_53.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_medical_transcription_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMedicalTranscriptionJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_54) = &input.medical_transcription_job_name {
        object.key("MedicalTranscriptionJobName").string(var_54.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_medical_vocabulary_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMedicalVocabularyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_55) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_transcription_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTranscriptionJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_56) = &input.transcription_job_name {
        object.key("TranscriptionJobName").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_vocabulary_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetVocabularyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_57) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_57.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_vocabulary_filter_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetVocabularyFilterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_58) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_58.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_call_analytics_categories_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCallAnalyticsCategoriesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_59) = &input.next_token {
        object.key("NextToken").string(var_59.as_str());
    }
    if let Some(var_60) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_60).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_call_analytics_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCallAnalyticsJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_61) = &input.status {
        object.key("Status").string(var_61.as_str());
    }
    if let Some(var_62) = &input.job_name_contains {
        object.key("JobNameContains").string(var_62.as_str());
    }
    if let Some(var_63) = &input.next_token {
        object.key("NextToken").string(var_63.as_str());
    }
    if let Some(var_64) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_64).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_language_models_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListLanguageModelsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_65) = &input.status_equals {
        object.key("StatusEquals").string(var_65.as_str());
    }
    if let Some(var_66) = &input.name_contains {
        object.key("NameContains").string(var_66.as_str());
    }
    if let Some(var_67) = &input.next_token {
        object.key("NextToken").string(var_67.as_str());
    }
    if let Some(var_68) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_68).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_medical_transcription_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListMedicalTranscriptionJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_69) = &input.status {
        object.key("Status").string(var_69.as_str());
    }
    if let Some(var_70) = &input.job_name_contains {
        object.key("JobNameContains").string(var_70.as_str());
    }
    if let Some(var_71) = &input.next_token {
        object.key("NextToken").string(var_71.as_str());
    }
    if let Some(var_72) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_72).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_medical_vocabularies_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListMedicalVocabulariesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_73) = &input.next_token {
        object.key("NextToken").string(var_73.as_str());
    }
    if let Some(var_74) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_74).into()));
    }
    if let Some(var_75) = &input.state_equals {
        object.key("StateEquals").string(var_75.as_str());
    }
    if let Some(var_76) = &input.name_contains {
        object.key("NameContains").string(var_76.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTagsForResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_77) = &input.resource_arn {
        object.key("ResourceArn").string(var_77.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_transcription_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTranscriptionJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_78) = &input.status {
        object.key("Status").string(var_78.as_str());
    }
    if let Some(var_79) = &input.job_name_contains {
        object.key("JobNameContains").string(var_79.as_str());
    }
    if let Some(var_80) = &input.next_token {
        object.key("NextToken").string(var_80.as_str());
    }
    if let Some(var_81) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_81).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_vocabularies_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListVocabulariesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_82) = &input.next_token {
        object.key("NextToken").string(var_82.as_str());
    }
    if let Some(var_83) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_83).into()));
    }
    if let Some(var_84) = &input.state_equals {
        object.key("StateEquals").string(var_84.as_str());
    }
    if let Some(var_85) = &input.name_contains {
        object.key("NameContains").string(var_85.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_vocabulary_filters_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListVocabularyFiltersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_86) = &input.next_token {
        object.key("NextToken").string(var_86.as_str());
    }
    if let Some(var_87) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_87).into()));
    }
    if let Some(var_88) = &input.name_contains {
        object.key("NameContains").string(var_88.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_call_analytics_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartCallAnalyticsJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_89) = &input.call_analytics_job_name {
        object.key("CallAnalyticsJobName").string(var_89.as_str());
    }
    if let Some(var_90) = &input.media {
        #[allow(unused_mut)]
        let mut object_91 = object.key("Media").start_object();
        crate::json_ser::serialize_structure_crate_model_media(&mut object_91, var_90)?;
        object_91.finish();
    }
    if let Some(var_92) = &input.output_location {
        object.key("OutputLocation").string(var_92.as_str());
    }
    if let Some(var_93) = &input.output_encryption_kms_key_id {
        object.key("OutputEncryptionKMSKeyId").string(var_93.as_str());
    }
    if let Some(var_94) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_94.as_str());
    }
    if let Some(var_95) = &input.settings {
        #[allow(unused_mut)]
        let mut object_96 = object.key("Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_call_analytics_job_settings(&mut object_96, var_95)?;
        object_96.finish();
    }
    if let Some(var_97) = &input.channel_definitions {
        let mut array_98 = object.key("ChannelDefinitions").start_array();
        for item_99 in var_97 {
             {
                #[allow(unused_mut)]
                let mut object_100 = array_98.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel_definition(&mut object_100, item_99)?;
                object_100.finish();
            }
        }
        array_98.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_medical_transcription_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartMedicalTranscriptionJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_101) = &input.medical_transcription_job_name {
        object.key("MedicalTranscriptionJobName").string(var_101.as_str());
    }
    if let Some(var_102) = &input.language_code {
        object.key("LanguageCode").string(var_102.as_str());
    }
    if let Some(var_103) = &input.media_sample_rate_hertz {
        object.key("MediaSampleRateHertz").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_103).into()));
    }
    if let Some(var_104) = &input.media_format {
        object.key("MediaFormat").string(var_104.as_str());
    }
    if let Some(var_105) = &input.media {
        #[allow(unused_mut)]
        let mut object_106 = object.key("Media").start_object();
        crate::json_ser::serialize_structure_crate_model_media(&mut object_106, var_105)?;
        object_106.finish();
    }
    if let Some(var_107) = &input.output_bucket_name {
        object.key("OutputBucketName").string(var_107.as_str());
    }
    if let Some(var_108) = &input.output_key {
        object.key("OutputKey").string(var_108.as_str());
    }
    if let Some(var_109) = &input.output_encryption_kms_key_id {
        object.key("OutputEncryptionKMSKeyId").string(var_109.as_str());
    }
    if let Some(var_110) = &input.kms_encryption_context {
        #[allow(unused_mut)]
        let mut object_111 = object.key("KMSEncryptionContext").start_object();
        for (key_112, value_113) in var_110 {
             {
                object_111.key(key_112.as_str()).string(value_113.as_str());
            }
        }
        object_111.finish();
    }
    if let Some(var_114) = &input.settings {
        #[allow(unused_mut)]
        let mut object_115 = object.key("Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_medical_transcription_setting(&mut object_115, var_114)?;
        object_115.finish();
    }
    if let Some(var_116) = &input.content_identification_type {
        object.key("ContentIdentificationType").string(var_116.as_str());
    }
    if let Some(var_117) = &input.specialty {
        object.key("Specialty").string(var_117.as_str());
    }
    if let Some(var_118) = &input.r#type {
        object.key("Type").string(var_118.as_str());
    }
    if let Some(var_119) = &input.tags {
        let mut array_120 = object.key("Tags").start_array();
        for item_121 in var_119 {
             {
                #[allow(unused_mut)]
                let mut object_122 = array_120.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_122, item_121)?;
                object_122.finish();
            }
        }
        array_120.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_transcription_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartTranscriptionJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_123) = &input.transcription_job_name {
        object.key("TranscriptionJobName").string(var_123.as_str());
    }
    if let Some(var_124) = &input.language_code {
        object.key("LanguageCode").string(var_124.as_str());
    }
    if let Some(var_125) = &input.media_sample_rate_hertz {
        object.key("MediaSampleRateHertz").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_125).into()));
    }
    if let Some(var_126) = &input.media_format {
        object.key("MediaFormat").string(var_126.as_str());
    }
    if let Some(var_127) = &input.media {
        #[allow(unused_mut)]
        let mut object_128 = object.key("Media").start_object();
        crate::json_ser::serialize_structure_crate_model_media(&mut object_128, var_127)?;
        object_128.finish();
    }
    if let Some(var_129) = &input.output_bucket_name {
        object.key("OutputBucketName").string(var_129.as_str());
    }
    if let Some(var_130) = &input.output_key {
        object.key("OutputKey").string(var_130.as_str());
    }
    if let Some(var_131) = &input.output_encryption_kms_key_id {
        object.key("OutputEncryptionKMSKeyId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.kms_encryption_context {
        #[allow(unused_mut)]
        let mut object_133 = object.key("KMSEncryptionContext").start_object();
        for (key_134, value_135) in var_132 {
             {
                object_133.key(key_134.as_str()).string(value_135.as_str());
            }
        }
        object_133.finish();
    }
    if let Some(var_136) = &input.settings {
        #[allow(unused_mut)]
        let mut object_137 = object.key("Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_settings(&mut object_137, var_136)?;
        object_137.finish();
    }
    if let Some(var_138) = &input.model_settings {
        #[allow(unused_mut)]
        let mut object_139 = object.key("ModelSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_model_settings(&mut object_139, var_138)?;
        object_139.finish();
    }
    if let Some(var_140) = &input.job_execution_settings {
        #[allow(unused_mut)]
        let mut object_141 = object.key("JobExecutionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_job_execution_settings(&mut object_141, var_140)?;
        object_141.finish();
    }
    if let Some(var_142) = &input.content_redaction {
        #[allow(unused_mut)]
        let mut object_143 = object.key("ContentRedaction").start_object();
        crate::json_ser::serialize_structure_crate_model_content_redaction(&mut object_143, var_142)?;
        object_143.finish();
    }
    if let Some(var_144) = &input.identify_language {
        object.key("IdentifyLanguage").boolean(*var_144);
    }
    if let Some(var_145) = &input.identify_multiple_languages {
        object.key("IdentifyMultipleLanguages").boolean(*var_145);
    }
    if let Some(var_146) = &input.language_options {
        let mut array_147 = object.key("LanguageOptions").start_array();
        for item_148 in var_146 {
             {
                array_147.value().string(item_148.as_str());
            }
        }
        array_147.finish();
    }
    if let Some(var_149) = &input.subtitles {
        #[allow(unused_mut)]
        let mut object_150 = object.key("Subtitles").start_object();
        crate::json_ser::serialize_structure_crate_model_subtitles(&mut object_150, var_149)?;
        object_150.finish();
    }
    if let Some(var_151) = &input.tags {
        let mut array_152 = object.key("Tags").start_array();
        for item_153 in var_151 {
             {
                #[allow(unused_mut)]
                let mut object_154 = array_152.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_154, item_153)?;
                object_154.finish();
            }
        }
        array_152.finish();
    }
    if let Some(var_155) = &input.language_id_settings {
        #[allow(unused_mut)]
        let mut object_156 = object.key("LanguageIdSettings").start_object();
        for (key_157, value_158) in var_155 {
             {
                #[allow(unused_mut)]
                let mut object_159 = object_156.key(key_157.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_language_id_settings(&mut object_159, value_158)?;
                object_159.finish();
            }
        }
        object_156.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_160) = &input.resource_arn {
        object.key("ResourceArn").string(var_160.as_str());
    }
    if let Some(var_161) = &input.tags {
        let mut array_162 = object.key("Tags").start_array();
        for item_163 in var_161 {
             {
                #[allow(unused_mut)]
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_164, item_163)?;
                object_164.finish();
            }
        }
        array_162.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UntagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_165) = &input.resource_arn {
        object.key("ResourceArn").string(var_165.as_str());
    }
    if let Some(var_166) = &input.tag_keys {
        let mut array_167 = object.key("TagKeys").start_array();
        for item_168 in var_166 {
             {
                array_167.value().string(item_168.as_str());
            }
        }
        array_167.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_call_analytics_category_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateCallAnalyticsCategoryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_169) = &input.category_name {
        object.key("CategoryName").string(var_169.as_str());
    }
    if let Some(var_170) = &input.rules {
        let mut array_171 = object.key("Rules").start_array();
        for item_172 in var_170 {
             {
                #[allow(unused_mut)]
                let mut object_173 = array_171.value().start_object();
                crate::json_ser::serialize_union_crate_model_rule(&mut object_173, item_172)?;
                object_173.finish();
            }
        }
        array_171.finish();
    }
    if let Some(var_174) = &input.input_type {
        object.key("InputType").string(var_174.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_medical_vocabulary_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateMedicalVocabularyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_175) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_175.as_str());
    }
    if let Some(var_176) = &input.language_code {
        object.key("LanguageCode").string(var_176.as_str());
    }
    if let Some(var_177) = &input.vocabulary_file_uri {
        object.key("VocabularyFileUri").string(var_177.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_vocabulary_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateVocabularyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_178) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_178.as_str());
    }
    if let Some(var_179) = &input.language_code {
        object.key("LanguageCode").string(var_179.as_str());
    }
    if let Some(var_180) = &input.phrases {
        let mut array_181 = object.key("Phrases").start_array();
        for item_182 in var_180 {
             {
                array_181.value().string(item_182.as_str());
            }
        }
        array_181.finish();
    }
    if let Some(var_183) = &input.vocabulary_file_uri {
        object.key("VocabularyFileUri").string(var_183.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_vocabulary_filter_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateVocabularyFilterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_184) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_184.as_str());
    }
    if let Some(var_185) = &input.words {
        let mut array_186 = object.key("Words").start_array();
        for item_187 in var_185 {
             {
                array_186.value().string(item_187.as_str());
            }
        }
        array_186.finish();
    }
    if let Some(var_188) = &input.vocabulary_filter_file_uri {
        object.key("VocabularyFilterFileUri").string(var_188.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_rule(object_5: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Rule) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::Rule::NonTalkTimeFilter(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_189 = object_5.key("NonTalkTimeFilter").start_object();
                crate::json_ser::serialize_structure_crate_model_non_talk_time_filter(&mut object_189, inner)?;
                object_189.finish();
            }
        },
        crate::model::Rule::InterruptionFilter(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_190 = object_5.key("InterruptionFilter").start_object();
                crate::json_ser::serialize_structure_crate_model_interruption_filter(&mut object_190, inner)?;
                object_190.finish();
            }
        },
        crate::model::Rule::TranscriptFilter(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_191 = object_5.key("TranscriptFilter").start_object();
                crate::json_ser::serialize_structure_crate_model_transcript_filter(&mut object_191, inner)?;
                object_191.finish();
            }
        },
        crate::model::Rule::SentimentFilter(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_192 = object_5.key("SentimentFilter").start_object();
                crate::json_ser::serialize_structure_crate_model_sentiment_filter(&mut object_192, inner)?;
                object_192.finish();
            }
        },
        crate::model::Rule::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("Rule"))
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_data_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InputDataConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_193) = &input.s3_uri {
        object.key("S3Uri").string(var_193.as_str());
    }
    if let Some(var_194) = &input.tuning_data_s3_uri {
        object.key("TuningDataS3Uri").string(var_194.as_str());
    }
    if let Some(var_195) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_195.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Tag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_196) = &input.key {
        object.key("Key").string(var_196.as_str());
    }
    if let Some(var_197) = &input.value {
        object.key("Value").string(var_197.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_media(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Media) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_198) = &input.media_file_uri {
        object.key("MediaFileUri").string(var_198.as_str());
    }
    if let Some(var_199) = &input.redacted_media_file_uri {
        object.key("RedactedMediaFileUri").string(var_199.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_call_analytics_job_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CallAnalyticsJobSettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_200) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_200.as_str());
    }
    if let Some(var_201) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_201.as_str());
    }
    if let Some(var_202) = &input.vocabulary_filter_method {
        object.key("VocabularyFilterMethod").string(var_202.as_str());
    }
    if let Some(var_203) = &input.language_model_name {
        object.key("LanguageModelName").string(var_203.as_str());
    }
    if let Some(var_204) = &input.content_redaction {
        #[allow(unused_mut)]
        let mut object_205 = object.key("ContentRedaction").start_object();
        crate::json_ser::serialize_structure_crate_model_content_redaction(&mut object_205, var_204)?;
        object_205.finish();
    }
    if let Some(var_206) = &input.language_options {
        let mut array_207 = object.key("LanguageOptions").start_array();
        for item_208 in var_206 {
             {
                array_207.value().string(item_208.as_str());
            }
        }
        array_207.finish();
    }
    if let Some(var_209) = &input.language_id_settings {
        #[allow(unused_mut)]
        let mut object_210 = object.key("LanguageIdSettings").start_object();
        for (key_211, value_212) in var_209 {
             {
                #[allow(unused_mut)]
                let mut object_213 = object_210.key(key_211.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_language_id_settings(&mut object_213, value_212)?;
                object_213.finish();
            }
        }
        object_210.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_channel_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ChannelDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.channel_id != 0 {
        object.key("ChannelId").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.channel_id).into()));
    }
    if let Some(var_214) = &input.participant_role {
        object.key("ParticipantRole").string(var_214.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_medical_transcription_setting(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MedicalTranscriptionSetting) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_215) = &input.show_speaker_labels {
        object.key("ShowSpeakerLabels").boolean(*var_215);
    }
    if let Some(var_216) = &input.max_speaker_labels {
        object.key("MaxSpeakerLabels").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_216).into()));
    }
    if let Some(var_217) = &input.channel_identification {
        object.key("ChannelIdentification").boolean(*var_217);
    }
    if let Some(var_218) = &input.show_alternatives {
        object.key("ShowAlternatives").boolean(*var_218);
    }
    if let Some(var_219) = &input.max_alternatives {
        object.key("MaxAlternatives").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_219).into()));
    }
    if let Some(var_220) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_220.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Settings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_221) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_221.as_str());
    }
    if let Some(var_222) = &input.show_speaker_labels {
        object.key("ShowSpeakerLabels").boolean(*var_222);
    }
    if let Some(var_223) = &input.max_speaker_labels {
        object.key("MaxSpeakerLabels").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_223).into()));
    }
    if let Some(var_224) = &input.channel_identification {
        object.key("ChannelIdentification").boolean(*var_224);
    }
    if let Some(var_225) = &input.show_alternatives {
        object.key("ShowAlternatives").boolean(*var_225);
    }
    if let Some(var_226) = &input.max_alternatives {
        object.key("MaxAlternatives").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_226).into()));
    }
    if let Some(var_227) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_227.as_str());
    }
    if let Some(var_228) = &input.vocabulary_filter_method {
        object.key("VocabularyFilterMethod").string(var_228.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelSettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_229) = &input.language_model_name {
        object.key("LanguageModelName").string(var_229.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_execution_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JobExecutionSettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_230) = &input.allow_deferred_execution {
        object.key("AllowDeferredExecution").boolean(*var_230);
    }
    if let Some(var_231) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_231.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_content_redaction(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ContentRedaction) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_232) = &input.redaction_type {
        object.key("RedactionType").string(var_232.as_str());
    }
    if let Some(var_233) = &input.redaction_output {
        object.key("RedactionOutput").string(var_233.as_str());
    }
    if let Some(var_234) = &input.pii_entity_types {
        let mut array_235 = object.key("PiiEntityTypes").start_array();
        for item_236 in var_234 {
             {
                array_235.value().string(item_236.as_str());
            }
        }
        array_235.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_subtitles(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Subtitles) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_237) = &input.formats {
        let mut array_238 = object.key("Formats").start_array();
        for item_239 in var_237 {
             {
                array_238.value().string(item_239.as_str());
            }
        }
        array_238.finish();
    }
    if let Some(var_240) = &input.output_start_index {
        object.key("OutputStartIndex").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_240).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_language_id_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LanguageIdSettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_241) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_241.as_str());
    }
    if let Some(var_242) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_242.as_str());
    }
    if let Some(var_243) = &input.language_model_name {
        object.key("LanguageModelName").string(var_243.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_non_talk_time_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NonTalkTimeFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_244) = &input.threshold {
        object.key("Threshold").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_244).into()));
    }
    if let Some(var_245) = &input.absolute_time_range {
        #[allow(unused_mut)]
        let mut object_246 = object.key("AbsoluteTimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_absolute_time_range(&mut object_246, var_245)?;
        object_246.finish();
    }
    if let Some(var_247) = &input.relative_time_range {
        #[allow(unused_mut)]
        let mut object_248 = object.key("RelativeTimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_relative_time_range(&mut object_248, var_247)?;
        object_248.finish();
    }
    if let Some(var_249) = &input.negate {
        object.key("Negate").boolean(*var_249);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_interruption_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InterruptionFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_250) = &input.threshold {
        object.key("Threshold").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_250).into()));
    }
    if let Some(var_251) = &input.participant_role {
        object.key("ParticipantRole").string(var_251.as_str());
    }
    if let Some(var_252) = &input.absolute_time_range {
        #[allow(unused_mut)]
        let mut object_253 = object.key("AbsoluteTimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_absolute_time_range(&mut object_253, var_252)?;
        object_253.finish();
    }
    if let Some(var_254) = &input.relative_time_range {
        #[allow(unused_mut)]
        let mut object_255 = object.key("RelativeTimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_relative_time_range(&mut object_255, var_254)?;
        object_255.finish();
    }
    if let Some(var_256) = &input.negate {
        object.key("Negate").boolean(*var_256);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transcript_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TranscriptFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_257) = &input.transcript_filter_type {
        object.key("TranscriptFilterType").string(var_257.as_str());
    }
    if let Some(var_258) = &input.absolute_time_range {
        #[allow(unused_mut)]
        let mut object_259 = object.key("AbsoluteTimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_absolute_time_range(&mut object_259, var_258)?;
        object_259.finish();
    }
    if let Some(var_260) = &input.relative_time_range {
        #[allow(unused_mut)]
        let mut object_261 = object.key("RelativeTimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_relative_time_range(&mut object_261, var_260)?;
        object_261.finish();
    }
    if let Some(var_262) = &input.participant_role {
        object.key("ParticipantRole").string(var_262.as_str());
    }
    if let Some(var_263) = &input.negate {
        object.key("Negate").boolean(*var_263);
    }
    if let Some(var_264) = &input.targets {
        let mut array_265 = object.key("Targets").start_array();
        for item_266 in var_264 {
             {
                array_265.value().string(item_266.as_str());
            }
        }
        array_265.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sentiment_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SentimentFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_267) = &input.sentiments {
        let mut array_268 = object.key("Sentiments").start_array();
        for item_269 in var_267 {
             {
                array_268.value().string(item_269.as_str());
            }
        }
        array_268.finish();
    }
    if let Some(var_270) = &input.absolute_time_range {
        #[allow(unused_mut)]
        let mut object_271 = object.key("AbsoluteTimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_absolute_time_range(&mut object_271, var_270)?;
        object_271.finish();
    }
    if let Some(var_272) = &input.relative_time_range {
        #[allow(unused_mut)]
        let mut object_273 = object.key("RelativeTimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_relative_time_range(&mut object_273, var_272)?;
        object_273.finish();
    }
    if let Some(var_274) = &input.participant_role {
        object.key("ParticipantRole").string(var_274.as_str());
    }
    if let Some(var_275) = &input.negate {
        object.key("Negate").boolean(*var_275);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_absolute_time_range(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AbsoluteTimeRange) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_276) = &input.start_time {
        object.key("StartTime").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_276).into()));
    }
    if let Some(var_277) = &input.end_time {
        object.key("EndTime").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_277).into()));
    }
    if let Some(var_278) = &input.first {
        object.key("First").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_278).into()));
    }
    if let Some(var_279) = &input.last {
        object.key("Last").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_279).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relative_time_range(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RelativeTimeRange) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_280) = &input.start_percentage {
        object.key("StartPercentage").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_280).into()));
    }
    if let Some(var_281) = &input.end_percentage {
        object.key("EndPercentage").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_281).into()));
    }
    if let Some(var_282) = &input.first {
        object.key("First").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_282).into()));
    }
    if let Some(var_283) = &input.last {
        object.key("Last").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_283).into()));
    }
    Ok(())
}

