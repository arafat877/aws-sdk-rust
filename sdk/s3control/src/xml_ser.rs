// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_access_point_input(input: &crate::input::CreateAccessPointInput, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.bucket {
        let mut inner_writer = scope.start_el("Bucket").finish();
        inner_writer.data(
            var_1.as_str()
        );
    }
    if let Some(var_2) = &input.bucket_account_id {
        let mut inner_writer = scope.start_el("BucketAccountId").finish();
        inner_writer.data(
            var_2.as_str()
        );
    }
    if let Some(var_3) = &input.public_access_block_configuration {
        let inner_writer = scope.start_el("PublicAccessBlockConfiguration");
        crate::xml_ser::serialize_structure_crate_model_public_access_block_configuration(var_3, inner_writer)?
    }
    if let Some(var_4) = &input.vpc_configuration {
        let inner_writer = scope.start_el("VpcConfiguration");
        crate::xml_ser::serialize_structure_crate_model_vpc_configuration(var_4, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_input_create_access_point_for_object_lambda_input(input: &crate::input::CreateAccessPointForObjectLambdaInput, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_5) = &input.configuration {
        let inner_writer = scope.start_el("Configuration");
        crate::xml_ser::serialize_structure_crate_model_object_lambda_configuration(var_5, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_member_com_amazonaws_s3control_synthetic_create_bucket_input_create_bucket_configuration(input: &crate::model::CreateBucketConfiguration) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
     {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
                                #[allow(unused_mut)]
                                let mut root = writer.start_el("CreateBucketConfiguration").write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_crate_model_create_bucket_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_structure_crate_input_create_job_input(input: &crate::input::CreateJobInput, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_6) = &input.client_request_token {
        let mut inner_writer = scope.start_el("ClientRequestToken").finish();
        inner_writer.data(
            var_6.as_str()
        );
    }
    if let Some(var_7) = &input.confirmation_required {
        let mut inner_writer = scope.start_el("ConfirmationRequired").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(*var_7).encode()
        );
    }
    if let Some(var_8) = &input.description {
        let mut inner_writer = scope.start_el("Description").finish();
        inner_writer.data(
            var_8.as_str()
        );
    }
    if let Some(var_9) = &input.manifest {
        let inner_writer = scope.start_el("Manifest");
        crate::xml_ser::serialize_structure_crate_model_job_manifest(var_9, inner_writer)?
    }
    if let Some(var_10) = &input.manifest_generator {
        let inner_writer = scope.start_el("ManifestGenerator");
        crate::xml_ser::serialize_union_crate_model_job_manifest_generator(var_10, inner_writer)?
    }
    if let Some(var_11) = &input.operation {
        let inner_writer = scope.start_el("Operation");
        crate::xml_ser::serialize_structure_crate_model_job_operation(var_11, inner_writer)?
    }
    if let Some(var_12) = &input.priority {
        let mut inner_writer = scope.start_el("Priority").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(*var_12).encode()
        );
    }
    if let Some(var_13) = &input.report {
        let inner_writer = scope.start_el("Report");
        crate::xml_ser::serialize_structure_crate_model_job_report(var_13, inner_writer)?
    }
    if let Some(var_14) = &input.role_arn {
        let mut inner_writer = scope.start_el("RoleArn").finish();
        inner_writer.data(
            var_14.as_str()
        );
    }
    if let Some(var_15) = &input.tags {
        let mut inner_writer = scope.start_el("Tags").finish();
        for list_item_16 in var_15 {
             {
                let inner_writer = inner_writer.start_el("member");
                crate::xml_ser::serialize_structure_crate_model_s3_tag(list_item_16, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_input_create_multi_region_access_point_input(input: &crate::input::CreateMultiRegionAccessPointInput, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_17) = &input.client_token {
        let mut inner_writer = scope.start_el("ClientToken").finish();
        inner_writer.data(
            var_17.as_str()
        );
    }
    if let Some(var_18) = &input.details {
        let inner_writer = scope.start_el("Details");
        crate::xml_ser::serialize_structure_crate_model_create_multi_region_access_point_input(var_18, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_input_delete_multi_region_access_point_input(input: &crate::input::DeleteMultiRegionAccessPointInput, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_19) = &input.client_token {
        let mut inner_writer = scope.start_el("ClientToken").finish();
        inner_writer.data(
            var_19.as_str()
        );
    }
    if let Some(var_20) = &input.details {
        let inner_writer = scope.start_el("Details");
        crate::xml_ser::serialize_structure_crate_model_delete_multi_region_access_point_input(var_20, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_input_put_access_point_configuration_for_object_lambda_input(input: &crate::input::PutAccessPointConfigurationForObjectLambdaInput, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_21) = &input.configuration {
        let inner_writer = scope.start_el("Configuration");
        crate::xml_ser::serialize_structure_crate_model_object_lambda_configuration(var_21, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_input_put_access_point_policy_input(input: &crate::input::PutAccessPointPolicyInput, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_22) = &input.policy {
        let mut inner_writer = scope.start_el("Policy").finish();
        inner_writer.data(
            var_22.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_input_put_access_point_policy_for_object_lambda_input(input: &crate::input::PutAccessPointPolicyForObjectLambdaInput, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_23) = &input.policy {
        let mut inner_writer = scope.start_el("Policy").finish();
        inner_writer.data(
            var_23.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_member_com_amazonaws_s3control_synthetic_put_bucket_lifecycle_configuration_input_lifecycle_configuration(input: &crate::model::LifecycleConfiguration) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
     {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
                                #[allow(unused_mut)]
                                let mut root = writer.start_el("LifecycleConfiguration").write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_crate_model_lifecycle_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_structure_crate_input_put_bucket_policy_input(input: &crate::input::PutBucketPolicyInput, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_24) = &input.policy {
        let mut inner_writer = scope.start_el("Policy").finish();
        inner_writer.data(
            var_24.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_member_com_amazonaws_s3control_synthetic_put_bucket_tagging_input_tagging(input: &crate::model::Tagging) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
     {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
                                #[allow(unused_mut)]
                                let mut root = writer.start_el("Tagging").write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_crate_model_tagging(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3control_synthetic_put_bucket_versioning_input_versioning_configuration(input: &crate::model::VersioningConfiguration) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
     {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
                                #[allow(unused_mut)]
                                let mut root = writer.start_el("VersioningConfiguration").write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_crate_model_versioning_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_structure_crate_input_put_job_tagging_input(input: &crate::input::PutJobTaggingInput, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_25) = &input.tags {
        let mut inner_writer = scope.start_el("Tags").finish();
        for list_item_26 in var_25 {
             {
                let inner_writer = inner_writer.start_el("member");
                crate::xml_ser::serialize_structure_crate_model_s3_tag(list_item_26, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_input_put_multi_region_access_point_policy_input(input: &crate::input::PutMultiRegionAccessPointPolicyInput, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_27) = &input.client_token {
        let mut inner_writer = scope.start_el("ClientToken").finish();
        inner_writer.data(
            var_27.as_str()
        );
    }
    if let Some(var_28) = &input.details {
        let inner_writer = scope.start_el("Details");
        crate::xml_ser::serialize_structure_crate_model_put_multi_region_access_point_policy_input(var_28, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_member_com_amazonaws_s3control_synthetic_put_public_access_block_input_public_access_block_configuration(input: &crate::model::PublicAccessBlockConfiguration) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
     {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
                                #[allow(unused_mut)]
                                let mut root = writer.start_el("PublicAccessBlockConfiguration").write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_crate_model_public_access_block_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_structure_crate_input_put_storage_lens_configuration_input(input: &crate::input::PutStorageLensConfigurationInput, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_29) = &input.storage_lens_configuration {
        let inner_writer = scope.start_el("StorageLensConfiguration");
        crate::xml_ser::serialize_structure_crate_model_storage_lens_configuration(var_29, inner_writer)?
    }
    if let Some(var_30) = &input.tags {
        let mut inner_writer = scope.start_el("Tags").finish();
        for list_item_31 in var_30 {
             {
                let inner_writer = inner_writer.start_el("Tag");
                crate::xml_ser::serialize_structure_crate_model_storage_lens_tag(list_item_31, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_input_put_storage_lens_configuration_tagging_input(input: &crate::input::PutStorageLensConfigurationTaggingInput, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_32) = &input.tags {
        let mut inner_writer = scope.start_el("Tags").finish();
        for list_item_33 in var_32 {
             {
                let inner_writer = inner_writer.start_el("Tag");
                crate::xml_ser::serialize_structure_crate_model_storage_lens_tag(list_item_33, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_input_submit_multi_region_access_point_routes_input(input: &crate::input::SubmitMultiRegionAccessPointRoutesInput, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_34) = &input.route_updates {
        let mut inner_writer = scope.start_el("RouteUpdates").finish();
        for list_item_35 in var_34 {
             {
                let inner_writer = inner_writer.start_el("Route");
                crate::xml_ser::serialize_structure_crate_model_multi_region_access_point_route(list_item_35, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_public_access_block_configuration(input: &crate::model::PublicAccessBlockConfiguration, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.block_public_acls {
        let mut inner_writer = scope.start_el("BlockPublicAcls").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.block_public_acls).encode()
        );
    }
    if input.ignore_public_acls {
        let mut inner_writer = scope.start_el("IgnorePublicAcls").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.ignore_public_acls).encode()
        );
    }
    if input.block_public_policy {
        let mut inner_writer = scope.start_el("BlockPublicPolicy").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.block_public_policy).encode()
        );
    }
    if input.restrict_public_buckets {
        let mut inner_writer = scope.start_el("RestrictPublicBuckets").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.restrict_public_buckets).encode()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_configuration(input: &crate::model::VpcConfiguration, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_36) = &input.vpc_id {
        let mut inner_writer = scope.start_el("VpcId").finish();
        inner_writer.data(
            var_36.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_object_lambda_configuration(input: &crate::model::ObjectLambdaConfiguration, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_37) = &input.supporting_access_point {
        let mut inner_writer = scope.start_el("SupportingAccessPoint").finish();
        inner_writer.data(
            var_37.as_str()
        );
    }
    if input.cloud_watch_metrics_enabled {
        let mut inner_writer = scope.start_el("CloudWatchMetricsEnabled").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.cloud_watch_metrics_enabled).encode()
        );
    }
    if let Some(var_38) = &input.allowed_features {
        let mut inner_writer = scope.start_el("AllowedFeatures").finish();
        for list_item_39 in var_38 {
             {
                let mut inner_writer = inner_writer.start_el("AllowedFeature").finish();
                inner_writer.data(
                    list_item_39.as_str()
                );
            }
        }
    }
    if let Some(var_40) = &input.transformation_configurations {
        let mut inner_writer = scope.start_el("TransformationConfigurations").finish();
        for list_item_41 in var_40 {
             {
                let inner_writer = inner_writer.start_el("TransformationConfiguration");
                crate::xml_ser::serialize_structure_crate_model_object_lambda_transformation_configuration(list_item_41, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_create_bucket_configuration(input: &crate::model::CreateBucketConfiguration, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_42) = &input.location_constraint {
        let mut inner_writer = scope.start_el("LocationConstraint").finish();
        inner_writer.data(
            var_42.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_job_manifest(input: &crate::model::JobManifest, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_43) = &input.spec {
        let inner_writer = scope.start_el("Spec");
        crate::xml_ser::serialize_structure_crate_model_job_manifest_spec(var_43, inner_writer)?
    }
    if let Some(var_44) = &input.location {
        let inner_writer = scope.start_el("Location");
        crate::xml_ser::serialize_structure_crate_model_job_manifest_location(var_44, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_union_crate_model_job_manifest_generator(input: &crate::model::JobManifestGenerator, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    let mut scope_writer = writer.finish();
    match input {
        crate::model::JobManifestGenerator::S3JobManifestGenerator(inner) =>
             {
                let inner_writer = scope_writer.start_el("S3JobManifestGenerator");
                crate::xml_ser::serialize_structure_crate_model_s3_job_manifest_generator(inner, inner_writer)?
            }
        ,
        crate::model::JobManifestGenerator::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("JobManifestGenerator"))
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_operation(input: &crate::model::JobOperation, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_45) = &input.lambda_invoke {
        let inner_writer = scope.start_el("LambdaInvoke");
        crate::xml_ser::serialize_structure_crate_model_lambda_invoke_operation(var_45, inner_writer)?
    }
    if let Some(var_46) = &input.s3_put_object_copy {
        let inner_writer = scope.start_el("S3PutObjectCopy");
        crate::xml_ser::serialize_structure_crate_model_s3_copy_object_operation(var_46, inner_writer)?
    }
    if let Some(var_47) = &input.s3_put_object_acl {
        let inner_writer = scope.start_el("S3PutObjectAcl");
        crate::xml_ser::serialize_structure_crate_model_s3_set_object_acl_operation(var_47, inner_writer)?
    }
    if let Some(var_48) = &input.s3_put_object_tagging {
        let inner_writer = scope.start_el("S3PutObjectTagging");
        crate::xml_ser::serialize_structure_crate_model_s3_set_object_tagging_operation(var_48, inner_writer)?
    }
    if let Some(_var_49) = &input.s3_delete_object_tagging {
        scope.start_el("S3DeleteObjectTagging").finish();
    }
    if let Some(var_50) = &input.s3_initiate_restore_object {
        let inner_writer = scope.start_el("S3InitiateRestoreObject");
        crate::xml_ser::serialize_structure_crate_model_s3_initiate_restore_object_operation(var_50, inner_writer)?
    }
    if let Some(var_51) = &input.s3_put_object_legal_hold {
        let inner_writer = scope.start_el("S3PutObjectLegalHold");
        crate::xml_ser::serialize_structure_crate_model_s3_set_object_legal_hold_operation(var_51, inner_writer)?
    }
    if let Some(var_52) = &input.s3_put_object_retention {
        let inner_writer = scope.start_el("S3PutObjectRetention");
        crate::xml_ser::serialize_structure_crate_model_s3_set_object_retention_operation(var_52, inner_writer)?
    }
    if let Some(_var_53) = &input.s3_replicate_object {
        scope.start_el("S3ReplicateObject").finish();
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_job_report(input: &crate::model::JobReport, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_54) = &input.bucket {
        let mut inner_writer = scope.start_el("Bucket").finish();
        inner_writer.data(
            var_54.as_str()
        );
    }
    if let Some(var_55) = &input.format {
        let mut inner_writer = scope.start_el("Format").finish();
        inner_writer.data(
            var_55.as_str()
        );
    }
     {
        let mut inner_writer = scope.start_el("Enabled").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.enabled).encode()
        );
    }
    if let Some(var_56) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(
            var_56.as_str()
        );
    }
    if let Some(var_57) = &input.report_scope {
        let mut inner_writer = scope.start_el("ReportScope").finish();
        inner_writer.data(
            var_57.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_tag(input: &crate::model::S3Tag, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_58) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(
            var_58.as_str()
        );
    }
    if let Some(var_59) = &input.value {
        let mut inner_writer = scope.start_el("Value").finish();
        inner_writer.data(
            var_59.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_create_multi_region_access_point_input(input: &crate::model::CreateMultiRegionAccessPointInput, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_60) = &input.name {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(
            var_60.as_str()
        );
    }
    if let Some(var_61) = &input.public_access_block {
        let inner_writer = scope.start_el("PublicAccessBlock");
        crate::xml_ser::serialize_structure_crate_model_public_access_block_configuration(var_61, inner_writer)?
    }
    if let Some(var_62) = &input.regions {
        let mut inner_writer = scope.start_el("Regions").finish();
        for list_item_63 in var_62 {
             {
                let inner_writer = inner_writer.start_el("Region");
                crate::xml_ser::serialize_structure_crate_model_region(list_item_63, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_delete_multi_region_access_point_input(input: &crate::model::DeleteMultiRegionAccessPointInput, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_64) = &input.name {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(
            var_64.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lifecycle_configuration(input: &crate::model::LifecycleConfiguration, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_65) = &input.rules {
        let mut inner_writer = scope.start_el("Rules").finish();
        for list_item_66 in var_65 {
             {
                let inner_writer = inner_writer.start_el("Rule");
                crate::xml_ser::serialize_structure_crate_model_lifecycle_rule(list_item_66, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_tagging(input: &crate::model::Tagging, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_67) = &input.tag_set {
        let mut inner_writer = scope.start_el("TagSet").finish();
        for list_item_68 in var_67 {
             {
                let inner_writer = inner_writer.start_el("member");
                crate::xml_ser::serialize_structure_crate_model_s3_tag(list_item_68, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_versioning_configuration(input: &crate::model::VersioningConfiguration, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_69) = &input.mfa_delete {
        let mut inner_writer = scope.start_el("MfaDelete").finish();
        inner_writer.data(
            var_69.as_str()
        );
    }
    if let Some(var_70) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(
            var_70.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_put_multi_region_access_point_policy_input(input: &crate::model::PutMultiRegionAccessPointPolicyInput, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_71) = &input.name {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(
            var_71.as_str()
        );
    }
    if let Some(var_72) = &input.policy {
        let mut inner_writer = scope.start_el("Policy").finish();
        inner_writer.data(
            var_72.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_storage_lens_configuration(input: &crate::model::StorageLensConfiguration, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_73) = &input.id {
        let mut inner_writer = scope.start_el("Id").finish();
        inner_writer.data(
            var_73.as_str()
        );
    }
    if let Some(var_74) = &input.account_level {
        let inner_writer = scope.start_el("AccountLevel");
        crate::xml_ser::serialize_structure_crate_model_account_level(var_74, inner_writer)?
    }
    if let Some(var_75) = &input.include {
        let inner_writer = scope.start_el("Include");
        crate::xml_ser::serialize_structure_crate_model_include(var_75, inner_writer)?
    }
    if let Some(var_76) = &input.exclude {
        let inner_writer = scope.start_el("Exclude");
        crate::xml_ser::serialize_structure_crate_model_exclude(var_76, inner_writer)?
    }
    if let Some(var_77) = &input.data_export {
        let inner_writer = scope.start_el("DataExport");
        crate::xml_ser::serialize_structure_crate_model_storage_lens_data_export(var_77, inner_writer)?
    }
     {
        let mut inner_writer = scope.start_el("IsEnabled").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.is_enabled).encode()
        );
    }
    if let Some(var_78) = &input.aws_org {
        let inner_writer = scope.start_el("AwsOrg");
        crate::xml_ser::serialize_structure_crate_model_storage_lens_aws_org(var_78, inner_writer)?
    }
    if let Some(var_79) = &input.storage_lens_arn {
        let mut inner_writer = scope.start_el("StorageLensArn").finish();
        inner_writer.data(
            var_79.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_storage_lens_tag(input: &crate::model::StorageLensTag, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_80) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(
            var_80.as_str()
        );
    }
    if let Some(var_81) = &input.value {
        let mut inner_writer = scope.start_el("Value").finish();
        inner_writer.data(
            var_81.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_multi_region_access_point_route(input: &crate::model::MultiRegionAccessPointRoute, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_82) = &input.bucket {
        let mut inner_writer = scope.start_el("Bucket").finish();
        inner_writer.data(
            var_82.as_str()
        );
    }
    if let Some(var_83) = &input.region {
        let mut inner_writer = scope.start_el("Region").finish();
        inner_writer.data(
            var_83.as_str()
        );
    }
    if let Some(var_84) = &input.traffic_dial_percentage {
        let mut inner_writer = scope.start_el("TrafficDialPercentage").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(*var_84).encode()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_object_lambda_transformation_configuration(input: &crate::model::ObjectLambdaTransformationConfiguration, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_85) = &input.actions {
        let mut inner_writer = scope.start_el("Actions").finish();
        for list_item_86 in var_85 {
             {
                let mut inner_writer = inner_writer.start_el("Action").finish();
                inner_writer.data(
                    list_item_86.as_str()
                );
            }
        }
    }
    if let Some(var_87) = &input.content_transformation {
        let inner_writer = scope.start_el("ContentTransformation");
        crate::xml_ser::serialize_union_crate_model_object_lambda_content_transformation(var_87, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_job_manifest_spec(input: &crate::model::JobManifestSpec, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_88) = &input.format {
        let mut inner_writer = scope.start_el("Format").finish();
        inner_writer.data(
            var_88.as_str()
        );
    }
    if let Some(var_89) = &input.fields {
        let mut inner_writer = scope.start_el("Fields").finish();
        for list_item_90 in var_89 {
             {
                let mut inner_writer = inner_writer.start_el("member").finish();
                inner_writer.data(
                    list_item_90.as_str()
                );
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_job_manifest_location(input: &crate::model::JobManifestLocation, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_91) = &input.object_arn {
        let mut inner_writer = scope.start_el("ObjectArn").finish();
        inner_writer.data(
            var_91.as_str()
        );
    }
    if let Some(var_92) = &input.object_version_id {
        let mut inner_writer = scope.start_el("ObjectVersionId").finish();
        inner_writer.data(
            var_92.as_str()
        );
    }
    if let Some(var_93) = &input.e_tag {
        let mut inner_writer = scope.start_el("ETag").finish();
        inner_writer.data(
            var_93.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_job_manifest_generator(input: &crate::model::S3JobManifestGenerator, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_94) = &input.expected_bucket_owner {
        let mut inner_writer = scope.start_el("ExpectedBucketOwner").finish();
        inner_writer.data(
            var_94.as_str()
        );
    }
    if let Some(var_95) = &input.source_bucket {
        let mut inner_writer = scope.start_el("SourceBucket").finish();
        inner_writer.data(
            var_95.as_str()
        );
    }
    if let Some(var_96) = &input.manifest_output_location {
        let inner_writer = scope.start_el("ManifestOutputLocation");
        crate::xml_ser::serialize_structure_crate_model_s3_manifest_output_location(var_96, inner_writer)?
    }
    if let Some(var_97) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_structure_crate_model_job_manifest_generator_filter(var_97, inner_writer)?
    }
     {
        let mut inner_writer = scope.start_el("EnableManifestOutput").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.enable_manifest_output).encode()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_invoke_operation(input: &crate::model::LambdaInvokeOperation, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_98) = &input.function_arn {
        let mut inner_writer = scope.start_el("FunctionArn").finish();
        inner_writer.data(
            var_98.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_copy_object_operation(input: &crate::model::S3CopyObjectOperation, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_99) = &input.target_resource {
        let mut inner_writer = scope.start_el("TargetResource").finish();
        inner_writer.data(
            var_99.as_str()
        );
    }
    if let Some(var_100) = &input.canned_access_control_list {
        let mut inner_writer = scope.start_el("CannedAccessControlList").finish();
        inner_writer.data(
            var_100.as_str()
        );
    }
    if let Some(var_101) = &input.access_control_grants {
        let mut inner_writer = scope.start_el("AccessControlGrants").finish();
        for list_item_102 in var_101 {
             {
                let inner_writer = inner_writer.start_el("member");
                crate::xml_ser::serialize_structure_crate_model_s3_grant(list_item_102, inner_writer)?
            }
        }
    }
    if let Some(var_103) = &input.metadata_directive {
        let mut inner_writer = scope.start_el("MetadataDirective").finish();
        inner_writer.data(
            var_103.as_str()
        );
    }
    if let Some(var_104) = &input.modified_since_constraint {
        let mut inner_writer = scope.start_el("ModifiedSinceConstraint").finish();
        inner_writer.data(
            var_104.fmt(aws_smithy_types::date_time::Format::DateTime)?.as_ref()
        );
    }
    if let Some(var_105) = &input.new_object_metadata {
        let inner_writer = scope.start_el("NewObjectMetadata");
        crate::xml_ser::serialize_structure_crate_model_s3_object_metadata(var_105, inner_writer)?
    }
    if let Some(var_106) = &input.new_object_tagging {
        let mut inner_writer = scope.start_el("NewObjectTagging").finish();
        for list_item_107 in var_106 {
             {
                let inner_writer = inner_writer.start_el("member");
                crate::xml_ser::serialize_structure_crate_model_s3_tag(list_item_107, inner_writer)?
            }
        }
    }
    if let Some(var_108) = &input.redirect_location {
        let mut inner_writer = scope.start_el("RedirectLocation").finish();
        inner_writer.data(
            var_108.as_str()
        );
    }
    if input.requester_pays {
        let mut inner_writer = scope.start_el("RequesterPays").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.requester_pays).encode()
        );
    }
    if let Some(var_109) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(
            var_109.as_str()
        );
    }
    if let Some(var_110) = &input.un_modified_since_constraint {
        let mut inner_writer = scope.start_el("UnModifiedSinceConstraint").finish();
        inner_writer.data(
            var_110.fmt(aws_smithy_types::date_time::Format::DateTime)?.as_ref()
        );
    }
    if let Some(var_111) = &input.sse_aws_kms_key_id {
        let mut inner_writer = scope.start_el("SSEAwsKmsKeyId").finish();
        inner_writer.data(
            var_111.as_str()
        );
    }
    if let Some(var_112) = &input.target_key_prefix {
        let mut inner_writer = scope.start_el("TargetKeyPrefix").finish();
        inner_writer.data(
            var_112.as_str()
        );
    }
    if let Some(var_113) = &input.object_lock_legal_hold_status {
        let mut inner_writer = scope.start_el("ObjectLockLegalHoldStatus").finish();
        inner_writer.data(
            var_113.as_str()
        );
    }
    if let Some(var_114) = &input.object_lock_mode {
        let mut inner_writer = scope.start_el("ObjectLockMode").finish();
        inner_writer.data(
            var_114.as_str()
        );
    }
    if let Some(var_115) = &input.object_lock_retain_until_date {
        let mut inner_writer = scope.start_el("ObjectLockRetainUntilDate").finish();
        inner_writer.data(
            var_115.fmt(aws_smithy_types::date_time::Format::DateTime)?.as_ref()
        );
    }
    if input.bucket_key_enabled {
        let mut inner_writer = scope.start_el("BucketKeyEnabled").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.bucket_key_enabled).encode()
        );
    }
    if let Some(var_116) = &input.checksum_algorithm {
        let mut inner_writer = scope.start_el("ChecksumAlgorithm").finish();
        inner_writer.data(
            var_116.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_set_object_acl_operation(input: &crate::model::S3SetObjectAclOperation, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_117) = &input.access_control_policy {
        let inner_writer = scope.start_el("AccessControlPolicy");
        crate::xml_ser::serialize_structure_crate_model_s3_access_control_policy(var_117, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_set_object_tagging_operation(input: &crate::model::S3SetObjectTaggingOperation, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_118) = &input.tag_set {
        let mut inner_writer = scope.start_el("TagSet").finish();
        for list_item_119 in var_118 {
             {
                let inner_writer = inner_writer.start_el("member");
                crate::xml_ser::serialize_structure_crate_model_s3_tag(list_item_119, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_initiate_restore_object_operation(input: &crate::model::S3InitiateRestoreObjectOperation, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_120) = &input.expiration_in_days {
        let mut inner_writer = scope.start_el("ExpirationInDays").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(*var_120).encode()
        );
    }
    if let Some(var_121) = &input.glacier_job_tier {
        let mut inner_writer = scope.start_el("GlacierJobTier").finish();
        inner_writer.data(
            var_121.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_set_object_legal_hold_operation(input: &crate::model::S3SetObjectLegalHoldOperation, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_122) = &input.legal_hold {
        let inner_writer = scope.start_el("LegalHold");
        crate::xml_ser::serialize_structure_crate_model_s3_object_lock_legal_hold(var_122, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_set_object_retention_operation(input: &crate::model::S3SetObjectRetentionOperation, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_123) = &input.bypass_governance_retention {
        let mut inner_writer = scope.start_el("BypassGovernanceRetention").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(*var_123).encode()
        );
    }
    if let Some(var_124) = &input.retention {
        let inner_writer = scope.start_el("Retention");
        crate::xml_ser::serialize_structure_crate_model_s3_retention(var_124, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_region(input: &crate::model::Region, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_125) = &input.bucket {
        let mut inner_writer = scope.start_el("Bucket").finish();
        inner_writer.data(
            var_125.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lifecycle_rule(input: &crate::model::LifecycleRule, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_126) = &input.expiration {
        let inner_writer = scope.start_el("Expiration");
        crate::xml_ser::serialize_structure_crate_model_lifecycle_expiration(var_126, inner_writer)?
    }
    if let Some(var_127) = &input.id {
        let mut inner_writer = scope.start_el("ID").finish();
        inner_writer.data(
            var_127.as_str()
        );
    }
    if let Some(var_128) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_structure_crate_model_lifecycle_rule_filter(var_128, inner_writer)?
    }
    if let Some(var_129) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(
            var_129.as_str()
        );
    }
    if let Some(var_130) = &input.transitions {
        let mut inner_writer = scope.start_el("Transitions").finish();
        for list_item_131 in var_130 {
             {
                let inner_writer = inner_writer.start_el("Transition");
                crate::xml_ser::serialize_structure_crate_model_transition(list_item_131, inner_writer)?
            }
        }
    }
    if let Some(var_132) = &input.noncurrent_version_transitions {
        let mut inner_writer = scope.start_el("NoncurrentVersionTransitions").finish();
        for list_item_133 in var_132 {
             {
                let inner_writer = inner_writer.start_el("NoncurrentVersionTransition");
                crate::xml_ser::serialize_structure_crate_model_noncurrent_version_transition(list_item_133, inner_writer)?
            }
        }
    }
    if let Some(var_134) = &input.noncurrent_version_expiration {
        let inner_writer = scope.start_el("NoncurrentVersionExpiration");
        crate::xml_ser::serialize_structure_crate_model_noncurrent_version_expiration(var_134, inner_writer)?
    }
    if let Some(var_135) = &input.abort_incomplete_multipart_upload {
        let inner_writer = scope.start_el("AbortIncompleteMultipartUpload");
        crate::xml_ser::serialize_structure_crate_model_abort_incomplete_multipart_upload(var_135, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_account_level(input: &crate::model::AccountLevel, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_136) = &input.activity_metrics {
        let inner_writer = scope.start_el("ActivityMetrics");
        crate::xml_ser::serialize_structure_crate_model_activity_metrics(var_136, inner_writer)?
    }
    if let Some(var_137) = &input.bucket_level {
        let inner_writer = scope.start_el("BucketLevel");
        crate::xml_ser::serialize_structure_crate_model_bucket_level(var_137, inner_writer)?
    }
    if let Some(var_138) = &input.advanced_cost_optimization_metrics {
        let inner_writer = scope.start_el("AdvancedCostOptimizationMetrics");
        crate::xml_ser::serialize_structure_crate_model_advanced_cost_optimization_metrics(var_138, inner_writer)?
    }
    if let Some(var_139) = &input.advanced_data_protection_metrics {
        let inner_writer = scope.start_el("AdvancedDataProtectionMetrics");
        crate::xml_ser::serialize_structure_crate_model_advanced_data_protection_metrics(var_139, inner_writer)?
    }
    if let Some(var_140) = &input.detailed_status_codes_metrics {
        let inner_writer = scope.start_el("DetailedStatusCodesMetrics");
        crate::xml_ser::serialize_structure_crate_model_detailed_status_codes_metrics(var_140, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_include(input: &crate::model::Include, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_141) = &input.buckets {
        let mut inner_writer = scope.start_el("Buckets").finish();
        for list_item_142 in var_141 {
             {
                let mut inner_writer = inner_writer.start_el("Arn").finish();
                inner_writer.data(
                    list_item_142.as_str()
                );
            }
        }
    }
    if let Some(var_143) = &input.regions {
        let mut inner_writer = scope.start_el("Regions").finish();
        for list_item_144 in var_143 {
             {
                let mut inner_writer = inner_writer.start_el("Region").finish();
                inner_writer.data(
                    list_item_144.as_str()
                );
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_exclude(input: &crate::model::Exclude, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_145) = &input.buckets {
        let mut inner_writer = scope.start_el("Buckets").finish();
        for list_item_146 in var_145 {
             {
                let mut inner_writer = inner_writer.start_el("Arn").finish();
                inner_writer.data(
                    list_item_146.as_str()
                );
            }
        }
    }
    if let Some(var_147) = &input.regions {
        let mut inner_writer = scope.start_el("Regions").finish();
        for list_item_148 in var_147 {
             {
                let mut inner_writer = inner_writer.start_el("Region").finish();
                inner_writer.data(
                    list_item_148.as_str()
                );
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_storage_lens_data_export(input: &crate::model::StorageLensDataExport, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_149) = &input.s3_bucket_destination {
        let inner_writer = scope.start_el("S3BucketDestination");
        crate::xml_ser::serialize_structure_crate_model_s3_bucket_destination(var_149, inner_writer)?
    }
    if let Some(var_150) = &input.cloud_watch_metrics {
        let inner_writer = scope.start_el("CloudWatchMetrics");
        crate::xml_ser::serialize_structure_crate_model_cloud_watch_metrics(var_150, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_storage_lens_aws_org(input: &crate::model::StorageLensAwsOrg, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_151) = &input.arn {
        let mut inner_writer = scope.start_el("Arn").finish();
        inner_writer.data(
            var_151.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_union_crate_model_object_lambda_content_transformation(input: &crate::model::ObjectLambdaContentTransformation, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    let mut scope_writer = writer.finish();
    match input {
        crate::model::ObjectLambdaContentTransformation::AwsLambda(inner) =>
             {
                let inner_writer = scope_writer.start_el("AwsLambda");
                crate::xml_ser::serialize_structure_crate_model_aws_lambda_transformation(inner, inner_writer)?
            }
        ,
        crate::model::ObjectLambdaContentTransformation::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("ObjectLambdaContentTransformation"))
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_manifest_output_location(input: &crate::model::S3ManifestOutputLocation, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_152) = &input.expected_manifest_bucket_owner {
        let mut inner_writer = scope.start_el("ExpectedManifestBucketOwner").finish();
        inner_writer.data(
            var_152.as_str()
        );
    }
    if let Some(var_153) = &input.bucket {
        let mut inner_writer = scope.start_el("Bucket").finish();
        inner_writer.data(
            var_153.as_str()
        );
    }
    if let Some(var_154) = &input.manifest_prefix {
        let mut inner_writer = scope.start_el("ManifestPrefix").finish();
        inner_writer.data(
            var_154.as_str()
        );
    }
    if let Some(var_155) = &input.manifest_encryption {
        let inner_writer = scope.start_el("ManifestEncryption");
        crate::xml_ser::serialize_structure_crate_model_generated_manifest_encryption(var_155, inner_writer)?
    }
    if let Some(var_156) = &input.manifest_format {
        let mut inner_writer = scope.start_el("ManifestFormat").finish();
        inner_writer.data(
            var_156.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_job_manifest_generator_filter(input: &crate::model::JobManifestGeneratorFilter, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_157) = &input.eligible_for_replication {
        let mut inner_writer = scope.start_el("EligibleForReplication").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(*var_157).encode()
        );
    }
    if let Some(var_158) = &input.created_after {
        let mut inner_writer = scope.start_el("CreatedAfter").finish();
        inner_writer.data(
            var_158.fmt(aws_smithy_types::date_time::Format::DateTime)?.as_ref()
        );
    }
    if let Some(var_159) = &input.created_before {
        let mut inner_writer = scope.start_el("CreatedBefore").finish();
        inner_writer.data(
            var_159.fmt(aws_smithy_types::date_time::Format::DateTime)?.as_ref()
        );
    }
    if let Some(var_160) = &input.object_replication_statuses {
        let mut inner_writer = scope.start_el("ObjectReplicationStatuses").finish();
        for list_item_161 in var_160 {
             {
                let mut inner_writer = inner_writer.start_el("member").finish();
                inner_writer.data(
                    list_item_161.as_str()
                );
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_grant(input: &crate::model::S3Grant, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_162) = &input.grantee {
        let inner_writer = scope.start_el("Grantee");
        crate::xml_ser::serialize_structure_crate_model_s3_grantee(var_162, inner_writer)?
    }
    if let Some(var_163) = &input.permission {
        let mut inner_writer = scope.start_el("Permission").finish();
        inner_writer.data(
            var_163.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_object_metadata(input: &crate::model::S3ObjectMetadata, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_164) = &input.cache_control {
        let mut inner_writer = scope.start_el("CacheControl").finish();
        inner_writer.data(
            var_164.as_str()
        );
    }
    if let Some(var_165) = &input.content_disposition {
        let mut inner_writer = scope.start_el("ContentDisposition").finish();
        inner_writer.data(
            var_165.as_str()
        );
    }
    if let Some(var_166) = &input.content_encoding {
        let mut inner_writer = scope.start_el("ContentEncoding").finish();
        inner_writer.data(
            var_166.as_str()
        );
    }
    if let Some(var_167) = &input.content_language {
        let mut inner_writer = scope.start_el("ContentLanguage").finish();
        inner_writer.data(
            var_167.as_str()
        );
    }
    if let Some(var_168) = &input.user_metadata {
        let mut inner_writer = scope.start_el("UserMetadata").finish();
        for (key_169, value_170) in var_168 {
            let mut entry = inner_writer.start_el("entry").finish();
             {
                let mut inner_writer = entry.start_el("key").finish();
                inner_writer.data(
                    key_169.as_str()
                );
            }
             {
                let mut inner_writer = entry.start_el("value").finish();
                inner_writer.data(
                    value_170.as_str()
                );
            }
        }
    }
    if let Some(var_171) = &input.content_length {
        let mut inner_writer = scope.start_el("ContentLength").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(*var_171).encode()
        );
    }
    if let Some(var_172) = &input.content_md5 {
        let mut inner_writer = scope.start_el("ContentMD5").finish();
        inner_writer.data(
            var_172.as_str()
        );
    }
    if let Some(var_173) = &input.content_type {
        let mut inner_writer = scope.start_el("ContentType").finish();
        inner_writer.data(
            var_173.as_str()
        );
    }
    if let Some(var_174) = &input.http_expires_date {
        let mut inner_writer = scope.start_el("HttpExpiresDate").finish();
        inner_writer.data(
            var_174.fmt(aws_smithy_types::date_time::Format::DateTime)?.as_ref()
        );
    }
    if input.requester_charged {
        let mut inner_writer = scope.start_el("RequesterCharged").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.requester_charged).encode()
        );
    }
    if let Some(var_175) = &input.sse_algorithm {
        let mut inner_writer = scope.start_el("SSEAlgorithm").finish();
        inner_writer.data(
            var_175.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_access_control_policy(input: &crate::model::S3AccessControlPolicy, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_176) = &input.access_control_list {
        let inner_writer = scope.start_el("AccessControlList");
        crate::xml_ser::serialize_structure_crate_model_s3_access_control_list(var_176, inner_writer)?
    }
    if let Some(var_177) = &input.canned_access_control_list {
        let mut inner_writer = scope.start_el("CannedAccessControlList").finish();
        inner_writer.data(
            var_177.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_object_lock_legal_hold(input: &crate::model::S3ObjectLockLegalHold, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_178) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(
            var_178.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_retention(input: &crate::model::S3Retention, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_179) = &input.retain_until_date {
        let mut inner_writer = scope.start_el("RetainUntilDate").finish();
        inner_writer.data(
            var_179.fmt(aws_smithy_types::date_time::Format::DateTime)?.as_ref()
        );
    }
    if let Some(var_180) = &input.mode {
        let mut inner_writer = scope.start_el("Mode").finish();
        inner_writer.data(
            var_180.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lifecycle_expiration(input: &crate::model::LifecycleExpiration, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_181) = &input.date {
        let mut inner_writer = scope.start_el("Date").finish();
        inner_writer.data(
            var_181.fmt(aws_smithy_types::date_time::Format::DateTime)?.as_ref()
        );
    }
    if input.days != 0 {
        let mut inner_writer = scope.start_el("Days").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.days).encode()
        );
    }
    if input.expired_object_delete_marker {
        let mut inner_writer = scope.start_el("ExpiredObjectDeleteMarker").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.expired_object_delete_marker).encode()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lifecycle_rule_filter(input: &crate::model::LifecycleRuleFilter, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_182) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(
            var_182.as_str()
        );
    }
    if let Some(var_183) = &input.tag {
        let inner_writer = scope.start_el("Tag");
        crate::xml_ser::serialize_structure_crate_model_s3_tag(var_183, inner_writer)?
    }
    if let Some(var_184) = &input.and {
        let inner_writer = scope.start_el("And");
        crate::xml_ser::serialize_structure_crate_model_lifecycle_rule_and_operator(var_184, inner_writer)?
    }
    if let Some(var_185) = &input.object_size_greater_than {
        let mut inner_writer = scope.start_el("ObjectSizeGreaterThan").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(*var_185).encode()
        );
    }
    if let Some(var_186) = &input.object_size_less_than {
        let mut inner_writer = scope.start_el("ObjectSizeLessThan").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(*var_186).encode()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_transition(input: &crate::model::Transition, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_187) = &input.date {
        let mut inner_writer = scope.start_el("Date").finish();
        inner_writer.data(
            var_187.fmt(aws_smithy_types::date_time::Format::DateTime)?.as_ref()
        );
    }
    if input.days != 0 {
        let mut inner_writer = scope.start_el("Days").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.days).encode()
        );
    }
    if let Some(var_188) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(
            var_188.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_noncurrent_version_transition(input: &crate::model::NoncurrentVersionTransition, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.noncurrent_days != 0 {
        let mut inner_writer = scope.start_el("NoncurrentDays").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.noncurrent_days).encode()
        );
    }
    if let Some(var_189) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(
            var_189.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_noncurrent_version_expiration(input: &crate::model::NoncurrentVersionExpiration, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.noncurrent_days != 0 {
        let mut inner_writer = scope.start_el("NoncurrentDays").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.noncurrent_days).encode()
        );
    }
    if let Some(var_190) = &input.newer_noncurrent_versions {
        let mut inner_writer = scope.start_el("NewerNoncurrentVersions").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(*var_190).encode()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_abort_incomplete_multipart_upload(input: &crate::model::AbortIncompleteMultipartUpload, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.days_after_initiation != 0 {
        let mut inner_writer = scope.start_el("DaysAfterInitiation").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.days_after_initiation).encode()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_activity_metrics(input: &crate::model::ActivityMetrics, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.is_enabled {
        let mut inner_writer = scope.start_el("IsEnabled").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.is_enabled).encode()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_bucket_level(input: &crate::model::BucketLevel, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_191) = &input.activity_metrics {
        let inner_writer = scope.start_el("ActivityMetrics");
        crate::xml_ser::serialize_structure_crate_model_activity_metrics(var_191, inner_writer)?
    }
    if let Some(var_192) = &input.prefix_level {
        let inner_writer = scope.start_el("PrefixLevel");
        crate::xml_ser::serialize_structure_crate_model_prefix_level(var_192, inner_writer)?
    }
    if let Some(var_193) = &input.advanced_cost_optimization_metrics {
        let inner_writer = scope.start_el("AdvancedCostOptimizationMetrics");
        crate::xml_ser::serialize_structure_crate_model_advanced_cost_optimization_metrics(var_193, inner_writer)?
    }
    if let Some(var_194) = &input.advanced_data_protection_metrics {
        let inner_writer = scope.start_el("AdvancedDataProtectionMetrics");
        crate::xml_ser::serialize_structure_crate_model_advanced_data_protection_metrics(var_194, inner_writer)?
    }
    if let Some(var_195) = &input.detailed_status_codes_metrics {
        let inner_writer = scope.start_el("DetailedStatusCodesMetrics");
        crate::xml_ser::serialize_structure_crate_model_detailed_status_codes_metrics(var_195, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_advanced_cost_optimization_metrics(input: &crate::model::AdvancedCostOptimizationMetrics, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.is_enabled {
        let mut inner_writer = scope.start_el("IsEnabled").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.is_enabled).encode()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_advanced_data_protection_metrics(input: &crate::model::AdvancedDataProtectionMetrics, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.is_enabled {
        let mut inner_writer = scope.start_el("IsEnabled").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.is_enabled).encode()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_detailed_status_codes_metrics(input: &crate::model::DetailedStatusCodesMetrics, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.is_enabled {
        let mut inner_writer = scope.start_el("IsEnabled").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.is_enabled).encode()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_bucket_destination(input: &crate::model::S3BucketDestination, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_196) = &input.format {
        let mut inner_writer = scope.start_el("Format").finish();
        inner_writer.data(
            var_196.as_str()
        );
    }
    if let Some(var_197) = &input.output_schema_version {
        let mut inner_writer = scope.start_el("OutputSchemaVersion").finish();
        inner_writer.data(
            var_197.as_str()
        );
    }
    if let Some(var_198) = &input.account_id {
        let mut inner_writer = scope.start_el("AccountId").finish();
        inner_writer.data(
            var_198.as_str()
        );
    }
    if let Some(var_199) = &input.arn {
        let mut inner_writer = scope.start_el("Arn").finish();
        inner_writer.data(
            var_199.as_str()
        );
    }
    if let Some(var_200) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(
            var_200.as_str()
        );
    }
    if let Some(var_201) = &input.encryption {
        let inner_writer = scope.start_el("Encryption");
        crate::xml_ser::serialize_structure_crate_model_storage_lens_data_export_encryption(var_201, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_metrics(input: &crate::model::CloudWatchMetrics, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
     {
        let mut inner_writer = scope.start_el("IsEnabled").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.is_enabled).encode()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_transformation(input: &crate::model::AwsLambdaTransformation, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_202) = &input.function_arn {
        let mut inner_writer = scope.start_el("FunctionArn").finish();
        inner_writer.data(
            var_202.as_str()
        );
    }
    if let Some(var_203) = &input.function_payload {
        let mut inner_writer = scope.start_el("FunctionPayload").finish();
        inner_writer.data(
            var_203.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_generated_manifest_encryption(input: &crate::model::GeneratedManifestEncryption, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(_var_204) = &input.sses3 {
        scope.start_el("SSE-S3").finish();
    }
    if let Some(var_205) = &input.ssekms {
        let inner_writer = scope.start_el("SSE-KMS");
        crate::xml_ser::serialize_structure_crate_model_ssekms_encryption(var_205, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_grantee(input: &crate::model::S3Grantee, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_206) = &input.type_identifier {
        let mut inner_writer = scope.start_el("TypeIdentifier").finish();
        inner_writer.data(
            var_206.as_str()
        );
    }
    if let Some(var_207) = &input.identifier {
        let mut inner_writer = scope.start_el("Identifier").finish();
        inner_writer.data(
            var_207.as_str()
        );
    }
    if let Some(var_208) = &input.display_name {
        let mut inner_writer = scope.start_el("DisplayName").finish();
        inner_writer.data(
            var_208.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_access_control_list(input: &crate::model::S3AccessControlList, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_209) = &input.owner {
        let inner_writer = scope.start_el("Owner");
        crate::xml_ser::serialize_structure_crate_model_s3_object_owner(var_209, inner_writer)?
    }
    if let Some(var_210) = &input.grants {
        let mut inner_writer = scope.start_el("Grants").finish();
        for list_item_211 in var_210 {
             {
                let inner_writer = inner_writer.start_el("member");
                crate::xml_ser::serialize_structure_crate_model_s3_grant(list_item_211, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lifecycle_rule_and_operator(input: &crate::model::LifecycleRuleAndOperator, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_212) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(
            var_212.as_str()
        );
    }
    if let Some(var_213) = &input.tags {
        let mut inner_writer = scope.start_el("Tags").finish();
        for list_item_214 in var_213 {
             {
                let inner_writer = inner_writer.start_el("member");
                crate::xml_ser::serialize_structure_crate_model_s3_tag(list_item_214, inner_writer)?
            }
        }
    }
    if let Some(var_215) = &input.object_size_greater_than {
        let mut inner_writer = scope.start_el("ObjectSizeGreaterThan").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(*var_215).encode()
        );
    }
    if let Some(var_216) = &input.object_size_less_than {
        let mut inner_writer = scope.start_el("ObjectSizeLessThan").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(*var_216).encode()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_prefix_level(input: &crate::model::PrefixLevel, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_217) = &input.storage_metrics {
        let inner_writer = scope.start_el("StorageMetrics");
        crate::xml_ser::serialize_structure_crate_model_prefix_level_storage_metrics(var_217, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_storage_lens_data_export_encryption(input: &crate::model::StorageLensDataExportEncryption, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(_var_218) = &input.sses3 {
        scope.start_el("SSE-S3").finish();
    }
    if let Some(var_219) = &input.ssekms {
        let inner_writer = scope.start_el("SSE-KMS");
        crate::xml_ser::serialize_structure_crate_model_ssekms(var_219, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_ssekms_encryption(input: &crate::model::SsekmsEncryption, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_220) = &input.key_id {
        let mut inner_writer = scope.start_el("KeyId").finish();
        inner_writer.data(
            var_220.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_object_owner(input: &crate::model::S3ObjectOwner, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_221) = &input.id {
        let mut inner_writer = scope.start_el("ID").finish();
        inner_writer.data(
            var_221.as_str()
        );
    }
    if let Some(var_222) = &input.display_name {
        let mut inner_writer = scope.start_el("DisplayName").finish();
        inner_writer.data(
            var_222.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_prefix_level_storage_metrics(input: &crate::model::PrefixLevelStorageMetrics, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.is_enabled {
        let mut inner_writer = scope.start_el("IsEnabled").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.is_enabled).encode()
        );
    }
    if let Some(var_223) = &input.selection_criteria {
        let inner_writer = scope.start_el("SelectionCriteria");
        crate::xml_ser::serialize_structure_crate_model_selection_criteria(var_223, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_ssekms(input: &crate::model::Ssekms, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_224) = &input.key_id {
        let mut inner_writer = scope.start_el("KeyId").finish();
        inner_writer.data(
            var_224.as_str()
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_selection_criteria(input: &crate::model::SelectionCriteria, writer: aws_smithy_xml::encode::ElWriter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_225) = &input.delimiter {
        let mut inner_writer = scope.start_el("Delimiter").finish();
        inner_writer.data(
            var_225.as_str()
        );
    }
    if input.max_depth != 0 {
        let mut inner_writer = scope.start_el("MaxDepth").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.max_depth).encode()
        );
    }
    if input.min_storage_bytes_percentage != 0.0 {
        let mut inner_writer = scope.start_el("MinStorageBytesPercentage").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.min_storage_bytes_percentage).encode()
        );
    }
    scope.finish();
    Ok(())
}

