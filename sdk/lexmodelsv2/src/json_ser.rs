// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_bot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.bot_name {
        object.key("botName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.bot_tags {
        #[allow(unused_mut)]
        let mut object_3 = object.key("botTags").start_object();
        for (key_4, value_5) in var_2 {
            {
                object_3.key(key_4.as_str()).string(value_5.as_str());
            }
        }
        object_3.finish();
    }
    if let Some(var_6) = &input.data_privacy {
        #[allow(unused_mut)]
        let mut object_7 = object.key("dataPrivacy").start_object();
        crate::json_ser::serialize_structure_crate_model_data_privacy(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.description {
        object.key("description").string(var_8.as_str());
    }
    if let Some(var_9) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.role_arn {
        object.key("roleArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.test_bot_alias_tags {
        #[allow(unused_mut)]
        let mut object_12 = object.key("testBotAliasTags").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13.as_str()).string(value_14.as_str());
            }
        }
        object_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_bot_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotAliasInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_15) = &input.bot_alias_locale_settings {
        #[allow(unused_mut)]
        let mut object_16 = object.key("botAliasLocaleSettings").start_object();
        for (key_17, value_18) in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_19 = object_16.key(key_17.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_bot_alias_locale_settings(
                    &mut object_19,
                    value_18,
                )?;
                object_19.finish();
            }
        }
        object_16.finish();
    }
    if let Some(var_20) = &input.bot_alias_name {
        object.key("botAliasName").string(var_20.as_str());
    }
    if let Some(var_21) = &input.bot_version {
        object.key("botVersion").string(var_21.as_str());
    }
    if let Some(var_22) = &input.conversation_log_settings {
        #[allow(unused_mut)]
        let mut object_23 = object.key("conversationLogSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_conversation_log_settings(
            &mut object_23,
            var_22,
        )?;
        object_23.finish();
    }
    if let Some(var_24) = &input.description {
        object.key("description").string(var_24.as_str());
    }
    if let Some(var_25) = &input.sentiment_analysis_settings {
        #[allow(unused_mut)]
        let mut object_26 = object.key("sentimentAnalysisSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sentiment_analysis_settings(
            &mut object_26,
            var_25,
        )?;
        object_26.finish();
    }
    if let Some(var_27) = &input.tags {
        #[allow(unused_mut)]
        let mut object_28 = object.key("tags").start_object();
        for (key_29, value_30) in var_27 {
            {
                object_28.key(key_29.as_str()).string(value_30.as_str());
            }
        }
        object_28.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_bot_locale_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotLocaleInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_31) = &input.description {
        object.key("description").string(var_31.as_str());
    }
    if let Some(var_32) = &input.locale_id {
        object.key("localeId").string(var_32.as_str());
    }
    if let Some(var_33) = &input.nlu_intent_confidence_threshold {
        object.key("nluIntentConfidenceThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_33).into()),
        );
    }
    if let Some(var_34) = &input.voice_settings {
        #[allow(unused_mut)]
        let mut object_35 = object.key("voiceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_settings(&mut object_35, var_34)?;
        object_35.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_bot_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotVersionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_36) = &input.bot_version_locale_specification {
        #[allow(unused_mut)]
        let mut object_37 = object.key("botVersionLocaleSpecification").start_object();
        for (key_38, value_39) in var_36 {
            {
                #[allow(unused_mut)]
                let mut object_40 = object_37.key(key_38.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_bot_version_locale_details(
                    &mut object_40,
                    value_39,
                )?;
                object_40.finish();
            }
        }
        object_37.finish();
    }
    if let Some(var_41) = &input.description {
        object.key("description").string(var_41.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_export_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExportInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_42) = &input.file_format {
        object.key("fileFormat").string(var_42.as_str());
    }
    if let Some(var_43) = &input.file_password {
        object.key("filePassword").string(var_43.as_str());
    }
    if let Some(var_44) = &input.resource_specification {
        #[allow(unused_mut)]
        let mut object_45 = object.key("resourceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_export_resource_specification(
            &mut object_45,
            var_44,
        )?;
        object_45.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_intent_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIntentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_46) = &input.description {
        object.key("description").string(var_46.as_str());
    }
    if let Some(var_47) = &input.dialog_code_hook {
        #[allow(unused_mut)]
        let mut object_48 = object.key("dialogCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_code_hook_settings(
            &mut object_48,
            var_47,
        )?;
        object_48.finish();
    }
    if let Some(var_49) = &input.fulfillment_code_hook {
        #[allow(unused_mut)]
        let mut object_50 = object.key("fulfillmentCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_code_hook_settings(
            &mut object_50,
            var_49,
        )?;
        object_50.finish();
    }
    if let Some(var_51) = &input.initial_response_setting {
        #[allow(unused_mut)]
        let mut object_52 = object.key("initialResponseSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_initial_response_setting(
            &mut object_52,
            var_51,
        )?;
        object_52.finish();
    }
    if let Some(var_53) = &input.input_contexts {
        let mut array_54 = object.key("inputContexts").start_array();
        for item_55 in var_53 {
            {
                #[allow(unused_mut)]
                let mut object_56 = array_54.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_context(
                    &mut object_56,
                    item_55,
                )?;
                object_56.finish();
            }
        }
        array_54.finish();
    }
    if let Some(var_57) = &input.intent_closing_setting {
        #[allow(unused_mut)]
        let mut object_58 = object.key("intentClosingSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_closing_setting(
            &mut object_58,
            var_57,
        )?;
        object_58.finish();
    }
    if let Some(var_59) = &input.intent_confirmation_setting {
        #[allow(unused_mut)]
        let mut object_60 = object.key("intentConfirmationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_confirmation_setting(
            &mut object_60,
            var_59,
        )?;
        object_60.finish();
    }
    if let Some(var_61) = &input.intent_name {
        object.key("intentName").string(var_61.as_str());
    }
    if let Some(var_62) = &input.kendra_configuration {
        #[allow(unused_mut)]
        let mut object_63 = object.key("kendraConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_kendra_configuration(
            &mut object_63,
            var_62,
        )?;
        object_63.finish();
    }
    if let Some(var_64) = &input.output_contexts {
        let mut array_65 = object.key("outputContexts").start_array();
        for item_66 in var_64 {
            {
                #[allow(unused_mut)]
                let mut object_67 = array_65.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_context(
                    &mut object_67,
                    item_66,
                )?;
                object_67.finish();
            }
        }
        array_65.finish();
    }
    if let Some(var_68) = &input.parent_intent_signature {
        object.key("parentIntentSignature").string(var_68.as_str());
    }
    if let Some(var_69) = &input.sample_utterances {
        let mut array_70 = object.key("sampleUtterances").start_array();
        for item_71 in var_69 {
            {
                #[allow(unused_mut)]
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sample_utterance(
                    &mut object_72,
                    item_71,
                )?;
                object_72.finish();
            }
        }
        array_70.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_73) = &input.policy {
        object.key("policy").string(var_73.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resource_policy_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourcePolicyStatementInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_74) = &input.action {
        let mut array_75 = object.key("action").start_array();
        for item_76 in var_74 {
            {
                array_75.value().string(item_76.as_str());
            }
        }
        array_75.finish();
    }
    if let Some(var_77) = &input.condition {
        #[allow(unused_mut)]
        let mut object_78 = object.key("condition").start_object();
        for (key_79, value_80) in var_77 {
            {
                #[allow(unused_mut)]
                let mut object_81 = object_78.key(key_79.as_str()).start_object();
                for (key_82, value_83) in value_80 {
                    {
                        object_81.key(key_82.as_str()).string(value_83.as_str());
                    }
                }
                object_81.finish();
            }
        }
        object_78.finish();
    }
    if let Some(var_84) = &input.effect {
        object.key("effect").string(var_84.as_str());
    }
    if let Some(var_85) = &input.principal {
        let mut array_86 = object.key("principal").start_array();
        for item_87 in var_85 {
            {
                #[allow(unused_mut)]
                let mut object_88 = array_86.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_88,
                    item_87,
                )?;
                object_88.finish();
            }
        }
        array_86.finish();
    }
    if let Some(var_89) = &input.statement_id {
        object.key("statementId").string(var_89.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_slot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSlotInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_90) = &input.description {
        object.key("description").string(var_90.as_str());
    }
    if let Some(var_91) = &input.multiple_values_setting {
        #[allow(unused_mut)]
        let mut object_92 = object.key("multipleValuesSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_multiple_values_setting(
            &mut object_92,
            var_91,
        )?;
        object_92.finish();
    }
    if let Some(var_93) = &input.obfuscation_setting {
        #[allow(unused_mut)]
        let mut object_94 = object.key("obfuscationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_obfuscation_setting(
            &mut object_94,
            var_93,
        )?;
        object_94.finish();
    }
    if let Some(var_95) = &input.slot_name {
        object.key("slotName").string(var_95.as_str());
    }
    if let Some(var_96) = &input.slot_type_id {
        object.key("slotTypeId").string(var_96.as_str());
    }
    if let Some(var_97) = &input.sub_slot_setting {
        #[allow(unused_mut)]
        let mut object_98 = object.key("subSlotSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_sub_slot_setting(&mut object_98, var_97)?;
        object_98.finish();
    }
    if let Some(var_99) = &input.value_elicitation_setting {
        #[allow(unused_mut)]
        let mut object_100 = object.key("valueElicitationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_elicitation_setting(
            &mut object_100,
            var_99,
        )?;
        object_100.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_slot_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSlotTypeInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_101) = &input.composite_slot_type_setting {
        #[allow(unused_mut)]
        let mut object_102 = object.key("compositeSlotTypeSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_composite_slot_type_setting(
            &mut object_102,
            var_101,
        )?;
        object_102.finish();
    }
    if let Some(var_103) = &input.description {
        object.key("description").string(var_103.as_str());
    }
    if let Some(var_104) = &input.external_source_setting {
        #[allow(unused_mut)]
        let mut object_105 = object.key("externalSourceSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_external_source_setting(
            &mut object_105,
            var_104,
        )?;
        object_105.finish();
    }
    if let Some(var_106) = &input.parent_slot_type_signature {
        object
            .key("parentSlotTypeSignature")
            .string(var_106.as_str());
    }
    if let Some(var_107) = &input.slot_type_name {
        object.key("slotTypeName").string(var_107.as_str());
    }
    if let Some(var_108) = &input.slot_type_values {
        let mut array_109 = object.key("slotTypeValues").start_array();
        for item_110 in var_108 {
            {
                #[allow(unused_mut)]
                let mut object_111 = array_109.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_type_value(
                    &mut object_111,
                    item_110,
                )?;
                object_111.finish();
            }
        }
        array_109.finish();
    }
    if let Some(var_112) = &input.value_selection_setting {
        #[allow(unused_mut)]
        let mut object_113 = object.key("valueSelectionSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_selection_setting(
            &mut object_113,
            var_112,
        )?;
        object_113.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_aggregated_utterances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAggregatedUtterancesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_114) = &input.aggregation_duration {
        #[allow(unused_mut)]
        let mut object_115 = object.key("aggregationDuration").start_object();
        crate::json_ser::serialize_structure_crate_model_utterance_aggregation_duration(
            &mut object_115,
            var_114,
        )?;
        object_115.finish();
    }
    if let Some(var_116) = &input.bot_alias_id {
        object.key("botAliasId").string(var_116.as_str());
    }
    if let Some(var_117) = &input.bot_version {
        object.key("botVersion").string(var_117.as_str());
    }
    if let Some(var_118) = &input.filters {
        let mut array_119 = object.key("filters").start_array();
        for item_120 in var_118 {
            {
                #[allow(unused_mut)]
                let mut object_121 = array_119.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aggregated_utterances_filter(
                    &mut object_121,
                    item_120,
                )?;
                object_121.finish();
            }
        }
        array_119.finish();
    }
    if let Some(var_122) = &input.locale_id {
        object.key("localeId").string(var_122.as_str());
    }
    if let Some(var_123) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_123).into()),
        );
    }
    if let Some(var_124) = &input.next_token {
        object.key("nextToken").string(var_124.as_str());
    }
    if let Some(var_125) = &input.sort_by {
        #[allow(unused_mut)]
        let mut object_126 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregated_utterances_sort_by(
            &mut object_126,
            var_125,
        )?;
        object_126.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bot_aliases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotAliasesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_127) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_127).into()),
        );
    }
    if let Some(var_128) = &input.next_token {
        object.key("nextToken").string(var_128.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bot_locales_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotLocalesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_129) = &input.filters {
        let mut array_130 = object.key("filters").start_array();
        for item_131 in var_129 {
            {
                #[allow(unused_mut)]
                let mut object_132 = array_130.value().start_object();
                crate::json_ser::serialize_structure_crate_model_bot_locale_filter(
                    &mut object_132,
                    item_131,
                )?;
                object_132.finish();
            }
        }
        array_130.finish();
    }
    if let Some(var_133) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_133).into()),
        );
    }
    if let Some(var_134) = &input.next_token {
        object.key("nextToken").string(var_134.as_str());
    }
    if let Some(var_135) = &input.sort_by {
        #[allow(unused_mut)]
        let mut object_136 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_locale_sort_by(
            &mut object_136,
            var_135,
        )?;
        object_136.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bot_recommendations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotRecommendationsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_137) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_137).into()),
        );
    }
    if let Some(var_138) = &input.next_token {
        object.key("nextToken").string(var_138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_139) = &input.filters {
        let mut array_140 = object.key("filters").start_array();
        for item_141 in var_139 {
            {
                #[allow(unused_mut)]
                let mut object_142 = array_140.value().start_object();
                crate::json_ser::serialize_structure_crate_model_bot_filter(
                    &mut object_142,
                    item_141,
                )?;
                object_142.finish();
            }
        }
        array_140.finish();
    }
    if let Some(var_143) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_143).into()),
        );
    }
    if let Some(var_144) = &input.next_token {
        object.key("nextToken").string(var_144.as_str());
    }
    if let Some(var_145) = &input.sort_by {
        #[allow(unused_mut)]
        let mut object_146 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_sort_by(&mut object_146, var_145)?;
        object_146.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bot_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotVersionsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_147) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_147).into()),
        );
    }
    if let Some(var_148) = &input.next_token {
        object.key("nextToken").string(var_148.as_str());
    }
    if let Some(var_149) = &input.sort_by {
        #[allow(unused_mut)]
        let mut object_150 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_version_sort_by(
            &mut object_150,
            var_149,
        )?;
        object_150.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_built_in_intents_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBuiltInIntentsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_151) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_151).into()),
        );
    }
    if let Some(var_152) = &input.next_token {
        object.key("nextToken").string(var_152.as_str());
    }
    if let Some(var_153) = &input.sort_by {
        #[allow(unused_mut)]
        let mut object_154 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_built_in_intent_sort_by(
            &mut object_154,
            var_153,
        )?;
        object_154.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_built_in_slot_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBuiltInSlotTypesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_155) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_155).into()),
        );
    }
    if let Some(var_156) = &input.next_token {
        object.key("nextToken").string(var_156.as_str());
    }
    if let Some(var_157) = &input.sort_by {
        #[allow(unused_mut)]
        let mut object_158 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_built_in_slot_type_sort_by(
            &mut object_158,
            var_157,
        )?;
        object_158.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_exports_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExportsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_159) = &input.bot_id {
        object.key("botId").string(var_159.as_str());
    }
    if let Some(var_160) = &input.bot_version {
        object.key("botVersion").string(var_160.as_str());
    }
    if let Some(var_161) = &input.filters {
        let mut array_162 = object.key("filters").start_array();
        for item_163 in var_161 {
            {
                #[allow(unused_mut)]
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_export_filter(
                    &mut object_164,
                    item_163,
                )?;
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.locale_id {
        object.key("localeId").string(var_165.as_str());
    }
    if let Some(var_166) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_166).into()),
        );
    }
    if let Some(var_167) = &input.next_token {
        object.key("nextToken").string(var_167.as_str());
    }
    if let Some(var_168) = &input.sort_by {
        #[allow(unused_mut)]
        let mut object_169 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_export_sort_by(&mut object_169, var_168)?;
        object_169.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_imports_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImportsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_170) = &input.bot_id {
        object.key("botId").string(var_170.as_str());
    }
    if let Some(var_171) = &input.bot_version {
        object.key("botVersion").string(var_171.as_str());
    }
    if let Some(var_172) = &input.filters {
        let mut array_173 = object.key("filters").start_array();
        for item_174 in var_172 {
            {
                #[allow(unused_mut)]
                let mut object_175 = array_173.value().start_object();
                crate::json_ser::serialize_structure_crate_model_import_filter(
                    &mut object_175,
                    item_174,
                )?;
                object_175.finish();
            }
        }
        array_173.finish();
    }
    if let Some(var_176) = &input.locale_id {
        object.key("localeId").string(var_176.as_str());
    }
    if let Some(var_177) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_177).into()),
        );
    }
    if let Some(var_178) = &input.next_token {
        object.key("nextToken").string(var_178.as_str());
    }
    if let Some(var_179) = &input.sort_by {
        #[allow(unused_mut)]
        let mut object_180 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_import_sort_by(&mut object_180, var_179)?;
        object_180.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_intents_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIntentsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_181) = &input.filters {
        let mut array_182 = object.key("filters").start_array();
        for item_183 in var_181 {
            {
                #[allow(unused_mut)]
                let mut object_184 = array_182.value().start_object();
                crate::json_ser::serialize_structure_crate_model_intent_filter(
                    &mut object_184,
                    item_183,
                )?;
                object_184.finish();
            }
        }
        array_182.finish();
    }
    if let Some(var_185) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_185).into()),
        );
    }
    if let Some(var_186) = &input.next_token {
        object.key("nextToken").string(var_186.as_str());
    }
    if let Some(var_187) = &input.sort_by {
        #[allow(unused_mut)]
        let mut object_188 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_sort_by(&mut object_188, var_187)?;
        object_188.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_recommended_intents_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRecommendedIntentsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_189) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_189).into()),
        );
    }
    if let Some(var_190) = &input.next_token {
        object.key("nextToken").string(var_190.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_slots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSlotsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_191) = &input.filters {
        let mut array_192 = object.key("filters").start_array();
        for item_193 in var_191 {
            {
                #[allow(unused_mut)]
                let mut object_194 = array_192.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_filter(
                    &mut object_194,
                    item_193,
                )?;
                object_194.finish();
            }
        }
        array_192.finish();
    }
    if let Some(var_195) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_195).into()),
        );
    }
    if let Some(var_196) = &input.next_token {
        object.key("nextToken").string(var_196.as_str());
    }
    if let Some(var_197) = &input.sort_by {
        #[allow(unused_mut)]
        let mut object_198 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_sort_by(&mut object_198, var_197)?;
        object_198.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_slot_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSlotTypesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_199) = &input.filters {
        let mut array_200 = object.key("filters").start_array();
        for item_201 in var_199 {
            {
                #[allow(unused_mut)]
                let mut object_202 = array_200.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_type_filter(
                    &mut object_202,
                    item_201,
                )?;
                object_202.finish();
            }
        }
        array_200.finish();
    }
    if let Some(var_203) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_203).into()),
        );
    }
    if let Some(var_204) = &input.next_token {
        object.key("nextToken").string(var_204.as_str());
    }
    if let Some(var_205) = &input.sort_by {
        #[allow(unused_mut)]
        let mut object_206 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_type_sort_by(
            &mut object_206,
            var_205,
        )?;
        object_206.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_associated_transcripts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchAssociatedTranscriptsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_207) = &input.filters {
        let mut array_208 = object.key("filters").start_array();
        for item_209 in var_207 {
            {
                #[allow(unused_mut)]
                let mut object_210 = array_208.value().start_object();
                crate::json_ser::serialize_structure_crate_model_associated_transcript_filter(
                    &mut object_210,
                    item_209,
                )?;
                object_210.finish();
            }
        }
        array_208.finish();
    }
    if let Some(var_211) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_211).into()),
        );
    }
    if let Some(var_212) = &input.next_index {
        object.key("nextIndex").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_212).into()),
        );
    }
    if let Some(var_213) = &input.search_order {
        object.key("searchOrder").string(var_213.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_bot_recommendation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBotRecommendationInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_214) = &input.encryption_setting {
        #[allow(unused_mut)]
        let mut object_215 = object.key("encryptionSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_setting(
            &mut object_215,
            var_214,
        )?;
        object_215.finish();
    }
    if let Some(var_216) = &input.transcript_source_setting {
        #[allow(unused_mut)]
        let mut object_217 = object.key("transcriptSourceSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_transcript_source_setting(
            &mut object_217,
            var_216,
        )?;
        object_217.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_import_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImportInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_218) = &input.file_password {
        object.key("filePassword").string(var_218.as_str());
    }
    if let Some(var_219) = &input.import_id {
        object.key("importId").string(var_219.as_str());
    }
    if let Some(var_220) = &input.merge_strategy {
        object.key("mergeStrategy").string(var_220.as_str());
    }
    if let Some(var_221) = &input.resource_specification {
        #[allow(unused_mut)]
        let mut object_222 = object.key("resourceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_import_resource_specification(
            &mut object_222,
            var_221,
        )?;
        object_222.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_223) = &input.tags {
        #[allow(unused_mut)]
        let mut object_224 = object.key("tags").start_object();
        for (key_225, value_226) in var_223 {
            {
                object_224.key(key_225.as_str()).string(value_226.as_str());
            }
        }
        object_224.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_bot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_227) = &input.bot_name {
        object.key("botName").string(var_227.as_str());
    }
    if let Some(var_228) = &input.data_privacy {
        #[allow(unused_mut)]
        let mut object_229 = object.key("dataPrivacy").start_object();
        crate::json_ser::serialize_structure_crate_model_data_privacy(&mut object_229, var_228)?;
        object_229.finish();
    }
    if let Some(var_230) = &input.description {
        object.key("description").string(var_230.as_str());
    }
    if let Some(var_231) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_231).into()),
        );
    }
    if let Some(var_232) = &input.role_arn {
        object.key("roleArn").string(var_232.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_bot_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotAliasInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_233) = &input.bot_alias_locale_settings {
        #[allow(unused_mut)]
        let mut object_234 = object.key("botAliasLocaleSettings").start_object();
        for (key_235, value_236) in var_233 {
            {
                #[allow(unused_mut)]
                let mut object_237 = object_234.key(key_235.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_bot_alias_locale_settings(
                    &mut object_237,
                    value_236,
                )?;
                object_237.finish();
            }
        }
        object_234.finish();
    }
    if let Some(var_238) = &input.bot_alias_name {
        object.key("botAliasName").string(var_238.as_str());
    }
    if let Some(var_239) = &input.bot_version {
        object.key("botVersion").string(var_239.as_str());
    }
    if let Some(var_240) = &input.conversation_log_settings {
        #[allow(unused_mut)]
        let mut object_241 = object.key("conversationLogSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_conversation_log_settings(
            &mut object_241,
            var_240,
        )?;
        object_241.finish();
    }
    if let Some(var_242) = &input.description {
        object.key("description").string(var_242.as_str());
    }
    if let Some(var_243) = &input.sentiment_analysis_settings {
        #[allow(unused_mut)]
        let mut object_244 = object.key("sentimentAnalysisSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sentiment_analysis_settings(
            &mut object_244,
            var_243,
        )?;
        object_244.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_bot_locale_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotLocaleInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_245) = &input.description {
        object.key("description").string(var_245.as_str());
    }
    if let Some(var_246) = &input.nlu_intent_confidence_threshold {
        object.key("nluIntentConfidenceThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_246).into()),
        );
    }
    if let Some(var_247) = &input.voice_settings {
        #[allow(unused_mut)]
        let mut object_248 = object.key("voiceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_settings(&mut object_248, var_247)?;
        object_248.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_bot_recommendation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotRecommendationInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_249) = &input.encryption_setting {
        #[allow(unused_mut)]
        let mut object_250 = object.key("encryptionSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_setting(
            &mut object_250,
            var_249,
        )?;
        object_250.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_export_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExportInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_251) = &input.file_password {
        object.key("filePassword").string(var_251.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_intent_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIntentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_252) = &input.description {
        object.key("description").string(var_252.as_str());
    }
    if let Some(var_253) = &input.dialog_code_hook {
        #[allow(unused_mut)]
        let mut object_254 = object.key("dialogCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_code_hook_settings(
            &mut object_254,
            var_253,
        )?;
        object_254.finish();
    }
    if let Some(var_255) = &input.fulfillment_code_hook {
        #[allow(unused_mut)]
        let mut object_256 = object.key("fulfillmentCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_code_hook_settings(
            &mut object_256,
            var_255,
        )?;
        object_256.finish();
    }
    if let Some(var_257) = &input.initial_response_setting {
        #[allow(unused_mut)]
        let mut object_258 = object.key("initialResponseSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_initial_response_setting(
            &mut object_258,
            var_257,
        )?;
        object_258.finish();
    }
    if let Some(var_259) = &input.input_contexts {
        let mut array_260 = object.key("inputContexts").start_array();
        for item_261 in var_259 {
            {
                #[allow(unused_mut)]
                let mut object_262 = array_260.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_context(
                    &mut object_262,
                    item_261,
                )?;
                object_262.finish();
            }
        }
        array_260.finish();
    }
    if let Some(var_263) = &input.intent_closing_setting {
        #[allow(unused_mut)]
        let mut object_264 = object.key("intentClosingSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_closing_setting(
            &mut object_264,
            var_263,
        )?;
        object_264.finish();
    }
    if let Some(var_265) = &input.intent_confirmation_setting {
        #[allow(unused_mut)]
        let mut object_266 = object.key("intentConfirmationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_confirmation_setting(
            &mut object_266,
            var_265,
        )?;
        object_266.finish();
    }
    if let Some(var_267) = &input.intent_name {
        object.key("intentName").string(var_267.as_str());
    }
    if let Some(var_268) = &input.kendra_configuration {
        #[allow(unused_mut)]
        let mut object_269 = object.key("kendraConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_kendra_configuration(
            &mut object_269,
            var_268,
        )?;
        object_269.finish();
    }
    if let Some(var_270) = &input.output_contexts {
        let mut array_271 = object.key("outputContexts").start_array();
        for item_272 in var_270 {
            {
                #[allow(unused_mut)]
                let mut object_273 = array_271.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_context(
                    &mut object_273,
                    item_272,
                )?;
                object_273.finish();
            }
        }
        array_271.finish();
    }
    if let Some(var_274) = &input.parent_intent_signature {
        object.key("parentIntentSignature").string(var_274.as_str());
    }
    if let Some(var_275) = &input.sample_utterances {
        let mut array_276 = object.key("sampleUtterances").start_array();
        for item_277 in var_275 {
            {
                #[allow(unused_mut)]
                let mut object_278 = array_276.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sample_utterance(
                    &mut object_278,
                    item_277,
                )?;
                object_278.finish();
            }
        }
        array_276.finish();
    }
    if let Some(var_279) = &input.slot_priorities {
        let mut array_280 = object.key("slotPriorities").start_array();
        for item_281 in var_279 {
            {
                #[allow(unused_mut)]
                let mut object_282 = array_280.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_priority(
                    &mut object_282,
                    item_281,
                )?;
                object_282.finish();
            }
        }
        array_280.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_283) = &input.policy {
        object.key("policy").string(var_283.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_slot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSlotInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_284) = &input.description {
        object.key("description").string(var_284.as_str());
    }
    if let Some(var_285) = &input.multiple_values_setting {
        #[allow(unused_mut)]
        let mut object_286 = object.key("multipleValuesSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_multiple_values_setting(
            &mut object_286,
            var_285,
        )?;
        object_286.finish();
    }
    if let Some(var_287) = &input.obfuscation_setting {
        #[allow(unused_mut)]
        let mut object_288 = object.key("obfuscationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_obfuscation_setting(
            &mut object_288,
            var_287,
        )?;
        object_288.finish();
    }
    if let Some(var_289) = &input.slot_name {
        object.key("slotName").string(var_289.as_str());
    }
    if let Some(var_290) = &input.slot_type_id {
        object.key("slotTypeId").string(var_290.as_str());
    }
    if let Some(var_291) = &input.sub_slot_setting {
        #[allow(unused_mut)]
        let mut object_292 = object.key("subSlotSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_sub_slot_setting(
            &mut object_292,
            var_291,
        )?;
        object_292.finish();
    }
    if let Some(var_293) = &input.value_elicitation_setting {
        #[allow(unused_mut)]
        let mut object_294 = object.key("valueElicitationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_elicitation_setting(
            &mut object_294,
            var_293,
        )?;
        object_294.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_slot_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSlotTypeInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_295) = &input.composite_slot_type_setting {
        #[allow(unused_mut)]
        let mut object_296 = object.key("compositeSlotTypeSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_composite_slot_type_setting(
            &mut object_296,
            var_295,
        )?;
        object_296.finish();
    }
    if let Some(var_297) = &input.description {
        object.key("description").string(var_297.as_str());
    }
    if let Some(var_298) = &input.external_source_setting {
        #[allow(unused_mut)]
        let mut object_299 = object.key("externalSourceSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_external_source_setting(
            &mut object_299,
            var_298,
        )?;
        object_299.finish();
    }
    if let Some(var_300) = &input.parent_slot_type_signature {
        object
            .key("parentSlotTypeSignature")
            .string(var_300.as_str());
    }
    if let Some(var_301) = &input.slot_type_name {
        object.key("slotTypeName").string(var_301.as_str());
    }
    if let Some(var_302) = &input.slot_type_values {
        let mut array_303 = object.key("slotTypeValues").start_array();
        for item_304 in var_302 {
            {
                #[allow(unused_mut)]
                let mut object_305 = array_303.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_type_value(
                    &mut object_305,
                    item_304,
                )?;
                object_305.finish();
            }
        }
        array_303.finish();
    }
    if let Some(var_306) = &input.value_selection_setting {
        #[allow(unused_mut)]
        let mut object_307 = object.key("valueSelectionSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_selection_setting(
            &mut object_307,
            var_306,
        )?;
        object_307.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_privacy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataPrivacy,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("childDirected").boolean(input.child_directed);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_alias_locale_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotAliasLocaleSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_308) = &input.code_hook_specification {
        #[allow(unused_mut)]
        let mut object_309 = object.key("codeHookSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_code_hook_specification(
            &mut object_309,
            var_308,
        )?;
        object_309.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_conversation_log_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConversationLogSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_310) = &input.text_log_settings {
        let mut array_311 = object.key("textLogSettings").start_array();
        for item_312 in var_310 {
            {
                #[allow(unused_mut)]
                let mut object_313 = array_311.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_log_setting(
                    &mut object_313,
                    item_312,
                )?;
                object_313.finish();
            }
        }
        array_311.finish();
    }
    if let Some(var_314) = &input.audio_log_settings {
        let mut array_315 = object.key("audioLogSettings").start_array();
        for item_316 in var_314 {
            {
                #[allow(unused_mut)]
                let mut object_317 = array_315.value().start_object();
                crate::json_ser::serialize_structure_crate_model_audio_log_setting(
                    &mut object_317,
                    item_316,
                )?;
                object_317.finish();
            }
        }
        array_315.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sentiment_analysis_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SentimentAnalysisSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    {
        object
            .key("detectSentiment")
            .boolean(input.detect_sentiment);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_voice_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VoiceSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_318) = &input.voice_id {
        object.key("voiceId").string(var_318.as_str());
    }
    if let Some(var_319) = &input.engine {
        object.key("engine").string(var_319.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_version_locale_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotVersionLocaleDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_320) = &input.source_bot_version {
        object.key("sourceBotVersion").string(var_320.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_resource_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportResourceSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_321) = &input.bot_export_specification {
        #[allow(unused_mut)]
        let mut object_322 = object.key("botExportSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_export_specification(
            &mut object_322,
            var_321,
        )?;
        object_322.finish();
    }
    if let Some(var_323) = &input.bot_locale_export_specification {
        #[allow(unused_mut)]
        let mut object_324 = object.key("botLocaleExportSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_locale_export_specification(
            &mut object_324,
            var_323,
        )?;
        object_324.finish();
    }
    if let Some(var_325) = &input.custom_vocabulary_export_specification {
        #[allow(unused_mut)]
        let mut object_326 = object
            .key("customVocabularyExportSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_vocabulary_export_specification(
            &mut object_326,
            var_325,
        )?;
        object_326.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dialog_code_hook_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DialogCodeHookSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fulfillment_code_hook_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentCodeHookSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_327) = &input.post_fulfillment_status_specification {
        #[allow(unused_mut)]
        let mut object_328 = object
            .key("postFulfillmentStatusSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_post_fulfillment_status_specification(
            &mut object_328,
            var_327,
        )?;
        object_328.finish();
    }
    if let Some(var_329) = &input.fulfillment_updates_specification {
        #[allow(unused_mut)]
        let mut object_330 = object.key("fulfillmentUpdatesSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_updates_specification(
            &mut object_330,
            var_329,
        )?;
        object_330.finish();
    }
    if let Some(var_331) = &input.active {
        object.key("active").boolean(*var_331);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_initial_response_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InitialResponseSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_332) = &input.initial_response {
        #[allow(unused_mut)]
        let mut object_333 = object.key("initialResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_333,
            var_332,
        )?;
        object_333.finish();
    }
    if let Some(var_334) = &input.next_step {
        #[allow(unused_mut)]
        let mut object_335 = object.key("nextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_335, var_334)?;
        object_335.finish();
    }
    if let Some(var_336) = &input.conditional {
        #[allow(unused_mut)]
        let mut object_337 = object.key("conditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_337,
            var_336,
        )?;
        object_337.finish();
    }
    if let Some(var_338) = &input.code_hook {
        #[allow(unused_mut)]
        let mut object_339 = object.key("codeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_code_hook_invocation_setting(
            &mut object_339,
            var_338,
        )?;
        object_339.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputContext,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_340) = &input.name {
        object.key("name").string(var_340.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_closing_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentClosingSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_341) = &input.closing_response {
        #[allow(unused_mut)]
        let mut object_342 = object.key("closingResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_342,
            var_341,
        )?;
        object_342.finish();
    }
    if let Some(var_343) = &input.active {
        object.key("active").boolean(*var_343);
    }
    if let Some(var_344) = &input.next_step {
        #[allow(unused_mut)]
        let mut object_345 = object.key("nextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_345, var_344)?;
        object_345.finish();
    }
    if let Some(var_346) = &input.conditional {
        #[allow(unused_mut)]
        let mut object_347 = object.key("conditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_347,
            var_346,
        )?;
        object_347.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_confirmation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentConfirmationSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_348) = &input.prompt_specification {
        #[allow(unused_mut)]
        let mut object_349 = object.key("promptSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_prompt_specification(
            &mut object_349,
            var_348,
        )?;
        object_349.finish();
    }
    if let Some(var_350) = &input.declination_response {
        #[allow(unused_mut)]
        let mut object_351 = object.key("declinationResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_351,
            var_350,
        )?;
        object_351.finish();
    }
    if let Some(var_352) = &input.active {
        object.key("active").boolean(*var_352);
    }
    if let Some(var_353) = &input.confirmation_response {
        #[allow(unused_mut)]
        let mut object_354 = object.key("confirmationResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_354,
            var_353,
        )?;
        object_354.finish();
    }
    if let Some(var_355) = &input.confirmation_next_step {
        #[allow(unused_mut)]
        let mut object_356 = object.key("confirmationNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_356, var_355)?;
        object_356.finish();
    }
    if let Some(var_357) = &input.confirmation_conditional {
        #[allow(unused_mut)]
        let mut object_358 = object.key("confirmationConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_358,
            var_357,
        )?;
        object_358.finish();
    }
    if let Some(var_359) = &input.declination_next_step {
        #[allow(unused_mut)]
        let mut object_360 = object.key("declinationNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_360, var_359)?;
        object_360.finish();
    }
    if let Some(var_361) = &input.declination_conditional {
        #[allow(unused_mut)]
        let mut object_362 = object.key("declinationConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_362,
            var_361,
        )?;
        object_362.finish();
    }
    if let Some(var_363) = &input.failure_response {
        #[allow(unused_mut)]
        let mut object_364 = object.key("failureResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_364,
            var_363,
        )?;
        object_364.finish();
    }
    if let Some(var_365) = &input.failure_next_step {
        #[allow(unused_mut)]
        let mut object_366 = object.key("failureNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_366, var_365)?;
        object_366.finish();
    }
    if let Some(var_367) = &input.failure_conditional {
        #[allow(unused_mut)]
        let mut object_368 = object.key("failureConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_368,
            var_367,
        )?;
        object_368.finish();
    }
    if let Some(var_369) = &input.code_hook {
        #[allow(unused_mut)]
        let mut object_370 = object.key("codeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_code_hook_invocation_setting(
            &mut object_370,
            var_369,
        )?;
        object_370.finish();
    }
    if let Some(var_371) = &input.elicitation_code_hook {
        #[allow(unused_mut)]
        let mut object_372 = object.key("elicitationCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_elicitation_code_hook_invocation_setting(
            &mut object_372,
            var_371,
        )?;
        object_372.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kendra_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KendraConfiguration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_373) = &input.kendra_index {
        object.key("kendraIndex").string(var_373.as_str());
    }
    if input.query_filter_string_enabled {
        object
            .key("queryFilterStringEnabled")
            .boolean(input.query_filter_string_enabled);
    }
    if let Some(var_374) = &input.query_filter_string {
        object.key("queryFilterString").string(var_374.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputContext,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_375) = &input.name {
        object.key("name").string(var_375.as_str());
    }
    if let Some(var_376) = &input.time_to_live_in_seconds {
        object.key("timeToLiveInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_376).into()),
        );
    }
    if let Some(var_377) = &input.turns_to_live {
        object.key("turnsToLive").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_377).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sample_utterance(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SampleUtterance,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_378) = &input.utterance {
        object.key("utterance").string(var_378.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Principal,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_379) = &input.service {
        object.key("service").string(var_379.as_str());
    }
    if let Some(var_380) = &input.arn {
        object.key("arn").string(var_380.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_multiple_values_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultipleValuesSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.allow_multiple_values {
        object
            .key("allowMultipleValues")
            .boolean(input.allow_multiple_values);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_obfuscation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ObfuscationSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_381) = &input.obfuscation_setting_type {
        object
            .key("obfuscationSettingType")
            .string(var_381.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sub_slot_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SubSlotSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_382) = &input.expression {
        object.key("expression").string(var_382.as_str());
    }
    if let Some(var_383) = &input.slot_specifications {
        #[allow(unused_mut)]
        let mut object_384 = object.key("slotSpecifications").start_object();
        for (key_385, value_386) in var_383 {
            {
                #[allow(unused_mut)]
                let mut object_387 = object_384.key(key_385.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_specifications(
                    &mut object_387,
                    value_386,
                )?;
                object_387.finish();
            }
        }
        object_384.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_value_elicitation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValueElicitationSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_388) = &input.default_value_specification {
        #[allow(unused_mut)]
        let mut object_389 = object.key("defaultValueSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_default_value_specification(
            &mut object_389,
            var_388,
        )?;
        object_389.finish();
    }
    if let Some(var_390) = &input.slot_constraint {
        object.key("slotConstraint").string(var_390.as_str());
    }
    if let Some(var_391) = &input.prompt_specification {
        #[allow(unused_mut)]
        let mut object_392 = object.key("promptSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_prompt_specification(
            &mut object_392,
            var_391,
        )?;
        object_392.finish();
    }
    if let Some(var_393) = &input.sample_utterances {
        let mut array_394 = object.key("sampleUtterances").start_array();
        for item_395 in var_393 {
            {
                #[allow(unused_mut)]
                let mut object_396 = array_394.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sample_utterance(
                    &mut object_396,
                    item_395,
                )?;
                object_396.finish();
            }
        }
        array_394.finish();
    }
    if let Some(var_397) = &input.wait_and_continue_specification {
        #[allow(unused_mut)]
        let mut object_398 = object.key("waitAndContinueSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_wait_and_continue_specification(
            &mut object_398,
            var_397,
        )?;
        object_398.finish();
    }
    if let Some(var_399) = &input.slot_capture_setting {
        #[allow(unused_mut)]
        let mut object_400 = object.key("slotCaptureSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_capture_setting(
            &mut object_400,
            var_399,
        )?;
        object_400.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_composite_slot_type_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CompositeSlotTypeSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_401) = &input.sub_slots {
        let mut array_402 = object.key("subSlots").start_array();
        for item_403 in var_401 {
            {
                #[allow(unused_mut)]
                let mut object_404 = array_402.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sub_slot_type_composition(
                    &mut object_404,
                    item_403,
                )?;
                object_404.finish();
            }
        }
        array_402.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_external_source_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExternalSourceSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_405) = &input.grammar_slot_type_setting {
        #[allow(unused_mut)]
        let mut object_406 = object.key("grammarSlotTypeSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_grammar_slot_type_setting(
            &mut object_406,
            var_405,
        )?;
        object_406.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_type_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotTypeValue,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_407) = &input.sample_value {
        #[allow(unused_mut)]
        let mut object_408 = object.key("sampleValue").start_object();
        crate::json_ser::serialize_structure_crate_model_sample_value(&mut object_408, var_407)?;
        object_408.finish();
    }
    if let Some(var_409) = &input.synonyms {
        let mut array_410 = object.key("synonyms").start_array();
        for item_411 in var_409 {
            {
                #[allow(unused_mut)]
                let mut object_412 = array_410.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sample_value(
                    &mut object_412,
                    item_411,
                )?;
                object_412.finish();
            }
        }
        array_410.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_value_selection_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValueSelectionSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_413) = &input.resolution_strategy {
        object.key("resolutionStrategy").string(var_413.as_str());
    }
    if let Some(var_414) = &input.regex_filter {
        #[allow(unused_mut)]
        let mut object_415 = object.key("regexFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_regex_filter(
            &mut object_415,
            var_414,
        )?;
        object_415.finish();
    }
    if let Some(var_416) = &input.advanced_recognition_setting {
        #[allow(unused_mut)]
        let mut object_417 = object.key("advancedRecognitionSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_advanced_recognition_setting(
            &mut object_417,
            var_416,
        )?;
        object_417.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_utterance_aggregation_duration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UtteranceAggregationDuration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_418) = &input.relative_aggregation_duration {
        #[allow(unused_mut)]
        let mut object_419 = object.key("relativeAggregationDuration").start_object();
        crate::json_ser::serialize_structure_crate_model_relative_aggregation_duration(
            &mut object_419,
            var_418,
        )?;
        object_419.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregated_utterances_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregatedUtterancesFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_420) = &input.name {
        object.key("name").string(var_420.as_str());
    }
    if let Some(var_421) = &input.values {
        let mut array_422 = object.key("values").start_array();
        for item_423 in var_421 {
            {
                array_422.value().string(item_423.as_str());
            }
        }
        array_422.finish();
    }
    if let Some(var_424) = &input.operator {
        object.key("operator").string(var_424.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregated_utterances_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregatedUtterancesSortBy,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_425) = &input.attribute {
        object.key("attribute").string(var_425.as_str());
    }
    if let Some(var_426) = &input.order {
        object.key("order").string(var_426.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_locale_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_427) = &input.name {
        object.key("name").string(var_427.as_str());
    }
    if let Some(var_428) = &input.values {
        let mut array_429 = object.key("values").start_array();
        for item_430 in var_428 {
            {
                array_429.value().string(item_430.as_str());
            }
        }
        array_429.finish();
    }
    if let Some(var_431) = &input.operator {
        object.key("operator").string(var_431.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_locale_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleSortBy,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_432) = &input.attribute {
        object.key("attribute").string(var_432.as_str());
    }
    if let Some(var_433) = &input.order {
        object.key("order").string(var_433.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_434) = &input.name {
        object.key("name").string(var_434.as_str());
    }
    if let Some(var_435) = &input.values {
        let mut array_436 = object.key("values").start_array();
        for item_437 in var_435 {
            {
                array_436.value().string(item_437.as_str());
            }
        }
        array_436.finish();
    }
    if let Some(var_438) = &input.operator {
        object.key("operator").string(var_438.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotSortBy,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_439) = &input.attribute {
        object.key("attribute").string(var_439.as_str());
    }
    if let Some(var_440) = &input.order {
        object.key("order").string(var_440.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_version_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotVersionSortBy,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_441) = &input.attribute {
        object.key("attribute").string(var_441.as_str());
    }
    if let Some(var_442) = &input.order {
        object.key("order").string(var_442.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_built_in_intent_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BuiltInIntentSortBy,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_443) = &input.attribute {
        object.key("attribute").string(var_443.as_str());
    }
    if let Some(var_444) = &input.order {
        object.key("order").string(var_444.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_built_in_slot_type_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BuiltInSlotTypeSortBy,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_445) = &input.attribute {
        object.key("attribute").string(var_445.as_str());
    }
    if let Some(var_446) = &input.order {
        object.key("order").string(var_446.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_447) = &input.name {
        object.key("name").string(var_447.as_str());
    }
    if let Some(var_448) = &input.values {
        let mut array_449 = object.key("values").start_array();
        for item_450 in var_448 {
            {
                array_449.value().string(item_450.as_str());
            }
        }
        array_449.finish();
    }
    if let Some(var_451) = &input.operator {
        object.key("operator").string(var_451.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportSortBy,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_452) = &input.attribute {
        object.key("attribute").string(var_452.as_str());
    }
    if let Some(var_453) = &input.order {
        object.key("order").string(var_453.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_454) = &input.name {
        object.key("name").string(var_454.as_str());
    }
    if let Some(var_455) = &input.values {
        let mut array_456 = object.key("values").start_array();
        for item_457 in var_455 {
            {
                array_456.value().string(item_457.as_str());
            }
        }
        array_456.finish();
    }
    if let Some(var_458) = &input.operator {
        object.key("operator").string(var_458.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportSortBy,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_459) = &input.attribute {
        object.key("attribute").string(var_459.as_str());
    }
    if let Some(var_460) = &input.order {
        object.key("order").string(var_460.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_461) = &input.name {
        object.key("name").string(var_461.as_str());
    }
    if let Some(var_462) = &input.values {
        let mut array_463 = object.key("values").start_array();
        for item_464 in var_462 {
            {
                array_463.value().string(item_464.as_str());
            }
        }
        array_463.finish();
    }
    if let Some(var_465) = &input.operator {
        object.key("operator").string(var_465.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentSortBy,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_466) = &input.attribute {
        object.key("attribute").string(var_466.as_str());
    }
    if let Some(var_467) = &input.order {
        object.key("order").string(var_467.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_468) = &input.name {
        object.key("name").string(var_468.as_str());
    }
    if let Some(var_469) = &input.values {
        let mut array_470 = object.key("values").start_array();
        for item_471 in var_469 {
            {
                array_470.value().string(item_471.as_str());
            }
        }
        array_470.finish();
    }
    if let Some(var_472) = &input.operator {
        object.key("operator").string(var_472.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotSortBy,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_473) = &input.attribute {
        object.key("attribute").string(var_473.as_str());
    }
    if let Some(var_474) = &input.order {
        object.key("order").string(var_474.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_type_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotTypeFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_475) = &input.name {
        object.key("name").string(var_475.as_str());
    }
    if let Some(var_476) = &input.values {
        let mut array_477 = object.key("values").start_array();
        for item_478 in var_476 {
            {
                array_477.value().string(item_478.as_str());
            }
        }
        array_477.finish();
    }
    if let Some(var_479) = &input.operator {
        object.key("operator").string(var_479.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_type_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotTypeSortBy,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_480) = &input.attribute {
        object.key("attribute").string(var_480.as_str());
    }
    if let Some(var_481) = &input.order {
        object.key("order").string(var_481.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_associated_transcript_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociatedTranscriptFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_482) = &input.name {
        object.key("name").string(var_482.as_str());
    }
    if let Some(var_483) = &input.values {
        let mut array_484 = object.key("values").start_array();
        for item_485 in var_483 {
            {
                array_484.value().string(item_485.as_str());
            }
        }
        array_484.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_486) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_486.as_str());
    }
    if let Some(var_487) = &input.bot_locale_export_password {
        object
            .key("botLocaleExportPassword")
            .string(var_487.as_str());
    }
    if let Some(var_488) = &input.associated_transcripts_password {
        object
            .key("associatedTranscriptsPassword")
            .string(var_488.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transcript_source_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TranscriptSourceSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_489) = &input.s3_bucket_transcript_source {
        #[allow(unused_mut)]
        let mut object_490 = object.key("s3BucketTranscriptSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_bucket_transcript_source(
            &mut object_490,
            var_489,
        )?;
        object_490.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_resource_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportResourceSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_491) = &input.bot_import_specification {
        #[allow(unused_mut)]
        let mut object_492 = object.key("botImportSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_import_specification(
            &mut object_492,
            var_491,
        )?;
        object_492.finish();
    }
    if let Some(var_493) = &input.bot_locale_import_specification {
        #[allow(unused_mut)]
        let mut object_494 = object.key("botLocaleImportSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_locale_import_specification(
            &mut object_494,
            var_493,
        )?;
        object_494.finish();
    }
    if let Some(var_495) = &input.custom_vocabulary_import_specification {
        #[allow(unused_mut)]
        let mut object_496 = object
            .key("customVocabularyImportSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_vocabulary_import_specification(
            &mut object_496,
            var_495,
        )?;
        object_496.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_priority(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotPriority,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_497) = &input.priority {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_497).into()),
        );
    }
    if let Some(var_498) = &input.slot_id {
        object.key("slotId").string(var_498.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_hook_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeHookSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_499) = &input.lambda_code_hook {
        #[allow(unused_mut)]
        let mut object_500 = object.key("lambdaCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_code_hook(
            &mut object_500,
            var_499,
        )?;
        object_500.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_text_log_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TextLogSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_501) = &input.destination {
        #[allow(unused_mut)]
        let mut object_502 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_text_log_destination(
            &mut object_502,
            var_501,
        )?;
        object_502.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audio_log_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioLogSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_503) = &input.destination {
        #[allow(unused_mut)]
        let mut object_504 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_log_destination(
            &mut object_504,
            var_503,
        )?;
        object_504.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_export_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotExportSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_505) = &input.bot_id {
        object.key("botId").string(var_505.as_str());
    }
    if let Some(var_506) = &input.bot_version {
        object.key("botVersion").string(var_506.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_locale_export_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleExportSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_507) = &input.bot_id {
        object.key("botId").string(var_507.as_str());
    }
    if let Some(var_508) = &input.bot_version {
        object.key("botVersion").string(var_508.as_str());
    }
    if let Some(var_509) = &input.locale_id {
        object.key("localeId").string(var_509.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_vocabulary_export_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomVocabularyExportSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_510) = &input.bot_id {
        object.key("botId").string(var_510.as_str());
    }
    if let Some(var_511) = &input.bot_version {
        object.key("botVersion").string(var_511.as_str());
    }
    if let Some(var_512) = &input.locale_id {
        object.key("localeId").string(var_512.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_post_fulfillment_status_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostFulfillmentStatusSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_513) = &input.success_response {
        #[allow(unused_mut)]
        let mut object_514 = object.key("successResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_514,
            var_513,
        )?;
        object_514.finish();
    }
    if let Some(var_515) = &input.failure_response {
        #[allow(unused_mut)]
        let mut object_516 = object.key("failureResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_516,
            var_515,
        )?;
        object_516.finish();
    }
    if let Some(var_517) = &input.timeout_response {
        #[allow(unused_mut)]
        let mut object_518 = object.key("timeoutResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_518,
            var_517,
        )?;
        object_518.finish();
    }
    if let Some(var_519) = &input.success_next_step {
        #[allow(unused_mut)]
        let mut object_520 = object.key("successNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_520, var_519)?;
        object_520.finish();
    }
    if let Some(var_521) = &input.success_conditional {
        #[allow(unused_mut)]
        let mut object_522 = object.key("successConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_522,
            var_521,
        )?;
        object_522.finish();
    }
    if let Some(var_523) = &input.failure_next_step {
        #[allow(unused_mut)]
        let mut object_524 = object.key("failureNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_524, var_523)?;
        object_524.finish();
    }
    if let Some(var_525) = &input.failure_conditional {
        #[allow(unused_mut)]
        let mut object_526 = object.key("failureConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_526,
            var_525,
        )?;
        object_526.finish();
    }
    if let Some(var_527) = &input.timeout_next_step {
        #[allow(unused_mut)]
        let mut object_528 = object.key("timeoutNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_528, var_527)?;
        object_528.finish();
    }
    if let Some(var_529) = &input.timeout_conditional {
        #[allow(unused_mut)]
        let mut object_530 = object.key("timeoutConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_530,
            var_529,
        )?;
        object_530.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fulfillment_updates_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentUpdatesSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_531) = &input.active {
        object.key("active").boolean(*var_531);
    }
    if let Some(var_532) = &input.start_response {
        #[allow(unused_mut)]
        let mut object_533 = object.key("startResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_start_response_specification(
            &mut object_533,
            var_532,
        )?;
        object_533.finish();
    }
    if let Some(var_534) = &input.update_response {
        #[allow(unused_mut)]
        let mut object_535 = object.key("updateResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_update_response_specification(
            &mut object_535,
            var_534,
        )?;
        object_535.finish();
    }
    if let Some(var_536) = &input.timeout_in_seconds {
        object.key("timeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_536).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_response_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResponseSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_537) = &input.message_groups {
        let mut array_538 = object.key("messageGroups").start_array();
        for item_539 in var_537 {
            {
                #[allow(unused_mut)]
                let mut object_540 = array_538.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_540,
                    item_539,
                )?;
                object_540.finish();
            }
        }
        array_538.finish();
    }
    if let Some(var_541) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_541);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dialog_state(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DialogState,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_542) = &input.dialog_action {
        #[allow(unused_mut)]
        let mut object_543 = object.key("dialogAction").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_action(&mut object_543, var_542)?;
        object_543.finish();
    }
    if let Some(var_544) = &input.intent {
        #[allow(unused_mut)]
        let mut object_545 = object.key("intent").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_override(&mut object_545, var_544)?;
        object_545.finish();
    }
    if let Some(var_546) = &input.session_attributes {
        #[allow(unused_mut)]
        let mut object_547 = object.key("sessionAttributes").start_object();
        for (key_548, value_549) in var_546 {
            {
                object_547.key(key_548.as_str()).string(value_549.as_str());
            }
        }
        object_547.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_conditional_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConditionalSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_550) = &input.active {
        object.key("active").boolean(*var_550);
    }
    if let Some(var_551) = &input.conditional_branches {
        let mut array_552 = object.key("conditionalBranches").start_array();
        for item_553 in var_551 {
            {
                #[allow(unused_mut)]
                let mut object_554 = array_552.value().start_object();
                crate::json_ser::serialize_structure_crate_model_conditional_branch(
                    &mut object_554,
                    item_553,
                )?;
                object_554.finish();
            }
        }
        array_552.finish();
    }
    if let Some(var_555) = &input.default_branch {
        #[allow(unused_mut)]
        let mut object_556 = object.key("defaultBranch").start_object();
        crate::json_ser::serialize_structure_crate_model_default_conditional_branch(
            &mut object_556,
            var_555,
        )?;
        object_556.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dialog_code_hook_invocation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DialogCodeHookInvocationSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_557) = &input.enable_code_hook_invocation {
        object.key("enableCodeHookInvocation").boolean(*var_557);
    }
    if let Some(var_558) = &input.active {
        object.key("active").boolean(*var_558);
    }
    if let Some(var_559) = &input.invocation_label {
        object.key("invocationLabel").string(var_559.as_str());
    }
    if let Some(var_560) = &input.post_code_hook_specification {
        #[allow(unused_mut)]
        let mut object_561 = object.key("postCodeHookSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_post_dialog_code_hook_invocation_specification(&mut object_561, var_560)?;
        object_561.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_prompt_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PromptSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_562) = &input.message_groups {
        let mut array_563 = object.key("messageGroups").start_array();
        for item_564 in var_562 {
            {
                #[allow(unused_mut)]
                let mut object_565 = array_563.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_565,
                    item_564,
                )?;
                object_565.finish();
            }
        }
        array_563.finish();
    }
    if let Some(var_566) = &input.max_retries {
        object.key("maxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_566).into()),
        );
    }
    if let Some(var_567) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_567);
    }
    if let Some(var_568) = &input.message_selection_strategy {
        object
            .key("messageSelectionStrategy")
            .string(var_568.as_str());
    }
    if let Some(var_569) = &input.prompt_attempts_specification {
        #[allow(unused_mut)]
        let mut object_570 = object.key("promptAttemptsSpecification").start_object();
        for (key_571, value_572) in var_569 {
            {
                #[allow(unused_mut)]
                let mut object_573 = object_570.key(key_571.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_prompt_attempt_specification(
                    &mut object_573,
                    value_572,
                )?;
                object_573.finish();
            }
        }
        object_570.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_elicitation_code_hook_invocation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ElicitationCodeHookInvocationSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_574) = &input.enable_code_hook_invocation {
        object.key("enableCodeHookInvocation").boolean(*var_574);
    }
    if let Some(var_575) = &input.invocation_label {
        object.key("invocationLabel").string(var_575.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_specifications(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Specifications,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_576) = &input.slot_type_id {
        object.key("slotTypeId").string(var_576.as_str());
    }
    if let Some(var_577) = &input.value_elicitation_setting {
        #[allow(unused_mut)]
        let mut object_578 = object.key("valueElicitationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_sub_slot_value_elicitation_setting(
            &mut object_578,
            var_577,
        )?;
        object_578.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_default_value_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotDefaultValueSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_579) = &input.default_value_list {
        let mut array_580 = object.key("defaultValueList").start_array();
        for item_581 in var_579 {
            {
                #[allow(unused_mut)]
                let mut object_582 = array_580.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_default_value(
                    &mut object_582,
                    item_581,
                )?;
                object_582.finish();
            }
        }
        array_580.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wait_and_continue_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WaitAndContinueSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_583) = &input.waiting_response {
        #[allow(unused_mut)]
        let mut object_584 = object.key("waitingResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_584,
            var_583,
        )?;
        object_584.finish();
    }
    if let Some(var_585) = &input.continue_response {
        #[allow(unused_mut)]
        let mut object_586 = object.key("continueResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_586,
            var_585,
        )?;
        object_586.finish();
    }
    if let Some(var_587) = &input.still_waiting_response {
        #[allow(unused_mut)]
        let mut object_588 = object.key("stillWaitingResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_still_waiting_response_specification(
            &mut object_588,
            var_587,
        )?;
        object_588.finish();
    }
    if let Some(var_589) = &input.active {
        object.key("active").boolean(*var_589);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_capture_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotCaptureSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_590) = &input.capture_response {
        #[allow(unused_mut)]
        let mut object_591 = object.key("captureResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_591,
            var_590,
        )?;
        object_591.finish();
    }
    if let Some(var_592) = &input.capture_next_step {
        #[allow(unused_mut)]
        let mut object_593 = object.key("captureNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_593, var_592)?;
        object_593.finish();
    }
    if let Some(var_594) = &input.capture_conditional {
        #[allow(unused_mut)]
        let mut object_595 = object.key("captureConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_595,
            var_594,
        )?;
        object_595.finish();
    }
    if let Some(var_596) = &input.failure_response {
        #[allow(unused_mut)]
        let mut object_597 = object.key("failureResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_597,
            var_596,
        )?;
        object_597.finish();
    }
    if let Some(var_598) = &input.failure_next_step {
        #[allow(unused_mut)]
        let mut object_599 = object.key("failureNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_599, var_598)?;
        object_599.finish();
    }
    if let Some(var_600) = &input.failure_conditional {
        #[allow(unused_mut)]
        let mut object_601 = object.key("failureConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_601,
            var_600,
        )?;
        object_601.finish();
    }
    if let Some(var_602) = &input.code_hook {
        #[allow(unused_mut)]
        let mut object_603 = object.key("codeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_code_hook_invocation_setting(
            &mut object_603,
            var_602,
        )?;
        object_603.finish();
    }
    if let Some(var_604) = &input.elicitation_code_hook {
        #[allow(unused_mut)]
        let mut object_605 = object.key("elicitationCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_elicitation_code_hook_invocation_setting(
            &mut object_605,
            var_604,
        )?;
        object_605.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sub_slot_type_composition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SubSlotTypeComposition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_606) = &input.name {
        object.key("name").string(var_606.as_str());
    }
    if let Some(var_607) = &input.slot_type_id {
        object.key("slotTypeId").string(var_607.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grammar_slot_type_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrammarSlotTypeSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_608) = &input.source {
        #[allow(unused_mut)]
        let mut object_609 = object.key("source").start_object();
        crate::json_ser::serialize_structure_crate_model_grammar_slot_type_source(
            &mut object_609,
            var_608,
        )?;
        object_609.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sample_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SampleValue,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_610) = &input.value {
        object.key("value").string(var_610.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_value_regex_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValueRegexFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_611) = &input.pattern {
        object.key("pattern").string(var_611.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_advanced_recognition_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdvancedRecognitionSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_612) = &input.audio_recognition_strategy {
        object
            .key("audioRecognitionStrategy")
            .string(var_612.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relative_aggregation_duration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelativeAggregationDuration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_613) = &input.time_dimension {
        object.key("timeDimension").string(var_613.as_str());
    }
    {
        object.key("timeValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.time_value).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_bucket_transcript_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3BucketTranscriptSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_614) = &input.s3_bucket_name {
        object.key("s3BucketName").string(var_614.as_str());
    }
    if let Some(var_615) = &input.path_format {
        #[allow(unused_mut)]
        let mut object_616 = object.key("pathFormat").start_object();
        crate::json_ser::serialize_structure_crate_model_path_format(&mut object_616, var_615)?;
        object_616.finish();
    }
    if let Some(var_617) = &input.transcript_format {
        object.key("transcriptFormat").string(var_617.as_str());
    }
    if let Some(var_618) = &input.transcript_filter {
        #[allow(unused_mut)]
        let mut object_619 = object.key("transcriptFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_transcript_filter(
            &mut object_619,
            var_618,
        )?;
        object_619.finish();
    }
    if let Some(var_620) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_620.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_import_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotImportSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_621) = &input.bot_name {
        object.key("botName").string(var_621.as_str());
    }
    if let Some(var_622) = &input.role_arn {
        object.key("roleArn").string(var_622.as_str());
    }
    if let Some(var_623) = &input.data_privacy {
        #[allow(unused_mut)]
        let mut object_624 = object.key("dataPrivacy").start_object();
        crate::json_ser::serialize_structure_crate_model_data_privacy(&mut object_624, var_623)?;
        object_624.finish();
    }
    if let Some(var_625) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_625).into()),
        );
    }
    if let Some(var_626) = &input.bot_tags {
        #[allow(unused_mut)]
        let mut object_627 = object.key("botTags").start_object();
        for (key_628, value_629) in var_626 {
            {
                object_627.key(key_628.as_str()).string(value_629.as_str());
            }
        }
        object_627.finish();
    }
    if let Some(var_630) = &input.test_bot_alias_tags {
        #[allow(unused_mut)]
        let mut object_631 = object.key("testBotAliasTags").start_object();
        for (key_632, value_633) in var_630 {
            {
                object_631.key(key_632.as_str()).string(value_633.as_str());
            }
        }
        object_631.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_locale_import_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleImportSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_634) = &input.bot_id {
        object.key("botId").string(var_634.as_str());
    }
    if let Some(var_635) = &input.bot_version {
        object.key("botVersion").string(var_635.as_str());
    }
    if let Some(var_636) = &input.locale_id {
        object.key("localeId").string(var_636.as_str());
    }
    if let Some(var_637) = &input.nlu_intent_confidence_threshold {
        object.key("nluIntentConfidenceThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_637).into()),
        );
    }
    if let Some(var_638) = &input.voice_settings {
        #[allow(unused_mut)]
        let mut object_639 = object.key("voiceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_settings(&mut object_639, var_638)?;
        object_639.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_vocabulary_import_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomVocabularyImportSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_640) = &input.bot_id {
        object.key("botId").string(var_640.as_str());
    }
    if let Some(var_641) = &input.bot_version {
        object.key("botVersion").string(var_641.as_str());
    }
    if let Some(var_642) = &input.locale_id {
        object.key("localeId").string(var_642.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_code_hook(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaCodeHook,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_643) = &input.lambda_arn {
        object.key("lambdaARN").string(var_643.as_str());
    }
    if let Some(var_644) = &input.code_hook_interface_version {
        object
            .key("codeHookInterfaceVersion")
            .string(var_644.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_text_log_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TextLogDestination,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_645) = &input.cloud_watch {
        #[allow(unused_mut)]
        let mut object_646 = object.key("cloudWatch").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_log_group_log_destination(
            &mut object_646,
            var_645,
        )?;
        object_646.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audio_log_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioLogDestination,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_647) = &input.s3_bucket {
        #[allow(unused_mut)]
        let mut object_648 = object.key("s3Bucket").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_bucket_log_destination(
            &mut object_648,
            var_647,
        )?;
        object_648.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fulfillment_start_response_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentStartResponseSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_649) = &input.delay_in_seconds {
        object.key("delayInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_649).into()),
        );
    }
    if let Some(var_650) = &input.message_groups {
        let mut array_651 = object.key("messageGroups").start_array();
        for item_652 in var_650 {
            {
                #[allow(unused_mut)]
                let mut object_653 = array_651.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_653,
                    item_652,
                )?;
                object_653.finish();
            }
        }
        array_651.finish();
    }
    if let Some(var_654) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_654);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fulfillment_update_response_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentUpdateResponseSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_655) = &input.frequency_in_seconds {
        object.key("frequencyInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_655).into()),
        );
    }
    if let Some(var_656) = &input.message_groups {
        let mut array_657 = object.key("messageGroups").start_array();
        for item_658 in var_656 {
            {
                #[allow(unused_mut)]
                let mut object_659 = array_657.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_659,
                    item_658,
                )?;
                object_659.finish();
            }
        }
        array_657.finish();
    }
    if let Some(var_660) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_660);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_message_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MessageGroup,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_661) = &input.message {
        #[allow(unused_mut)]
        let mut object_662 = object.key("message").start_object();
        crate::json_ser::serialize_structure_crate_model_message(&mut object_662, var_661)?;
        object_662.finish();
    }
    if let Some(var_663) = &input.variations {
        let mut array_664 = object.key("variations").start_array();
        for item_665 in var_663 {
            {
                #[allow(unused_mut)]
                let mut object_666 = array_664.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message(
                    &mut object_666,
                    item_665,
                )?;
                object_666.finish();
            }
        }
        array_664.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dialog_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DialogAction,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_667) = &input.r#type {
        object.key("type").string(var_667.as_str());
    }
    if let Some(var_668) = &input.slot_to_elicit {
        object.key("slotToElicit").string(var_668.as_str());
    }
    if let Some(var_669) = &input.suppress_next_message {
        object.key("suppressNextMessage").boolean(*var_669);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentOverride,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_670) = &input.name {
        object.key("name").string(var_670.as_str());
    }
    if let Some(var_671) = &input.slots {
        #[allow(unused_mut)]
        let mut object_672 = object.key("slots").start_object();
        for (key_673, value_674) in var_671 {
            {
                #[allow(unused_mut)]
                let mut object_675 = object_672.key(key_673.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_slot_value_override(
                    &mut object_675,
                    value_674,
                )?;
                object_675.finish();
            }
        }
        object_672.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_conditional_branch(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConditionalBranch,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_676) = &input.name {
        object.key("name").string(var_676.as_str());
    }
    if let Some(var_677) = &input.condition {
        #[allow(unused_mut)]
        let mut object_678 = object.key("condition").start_object();
        crate::json_ser::serialize_structure_crate_model_condition(&mut object_678, var_677)?;
        object_678.finish();
    }
    if let Some(var_679) = &input.next_step {
        #[allow(unused_mut)]
        let mut object_680 = object.key("nextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_680, var_679)?;
        object_680.finish();
    }
    if let Some(var_681) = &input.response {
        #[allow(unused_mut)]
        let mut object_682 = object.key("response").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_682,
            var_681,
        )?;
        object_682.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_default_conditional_branch(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DefaultConditionalBranch,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_683) = &input.next_step {
        #[allow(unused_mut)]
        let mut object_684 = object.key("nextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_684, var_683)?;
        object_684.finish();
    }
    if let Some(var_685) = &input.response {
        #[allow(unused_mut)]
        let mut object_686 = object.key("response").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_686,
            var_685,
        )?;
        object_686.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_post_dialog_code_hook_invocation_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostDialogCodeHookInvocationSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_687) = &input.success_response {
        #[allow(unused_mut)]
        let mut object_688 = object.key("successResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_688,
            var_687,
        )?;
        object_688.finish();
    }
    if let Some(var_689) = &input.success_next_step {
        #[allow(unused_mut)]
        let mut object_690 = object.key("successNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_690, var_689)?;
        object_690.finish();
    }
    if let Some(var_691) = &input.success_conditional {
        #[allow(unused_mut)]
        let mut object_692 = object.key("successConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_692,
            var_691,
        )?;
        object_692.finish();
    }
    if let Some(var_693) = &input.failure_response {
        #[allow(unused_mut)]
        let mut object_694 = object.key("failureResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_694,
            var_693,
        )?;
        object_694.finish();
    }
    if let Some(var_695) = &input.failure_next_step {
        #[allow(unused_mut)]
        let mut object_696 = object.key("failureNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_696, var_695)?;
        object_696.finish();
    }
    if let Some(var_697) = &input.failure_conditional {
        #[allow(unused_mut)]
        let mut object_698 = object.key("failureConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_698,
            var_697,
        )?;
        object_698.finish();
    }
    if let Some(var_699) = &input.timeout_response {
        #[allow(unused_mut)]
        let mut object_700 = object.key("timeoutResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_700,
            var_699,
        )?;
        object_700.finish();
    }
    if let Some(var_701) = &input.timeout_next_step {
        #[allow(unused_mut)]
        let mut object_702 = object.key("timeoutNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_702, var_701)?;
        object_702.finish();
    }
    if let Some(var_703) = &input.timeout_conditional {
        #[allow(unused_mut)]
        let mut object_704 = object.key("timeoutConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_704,
            var_703,
        )?;
        object_704.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_prompt_attempt_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PromptAttemptSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_705) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_705);
    }
    if let Some(var_706) = &input.allowed_input_types {
        #[allow(unused_mut)]
        let mut object_707 = object.key("allowedInputTypes").start_object();
        crate::json_ser::serialize_structure_crate_model_allowed_input_types(
            &mut object_707,
            var_706,
        )?;
        object_707.finish();
    }
    if let Some(var_708) = &input.audio_and_dtmf_input_specification {
        #[allow(unused_mut)]
        let mut object_709 = object.key("audioAndDTMFInputSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_and_dtmf_input_specification(
            &mut object_709,
            var_708,
        )?;
        object_709.finish();
    }
    if let Some(var_710) = &input.text_input_specification {
        #[allow(unused_mut)]
        let mut object_711 = object.key("textInputSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_text_input_specification(
            &mut object_711,
            var_710,
        )?;
        object_711.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sub_slot_value_elicitation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SubSlotValueElicitationSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_712) = &input.default_value_specification {
        #[allow(unused_mut)]
        let mut object_713 = object.key("defaultValueSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_default_value_specification(
            &mut object_713,
            var_712,
        )?;
        object_713.finish();
    }
    if let Some(var_714) = &input.prompt_specification {
        #[allow(unused_mut)]
        let mut object_715 = object.key("promptSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_prompt_specification(
            &mut object_715,
            var_714,
        )?;
        object_715.finish();
    }
    if let Some(var_716) = &input.sample_utterances {
        let mut array_717 = object.key("sampleUtterances").start_array();
        for item_718 in var_716 {
            {
                #[allow(unused_mut)]
                let mut object_719 = array_717.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sample_utterance(
                    &mut object_719,
                    item_718,
                )?;
                object_719.finish();
            }
        }
        array_717.finish();
    }
    if let Some(var_720) = &input.wait_and_continue_specification {
        #[allow(unused_mut)]
        let mut object_721 = object.key("waitAndContinueSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_wait_and_continue_specification(
            &mut object_721,
            var_720,
        )?;
        object_721.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_default_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotDefaultValue,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_722) = &input.default_value {
        object.key("defaultValue").string(var_722.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_still_waiting_response_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StillWaitingResponseSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_723) = &input.message_groups {
        let mut array_724 = object.key("messageGroups").start_array();
        for item_725 in var_723 {
            {
                #[allow(unused_mut)]
                let mut object_726 = array_724.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_726,
                    item_725,
                )?;
                object_726.finish();
            }
        }
        array_724.finish();
    }
    if let Some(var_727) = &input.frequency_in_seconds {
        object.key("frequencyInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_727).into()),
        );
    }
    if let Some(var_728) = &input.timeout_in_seconds {
        object.key("timeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_728).into()),
        );
    }
    if let Some(var_729) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_729);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grammar_slot_type_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrammarSlotTypeSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_730) = &input.s3_bucket_name {
        object.key("s3BucketName").string(var_730.as_str());
    }
    if let Some(var_731) = &input.s3_object_key {
        object.key("s3ObjectKey").string(var_731.as_str());
    }
    if let Some(var_732) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_732.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_path_format(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PathFormat,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_733) = &input.object_prefixes {
        let mut array_734 = object.key("objectPrefixes").start_array();
        for item_735 in var_733 {
            {
                array_734.value().string(item_735.as_str());
            }
        }
        array_734.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transcript_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TranscriptFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_736) = &input.lex_transcript_filter {
        #[allow(unused_mut)]
        let mut object_737 = object.key("lexTranscriptFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_transcript_filter(
            &mut object_737,
            var_736,
        )?;
        object_737.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_log_group_log_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchLogGroupLogDestination,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_738) = &input.cloud_watch_log_group_arn {
        object.key("cloudWatchLogGroupArn").string(var_738.as_str());
    }
    if let Some(var_739) = &input.log_prefix {
        object.key("logPrefix").string(var_739.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_bucket_log_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3BucketLogDestination,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_740) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_740.as_str());
    }
    if let Some(var_741) = &input.s3_bucket_arn {
        object.key("s3BucketArn").string(var_741.as_str());
    }
    if let Some(var_742) = &input.log_prefix {
        object.key("logPrefix").string(var_742.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Message,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_743) = &input.plain_text_message {
        #[allow(unused_mut)]
        let mut object_744 = object.key("plainTextMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_plain_text_message(
            &mut object_744,
            var_743,
        )?;
        object_744.finish();
    }
    if let Some(var_745) = &input.custom_payload {
        #[allow(unused_mut)]
        let mut object_746 = object.key("customPayload").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_payload(&mut object_746, var_745)?;
        object_746.finish();
    }
    if let Some(var_747) = &input.ssml_message {
        #[allow(unused_mut)]
        let mut object_748 = object.key("ssmlMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_ssml_message(&mut object_748, var_747)?;
        object_748.finish();
    }
    if let Some(var_749) = &input.image_response_card {
        #[allow(unused_mut)]
        let mut object_750 = object.key("imageResponseCard").start_object();
        crate::json_ser::serialize_structure_crate_model_image_response_card(
            &mut object_750,
            var_749,
        )?;
        object_750.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_value_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValueOverride,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_751) = &input.shape {
        object.key("shape").string(var_751.as_str());
    }
    if let Some(var_752) = &input.value {
        #[allow(unused_mut)]
        let mut object_753 = object.key("value").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value(&mut object_753, var_752)?;
        object_753.finish();
    }
    if let Some(var_754) = &input.values {
        let mut array_755 = object.key("values").start_array();
        for item_756 in var_754 {
            {
                #[allow(unused_mut)]
                let mut object_757 = array_755.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_value_override(
                    &mut object_757,
                    item_756,
                )?;
                object_757.finish();
            }
        }
        array_755.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_758) = &input.expression_string {
        object.key("expressionString").string(var_758.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_allowed_input_types(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AllowedInputTypes,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_759) = &input.allow_audio_input {
        object.key("allowAudioInput").boolean(*var_759);
    }
    if let Some(var_760) = &input.allow_dtmf_input {
        object.key("allowDTMFInput").boolean(*var_760);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audio_and_dtmf_input_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioAndDtmfInputSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_761) = &input.start_timeout_ms {
        object.key("startTimeoutMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_761).into()),
        );
    }
    if let Some(var_762) = &input.audio_specification {
        #[allow(unused_mut)]
        let mut object_763 = object.key("audioSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_specification(
            &mut object_763,
            var_762,
        )?;
        object_763.finish();
    }
    if let Some(var_764) = &input.dtmf_specification {
        #[allow(unused_mut)]
        let mut object_765 = object.key("dtmfSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_dtmf_specification(
            &mut object_765,
            var_764,
        )?;
        object_765.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_text_input_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TextInputSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_766) = &input.start_timeout_ms {
        object.key("startTimeoutMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_766).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lex_transcript_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LexTranscriptFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_767) = &input.date_range_filter {
        #[allow(unused_mut)]
        let mut object_768 = object.key("dateRangeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_date_range_filter(
            &mut object_768,
            var_767,
        )?;
        object_768.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_plain_text_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlainTextMessage,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_769) = &input.value {
        object.key("value").string(var_769.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_payload(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomPayload,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_770) = &input.value {
        object.key("value").string(var_770.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ssml_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SsmlMessage,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_771) = &input.value {
        object.key("value").string(var_771.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_response_card(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageResponseCard,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_772) = &input.title {
        object.key("title").string(var_772.as_str());
    }
    if let Some(var_773) = &input.subtitle {
        object.key("subtitle").string(var_773.as_str());
    }
    if let Some(var_774) = &input.image_url {
        object.key("imageUrl").string(var_774.as_str());
    }
    if let Some(var_775) = &input.buttons {
        let mut array_776 = object.key("buttons").start_array();
        for item_777 in var_775 {
            {
                #[allow(unused_mut)]
                let mut object_778 = array_776.value().start_object();
                crate::json_ser::serialize_structure_crate_model_button(&mut object_778, item_777)?;
                object_778.finish();
            }
        }
        array_776.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValue,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_779) = &input.interpreted_value {
        object.key("interpretedValue").string(var_779.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audio_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_780) = &input.max_length_ms {
        object.key("maxLengthMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_780).into()),
        );
    }
    if let Some(var_781) = &input.end_timeout_ms {
        object.key("endTimeoutMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_781).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dtmf_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DtmfSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_782) = &input.max_length {
        object.key("maxLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_782).into()),
        );
    }
    if let Some(var_783) = &input.end_timeout_ms {
        object.key("endTimeoutMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_783).into()),
        );
    }
    if let Some(var_784) = &input.deletion_character {
        object.key("deletionCharacter").string(var_784.as_str());
    }
    if let Some(var_785) = &input.end_character {
        object.key("endCharacter").string(var_785.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_range_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateRangeFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_786) = &input.start_date_time {
        object
            .key("startDateTime")
            .date_time(var_786, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_787) = &input.end_date_time {
        object
            .key("endDateTime")
            .date_time(var_787, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_button(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Button,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_788) = &input.text {
        object.key("text").string(var_788.as_str());
    }
    if let Some(var_789) = &input.value {
        object.key("value").string(var_789.as_str());
    }
    Ok(())
}
