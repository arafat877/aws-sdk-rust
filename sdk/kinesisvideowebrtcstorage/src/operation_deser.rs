// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_join_storage_session_error(response: &http::Response<bytes::Bytes>) -> std::result::Result<crate::output::JoinStorageSessionOutput, crate::error::JoinStorageSessionError> {
    let generic = crate::json_deser::parse_http_generic_error(response).map_err(crate::error::JoinStorageSessionError::unhandled)?;
    let error_code = match generic.code() {
                                Some(code) => code,
                                None => return Err(crate::error::JoinStorageSessionError::unhandled(generic))
                            };
    
                            let _error_message = generic.message().map(|msg|msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::JoinStorageSessionError { meta: generic, kind: crate::error::JoinStorageSessionErrorKind::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::JoinStorageSessionError::unhandled)?;
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "ClientLimitExceededException" => crate::error::JoinStorageSessionError { meta: generic, kind: crate::error::JoinStorageSessionErrorKind::ClientLimitExceededException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::error::client_limit_exceeded_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_client_limit_exceeded_exception_json_err(response.body().as_ref(), output).map_err(crate::error::JoinStorageSessionError::unhandled)?;
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "InvalidArgumentException" => crate::error::JoinStorageSessionError { meta: generic, kind: crate::error::JoinStorageSessionErrorKind::InvalidArgumentException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_argument_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_argument_exception_json_err(response.body().as_ref(), output).map_err(crate::error::JoinStorageSessionError::unhandled)?;
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "ResourceNotFoundException" => crate::error::JoinStorageSessionError { meta: generic, kind: crate::error::JoinStorageSessionErrorKind::ResourceNotFoundException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::JoinStorageSessionError::unhandled)?;
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::JoinStorageSessionError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_join_storage_session_response(response: &http::Response<bytes::Bytes>) -> std::result::Result<crate::output::JoinStorageSessionOutput, crate::error::JoinStorageSessionError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::join_storage_session_output::Builder::default();
        let _ = response;
        output.build()
    })
}

