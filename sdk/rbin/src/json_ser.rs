// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_rule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateRuleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("Description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.lock_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("LockConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lock_configuration(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.resource_tags {
        let mut array_5 = object.key("ResourceTags").start_array();
        for item_6 in var_4 {
             {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_tag(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.resource_type {
        object.key("ResourceType").string(var_8.as_str());
    }
    if let Some(var_9) = &input.retention_period {
        #[allow(unused_mut)]
        let mut object_10 = object.key("RetentionPeriod").start_object();
        crate::json_ser::serialize_structure_crate_model_retention_period(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.tags {
        let mut array_12 = object.key("Tags").start_array();
        for item_13 in var_11 {
             {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_rules_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListRulesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_15) = &input.lock_state {
        object.key("LockState").string(var_15.as_str());
    }
    if let Some(var_16) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_16).into()));
    }
    if let Some(var_17) = &input.next_token {
        object.key("NextToken").string(var_17.as_str());
    }
    if let Some(var_18) = &input.resource_tags {
        let mut array_19 = object.key("ResourceTags").start_array();
        for item_20 in var_18 {
             {
                #[allow(unused_mut)]
                let mut object_21 = array_19.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_tag(&mut object_21, item_20)?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    if let Some(var_22) = &input.resource_type {
        object.key("ResourceType").string(var_22.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_lock_rule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::LockRuleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_23) = &input.lock_configuration {
        #[allow(unused_mut)]
        let mut object_24 = object.key("LockConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lock_configuration(&mut object_24, var_23)?;
        object_24.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_25) = &input.tags {
        let mut array_26 = object.key("Tags").start_array();
        for item_27 in var_25 {
             {
                #[allow(unused_mut)]
                let mut object_28 = array_26.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_28, item_27)?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_rule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRuleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_29) = &input.description {
        object.key("Description").string(var_29.as_str());
    }
    if let Some(var_30) = &input.resource_tags {
        let mut array_31 = object.key("ResourceTags").start_array();
        for item_32 in var_30 {
             {
                #[allow(unused_mut)]
                let mut object_33 = array_31.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_tag(&mut object_33, item_32)?;
                object_33.finish();
            }
        }
        array_31.finish();
    }
    if let Some(var_34) = &input.resource_type {
        object.key("ResourceType").string(var_34.as_str());
    }
    if let Some(var_35) = &input.retention_period {
        #[allow(unused_mut)]
        let mut object_36 = object.key("RetentionPeriod").start_object();
        crate::json_ser::serialize_structure_crate_model_retention_period(&mut object_36, var_35)?;
        object_36.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lock_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LockConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_37) = &input.unlock_delay {
        #[allow(unused_mut)]
        let mut object_38 = object.key("UnlockDelay").start_object();
        crate::json_ser::serialize_structure_crate_model_unlock_delay(&mut object_38, var_37)?;
        object_38.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_tag(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ResourceTag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_39) = &input.resource_tag_key {
        object.key("ResourceTagKey").string(var_39.as_str());
    }
    if let Some(var_40) = &input.resource_tag_value {
        object.key("ResourceTagValue").string(var_40.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_retention_period(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RetentionPeriod) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_41) = &input.retention_period_value {
        object.key("RetentionPeriodValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_41).into()));
    }
    if let Some(var_42) = &input.retention_period_unit {
        object.key("RetentionPeriodUnit").string(var_42.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Tag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_43) = &input.key {
        object.key("Key").string(var_43.as_str());
    }
    if let Some(var_44) = &input.value {
        object.key("Value").string(var_44.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_unlock_delay(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UnlockDelay) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_45) = &input.unlock_delay_value {
        object.key("UnlockDelayValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_45).into()));
    }
    if let Some(var_46) = &input.unlock_delay_unit {
        object.key("UnlockDelayUnit").string(var_46.as_str());
    }
    Ok(())
}

