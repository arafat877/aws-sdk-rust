// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddAssociationInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.source_arn {
        object.key("SourceArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.destination_arn {
        object.key("DestinationArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.association_type {
        object.key("AssociationType").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_add_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_4) = &input.resource_arn {
        object.key("ResourceArn").string(var_4.as_str());
    }
    if let Some(var_5) = &input.tags {
        let mut array_6 = object.key("Tags").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_9) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.trial_name {
        object.key("TrialName").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_describe_model_package_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDescribeModelPackageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_11) = &input.model_package_arn_list {
        let mut array_12 = object.key("ModelPackageArnList").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateActionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_14) = &input.action_name {
        object.key("ActionName").string(var_14.as_str());
    }
    if let Some(var_15) = &input.source {
        #[allow(unused_mut)]
        let mut object_16 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_action_source(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.action_type {
        object.key("ActionType").string(var_17.as_str());
    }
    if let Some(var_18) = &input.description {
        object.key("Description").string(var_18.as_str());
    }
    if let Some(var_19) = &input.status {
        object.key("Status").string(var_19.as_str());
    }
    if let Some(var_20) = &input.properties {
        #[allow(unused_mut)]
        let mut object_21 = object.key("Properties").start_object();
        for (key_22, value_23) in var_20 {
            {
                object_21.key(key_22.as_str()).string(value_23.as_str());
            }
        }
        object_21.finish();
    }
    if let Some(var_24) = &input.metadata_properties {
        #[allow(unused_mut)]
        let mut object_25 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_25,
            var_24,
        )?;
        object_25.finish();
    }
    if let Some(var_26) = &input.tags {
        let mut array_27 = object.key("Tags").start_array();
        for item_28 in var_26 {
            {
                #[allow(unused_mut)]
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_algorithm_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAlgorithmInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_30) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_30.as_str());
    }
    if let Some(var_31) = &input.algorithm_description {
        object.key("AlgorithmDescription").string(var_31.as_str());
    }
    if let Some(var_32) = &input.training_specification {
        #[allow(unused_mut)]
        let mut object_33 = object.key("TrainingSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_training_specification(
            &mut object_33,
            var_32,
        )?;
        object_33.finish();
    }
    if let Some(var_34) = &input.inference_specification {
        #[allow(unused_mut)]
        let mut object_35 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_inference_specification(
            &mut object_35,
            var_34,
        )?;
        object_35.finish();
    }
    if let Some(var_36) = &input.validation_specification {
        #[allow(unused_mut)]
        let mut object_37 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_algorithm_validation_specification(
            &mut object_37,
            var_36,
        )?;
        object_37.finish();
    }
    if input.certify_for_marketplace {
        object
            .key("CertifyForMarketplace")
            .boolean(input.certify_for_marketplace);
    }
    if let Some(var_38) = &input.tags {
        let mut array_39 = object.key("Tags").start_array();
        for item_40 in var_38 {
            {
                #[allow(unused_mut)]
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_41, item_40)?;
                object_41.finish();
            }
        }
        array_39.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_app_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_42) = &input.domain_id {
        object.key("DomainId").string(var_42.as_str());
    }
    if let Some(var_43) = &input.user_profile_name {
        object.key("UserProfileName").string(var_43.as_str());
    }
    if let Some(var_44) = &input.app_type {
        object.key("AppType").string(var_44.as_str());
    }
    if let Some(var_45) = &input.app_name {
        object.key("AppName").string(var_45.as_str());
    }
    if let Some(var_46) = &input.tags {
        let mut array_47 = object.key("Tags").start_array();
        for item_48 in var_46 {
            {
                #[allow(unused_mut)]
                let mut object_49 = array_47.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_49, item_48)?;
                object_49.finish();
            }
        }
        array_47.finish();
    }
    if let Some(var_50) = &input.resource_spec {
        #[allow(unused_mut)]
        let mut object_51 = object.key("ResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_51, var_50)?;
        object_51.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_app_image_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppImageConfigInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_52) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_52.as_str());
    }
    if let Some(var_53) = &input.tags {
        let mut array_54 = object.key("Tags").start_array();
        for item_55 in var_53 {
            {
                #[allow(unused_mut)]
                let mut object_56 = array_54.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_56, item_55)?;
                object_56.finish();
            }
        }
        array_54.finish();
    }
    if let Some(var_57) = &input.kernel_gateway_image_config {
        #[allow(unused_mut)]
        let mut object_58 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kernel_gateway_image_config(
            &mut object_58,
            var_57,
        )?;
        object_58.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateArtifactInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_59) = &input.artifact_name {
        object.key("ArtifactName").string(var_59.as_str());
    }
    if let Some(var_60) = &input.source {
        #[allow(unused_mut)]
        let mut object_61 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_artifact_source(&mut object_61, var_60)?;
        object_61.finish();
    }
    if let Some(var_62) = &input.artifact_type {
        object.key("ArtifactType").string(var_62.as_str());
    }
    if let Some(var_63) = &input.properties {
        #[allow(unused_mut)]
        let mut object_64 = object.key("Properties").start_object();
        for (key_65, value_66) in var_63 {
            {
                object_64.key(key_65.as_str()).string(value_66.as_str());
            }
        }
        object_64.finish();
    }
    if let Some(var_67) = &input.metadata_properties {
        #[allow(unused_mut)]
        let mut object_68 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_68,
            var_67,
        )?;
        object_68.finish();
    }
    if let Some(var_69) = &input.tags {
        let mut array_70 = object.key("Tags").start_array();
        for item_71 in var_69 {
            {
                #[allow(unused_mut)]
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_72, item_71)?;
                object_72.finish();
            }
        }
        array_70.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_auto_ml_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAutoMlJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_73) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_73.as_str());
    }
    if let Some(var_74) = &input.input_data_config {
        let mut array_75 = object.key("InputDataConfig").start_array();
        for item_76 in var_74 {
            {
                #[allow(unused_mut)]
                let mut object_77 = array_75.value().start_object();
                crate::json_ser::serialize_structure_crate_model_auto_ml_channel(
                    &mut object_77,
                    item_76,
                )?;
                object_77.finish();
            }
        }
        array_75.finish();
    }
    if let Some(var_78) = &input.output_data_config {
        #[allow(unused_mut)]
        let mut object_79 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_output_data_config(
            &mut object_79,
            var_78,
        )?;
        object_79.finish();
    }
    if let Some(var_80) = &input.problem_type {
        object.key("ProblemType").string(var_80.as_str());
    }
    if let Some(var_81) = &input.auto_ml_job_objective {
        #[allow(unused_mut)]
        let mut object_82 = object.key("AutoMLJobObjective").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_job_objective(
            &mut object_82,
            var_81,
        )?;
        object_82.finish();
    }
    if let Some(var_83) = &input.auto_ml_job_config {
        #[allow(unused_mut)]
        let mut object_84 = object.key("AutoMLJobConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_job_config(
            &mut object_84,
            var_83,
        )?;
        object_84.finish();
    }
    if let Some(var_85) = &input.role_arn {
        object.key("RoleArn").string(var_85.as_str());
    }
    if input.generate_candidate_definitions_only {
        object
            .key("GenerateCandidateDefinitionsOnly")
            .boolean(input.generate_candidate_definitions_only);
    }
    if let Some(var_86) = &input.tags {
        let mut array_87 = object.key("Tags").start_array();
        for item_88 in var_86 {
            {
                #[allow(unused_mut)]
                let mut object_89 = array_87.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_89, item_88)?;
                object_89.finish();
            }
        }
        array_87.finish();
    }
    if let Some(var_90) = &input.model_deploy_config {
        #[allow(unused_mut)]
        let mut object_91 = object.key("ModelDeployConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_deploy_config(
            &mut object_91,
            var_90,
        )?;
        object_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_code_repository_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCodeRepositoryInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_92) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_92.as_str());
    }
    if let Some(var_93) = &input.git_config {
        #[allow(unused_mut)]
        let mut object_94 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_git_config(&mut object_94, var_93)?;
        object_94.finish();
    }
    if let Some(var_95) = &input.tags {
        let mut array_96 = object.key("Tags").start_array();
        for item_97 in var_95 {
            {
                #[allow(unused_mut)]
                let mut object_98 = array_96.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_98, item_97)?;
                object_98.finish();
            }
        }
        array_96.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_compilation_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCompilationJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_99) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_99.as_str());
    }
    if let Some(var_100) = &input.role_arn {
        object.key("RoleArn").string(var_100.as_str());
    }
    if let Some(var_101) = &input.model_package_version_arn {
        object
            .key("ModelPackageVersionArn")
            .string(var_101.as_str());
    }
    if let Some(var_102) = &input.input_config {
        #[allow(unused_mut)]
        let mut object_103 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_input_config(&mut object_103, var_102)?;
        object_103.finish();
    }
    if let Some(var_104) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_105 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_config(&mut object_105, var_104)?;
        object_105.finish();
    }
    if let Some(var_106) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_107 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_neo_vpc_config(&mut object_107, var_106)?;
        object_107.finish();
    }
    if let Some(var_108) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_109 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(
            &mut object_109,
            var_108,
        )?;
        object_109.finish();
    }
    if let Some(var_110) = &input.tags {
        let mut array_111 = object.key("Tags").start_array();
        for item_112 in var_110 {
            {
                #[allow(unused_mut)]
                let mut object_113 = array_111.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_113, item_112)?;
                object_113.finish();
            }
        }
        array_111.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_context_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContextInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_114) = &input.context_name {
        object.key("ContextName").string(var_114.as_str());
    }
    if let Some(var_115) = &input.source {
        #[allow(unused_mut)]
        let mut object_116 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_context_source(&mut object_116, var_115)?;
        object_116.finish();
    }
    if let Some(var_117) = &input.context_type {
        object.key("ContextType").string(var_117.as_str());
    }
    if let Some(var_118) = &input.description {
        object.key("Description").string(var_118.as_str());
    }
    if let Some(var_119) = &input.properties {
        #[allow(unused_mut)]
        let mut object_120 = object.key("Properties").start_object();
        for (key_121, value_122) in var_119 {
            {
                object_120.key(key_121.as_str()).string(value_122.as_str());
            }
        }
        object_120.finish();
    }
    if let Some(var_123) = &input.tags {
        let mut array_124 = object.key("Tags").start_array();
        for item_125 in var_123 {
            {
                #[allow(unused_mut)]
                let mut object_126 = array_124.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_126, item_125)?;
                object_126.finish();
            }
        }
        array_124.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_127) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_127.as_str());
    }
    if let Some(var_128) = &input.data_quality_baseline_config {
        #[allow(unused_mut)]
        let mut object_129 = object.key("DataQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_baseline_config(
            &mut object_129,
            var_128,
        )?;
        object_129.finish();
    }
    if let Some(var_130) = &input.data_quality_app_specification {
        #[allow(unused_mut)]
        let mut object_131 = object.key("DataQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_app_specification(
            &mut object_131,
            var_130,
        )?;
        object_131.finish();
    }
    if let Some(var_132) = &input.data_quality_job_input {
        #[allow(unused_mut)]
        let mut object_133 = object.key("DataQualityJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_job_input(
            &mut object_133,
            var_132,
        )?;
        object_133.finish();
    }
    if let Some(var_134) = &input.data_quality_job_output_config {
        #[allow(unused_mut)]
        let mut object_135 = object.key("DataQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_135,
            var_134,
        )?;
        object_135.finish();
    }
    if let Some(var_136) = &input.job_resources {
        #[allow(unused_mut)]
        let mut object_137 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_137,
            var_136,
        )?;
        object_137.finish();
    }
    if let Some(var_138) = &input.network_config {
        #[allow(unused_mut)]
        let mut object_139 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(
            &mut object_139,
            var_138,
        )?;
        object_139.finish();
    }
    if let Some(var_140) = &input.role_arn {
        object.key("RoleArn").string(var_140.as_str());
    }
    if let Some(var_141) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_142 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_142,
            var_141,
        )?;
        object_142.finish();
    }
    if let Some(var_143) = &input.tags {
        let mut array_144 = object.key("Tags").start_array();
        for item_145 in var_143 {
            {
                #[allow(unused_mut)]
                let mut object_146 = array_144.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_146, item_145)?;
                object_146.finish();
            }
        }
        array_144.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_device_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDeviceFleetInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_147) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_147.as_str());
    }
    if let Some(var_148) = &input.role_arn {
        object.key("RoleArn").string(var_148.as_str());
    }
    if let Some(var_149) = &input.description {
        object.key("Description").string(var_149.as_str());
    }
    if let Some(var_150) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_151 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_output_config(
            &mut object_151,
            var_150,
        )?;
        object_151.finish();
    }
    if let Some(var_152) = &input.tags {
        let mut array_153 = object.key("Tags").start_array();
        for item_154 in var_152 {
            {
                #[allow(unused_mut)]
                let mut object_155 = array_153.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_155, item_154)?;
                object_155.finish();
            }
        }
        array_153.finish();
    }
    if let Some(var_156) = &input.enable_iot_role_alias {
        object.key("EnableIotRoleAlias").boolean(*var_156);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_157) = &input.domain_name {
        object.key("DomainName").string(var_157.as_str());
    }
    if let Some(var_158) = &input.auth_mode {
        object.key("AuthMode").string(var_158.as_str());
    }
    if let Some(var_159) = &input.default_user_settings {
        #[allow(unused_mut)]
        let mut object_160 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_160, var_159)?;
        object_160.finish();
    }
    if let Some(var_161) = &input.subnet_ids {
        let mut array_162 = object.key("SubnetIds").start_array();
        for item_163 in var_161 {
            {
                array_162.value().string(item_163.as_str());
            }
        }
        array_162.finish();
    }
    if let Some(var_164) = &input.vpc_id {
        object.key("VpcId").string(var_164.as_str());
    }
    if let Some(var_165) = &input.tags {
        let mut array_166 = object.key("Tags").start_array();
        for item_167 in var_165 {
            {
                #[allow(unused_mut)]
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_168, item_167)?;
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.app_network_access_type {
        object.key("AppNetworkAccessType").string(var_169.as_str());
    }
    if let Some(var_170) = &input.home_efs_file_system_kms_key_id {
        object
            .key("HomeEfsFileSystemKmsKeyId")
            .string(var_170.as_str());
    }
    if let Some(var_171) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_171.as_str());
    }
    if let Some(var_172) = &input.app_security_group_management {
        object
            .key("AppSecurityGroupManagement")
            .string(var_172.as_str());
    }
    if let Some(var_173) = &input.domain_settings {
        #[allow(unused_mut)]
        let mut object_174 = object.key("DomainSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_settings(&mut object_174, var_173)?;
        object_174.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_edge_deployment_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEdgeDeploymentPlanInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_175) = &input.edge_deployment_plan_name {
        object
            .key("EdgeDeploymentPlanName")
            .string(var_175.as_str());
    }
    if let Some(var_176) = &input.model_configs {
        let mut array_177 = object.key("ModelConfigs").start_array();
        for item_178 in var_176 {
            {
                #[allow(unused_mut)]
                let mut object_179 = array_177.value().start_object();
                crate::json_ser::serialize_structure_crate_model_edge_deployment_model_config(
                    &mut object_179,
                    item_178,
                )?;
                object_179.finish();
            }
        }
        array_177.finish();
    }
    if let Some(var_180) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_180.as_str());
    }
    if let Some(var_181) = &input.stages {
        let mut array_182 = object.key("Stages").start_array();
        for item_183 in var_181 {
            {
                #[allow(unused_mut)]
                let mut object_184 = array_182.value().start_object();
                crate::json_ser::serialize_structure_crate_model_deployment_stage(
                    &mut object_184,
                    item_183,
                )?;
                object_184.finish();
            }
        }
        array_182.finish();
    }
    if let Some(var_185) = &input.tags {
        let mut array_186 = object.key("Tags").start_array();
        for item_187 in var_185 {
            {
                #[allow(unused_mut)]
                let mut object_188 = array_186.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_188, item_187)?;
                object_188.finish();
            }
        }
        array_186.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_edge_deployment_stage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEdgeDeploymentStageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_189) = &input.edge_deployment_plan_name {
        object
            .key("EdgeDeploymentPlanName")
            .string(var_189.as_str());
    }
    if let Some(var_190) = &input.stages {
        let mut array_191 = object.key("Stages").start_array();
        for item_192 in var_190 {
            {
                #[allow(unused_mut)]
                let mut object_193 = array_191.value().start_object();
                crate::json_ser::serialize_structure_crate_model_deployment_stage(
                    &mut object_193,
                    item_192,
                )?;
                object_193.finish();
            }
        }
        array_191.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_edge_packaging_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEdgePackagingJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_194) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_194.as_str());
    }
    if let Some(var_195) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_195.as_str());
    }
    if let Some(var_196) = &input.model_name {
        object.key("ModelName").string(var_196.as_str());
    }
    if let Some(var_197) = &input.model_version {
        object.key("ModelVersion").string(var_197.as_str());
    }
    if let Some(var_198) = &input.role_arn {
        object.key("RoleArn").string(var_198.as_str());
    }
    if let Some(var_199) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_200 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_output_config(
            &mut object_200,
            var_199,
        )?;
        object_200.finish();
    }
    if let Some(var_201) = &input.resource_key {
        object.key("ResourceKey").string(var_201.as_str());
    }
    if let Some(var_202) = &input.tags {
        let mut array_203 = object.key("Tags").start_array();
        for item_204 in var_202 {
            {
                #[allow(unused_mut)]
                let mut object_205 = array_203.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_205, item_204)?;
                object_205.finish();
            }
        }
        array_203.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_206) = &input.endpoint_name {
        object.key("EndpointName").string(var_206.as_str());
    }
    if let Some(var_207) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_207.as_str());
    }
    if let Some(var_208) = &input.deployment_config {
        #[allow(unused_mut)]
        let mut object_209 = object.key("DeploymentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_deployment_config(
            &mut object_209,
            var_208,
        )?;
        object_209.finish();
    }
    if let Some(var_210) = &input.tags {
        let mut array_211 = object.key("Tags").start_array();
        for item_212 in var_210 {
            {
                #[allow(unused_mut)]
                let mut object_213 = array_211.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_213, item_212)?;
                object_213.finish();
            }
        }
        array_211.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_endpoint_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointConfigInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_214) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_214.as_str());
    }
    if let Some(var_215) = &input.production_variants {
        let mut array_216 = object.key("ProductionVariants").start_array();
        for item_217 in var_215 {
            {
                #[allow(unused_mut)]
                let mut object_218 = array_216.value().start_object();
                crate::json_ser::serialize_structure_crate_model_production_variant(
                    &mut object_218,
                    item_217,
                )?;
                object_218.finish();
            }
        }
        array_216.finish();
    }
    if let Some(var_219) = &input.data_capture_config {
        #[allow(unused_mut)]
        let mut object_220 = object.key("DataCaptureConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_data_capture_config(
            &mut object_220,
            var_219,
        )?;
        object_220.finish();
    }
    if let Some(var_221) = &input.tags {
        let mut array_222 = object.key("Tags").start_array();
        for item_223 in var_221 {
            {
                #[allow(unused_mut)]
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_224, item_223)?;
                object_224.finish();
            }
        }
        array_222.finish();
    }
    if let Some(var_225) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_225.as_str());
    }
    if let Some(var_226) = &input.async_inference_config {
        #[allow(unused_mut)]
        let mut object_227 = object.key("AsyncInferenceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_config(
            &mut object_227,
            var_226,
        )?;
        object_227.finish();
    }
    if let Some(var_228) = &input.explainer_config {
        #[allow(unused_mut)]
        let mut object_229 = object.key("ExplainerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_explainer_config(
            &mut object_229,
            var_228,
        )?;
        object_229.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_experiment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExperimentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_230) = &input.experiment_name {
        object.key("ExperimentName").string(var_230.as_str());
    }
    if let Some(var_231) = &input.display_name {
        object.key("DisplayName").string(var_231.as_str());
    }
    if let Some(var_232) = &input.description {
        object.key("Description").string(var_232.as_str());
    }
    if let Some(var_233) = &input.tags {
        let mut array_234 = object.key("Tags").start_array();
        for item_235 in var_233 {
            {
                #[allow(unused_mut)]
                let mut object_236 = array_234.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_236, item_235)?;
                object_236.finish();
            }
        }
        array_234.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_feature_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFeatureGroupInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_237) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_237.as_str());
    }
    if let Some(var_238) = &input.record_identifier_feature_name {
        object
            .key("RecordIdentifierFeatureName")
            .string(var_238.as_str());
    }
    if let Some(var_239) = &input.event_time_feature_name {
        object.key("EventTimeFeatureName").string(var_239.as_str());
    }
    if let Some(var_240) = &input.feature_definitions {
        let mut array_241 = object.key("FeatureDefinitions").start_array();
        for item_242 in var_240 {
            {
                #[allow(unused_mut)]
                let mut object_243 = array_241.value().start_object();
                crate::json_ser::serialize_structure_crate_model_feature_definition(
                    &mut object_243,
                    item_242,
                )?;
                object_243.finish();
            }
        }
        array_241.finish();
    }
    if let Some(var_244) = &input.online_store_config {
        #[allow(unused_mut)]
        let mut object_245 = object.key("OnlineStoreConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_online_store_config(
            &mut object_245,
            var_244,
        )?;
        object_245.finish();
    }
    if let Some(var_246) = &input.offline_store_config {
        #[allow(unused_mut)]
        let mut object_247 = object.key("OfflineStoreConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_offline_store_config(
            &mut object_247,
            var_246,
        )?;
        object_247.finish();
    }
    if let Some(var_248) = &input.role_arn {
        object.key("RoleArn").string(var_248.as_str());
    }
    if let Some(var_249) = &input.description {
        object.key("Description").string(var_249.as_str());
    }
    if let Some(var_250) = &input.tags {
        let mut array_251 = object.key("Tags").start_array();
        for item_252 in var_250 {
            {
                #[allow(unused_mut)]
                let mut object_253 = array_251.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_253, item_252)?;
                object_253.finish();
            }
        }
        array_251.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_flow_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFlowDefinitionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_254) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_254.as_str());
    }
    if let Some(var_255) = &input.human_loop_request_source {
        #[allow(unused_mut)]
        let mut object_256 = object.key("HumanLoopRequestSource").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_request_source(
            &mut object_256,
            var_255,
        )?;
        object_256.finish();
    }
    if let Some(var_257) = &input.human_loop_activation_config {
        #[allow(unused_mut)]
        let mut object_258 = object.key("HumanLoopActivationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_activation_config(
            &mut object_258,
            var_257,
        )?;
        object_258.finish();
    }
    if let Some(var_259) = &input.human_loop_config {
        #[allow(unused_mut)]
        let mut object_260 = object.key("HumanLoopConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_config(
            &mut object_260,
            var_259,
        )?;
        object_260.finish();
    }
    if let Some(var_261) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_262 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_flow_definition_output_config(
            &mut object_262,
            var_261,
        )?;
        object_262.finish();
    }
    if let Some(var_263) = &input.role_arn {
        object.key("RoleArn").string(var_263.as_str());
    }
    if let Some(var_264) = &input.tags {
        let mut array_265 = object.key("Tags").start_array();
        for item_266 in var_264 {
            {
                #[allow(unused_mut)]
                let mut object_267 = array_265.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_267, item_266)?;
                object_267.finish();
            }
        }
        array_265.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_human_task_ui_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHumanTaskUiInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_268) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_268.as_str());
    }
    if let Some(var_269) = &input.ui_template {
        #[allow(unused_mut)]
        let mut object_270 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_template(&mut object_270, var_269)?;
        object_270.finish();
    }
    if let Some(var_271) = &input.tags {
        let mut array_272 = object.key("Tags").start_array();
        for item_273 in var_271 {
            {
                #[allow(unused_mut)]
                let mut object_274 = array_272.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_274, item_273)?;
                object_274.finish();
            }
        }
        array_272.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_hyper_parameter_tuning_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHyperParameterTuningJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_275) = &input.hyper_parameter_tuning_job_name {
        object
            .key("HyperParameterTuningJobName")
            .string(var_275.as_str());
    }
    if let Some(var_276) = &input.hyper_parameter_tuning_job_config {
        #[allow(unused_mut)]
        let mut object_277 = object.key("HyperParameterTuningJobConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_config(
            &mut object_277,
            var_276,
        )?;
        object_277.finish();
    }
    if let Some(var_278) = &input.training_job_definition {
        #[allow(unused_mut)]
        let mut object_279 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_training_job_definition(
            &mut object_279,
            var_278,
        )?;
        object_279.finish();
    }
    if let Some(var_280) = &input.training_job_definitions {
        let mut array_281 = object.key("TrainingJobDefinitions").start_array();
        for item_282 in var_280 {
            {
                #[allow(unused_mut)]
                let mut object_283 = array_281.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hyper_parameter_training_job_definition(&mut object_283, item_282)?;
                object_283.finish();
            }
        }
        array_281.finish();
    }
    if let Some(var_284) = &input.warm_start_config {
        #[allow(unused_mut)]
        let mut object_285 = object.key("WarmStartConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_warm_start_config(&mut object_285, var_284)?;
        object_285.finish();
    }
    if let Some(var_286) = &input.tags {
        let mut array_287 = object.key("Tags").start_array();
        for item_288 in var_286 {
            {
                #[allow(unused_mut)]
                let mut object_289 = array_287.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_289, item_288)?;
                object_289.finish();
            }
        }
        array_287.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_290) = &input.description {
        object.key("Description").string(var_290.as_str());
    }
    if let Some(var_291) = &input.display_name {
        object.key("DisplayName").string(var_291.as_str());
    }
    if let Some(var_292) = &input.image_name {
        object.key("ImageName").string(var_292.as_str());
    }
    if let Some(var_293) = &input.role_arn {
        object.key("RoleArn").string(var_293.as_str());
    }
    if let Some(var_294) = &input.tags {
        let mut array_295 = object.key("Tags").start_array();
        for item_296 in var_294 {
            {
                #[allow(unused_mut)]
                let mut object_297 = array_295.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_297, item_296)?;
                object_297.finish();
            }
        }
        array_295.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_image_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageVersionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_298) = &input.base_image {
        object.key("BaseImage").string(var_298.as_str());
    }
    if let Some(var_299) = &input.client_token {
        object.key("ClientToken").string(var_299.as_str());
    }
    if let Some(var_300) = &input.image_name {
        object.key("ImageName").string(var_300.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_inference_recommendations_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInferenceRecommendationsJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_301) = &input.job_name {
        object.key("JobName").string(var_301.as_str());
    }
    if let Some(var_302) = &input.job_type {
        object.key("JobType").string(var_302.as_str());
    }
    if let Some(var_303) = &input.role_arn {
        object.key("RoleArn").string(var_303.as_str());
    }
    if let Some(var_304) = &input.input_config {
        #[allow(unused_mut)]
        let mut object_305 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_input_config(
            &mut object_305,
            var_304,
        )?;
        object_305.finish();
    }
    if let Some(var_306) = &input.job_description {
        object.key("JobDescription").string(var_306.as_str());
    }
    if let Some(var_307) = &input.stopping_conditions {
        #[allow(unused_mut)]
        let mut object_308 = object.key("StoppingConditions").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_stopping_conditions(
            &mut object_308,
            var_307,
        )?;
        object_308.finish();
    }
    if let Some(var_309) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_310 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_output_config(
            &mut object_310,
            var_309,
        )?;
        object_310.finish();
    }
    if let Some(var_311) = &input.tags {
        let mut array_312 = object.key("Tags").start_array();
        for item_313 in var_311 {
            {
                #[allow(unused_mut)]
                let mut object_314 = array_312.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_314, item_313)?;
                object_314.finish();
            }
        }
        array_312.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_labeling_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLabelingJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_315) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_315.as_str());
    }
    if let Some(var_316) = &input.label_attribute_name {
        object.key("LabelAttributeName").string(var_316.as_str());
    }
    if let Some(var_317) = &input.input_config {
        #[allow(unused_mut)]
        let mut object_318 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_input_config(
            &mut object_318,
            var_317,
        )?;
        object_318.finish();
    }
    if let Some(var_319) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_320 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_output_config(
            &mut object_320,
            var_319,
        )?;
        object_320.finish();
    }
    if let Some(var_321) = &input.role_arn {
        object.key("RoleArn").string(var_321.as_str());
    }
    if let Some(var_322) = &input.label_category_config_s3_uri {
        object
            .key("LabelCategoryConfigS3Uri")
            .string(var_322.as_str());
    }
    if let Some(var_323) = &input.stopping_conditions {
        #[allow(unused_mut)]
        let mut object_324 = object.key("StoppingConditions").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_stopping_conditions(
            &mut object_324,
            var_323,
        )?;
        object_324.finish();
    }
    if let Some(var_325) = &input.labeling_job_algorithms_config {
        #[allow(unused_mut)]
        let mut object_326 = object.key("LabelingJobAlgorithmsConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_algorithms_config(
            &mut object_326,
            var_325,
        )?;
        object_326.finish();
    }
    if let Some(var_327) = &input.human_task_config {
        #[allow(unused_mut)]
        let mut object_328 = object.key("HumanTaskConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_task_config(
            &mut object_328,
            var_327,
        )?;
        object_328.finish();
    }
    if let Some(var_329) = &input.tags {
        let mut array_330 = object.key("Tags").start_array();
        for item_331 in var_329 {
            {
                #[allow(unused_mut)]
                let mut object_332 = array_330.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_332, item_331)?;
                object_332.finish();
            }
        }
        array_330.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_333) = &input.model_name {
        object.key("ModelName").string(var_333.as_str());
    }
    if let Some(var_334) = &input.primary_container {
        #[allow(unused_mut)]
        let mut object_335 = object.key("PrimaryContainer").start_object();
        crate::json_ser::serialize_structure_crate_model_container_definition(
            &mut object_335,
            var_334,
        )?;
        object_335.finish();
    }
    if let Some(var_336) = &input.containers {
        let mut array_337 = object.key("Containers").start_array();
        for item_338 in var_336 {
            {
                #[allow(unused_mut)]
                let mut object_339 = array_337.value().start_object();
                crate::json_ser::serialize_structure_crate_model_container_definition(
                    &mut object_339,
                    item_338,
                )?;
                object_339.finish();
            }
        }
        array_337.finish();
    }
    if let Some(var_340) = &input.inference_execution_config {
        #[allow(unused_mut)]
        let mut object_341 = object.key("InferenceExecutionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_inference_execution_config(
            &mut object_341,
            var_340,
        )?;
        object_341.finish();
    }
    if let Some(var_342) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_342.as_str());
    }
    if let Some(var_343) = &input.tags {
        let mut array_344 = object.key("Tags").start_array();
        for item_345 in var_343 {
            {
                #[allow(unused_mut)]
                let mut object_346 = array_344.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_346, item_345)?;
                object_346.finish();
            }
        }
        array_344.finish();
    }
    if let Some(var_347) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_348 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_348, var_347)?;
        object_348.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_bias_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelBiasJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_349) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_349.as_str());
    }
    if let Some(var_350) = &input.model_bias_baseline_config {
        #[allow(unused_mut)]
        let mut object_351 = object.key("ModelBiasBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_bias_baseline_config(
            &mut object_351,
            var_350,
        )?;
        object_351.finish();
    }
    if let Some(var_352) = &input.model_bias_app_specification {
        #[allow(unused_mut)]
        let mut object_353 = object.key("ModelBiasAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_model_bias_app_specification(
            &mut object_353,
            var_352,
        )?;
        object_353.finish();
    }
    if let Some(var_354) = &input.model_bias_job_input {
        #[allow(unused_mut)]
        let mut object_355 = object.key("ModelBiasJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_bias_job_input(
            &mut object_355,
            var_354,
        )?;
        object_355.finish();
    }
    if let Some(var_356) = &input.model_bias_job_output_config {
        #[allow(unused_mut)]
        let mut object_357 = object.key("ModelBiasJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_357,
            var_356,
        )?;
        object_357.finish();
    }
    if let Some(var_358) = &input.job_resources {
        #[allow(unused_mut)]
        let mut object_359 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_359,
            var_358,
        )?;
        object_359.finish();
    }
    if let Some(var_360) = &input.network_config {
        #[allow(unused_mut)]
        let mut object_361 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(
            &mut object_361,
            var_360,
        )?;
        object_361.finish();
    }
    if let Some(var_362) = &input.role_arn {
        object.key("RoleArn").string(var_362.as_str());
    }
    if let Some(var_363) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_364 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_364,
            var_363,
        )?;
        object_364.finish();
    }
    if let Some(var_365) = &input.tags {
        let mut array_366 = object.key("Tags").start_array();
        for item_367 in var_365 {
            {
                #[allow(unused_mut)]
                let mut object_368 = array_366.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_368, item_367)?;
                object_368.finish();
            }
        }
        array_366.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_explainability_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelExplainabilityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_369) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_369.as_str());
    }
    if let Some(var_370) = &input.model_explainability_baseline_config {
        #[allow(unused_mut)]
        let mut object_371 = object
            .key("ModelExplainabilityBaselineConfig")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_model_explainability_baseline_config(
            &mut object_371,
            var_370,
        )?;
        object_371.finish();
    }
    if let Some(var_372) = &input.model_explainability_app_specification {
        #[allow(unused_mut)]
        let mut object_373 = object
            .key("ModelExplainabilityAppSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_model_explainability_app_specification(
            &mut object_373,
            var_372,
        )?;
        object_373.finish();
    }
    if let Some(var_374) = &input.model_explainability_job_input {
        #[allow(unused_mut)]
        let mut object_375 = object.key("ModelExplainabilityJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_explainability_job_input(
            &mut object_375,
            var_374,
        )?;
        object_375.finish();
    }
    if let Some(var_376) = &input.model_explainability_job_output_config {
        #[allow(unused_mut)]
        let mut object_377 = object
            .key("ModelExplainabilityJobOutputConfig")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_377,
            var_376,
        )?;
        object_377.finish();
    }
    if let Some(var_378) = &input.job_resources {
        #[allow(unused_mut)]
        let mut object_379 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_379,
            var_378,
        )?;
        object_379.finish();
    }
    if let Some(var_380) = &input.network_config {
        #[allow(unused_mut)]
        let mut object_381 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(
            &mut object_381,
            var_380,
        )?;
        object_381.finish();
    }
    if let Some(var_382) = &input.role_arn {
        object.key("RoleArn").string(var_382.as_str());
    }
    if let Some(var_383) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_384 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_384,
            var_383,
        )?;
        object_384.finish();
    }
    if let Some(var_385) = &input.tags {
        let mut array_386 = object.key("Tags").start_array();
        for item_387 in var_385 {
            {
                #[allow(unused_mut)]
                let mut object_388 = array_386.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_388, item_387)?;
                object_388.finish();
            }
        }
        array_386.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_package_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelPackageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_389) = &input.model_package_name {
        object.key("ModelPackageName").string(var_389.as_str());
    }
    if let Some(var_390) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_390.as_str());
    }
    if let Some(var_391) = &input.model_package_description {
        object
            .key("ModelPackageDescription")
            .string(var_391.as_str());
    }
    if let Some(var_392) = &input.inference_specification {
        #[allow(unused_mut)]
        let mut object_393 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_inference_specification(
            &mut object_393,
            var_392,
        )?;
        object_393.finish();
    }
    if let Some(var_394) = &input.validation_specification {
        #[allow(unused_mut)]
        let mut object_395 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_model_package_validation_specification(
            &mut object_395,
            var_394,
        )?;
        object_395.finish();
    }
    if let Some(var_396) = &input.source_algorithm_specification {
        #[allow(unused_mut)]
        let mut object_397 = object.key("SourceAlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_source_algorithm_specification(
            &mut object_397,
            var_396,
        )?;
        object_397.finish();
    }
    if input.certify_for_marketplace {
        object
            .key("CertifyForMarketplace")
            .boolean(input.certify_for_marketplace);
    }
    if let Some(var_398) = &input.tags {
        let mut array_399 = object.key("Tags").start_array();
        for item_400 in var_398 {
            {
                #[allow(unused_mut)]
                let mut object_401 = array_399.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_401, item_400)?;
                object_401.finish();
            }
        }
        array_399.finish();
    }
    if let Some(var_402) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_402.as_str());
    }
    if let Some(var_403) = &input.metadata_properties {
        #[allow(unused_mut)]
        let mut object_404 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_404,
            var_403,
        )?;
        object_404.finish();
    }
    if let Some(var_405) = &input.model_metrics {
        #[allow(unused_mut)]
        let mut object_406 = object.key("ModelMetrics").start_object();
        crate::json_ser::serialize_structure_crate_model_model_metrics(&mut object_406, var_405)?;
        object_406.finish();
    }
    if let Some(var_407) = &input.client_token {
        object.key("ClientToken").string(var_407.as_str());
    }
    if let Some(var_408) = &input.customer_metadata_properties {
        #[allow(unused_mut)]
        let mut object_409 = object.key("CustomerMetadataProperties").start_object();
        for (key_410, value_411) in var_408 {
            {
                object_409.key(key_410.as_str()).string(value_411.as_str());
            }
        }
        object_409.finish();
    }
    if let Some(var_412) = &input.drift_check_baselines {
        #[allow(unused_mut)]
        let mut object_413 = object.key("DriftCheckBaselines").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_baselines(
            &mut object_413,
            var_412,
        )?;
        object_413.finish();
    }
    if let Some(var_414) = &input.domain {
        object.key("Domain").string(var_414.as_str());
    }
    if let Some(var_415) = &input.task {
        object.key("Task").string(var_415.as_str());
    }
    if let Some(var_416) = &input.sample_payload_url {
        object.key("SamplePayloadUrl").string(var_416.as_str());
    }
    if let Some(var_417) = &input.additional_inference_specifications {
        let mut array_418 = object
            .key("AdditionalInferenceSpecifications")
            .start_array();
        for item_419 in var_417 {
            {
                #[allow(unused_mut)]
                let mut object_420 = array_418.value().start_object();
                crate::json_ser::serialize_structure_crate_model_additional_inference_specification_definition(&mut object_420, item_419)?;
                object_420.finish();
            }
        }
        array_418.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_package_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelPackageGroupInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_421) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_421.as_str());
    }
    if let Some(var_422) = &input.model_package_group_description {
        object
            .key("ModelPackageGroupDescription")
            .string(var_422.as_str());
    }
    if let Some(var_423) = &input.tags {
        let mut array_424 = object.key("Tags").start_array();
        for item_425 in var_423 {
            {
                #[allow(unused_mut)]
                let mut object_426 = array_424.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_426, item_425)?;
                object_426.finish();
            }
        }
        array_424.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_427) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_427.as_str());
    }
    if let Some(var_428) = &input.model_quality_baseline_config {
        #[allow(unused_mut)]
        let mut object_429 = object.key("ModelQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality_baseline_config(
            &mut object_429,
            var_428,
        )?;
        object_429.finish();
    }
    if let Some(var_430) = &input.model_quality_app_specification {
        #[allow(unused_mut)]
        let mut object_431 = object.key("ModelQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality_app_specification(
            &mut object_431,
            var_430,
        )?;
        object_431.finish();
    }
    if let Some(var_432) = &input.model_quality_job_input {
        #[allow(unused_mut)]
        let mut object_433 = object.key("ModelQualityJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality_job_input(
            &mut object_433,
            var_432,
        )?;
        object_433.finish();
    }
    if let Some(var_434) = &input.model_quality_job_output_config {
        #[allow(unused_mut)]
        let mut object_435 = object.key("ModelQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_435,
            var_434,
        )?;
        object_435.finish();
    }
    if let Some(var_436) = &input.job_resources {
        #[allow(unused_mut)]
        let mut object_437 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_437,
            var_436,
        )?;
        object_437.finish();
    }
    if let Some(var_438) = &input.network_config {
        #[allow(unused_mut)]
        let mut object_439 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(
            &mut object_439,
            var_438,
        )?;
        object_439.finish();
    }
    if let Some(var_440) = &input.role_arn {
        object.key("RoleArn").string(var_440.as_str());
    }
    if let Some(var_441) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_442 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_442,
            var_441,
        )?;
        object_442.finish();
    }
    if let Some(var_443) = &input.tags {
        let mut array_444 = object.key("Tags").start_array();
        for item_445 in var_443 {
            {
                #[allow(unused_mut)]
                let mut object_446 = array_444.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_446, item_445)?;
                object_446.finish();
            }
        }
        array_444.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_447) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_447.as_str());
    }
    if let Some(var_448) = &input.monitoring_schedule_config {
        #[allow(unused_mut)]
        let mut object_449 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_schedule_config(
            &mut object_449,
            var_448,
        )?;
        object_449.finish();
    }
    if let Some(var_450) = &input.tags {
        let mut array_451 = object.key("Tags").start_array();
        for item_452 in var_450 {
            {
                #[allow(unused_mut)]
                let mut object_453 = array_451.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_453, item_452)?;
                object_453.finish();
            }
        }
        array_451.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_454) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_454.as_str());
    }
    if let Some(var_455) = &input.instance_type {
        object.key("InstanceType").string(var_455.as_str());
    }
    if let Some(var_456) = &input.subnet_id {
        object.key("SubnetId").string(var_456.as_str());
    }
    if let Some(var_457) = &input.security_group_ids {
        let mut array_458 = object.key("SecurityGroupIds").start_array();
        for item_459 in var_457 {
            {
                array_458.value().string(item_459.as_str());
            }
        }
        array_458.finish();
    }
    if let Some(var_460) = &input.role_arn {
        object.key("RoleArn").string(var_460.as_str());
    }
    if let Some(var_461) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_461.as_str());
    }
    if let Some(var_462) = &input.tags {
        let mut array_463 = object.key("Tags").start_array();
        for item_464 in var_462 {
            {
                #[allow(unused_mut)]
                let mut object_465 = array_463.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_465, item_464)?;
                object_465.finish();
            }
        }
        array_463.finish();
    }
    if let Some(var_466) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_466.as_str());
    }
    if let Some(var_467) = &input.direct_internet_access {
        object.key("DirectInternetAccess").string(var_467.as_str());
    }
    if let Some(var_468) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_468).into()),
        );
    }
    if let Some(var_469) = &input.accelerator_types {
        let mut array_470 = object.key("AcceleratorTypes").start_array();
        for item_471 in var_469 {
            {
                array_470.value().string(item_471.as_str());
            }
        }
        array_470.finish();
    }
    if let Some(var_472) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_472.as_str());
    }
    if let Some(var_473) = &input.additional_code_repositories {
        let mut array_474 = object.key("AdditionalCodeRepositories").start_array();
        for item_475 in var_473 {
            {
                array_474.value().string(item_475.as_str());
            }
        }
        array_474.finish();
    }
    if let Some(var_476) = &input.root_access {
        object.key("RootAccess").string(var_476.as_str());
    }
    if let Some(var_477) = &input.platform_identifier {
        object.key("PlatformIdentifier").string(var_477.as_str());
    }
    if let Some(var_478) = &input.instance_metadata_service_configuration {
        #[allow(unused_mut)]
        let mut object_479 = object
            .key("InstanceMetadataServiceConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_instance_metadata_service_configuration(
            &mut object_479,
            var_478,
        )?;
        object_479.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_notebook_instance_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNotebookInstanceLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_480) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_480.as_str());
    }
    if let Some(var_481) = &input.on_create {
        let mut array_482 = object.key("OnCreate").start_array();
        for item_483 in var_481 {
            {
                #[allow(unused_mut)]
                let mut object_484 = array_482.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(
                    &mut object_484,
                    item_483,
                )?;
                object_484.finish();
            }
        }
        array_482.finish();
    }
    if let Some(var_485) = &input.on_start {
        let mut array_486 = object.key("OnStart").start_array();
        for item_487 in var_485 {
            {
                #[allow(unused_mut)]
                let mut object_488 = array_486.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(
                    &mut object_488,
                    item_487,
                )?;
                object_488.finish();
            }
        }
        array_486.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_pipeline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePipelineInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_489) = &input.pipeline_name {
        object.key("PipelineName").string(var_489.as_str());
    }
    if let Some(var_490) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_490.as_str());
    }
    if let Some(var_491) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_491.as_str());
    }
    if let Some(var_492) = &input.pipeline_definition_s3_location {
        #[allow(unused_mut)]
        let mut object_493 = object.key("PipelineDefinitionS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_pipeline_definition_s3_location(
            &mut object_493,
            var_492,
        )?;
        object_493.finish();
    }
    if let Some(var_494) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_494.as_str());
    }
    if let Some(var_495) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_495.as_str());
    }
    if let Some(var_496) = &input.role_arn {
        object.key("RoleArn").string(var_496.as_str());
    }
    if let Some(var_497) = &input.tags {
        let mut array_498 = object.key("Tags").start_array();
        for item_499 in var_497 {
            {
                #[allow(unused_mut)]
                let mut object_500 = array_498.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_500, item_499)?;
                object_500.finish();
            }
        }
        array_498.finish();
    }
    if let Some(var_501) = &input.parallelism_configuration {
        #[allow(unused_mut)]
        let mut object_502 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(
            &mut object_502,
            var_501,
        )?;
        object_502.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_presigned_domain_url_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePresignedDomainUrlInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_503) = &input.domain_id {
        object.key("DomainId").string(var_503.as_str());
    }
    if let Some(var_504) = &input.user_profile_name {
        object.key("UserProfileName").string(var_504.as_str());
    }
    if let Some(var_505) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_505).into()),
        );
    }
    if let Some(var_506) = &input.expires_in_seconds {
        object.key("ExpiresInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_506).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_presigned_notebook_instance_url_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePresignedNotebookInstanceUrlInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_507) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_507.as_str());
    }
    if let Some(var_508) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_508).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_processing_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProcessingJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_509) = &input.processing_inputs {
        let mut array_510 = object.key("ProcessingInputs").start_array();
        for item_511 in var_509 {
            {
                #[allow(unused_mut)]
                let mut object_512 = array_510.value().start_object();
                crate::json_ser::serialize_structure_crate_model_processing_input(
                    &mut object_512,
                    item_511,
                )?;
                object_512.finish();
            }
        }
        array_510.finish();
    }
    if let Some(var_513) = &input.processing_output_config {
        #[allow(unused_mut)]
        let mut object_514 = object.key("ProcessingOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_output_config(
            &mut object_514,
            var_513,
        )?;
        object_514.finish();
    }
    if let Some(var_515) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_515.as_str());
    }
    if let Some(var_516) = &input.processing_resources {
        #[allow(unused_mut)]
        let mut object_517 = object.key("ProcessingResources").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_resources(
            &mut object_517,
            var_516,
        )?;
        object_517.finish();
    }
    if let Some(var_518) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_519 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_stopping_condition(
            &mut object_519,
            var_518,
        )?;
        object_519.finish();
    }
    if let Some(var_520) = &input.app_specification {
        #[allow(unused_mut)]
        let mut object_521 = object.key("AppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_app_specification(
            &mut object_521,
            var_520,
        )?;
        object_521.finish();
    }
    if let Some(var_522) = &input.environment {
        #[allow(unused_mut)]
        let mut object_523 = object.key("Environment").start_object();
        for (key_524, value_525) in var_522 {
            {
                object_523.key(key_524.as_str()).string(value_525.as_str());
            }
        }
        object_523.finish();
    }
    if let Some(var_526) = &input.network_config {
        #[allow(unused_mut)]
        let mut object_527 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_network_config(&mut object_527, var_526)?;
        object_527.finish();
    }
    if let Some(var_528) = &input.role_arn {
        object.key("RoleArn").string(var_528.as_str());
    }
    if let Some(var_529) = &input.tags {
        let mut array_530 = object.key("Tags").start_array();
        for item_531 in var_529 {
            {
                #[allow(unused_mut)]
                let mut object_532 = array_530.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_532, item_531)?;
                object_532.finish();
            }
        }
        array_530.finish();
    }
    if let Some(var_533) = &input.experiment_config {
        #[allow(unused_mut)]
        let mut object_534 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_experiment_config(
            &mut object_534,
            var_533,
        )?;
        object_534.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_project_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProjectInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_535) = &input.project_name {
        object.key("ProjectName").string(var_535.as_str());
    }
    if let Some(var_536) = &input.project_description {
        object.key("ProjectDescription").string(var_536.as_str());
    }
    if let Some(var_537) = &input.service_catalog_provisioning_details {
        #[allow(unused_mut)]
        let mut object_538 = object
            .key("ServiceCatalogProvisioningDetails")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_service_catalog_provisioning_details(
            &mut object_538,
            var_537,
        )?;
        object_538.finish();
    }
    if let Some(var_539) = &input.tags {
        let mut array_540 = object.key("Tags").start_array();
        for item_541 in var_539 {
            {
                #[allow(unused_mut)]
                let mut object_542 = array_540.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_542, item_541)?;
                object_542.finish();
            }
        }
        array_540.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_studio_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStudioLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_543) = &input.studio_lifecycle_config_name {
        object
            .key("StudioLifecycleConfigName")
            .string(var_543.as_str());
    }
    if let Some(var_544) = &input.studio_lifecycle_config_content {
        object
            .key("StudioLifecycleConfigContent")
            .string(var_544.as_str());
    }
    if let Some(var_545) = &input.studio_lifecycle_config_app_type {
        object
            .key("StudioLifecycleConfigAppType")
            .string(var_545.as_str());
    }
    if let Some(var_546) = &input.tags {
        let mut array_547 = object.key("Tags").start_array();
        for item_548 in var_546 {
            {
                #[allow(unused_mut)]
                let mut object_549 = array_547.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_549, item_548)?;
                object_549.finish();
            }
        }
        array_547.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_training_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrainingJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_550) = &input.training_job_name {
        object.key("TrainingJobName").string(var_550.as_str());
    }
    if let Some(var_551) = &input.hyper_parameters {
        #[allow(unused_mut)]
        let mut object_552 = object.key("HyperParameters").start_object();
        for (key_553, value_554) in var_551 {
            {
                object_552.key(key_553.as_str()).string(value_554.as_str());
            }
        }
        object_552.finish();
    }
    if let Some(var_555) = &input.algorithm_specification {
        #[allow(unused_mut)]
        let mut object_556 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_algorithm_specification(
            &mut object_556,
            var_555,
        )?;
        object_556.finish();
    }
    if let Some(var_557) = &input.role_arn {
        object.key("RoleArn").string(var_557.as_str());
    }
    if let Some(var_558) = &input.input_data_config {
        let mut array_559 = object.key("InputDataConfig").start_array();
        for item_560 in var_558 {
            {
                #[allow(unused_mut)]
                let mut object_561 = array_559.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel(
                    &mut object_561,
                    item_560,
                )?;
                object_561.finish();
            }
        }
        array_559.finish();
    }
    if let Some(var_562) = &input.output_data_config {
        #[allow(unused_mut)]
        let mut object_563 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_data_config(
            &mut object_563,
            var_562,
        )?;
        object_563.finish();
    }
    if let Some(var_564) = &input.resource_config {
        #[allow(unused_mut)]
        let mut object_565 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_config(&mut object_565, var_564)?;
        object_565.finish();
    }
    if let Some(var_566) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_567 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_567, var_566)?;
        object_567.finish();
    }
    if let Some(var_568) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_569 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(
            &mut object_569,
            var_568,
        )?;
        object_569.finish();
    }
    if let Some(var_570) = &input.tags {
        let mut array_571 = object.key("Tags").start_array();
        for item_572 in var_570 {
            {
                #[allow(unused_mut)]
                let mut object_573 = array_571.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_573, item_572)?;
                object_573.finish();
            }
        }
        array_571.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object
            .key("EnableManagedSpotTraining")
            .boolean(input.enable_managed_spot_training);
    }
    if let Some(var_574) = &input.checkpoint_config {
        #[allow(unused_mut)]
        let mut object_575 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_checkpoint_config(
            &mut object_575,
            var_574,
        )?;
        object_575.finish();
    }
    if let Some(var_576) = &input.debug_hook_config {
        #[allow(unused_mut)]
        let mut object_577 = object.key("DebugHookConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_debug_hook_config(
            &mut object_577,
            var_576,
        )?;
        object_577.finish();
    }
    if let Some(var_578) = &input.debug_rule_configurations {
        let mut array_579 = object.key("DebugRuleConfigurations").start_array();
        for item_580 in var_578 {
            {
                #[allow(unused_mut)]
                let mut object_581 = array_579.value().start_object();
                crate::json_ser::serialize_structure_crate_model_debug_rule_configuration(
                    &mut object_581,
                    item_580,
                )?;
                object_581.finish();
            }
        }
        array_579.finish();
    }
    if let Some(var_582) = &input.tensor_board_output_config {
        #[allow(unused_mut)]
        let mut object_583 = object.key("TensorBoardOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_tensor_board_output_config(
            &mut object_583,
            var_582,
        )?;
        object_583.finish();
    }
    if let Some(var_584) = &input.experiment_config {
        #[allow(unused_mut)]
        let mut object_585 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_experiment_config(
            &mut object_585,
            var_584,
        )?;
        object_585.finish();
    }
    if let Some(var_586) = &input.profiler_config {
        #[allow(unused_mut)]
        let mut object_587 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_profiler_config(&mut object_587, var_586)?;
        object_587.finish();
    }
    if let Some(var_588) = &input.profiler_rule_configurations {
        let mut array_589 = object.key("ProfilerRuleConfigurations").start_array();
        for item_590 in var_588 {
            {
                #[allow(unused_mut)]
                let mut object_591 = array_589.value().start_object();
                crate::json_ser::serialize_structure_crate_model_profiler_rule_configuration(
                    &mut object_591,
                    item_590,
                )?;
                object_591.finish();
            }
        }
        array_589.finish();
    }
    if let Some(var_592) = &input.environment {
        #[allow(unused_mut)]
        let mut object_593 = object.key("Environment").start_object();
        for (key_594, value_595) in var_592 {
            {
                object_593.key(key_594.as_str()).string(value_595.as_str());
            }
        }
        object_593.finish();
    }
    if let Some(var_596) = &input.retry_strategy {
        #[allow(unused_mut)]
        let mut object_597 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_crate_model_retry_strategy(&mut object_597, var_596)?;
        object_597.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_transform_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTransformJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_598) = &input.transform_job_name {
        object.key("TransformJobName").string(var_598.as_str());
    }
    if let Some(var_599) = &input.model_name {
        object.key("ModelName").string(var_599.as_str());
    }
    if let Some(var_600) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_600).into()),
        );
    }
    if let Some(var_601) = &input.model_client_config {
        #[allow(unused_mut)]
        let mut object_602 = object.key("ModelClientConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_client_config(
            &mut object_602,
            var_601,
        )?;
        object_602.finish();
    }
    if let Some(var_603) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_603).into()),
        );
    }
    if let Some(var_604) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_604.as_str());
    }
    if let Some(var_605) = &input.environment {
        #[allow(unused_mut)]
        let mut object_606 = object.key("Environment").start_object();
        for (key_607, value_608) in var_605 {
            {
                object_606.key(key_607.as_str()).string(value_608.as_str());
            }
        }
        object_606.finish();
    }
    if let Some(var_609) = &input.transform_input {
        #[allow(unused_mut)]
        let mut object_610 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_input(&mut object_610, var_609)?;
        object_610.finish();
    }
    if let Some(var_611) = &input.transform_output {
        #[allow(unused_mut)]
        let mut object_612 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_output(
            &mut object_612,
            var_611,
        )?;
        object_612.finish();
    }
    if let Some(var_613) = &input.transform_resources {
        #[allow(unused_mut)]
        let mut object_614 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_resources(
            &mut object_614,
            var_613,
        )?;
        object_614.finish();
    }
    if let Some(var_615) = &input.data_processing {
        #[allow(unused_mut)]
        let mut object_616 = object.key("DataProcessing").start_object();
        crate::json_ser::serialize_structure_crate_model_data_processing(&mut object_616, var_615)?;
        object_616.finish();
    }
    if let Some(var_617) = &input.tags {
        let mut array_618 = object.key("Tags").start_array();
        for item_619 in var_617 {
            {
                #[allow(unused_mut)]
                let mut object_620 = array_618.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_620, item_619)?;
                object_620.finish();
            }
        }
        array_618.finish();
    }
    if let Some(var_621) = &input.experiment_config {
        #[allow(unused_mut)]
        let mut object_622 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_experiment_config(
            &mut object_622,
            var_621,
        )?;
        object_622.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trial_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrialInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_623) = &input.trial_name {
        object.key("TrialName").string(var_623.as_str());
    }
    if let Some(var_624) = &input.display_name {
        object.key("DisplayName").string(var_624.as_str());
    }
    if let Some(var_625) = &input.experiment_name {
        object.key("ExperimentName").string(var_625.as_str());
    }
    if let Some(var_626) = &input.metadata_properties {
        #[allow(unused_mut)]
        let mut object_627 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_627,
            var_626,
        )?;
        object_627.finish();
    }
    if let Some(var_628) = &input.tags {
        let mut array_629 = object.key("Tags").start_array();
        for item_630 in var_628 {
            {
                #[allow(unused_mut)]
                let mut object_631 = array_629.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_631, item_630)?;
                object_631.finish();
            }
        }
        array_629.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_632) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_632.as_str());
    }
    if let Some(var_633) = &input.display_name {
        object.key("DisplayName").string(var_633.as_str());
    }
    if let Some(var_634) = &input.status {
        #[allow(unused_mut)]
        let mut object_635 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_crate_model_trial_component_status(
            &mut object_635,
            var_634,
        )?;
        object_635.finish();
    }
    if let Some(var_636) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_636, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_637) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_637, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_638) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_639 = object.key("Parameters").start_object();
        for (key_640, value_641) in var_638 {
            {
                #[allow(unused_mut)]
                let mut object_642 = object_639.key(key_640.as_str()).start_object();
                crate::json_ser::serialize_union_crate_model_trial_component_parameter_value(
                    &mut object_642,
                    value_641,
                )?;
                object_642.finish();
            }
        }
        object_639.finish();
    }
    if let Some(var_643) = &input.input_artifacts {
        #[allow(unused_mut)]
        let mut object_644 = object.key("InputArtifacts").start_object();
        for (key_645, value_646) in var_643 {
            {
                #[allow(unused_mut)]
                let mut object_647 = object_644.key(key_645.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(
                    &mut object_647,
                    value_646,
                )?;
                object_647.finish();
            }
        }
        object_644.finish();
    }
    if let Some(var_648) = &input.output_artifacts {
        #[allow(unused_mut)]
        let mut object_649 = object.key("OutputArtifacts").start_object();
        for (key_650, value_651) in var_648 {
            {
                #[allow(unused_mut)]
                let mut object_652 = object_649.key(key_650.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(
                    &mut object_652,
                    value_651,
                )?;
                object_652.finish();
            }
        }
        object_649.finish();
    }
    if let Some(var_653) = &input.metadata_properties {
        #[allow(unused_mut)]
        let mut object_654 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_654,
            var_653,
        )?;
        object_654.finish();
    }
    if let Some(var_655) = &input.tags {
        let mut array_656 = object.key("Tags").start_array();
        for item_657 in var_655 {
            {
                #[allow(unused_mut)]
                let mut object_658 = array_656.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_658, item_657)?;
                object_658.finish();
            }
        }
        array_656.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserProfileInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_659) = &input.domain_id {
        object.key("DomainId").string(var_659.as_str());
    }
    if let Some(var_660) = &input.user_profile_name {
        object.key("UserProfileName").string(var_660.as_str());
    }
    if let Some(var_661) = &input.single_sign_on_user_identifier {
        object
            .key("SingleSignOnUserIdentifier")
            .string(var_661.as_str());
    }
    if let Some(var_662) = &input.single_sign_on_user_value {
        object.key("SingleSignOnUserValue").string(var_662.as_str());
    }
    if let Some(var_663) = &input.tags {
        let mut array_664 = object.key("Tags").start_array();
        for item_665 in var_663 {
            {
                #[allow(unused_mut)]
                let mut object_666 = array_664.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_666, item_665)?;
                object_666.finish();
            }
        }
        array_664.finish();
    }
    if let Some(var_667) = &input.user_settings {
        #[allow(unused_mut)]
        let mut object_668 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_668, var_667)?;
        object_668.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workforce_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkforceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_669) = &input.cognito_config {
        #[allow(unused_mut)]
        let mut object_670 = object.key("CognitoConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cognito_config(&mut object_670, var_669)?;
        object_670.finish();
    }
    if let Some(var_671) = &input.oidc_config {
        #[allow(unused_mut)]
        let mut object_672 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_oidc_config(&mut object_672, var_671)?;
        object_672.finish();
    }
    if let Some(var_673) = &input.source_ip_config {
        #[allow(unused_mut)]
        let mut object_674 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_source_ip_config(
            &mut object_674,
            var_673,
        )?;
        object_674.finish();
    }
    if let Some(var_675) = &input.workforce_name {
        object.key("WorkforceName").string(var_675.as_str());
    }
    if let Some(var_676) = &input.tags {
        let mut array_677 = object.key("Tags").start_array();
        for item_678 in var_676 {
            {
                #[allow(unused_mut)]
                let mut object_679 = array_677.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_679, item_678)?;
                object_679.finish();
            }
        }
        array_677.finish();
    }
    if let Some(var_680) = &input.workforce_vpc_config {
        #[allow(unused_mut)]
        let mut object_681 = object.key("WorkforceVpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_workforce_vpc_config_request(
            &mut object_681,
            var_680,
        )?;
        object_681.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkteamInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_682) = &input.workteam_name {
        object.key("WorkteamName").string(var_682.as_str());
    }
    if let Some(var_683) = &input.workforce_name {
        object.key("WorkforceName").string(var_683.as_str());
    }
    if let Some(var_684) = &input.member_definitions {
        let mut array_685 = object.key("MemberDefinitions").start_array();
        for item_686 in var_684 {
            {
                #[allow(unused_mut)]
                let mut object_687 = array_685.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_definition(
                    &mut object_687,
                    item_686,
                )?;
                object_687.finish();
            }
        }
        array_685.finish();
    }
    if let Some(var_688) = &input.description {
        object.key("Description").string(var_688.as_str());
    }
    if let Some(var_689) = &input.notification_configuration {
        #[allow(unused_mut)]
        let mut object_690 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_configuration(
            &mut object_690,
            var_689,
        )?;
        object_690.finish();
    }
    if let Some(var_691) = &input.tags {
        let mut array_692 = object.key("Tags").start_array();
        for item_693 in var_691 {
            {
                #[allow(unused_mut)]
                let mut object_694 = array_692.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_694, item_693)?;
                object_694.finish();
            }
        }
        array_692.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteActionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_695) = &input.action_name {
        object.key("ActionName").string(var_695.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_algorithm_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAlgorithmInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_696) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_696.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_app_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_697) = &input.domain_id {
        object.key("DomainId").string(var_697.as_str());
    }
    if let Some(var_698) = &input.user_profile_name {
        object.key("UserProfileName").string(var_698.as_str());
    }
    if let Some(var_699) = &input.app_type {
        object.key("AppType").string(var_699.as_str());
    }
    if let Some(var_700) = &input.app_name {
        object.key("AppName").string(var_700.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_app_image_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppImageConfigInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_701) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_701.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteArtifactInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_702) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_702.as_str());
    }
    if let Some(var_703) = &input.source {
        #[allow(unused_mut)]
        let mut object_704 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_artifact_source(&mut object_704, var_703)?;
        object_704.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAssociationInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_705) = &input.source_arn {
        object.key("SourceArn").string(var_705.as_str());
    }
    if let Some(var_706) = &input.destination_arn {
        object.key("DestinationArn").string(var_706.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_code_repository_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCodeRepositoryInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_707) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_707.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_context_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContextInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_708) = &input.context_name {
        object.key("ContextName").string(var_708.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_data_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_709) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_709.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_device_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDeviceFleetInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_710) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_710.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDomainInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_711) = &input.domain_id {
        object.key("DomainId").string(var_711.as_str());
    }
    if let Some(var_712) = &input.retention_policy {
        #[allow(unused_mut)]
        let mut object_713 = object.key("RetentionPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_retention_policy(
            &mut object_713,
            var_712,
        )?;
        object_713.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_edge_deployment_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEdgeDeploymentPlanInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_714) = &input.edge_deployment_plan_name {
        object
            .key("EdgeDeploymentPlanName")
            .string(var_714.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_edge_deployment_stage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEdgeDeploymentStageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_715) = &input.edge_deployment_plan_name {
        object
            .key("EdgeDeploymentPlanName")
            .string(var_715.as_str());
    }
    if let Some(var_716) = &input.stage_name {
        object.key("StageName").string(var_716.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_717) = &input.endpoint_name {
        object.key("EndpointName").string(var_717.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_endpoint_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointConfigInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_718) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_718.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_experiment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteExperimentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_719) = &input.experiment_name {
        object.key("ExperimentName").string(var_719.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_feature_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFeatureGroupInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_720) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_720.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_flow_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFlowDefinitionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_721) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_721.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_human_task_ui_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteHumanTaskUiInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_722) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_722.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_723) = &input.image_name {
        object.key("ImageName").string(var_723.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_image_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageVersionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_724) = &input.image_name {
        object.key("ImageName").string(var_724.as_str());
    }
    if let Some(var_725) = &input.version {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_725).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_726) = &input.model_name {
        object.key("ModelName").string(var_726.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_bias_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelBiasJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_727) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_727.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_explainability_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelExplainabilityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_728) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_728.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_package_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_729) = &input.model_package_name {
        object.key("ModelPackageName").string(var_729.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_package_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageGroupInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_730) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_730.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_package_group_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageGroupPolicyInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_731) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_731.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_732) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_732.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_733) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_733.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_734) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_734.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_notebook_instance_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteNotebookInstanceLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_735) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_735.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_pipeline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePipelineInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_736) = &input.pipeline_name {
        object.key("PipelineName").string(var_736.as_str());
    }
    if let Some(var_737) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_737.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_project_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProjectInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_738) = &input.project_name {
        object.key("ProjectName").string(var_738.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_studio_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStudioLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_739) = &input.studio_lifecycle_config_name {
        object
            .key("StudioLifecycleConfigName")
            .string(var_739.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTagsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_740) = &input.resource_arn {
        object.key("ResourceArn").string(var_740.as_str());
    }
    if let Some(var_741) = &input.tag_keys {
        let mut array_742 = object.key("TagKeys").start_array();
        for item_743 in var_741 {
            {
                array_742.value().string(item_743.as_str());
            }
        }
        array_742.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_trial_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTrialInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_744) = &input.trial_name {
        object.key("TrialName").string(var_744.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_745) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_745.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserProfileInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_746) = &input.domain_id {
        object.key("DomainId").string(var_746.as_str());
    }
    if let Some(var_747) = &input.user_profile_name {
        object.key("UserProfileName").string(var_747.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workforce_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkforceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_748) = &input.workforce_name {
        object.key("WorkforceName").string(var_748.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkteamInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_749) = &input.workteam_name {
        object.key("WorkteamName").string(var_749.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_devices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterDevicesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_750) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_750.as_str());
    }
    if let Some(var_751) = &input.device_names {
        let mut array_752 = object.key("DeviceNames").start_array();
        for item_753 in var_751 {
            {
                array_752.value().string(item_753.as_str());
            }
        }
        array_752.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeActionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_754) = &input.action_name {
        object.key("ActionName").string(var_754.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_algorithm_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAlgorithmInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_755) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_755.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_app_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_756) = &input.domain_id {
        object.key("DomainId").string(var_756.as_str());
    }
    if let Some(var_757) = &input.user_profile_name {
        object.key("UserProfileName").string(var_757.as_str());
    }
    if let Some(var_758) = &input.app_type {
        object.key("AppType").string(var_758.as_str());
    }
    if let Some(var_759) = &input.app_name {
        object.key("AppName").string(var_759.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_app_image_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppImageConfigInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_760) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_760.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeArtifactInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_761) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_761.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_auto_ml_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutoMlJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_762) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_762.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_code_repository_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCodeRepositoryInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_763) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_763.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_compilation_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCompilationJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_764) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_764.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_context_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeContextInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_765) = &input.context_name {
        object.key("ContextName").string(var_765.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_data_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_766) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_766.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeviceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_767) = &input.next_token {
        object.key("NextToken").string(var_767.as_str());
    }
    if let Some(var_768) = &input.device_name {
        object.key("DeviceName").string(var_768.as_str());
    }
    if let Some(var_769) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_769.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_device_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeviceFleetInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_770) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_770.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDomainInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_771) = &input.domain_id {
        object.key("DomainId").string(var_771.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_edge_deployment_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEdgeDeploymentPlanInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_772) = &input.edge_deployment_plan_name {
        object
            .key("EdgeDeploymentPlanName")
            .string(var_772.as_str());
    }
    if let Some(var_773) = &input.next_token {
        object.key("NextToken").string(var_773.as_str());
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_edge_packaging_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEdgePackagingJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_774) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_774.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_775) = &input.endpoint_name {
        object.key("EndpointName").string(var_775.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_endpoint_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointConfigInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_776) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_776.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_experiment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExperimentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_777) = &input.experiment_name {
        object.key("ExperimentName").string(var_777.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_feature_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFeatureGroupInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_778) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_778.as_str());
    }
    if let Some(var_779) = &input.next_token {
        object.key("NextToken").string(var_779.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_feature_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFeatureMetadataInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_780) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_780.as_str());
    }
    if let Some(var_781) = &input.feature_name {
        object.key("FeatureName").string(var_781.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_flow_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFlowDefinitionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_782) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_782.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_human_task_ui_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeHumanTaskUiInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_783) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_783.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_hyper_parameter_tuning_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeHyperParameterTuningJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_784) = &input.hyper_parameter_tuning_job_name {
        object
            .key("HyperParameterTuningJobName")
            .string(var_784.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_785) = &input.image_name {
        object.key("ImageName").string(var_785.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_image_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageVersionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_786) = &input.image_name {
        object.key("ImageName").string(var_786.as_str());
    }
    if let Some(var_787) = &input.version {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_787).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_inference_recommendations_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInferenceRecommendationsJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_788) = &input.job_name {
        object.key("JobName").string(var_788.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_labeling_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLabelingJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_789) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_789.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_lineage_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLineageGroupInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_790) = &input.lineage_group_name {
        object.key("LineageGroupName").string(var_790.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_791) = &input.model_name {
        object.key("ModelName").string(var_791.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_bias_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelBiasJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_792) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_792.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_explainability_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelExplainabilityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_793) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_793.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_package_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelPackageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_794) = &input.model_package_name {
        object.key("ModelPackageName").string(var_794.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_package_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelPackageGroupInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_795) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_795.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_796) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_796.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_797) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_797.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_798) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_798.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_notebook_instance_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookInstanceLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_799) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_799.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_pipeline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_800) = &input.pipeline_name {
        object.key("PipelineName").string(var_800.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_pipeline_definition_for_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineDefinitionForExecutionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_801) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_801.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_pipeline_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineExecutionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_802) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_802.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_processing_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProcessingJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_803) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_803.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_project_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProjectInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_804) = &input.project_name {
        object.key("ProjectName").string(var_804.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_studio_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStudioLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_805) = &input.studio_lifecycle_config_name {
        object
            .key("StudioLifecycleConfigName")
            .string(var_805.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_subscribed_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSubscribedWorkteamInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_806) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_806.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_training_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrainingJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_807) = &input.training_job_name {
        object.key("TrainingJobName").string(var_807.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_transform_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTransformJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_808) = &input.transform_job_name {
        object.key("TransformJobName").string(var_808.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_trial_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrialInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_809) = &input.trial_name {
        object.key("TrialName").string(var_809.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_810) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_810.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserProfileInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_811) = &input.domain_id {
        object.key("DomainId").string(var_811.as_str());
    }
    if let Some(var_812) = &input.user_profile_name {
        object.key("UserProfileName").string(var_812.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workforce_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkforceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_813) = &input.workforce_name {
        object.key("WorkforceName").string(var_813.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkteamInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_814) = &input.workteam_name {
        object.key("WorkteamName").string(var_814.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_815) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_815.as_str());
    }
    if let Some(var_816) = &input.trial_name {
        object.key("TrialName").string(var_816.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_device_fleet_report_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDeviceFleetReportInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_817) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_817.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_lineage_group_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLineageGroupPolicyInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_818) = &input.lineage_group_name {
        object.key("LineageGroupName").string(var_818.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_model_package_group_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetModelPackageGroupPolicyInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_819) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_819.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_search_suggestions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSearchSuggestionsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_820) = &input.resource {
        object.key("Resource").string(var_820.as_str());
    }
    if let Some(var_821) = &input.suggestion_query {
        #[allow(unused_mut)]
        let mut object_822 = object.key("SuggestionQuery").start_object();
        crate::json_ser::serialize_structure_crate_model_suggestion_query(
            &mut object_822,
            var_821,
        )?;
        object_822.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_actions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListActionsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_823) = &input.source_uri {
        object.key("SourceUri").string(var_823.as_str());
    }
    if let Some(var_824) = &input.action_type {
        object.key("ActionType").string(var_824.as_str());
    }
    if let Some(var_825) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_825, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_826) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_826, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_827) = &input.sort_by {
        object.key("SortBy").string(var_827.as_str());
    }
    if let Some(var_828) = &input.sort_order {
        object.key("SortOrder").string(var_828.as_str());
    }
    if let Some(var_829) = &input.next_token {
        object.key("NextToken").string(var_829.as_str());
    }
    if let Some(var_830) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_830).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_algorithms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAlgorithmsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_831) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_831, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_832) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_832, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_833) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_833).into()),
        );
    }
    if let Some(var_834) = &input.name_contains {
        object.key("NameContains").string(var_834.as_str());
    }
    if let Some(var_835) = &input.next_token {
        object.key("NextToken").string(var_835.as_str());
    }
    if let Some(var_836) = &input.sort_by {
        object.key("SortBy").string(var_836.as_str());
    }
    if let Some(var_837) = &input.sort_order {
        object.key("SortOrder").string(var_837.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_app_image_configs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAppImageConfigsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_838) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_838).into()),
        );
    }
    if let Some(var_839) = &input.next_token {
        object.key("NextToken").string(var_839.as_str());
    }
    if let Some(var_840) = &input.name_contains {
        object.key("NameContains").string(var_840.as_str());
    }
    if let Some(var_841) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_841, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_842) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_842, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_843) = &input.modified_time_before {
        object
            .key("ModifiedTimeBefore")
            .date_time(var_843, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_844) = &input.modified_time_after {
        object
            .key("ModifiedTimeAfter")
            .date_time(var_844, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_845) = &input.sort_by {
        object.key("SortBy").string(var_845.as_str());
    }
    if let Some(var_846) = &input.sort_order {
        object.key("SortOrder").string(var_846.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_apps_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAppsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_847) = &input.next_token {
        object.key("NextToken").string(var_847.as_str());
    }
    if let Some(var_848) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_848).into()),
        );
    }
    if let Some(var_849) = &input.sort_order {
        object.key("SortOrder").string(var_849.as_str());
    }
    if let Some(var_850) = &input.sort_by {
        object.key("SortBy").string(var_850.as_str());
    }
    if let Some(var_851) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_851.as_str());
    }
    if let Some(var_852) = &input.user_profile_name_equals {
        object.key("UserProfileNameEquals").string(var_852.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_artifacts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListArtifactsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_853) = &input.source_uri {
        object.key("SourceUri").string(var_853.as_str());
    }
    if let Some(var_854) = &input.artifact_type {
        object.key("ArtifactType").string(var_854.as_str());
    }
    if let Some(var_855) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_855, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_856) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_856, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_857) = &input.sort_by {
        object.key("SortBy").string(var_857.as_str());
    }
    if let Some(var_858) = &input.sort_order {
        object.key("SortOrder").string(var_858.as_str());
    }
    if let Some(var_859) = &input.next_token {
        object.key("NextToken").string(var_859.as_str());
    }
    if let Some(var_860) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_860).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociationsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_861) = &input.source_arn {
        object.key("SourceArn").string(var_861.as_str());
    }
    if let Some(var_862) = &input.destination_arn {
        object.key("DestinationArn").string(var_862.as_str());
    }
    if let Some(var_863) = &input.source_type {
        object.key("SourceType").string(var_863.as_str());
    }
    if let Some(var_864) = &input.destination_type {
        object.key("DestinationType").string(var_864.as_str());
    }
    if let Some(var_865) = &input.association_type {
        object.key("AssociationType").string(var_865.as_str());
    }
    if let Some(var_866) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_866, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_867) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_867, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_868) = &input.sort_by {
        object.key("SortBy").string(var_868.as_str());
    }
    if let Some(var_869) = &input.sort_order {
        object.key("SortOrder").string(var_869.as_str());
    }
    if let Some(var_870) = &input.next_token {
        object.key("NextToken").string(var_870.as_str());
    }
    if let Some(var_871) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_871).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_auto_ml_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAutoMlJobsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_872) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_872, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_873) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_873, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_874) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_874, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_875) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_875, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_876) = &input.name_contains {
        object.key("NameContains").string(var_876.as_str());
    }
    if let Some(var_877) = &input.status_equals {
        object.key("StatusEquals").string(var_877.as_str());
    }
    if let Some(var_878) = &input.sort_order {
        object.key("SortOrder").string(var_878.as_str());
    }
    if let Some(var_879) = &input.sort_by {
        object.key("SortBy").string(var_879.as_str());
    }
    if let Some(var_880) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_880).into()),
        );
    }
    if let Some(var_881) = &input.next_token {
        object.key("NextToken").string(var_881.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_candidates_for_auto_ml_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCandidatesForAutoMlJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_882) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_882.as_str());
    }
    if let Some(var_883) = &input.status_equals {
        object.key("StatusEquals").string(var_883.as_str());
    }
    if let Some(var_884) = &input.candidate_name_equals {
        object.key("CandidateNameEquals").string(var_884.as_str());
    }
    if let Some(var_885) = &input.sort_order {
        object.key("SortOrder").string(var_885.as_str());
    }
    if let Some(var_886) = &input.sort_by {
        object.key("SortBy").string(var_886.as_str());
    }
    if let Some(var_887) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_887).into()),
        );
    }
    if let Some(var_888) = &input.next_token {
        object.key("NextToken").string(var_888.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_code_repositories_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCodeRepositoriesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_889) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_889, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_890) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_890, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_891) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_891, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_892) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_892, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_893) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_893).into()),
        );
    }
    if let Some(var_894) = &input.name_contains {
        object.key("NameContains").string(var_894.as_str());
    }
    if let Some(var_895) = &input.next_token {
        object.key("NextToken").string(var_895.as_str());
    }
    if let Some(var_896) = &input.sort_by {
        object.key("SortBy").string(var_896.as_str());
    }
    if let Some(var_897) = &input.sort_order {
        object.key("SortOrder").string(var_897.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_compilation_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCompilationJobsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_898) = &input.next_token {
        object.key("NextToken").string(var_898.as_str());
    }
    if let Some(var_899) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_899).into()),
        );
    }
    if let Some(var_900) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_900, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_901) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_901, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_902) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_902, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_903) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_903, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_904) = &input.name_contains {
        object.key("NameContains").string(var_904.as_str());
    }
    if let Some(var_905) = &input.status_equals {
        object.key("StatusEquals").string(var_905.as_str());
    }
    if let Some(var_906) = &input.sort_by {
        object.key("SortBy").string(var_906.as_str());
    }
    if let Some(var_907) = &input.sort_order {
        object.key("SortOrder").string(var_907.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_contexts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContextsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_908) = &input.source_uri {
        object.key("SourceUri").string(var_908.as_str());
    }
    if let Some(var_909) = &input.context_type {
        object.key("ContextType").string(var_909.as_str());
    }
    if let Some(var_910) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_910, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_911) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_911, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_912) = &input.sort_by {
        object.key("SortBy").string(var_912.as_str());
    }
    if let Some(var_913) = &input.sort_order {
        object.key("SortOrder").string(var_913.as_str());
    }
    if let Some(var_914) = &input.next_token {
        object.key("NextToken").string(var_914.as_str());
    }
    if let Some(var_915) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_915).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_quality_job_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataQualityJobDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_916) = &input.endpoint_name {
        object.key("EndpointName").string(var_916.as_str());
    }
    if let Some(var_917) = &input.sort_by {
        object.key("SortBy").string(var_917.as_str());
    }
    if let Some(var_918) = &input.sort_order {
        object.key("SortOrder").string(var_918.as_str());
    }
    if let Some(var_919) = &input.next_token {
        object.key("NextToken").string(var_919.as_str());
    }
    if let Some(var_920) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_920).into()),
        );
    }
    if let Some(var_921) = &input.name_contains {
        object.key("NameContains").string(var_921.as_str());
    }
    if let Some(var_922) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_922, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_923) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_923, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_device_fleets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDeviceFleetsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_924) = &input.next_token {
        object.key("NextToken").string(var_924.as_str());
    }
    if let Some(var_925) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_925).into()),
        );
    }
    if let Some(var_926) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_926, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_927) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_927, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_928) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_928, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_929) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_929, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_930) = &input.name_contains {
        object.key("NameContains").string(var_930.as_str());
    }
    if let Some(var_931) = &input.sort_by {
        object.key("SortBy").string(var_931.as_str());
    }
    if let Some(var_932) = &input.sort_order {
        object.key("SortOrder").string(var_932.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_devices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevicesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_933) = &input.next_token {
        object.key("NextToken").string(var_933.as_str());
    }
    if let Some(var_934) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_934).into()),
        );
    }
    if let Some(var_935) = &input.latest_heartbeat_after {
        object
            .key("LatestHeartbeatAfter")
            .date_time(var_935, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_936) = &input.model_name {
        object.key("ModelName").string(var_936.as_str());
    }
    if let Some(var_937) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_937.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_domains_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDomainsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_938) = &input.next_token {
        object.key("NextToken").string(var_938.as_str());
    }
    if let Some(var_939) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_939).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_edge_deployment_plans_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEdgeDeploymentPlansInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_940) = &input.next_token {
        object.key("NextToken").string(var_940.as_str());
    }
    if let Some(var_941) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_941).into()),
        );
    }
    if let Some(var_942) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_942, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_943) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_943, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_944) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_944, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_945) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_945, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_946) = &input.name_contains {
        object.key("NameContains").string(var_946.as_str());
    }
    if let Some(var_947) = &input.device_fleet_name_contains {
        object
            .key("DeviceFleetNameContains")
            .string(var_947.as_str());
    }
    if let Some(var_948) = &input.sort_by {
        object.key("SortBy").string(var_948.as_str());
    }
    if let Some(var_949) = &input.sort_order {
        object.key("SortOrder").string(var_949.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_edge_packaging_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEdgePackagingJobsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_950) = &input.next_token {
        object.key("NextToken").string(var_950.as_str());
    }
    if let Some(var_951) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_951).into()),
        );
    }
    if let Some(var_952) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_952, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_953) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_953, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_954) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_954, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_955) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_955, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_956) = &input.name_contains {
        object.key("NameContains").string(var_956.as_str());
    }
    if let Some(var_957) = &input.model_name_contains {
        object.key("ModelNameContains").string(var_957.as_str());
    }
    if let Some(var_958) = &input.status_equals {
        object.key("StatusEquals").string(var_958.as_str());
    }
    if let Some(var_959) = &input.sort_by {
        object.key("SortBy").string(var_959.as_str());
    }
    if let Some(var_960) = &input.sort_order {
        object.key("SortOrder").string(var_960.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_endpoint_configs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointConfigsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_961) = &input.sort_by {
        object.key("SortBy").string(var_961.as_str());
    }
    if let Some(var_962) = &input.sort_order {
        object.key("SortOrder").string(var_962.as_str());
    }
    if let Some(var_963) = &input.next_token {
        object.key("NextToken").string(var_963.as_str());
    }
    if let Some(var_964) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_964).into()),
        );
    }
    if let Some(var_965) = &input.name_contains {
        object.key("NameContains").string(var_965.as_str());
    }
    if let Some(var_966) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_966, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_967) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_967, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_968) = &input.sort_by {
        object.key("SortBy").string(var_968.as_str());
    }
    if let Some(var_969) = &input.sort_order {
        object.key("SortOrder").string(var_969.as_str());
    }
    if let Some(var_970) = &input.next_token {
        object.key("NextToken").string(var_970.as_str());
    }
    if let Some(var_971) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_971).into()),
        );
    }
    if let Some(var_972) = &input.name_contains {
        object.key("NameContains").string(var_972.as_str());
    }
    if let Some(var_973) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_973, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_974) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_974, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_975) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_975, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_976) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_976, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_977) = &input.status_equals {
        object.key("StatusEquals").string(var_977.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_experiments_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperimentsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_978) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_978, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_979) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_979, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_980) = &input.sort_by {
        object.key("SortBy").string(var_980.as_str());
    }
    if let Some(var_981) = &input.sort_order {
        object.key("SortOrder").string(var_981.as_str());
    }
    if let Some(var_982) = &input.next_token {
        object.key("NextToken").string(var_982.as_str());
    }
    if let Some(var_983) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_983).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_feature_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFeatureGroupsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_984) = &input.name_contains {
        object.key("NameContains").string(var_984.as_str());
    }
    if let Some(var_985) = &input.feature_group_status_equals {
        object
            .key("FeatureGroupStatusEquals")
            .string(var_985.as_str());
    }
    if let Some(var_986) = &input.offline_store_status_equals {
        object
            .key("OfflineStoreStatusEquals")
            .string(var_986.as_str());
    }
    if let Some(var_987) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_987, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_988) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_988, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_989) = &input.sort_order {
        object.key("SortOrder").string(var_989.as_str());
    }
    if let Some(var_990) = &input.sort_by {
        object.key("SortBy").string(var_990.as_str());
    }
    if let Some(var_991) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_991).into()),
        );
    }
    if let Some(var_992) = &input.next_token {
        object.key("NextToken").string(var_992.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_flow_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFlowDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_993) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_993, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_994) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_994, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_995) = &input.sort_order {
        object.key("SortOrder").string(var_995.as_str());
    }
    if let Some(var_996) = &input.next_token {
        object.key("NextToken").string(var_996.as_str());
    }
    if let Some(var_997) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_997).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_human_task_uis_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListHumanTaskUisInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_998) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_998, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_999) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_999, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1000) = &input.sort_order {
        object.key("SortOrder").string(var_1000.as_str());
    }
    if let Some(var_1001) = &input.next_token {
        object.key("NextToken").string(var_1001.as_str());
    }
    if let Some(var_1002) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1002).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_hyper_parameter_tuning_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListHyperParameterTuningJobsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1003) = &input.next_token {
        object.key("NextToken").string(var_1003.as_str());
    }
    if let Some(var_1004) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1004).into()),
        );
    }
    if let Some(var_1005) = &input.sort_by {
        object.key("SortBy").string(var_1005.as_str());
    }
    if let Some(var_1006) = &input.sort_order {
        object.key("SortOrder").string(var_1006.as_str());
    }
    if let Some(var_1007) = &input.name_contains {
        object.key("NameContains").string(var_1007.as_str());
    }
    if let Some(var_1008) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1008, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1009) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1009, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1010) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1010, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1011) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1011, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1012) = &input.status_equals {
        object.key("StatusEquals").string(var_1012.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_images_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1013) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1013, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1014) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1014, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1015) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1015, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1016) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1016, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1017) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1017).into()),
        );
    }
    if let Some(var_1018) = &input.name_contains {
        object.key("NameContains").string(var_1018.as_str());
    }
    if let Some(var_1019) = &input.next_token {
        object.key("NextToken").string(var_1019.as_str());
    }
    if let Some(var_1020) = &input.sort_by {
        object.key("SortBy").string(var_1020.as_str());
    }
    if let Some(var_1021) = &input.sort_order {
        object.key("SortOrder").string(var_1021.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_image_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImageVersionsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1022) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1022, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1023) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1023, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1024) = &input.image_name {
        object.key("ImageName").string(var_1024.as_str());
    }
    if let Some(var_1025) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1025, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1026) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1026, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1027) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1027).into()),
        );
    }
    if let Some(var_1028) = &input.next_token {
        object.key("NextToken").string(var_1028.as_str());
    }
    if let Some(var_1029) = &input.sort_by {
        object.key("SortBy").string(var_1029.as_str());
    }
    if let Some(var_1030) = &input.sort_order {
        object.key("SortOrder").string(var_1030.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_inference_recommendations_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInferenceRecommendationsJobsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1031) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1031, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1032) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1032, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1033) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1033, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1034) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1034, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1035) = &input.name_contains {
        object.key("NameContains").string(var_1035.as_str());
    }
    if let Some(var_1036) = &input.status_equals {
        object.key("StatusEquals").string(var_1036.as_str());
    }
    if let Some(var_1037) = &input.sort_by {
        object.key("SortBy").string(var_1037.as_str());
    }
    if let Some(var_1038) = &input.sort_order {
        object.key("SortOrder").string(var_1038.as_str());
    }
    if let Some(var_1039) = &input.next_token {
        object.key("NextToken").string(var_1039.as_str());
    }
    if let Some(var_1040) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1040).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_labeling_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLabelingJobsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1041) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1041, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1042) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1042, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1043) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1043, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1044) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1044, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1045) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1045).into()),
        );
    }
    if let Some(var_1046) = &input.next_token {
        object.key("NextToken").string(var_1046.as_str());
    }
    if let Some(var_1047) = &input.name_contains {
        object.key("NameContains").string(var_1047.as_str());
    }
    if let Some(var_1048) = &input.sort_by {
        object.key("SortBy").string(var_1048.as_str());
    }
    if let Some(var_1049) = &input.sort_order {
        object.key("SortOrder").string(var_1049.as_str());
    }
    if let Some(var_1050) = &input.status_equals {
        object.key("StatusEquals").string(var_1050.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_labeling_jobs_for_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLabelingJobsForWorkteamInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1051) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1051.as_str());
    }
    if let Some(var_1052) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1052).into()),
        );
    }
    if let Some(var_1053) = &input.next_token {
        object.key("NextToken").string(var_1053.as_str());
    }
    if let Some(var_1054) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1054, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1055) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1055, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1056) = &input.job_reference_code_contains {
        object
            .key("JobReferenceCodeContains")
            .string(var_1056.as_str());
    }
    if let Some(var_1057) = &input.sort_by {
        object.key("SortBy").string(var_1057.as_str());
    }
    if let Some(var_1058) = &input.sort_order {
        object.key("SortOrder").string(var_1058.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_lineage_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLineageGroupsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1059) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1059, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1060) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1060, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1061) = &input.sort_by {
        object.key("SortBy").string(var_1061.as_str());
    }
    if let Some(var_1062) = &input.sort_order {
        object.key("SortOrder").string(var_1062.as_str());
    }
    if let Some(var_1063) = &input.next_token {
        object.key("NextToken").string(var_1063.as_str());
    }
    if let Some(var_1064) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1064).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_bias_job_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelBiasJobDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1065) = &input.endpoint_name {
        object.key("EndpointName").string(var_1065.as_str());
    }
    if let Some(var_1066) = &input.sort_by {
        object.key("SortBy").string(var_1066.as_str());
    }
    if let Some(var_1067) = &input.sort_order {
        object.key("SortOrder").string(var_1067.as_str());
    }
    if let Some(var_1068) = &input.next_token {
        object.key("NextToken").string(var_1068.as_str());
    }
    if let Some(var_1069) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1069).into()),
        );
    }
    if let Some(var_1070) = &input.name_contains {
        object.key("NameContains").string(var_1070.as_str());
    }
    if let Some(var_1071) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1071, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1072) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1072, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_explainability_job_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelExplainabilityJobDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1073) = &input.endpoint_name {
        object.key("EndpointName").string(var_1073.as_str());
    }
    if let Some(var_1074) = &input.sort_by {
        object.key("SortBy").string(var_1074.as_str());
    }
    if let Some(var_1075) = &input.sort_order {
        object.key("SortOrder").string(var_1075.as_str());
    }
    if let Some(var_1076) = &input.next_token {
        object.key("NextToken").string(var_1076.as_str());
    }
    if let Some(var_1077) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1077).into()),
        );
    }
    if let Some(var_1078) = &input.name_contains {
        object.key("NameContains").string(var_1078.as_str());
    }
    if let Some(var_1079) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1079, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1080) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1080, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelMetadataInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1081) = &input.search_expression {
        #[allow(unused_mut)]
        let mut object_1082 = object.key("SearchExpression").start_object();
        crate::json_ser::serialize_structure_crate_model_model_metadata_search_expression(
            &mut object_1082,
            var_1081,
        )?;
        object_1082.finish();
    }
    if let Some(var_1083) = &input.next_token {
        object.key("NextToken").string(var_1083.as_str());
    }
    if let Some(var_1084) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1084).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_package_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelPackageGroupsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1085) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1085, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1086) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1086, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1087) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1087).into()),
        );
    }
    if let Some(var_1088) = &input.name_contains {
        object.key("NameContains").string(var_1088.as_str());
    }
    if let Some(var_1089) = &input.next_token {
        object.key("NextToken").string(var_1089.as_str());
    }
    if let Some(var_1090) = &input.sort_by {
        object.key("SortBy").string(var_1090.as_str());
    }
    if let Some(var_1091) = &input.sort_order {
        object.key("SortOrder").string(var_1091.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_packages_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelPackagesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1092) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1092, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1093) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1093, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1094) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1094).into()),
        );
    }
    if let Some(var_1095) = &input.name_contains {
        object.key("NameContains").string(var_1095.as_str());
    }
    if let Some(var_1096) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_1096.as_str());
    }
    if let Some(var_1097) = &input.model_package_group_name {
        object
            .key("ModelPackageGroupName")
            .string(var_1097.as_str());
    }
    if let Some(var_1098) = &input.model_package_type {
        object.key("ModelPackageType").string(var_1098.as_str());
    }
    if let Some(var_1099) = &input.next_token {
        object.key("NextToken").string(var_1099.as_str());
    }
    if let Some(var_1100) = &input.sort_by {
        object.key("SortBy").string(var_1100.as_str());
    }
    if let Some(var_1101) = &input.sort_order {
        object.key("SortOrder").string(var_1101.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_quality_job_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelQualityJobDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1102) = &input.endpoint_name {
        object.key("EndpointName").string(var_1102.as_str());
    }
    if let Some(var_1103) = &input.sort_by {
        object.key("SortBy").string(var_1103.as_str());
    }
    if let Some(var_1104) = &input.sort_order {
        object.key("SortOrder").string(var_1104.as_str());
    }
    if let Some(var_1105) = &input.next_token {
        object.key("NextToken").string(var_1105.as_str());
    }
    if let Some(var_1106) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1106).into()),
        );
    }
    if let Some(var_1107) = &input.name_contains {
        object.key("NameContains").string(var_1107.as_str());
    }
    if let Some(var_1108) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1108, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1109) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1109, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_models_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1110) = &input.sort_by {
        object.key("SortBy").string(var_1110.as_str());
    }
    if let Some(var_1111) = &input.sort_order {
        object.key("SortOrder").string(var_1111.as_str());
    }
    if let Some(var_1112) = &input.next_token {
        object.key("NextToken").string(var_1112.as_str());
    }
    if let Some(var_1113) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1113).into()),
        );
    }
    if let Some(var_1114) = &input.name_contains {
        object.key("NameContains").string(var_1114.as_str());
    }
    if let Some(var_1115) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1115, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1116) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1116, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_monitoring_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMonitoringExecutionsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1117) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_1117.as_str());
    }
    if let Some(var_1118) = &input.endpoint_name {
        object.key("EndpointName").string(var_1118.as_str());
    }
    if let Some(var_1119) = &input.sort_by {
        object.key("SortBy").string(var_1119.as_str());
    }
    if let Some(var_1120) = &input.sort_order {
        object.key("SortOrder").string(var_1120.as_str());
    }
    if let Some(var_1121) = &input.next_token {
        object.key("NextToken").string(var_1121.as_str());
    }
    if let Some(var_1122) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1122).into()),
        );
    }
    if let Some(var_1123) = &input.scheduled_time_before {
        object
            .key("ScheduledTimeBefore")
            .date_time(var_1123, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1124) = &input.scheduled_time_after {
        object
            .key("ScheduledTimeAfter")
            .date_time(var_1124, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1125) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1125, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1126) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1126, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1127) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1127, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1128) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1128, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1129) = &input.status_equals {
        object.key("StatusEquals").string(var_1129.as_str());
    }
    if let Some(var_1130) = &input.monitoring_job_definition_name {
        object
            .key("MonitoringJobDefinitionName")
            .string(var_1130.as_str());
    }
    if let Some(var_1131) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1131.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_monitoring_schedules_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMonitoringSchedulesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1132) = &input.endpoint_name {
        object.key("EndpointName").string(var_1132.as_str());
    }
    if let Some(var_1133) = &input.sort_by {
        object.key("SortBy").string(var_1133.as_str());
    }
    if let Some(var_1134) = &input.sort_order {
        object.key("SortOrder").string(var_1134.as_str());
    }
    if let Some(var_1135) = &input.next_token {
        object.key("NextToken").string(var_1135.as_str());
    }
    if let Some(var_1136) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1136).into()),
        );
    }
    if let Some(var_1137) = &input.name_contains {
        object.key("NameContains").string(var_1137.as_str());
    }
    if let Some(var_1138) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1138, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1139) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1139, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1140) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1140, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1141) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1141, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1142) = &input.status_equals {
        object.key("StatusEquals").string(var_1142.as_str());
    }
    if let Some(var_1143) = &input.monitoring_job_definition_name {
        object
            .key("MonitoringJobDefinitionName")
            .string(var_1143.as_str());
    }
    if let Some(var_1144) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1144.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_notebook_instance_lifecycle_configs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookInstanceLifecycleConfigsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1145) = &input.next_token {
        object.key("NextToken").string(var_1145.as_str());
    }
    if let Some(var_1146) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1146).into()),
        );
    }
    if let Some(var_1147) = &input.sort_by {
        object.key("SortBy").string(var_1147.as_str());
    }
    if let Some(var_1148) = &input.sort_order {
        object.key("SortOrder").string(var_1148.as_str());
    }
    if let Some(var_1149) = &input.name_contains {
        object.key("NameContains").string(var_1149.as_str());
    }
    if let Some(var_1150) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1150, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1151) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1151, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1152) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1152, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1153) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1153, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_notebook_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookInstancesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1154) = &input.next_token {
        object.key("NextToken").string(var_1154.as_str());
    }
    if let Some(var_1155) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1155).into()),
        );
    }
    if let Some(var_1156) = &input.sort_by {
        object.key("SortBy").string(var_1156.as_str());
    }
    if let Some(var_1157) = &input.sort_order {
        object.key("SortOrder").string(var_1157.as_str());
    }
    if let Some(var_1158) = &input.name_contains {
        object.key("NameContains").string(var_1158.as_str());
    }
    if let Some(var_1159) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1159, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1160) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1160, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1161) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1161, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1162) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1162, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1163) = &input.status_equals {
        object.key("StatusEquals").string(var_1163.as_str());
    }
    if let Some(var_1164) = &input.notebook_instance_lifecycle_config_name_contains {
        object
            .key("NotebookInstanceLifecycleConfigNameContains")
            .string(var_1164.as_str());
    }
    if let Some(var_1165) = &input.default_code_repository_contains {
        object
            .key("DefaultCodeRepositoryContains")
            .string(var_1165.as_str());
    }
    if let Some(var_1166) = &input.additional_code_repository_equals {
        object
            .key("AdditionalCodeRepositoryEquals")
            .string(var_1166.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pipeline_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineExecutionsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1167) = &input.pipeline_name {
        object.key("PipelineName").string(var_1167.as_str());
    }
    if let Some(var_1168) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1168, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1169) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1169, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1170) = &input.sort_by {
        object.key("SortBy").string(var_1170.as_str());
    }
    if let Some(var_1171) = &input.sort_order {
        object.key("SortOrder").string(var_1171.as_str());
    }
    if let Some(var_1172) = &input.next_token {
        object.key("NextToken").string(var_1172.as_str());
    }
    if let Some(var_1173) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1173).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pipeline_execution_steps_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineExecutionStepsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1174) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1174.as_str());
    }
    if let Some(var_1175) = &input.next_token {
        object.key("NextToken").string(var_1175.as_str());
    }
    if let Some(var_1176) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1176).into()),
        );
    }
    if let Some(var_1177) = &input.sort_order {
        object.key("SortOrder").string(var_1177.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pipeline_parameters_for_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineParametersForExecutionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1178) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1178.as_str());
    }
    if let Some(var_1179) = &input.next_token {
        object.key("NextToken").string(var_1179.as_str());
    }
    if let Some(var_1180) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1180).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pipelines_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelinesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1181) = &input.pipeline_name_prefix {
        object.key("PipelineNamePrefix").string(var_1181.as_str());
    }
    if let Some(var_1182) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1182, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1183) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1183, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1184) = &input.sort_by {
        object.key("SortBy").string(var_1184.as_str());
    }
    if let Some(var_1185) = &input.sort_order {
        object.key("SortOrder").string(var_1185.as_str());
    }
    if let Some(var_1186) = &input.next_token {
        object.key("NextToken").string(var_1186.as_str());
    }
    if let Some(var_1187) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1187).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_processing_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProcessingJobsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1188) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1188, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1189) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1189, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1190) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1190, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1191) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1191, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1192) = &input.name_contains {
        object.key("NameContains").string(var_1192.as_str());
    }
    if let Some(var_1193) = &input.status_equals {
        object.key("StatusEquals").string(var_1193.as_str());
    }
    if let Some(var_1194) = &input.sort_by {
        object.key("SortBy").string(var_1194.as_str());
    }
    if let Some(var_1195) = &input.sort_order {
        object.key("SortOrder").string(var_1195.as_str());
    }
    if let Some(var_1196) = &input.next_token {
        object.key("NextToken").string(var_1196.as_str());
    }
    if let Some(var_1197) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1197).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_projects_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProjectsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1198) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1198, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1199) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1199, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1200) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1200).into()),
        );
    }
    if let Some(var_1201) = &input.name_contains {
        object.key("NameContains").string(var_1201.as_str());
    }
    if let Some(var_1202) = &input.next_token {
        object.key("NextToken").string(var_1202.as_str());
    }
    if let Some(var_1203) = &input.sort_by {
        object.key("SortBy").string(var_1203.as_str());
    }
    if let Some(var_1204) = &input.sort_order {
        object.key("SortOrder").string(var_1204.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_stage_devices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStageDevicesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1205) = &input.next_token {
        object.key("NextToken").string(var_1205.as_str());
    }
    if let Some(var_1206) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1206).into()),
        );
    }
    if let Some(var_1207) = &input.edge_deployment_plan_name {
        object
            .key("EdgeDeploymentPlanName")
            .string(var_1207.as_str());
    }
    if input.exclude_devices_deployed_in_other_stage {
        object
            .key("ExcludeDevicesDeployedInOtherStage")
            .boolean(input.exclude_devices_deployed_in_other_stage);
    }
    if let Some(var_1208) = &input.stage_name {
        object.key("StageName").string(var_1208.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_studio_lifecycle_configs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStudioLifecycleConfigsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1209) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1209).into()),
        );
    }
    if let Some(var_1210) = &input.next_token {
        object.key("NextToken").string(var_1210.as_str());
    }
    if let Some(var_1211) = &input.name_contains {
        object.key("NameContains").string(var_1211.as_str());
    }
    if let Some(var_1212) = &input.app_type_equals {
        object.key("AppTypeEquals").string(var_1212.as_str());
    }
    if let Some(var_1213) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1213, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1214) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1214, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1215) = &input.modified_time_before {
        object
            .key("ModifiedTimeBefore")
            .date_time(var_1215, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1216) = &input.modified_time_after {
        object
            .key("ModifiedTimeAfter")
            .date_time(var_1216, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1217) = &input.sort_by {
        object.key("SortBy").string(var_1217.as_str());
    }
    if let Some(var_1218) = &input.sort_order {
        object.key("SortOrder").string(var_1218.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_subscribed_workteams_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSubscribedWorkteamsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1219) = &input.name_contains {
        object.key("NameContains").string(var_1219.as_str());
    }
    if let Some(var_1220) = &input.next_token {
        object.key("NextToken").string(var_1220.as_str());
    }
    if let Some(var_1221) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1221).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1222) = &input.resource_arn {
        object.key("ResourceArn").string(var_1222.as_str());
    }
    if let Some(var_1223) = &input.next_token {
        object.key("NextToken").string(var_1223.as_str());
    }
    if let Some(var_1224) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1224).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_training_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrainingJobsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1225) = &input.next_token {
        object.key("NextToken").string(var_1225.as_str());
    }
    if let Some(var_1226) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1226).into()),
        );
    }
    if let Some(var_1227) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1227, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1228) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1228, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1229) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1229, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1230) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1230, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1231) = &input.name_contains {
        object.key("NameContains").string(var_1231.as_str());
    }
    if let Some(var_1232) = &input.status_equals {
        object.key("StatusEquals").string(var_1232.as_str());
    }
    if let Some(var_1233) = &input.sort_by {
        object.key("SortBy").string(var_1233.as_str());
    }
    if let Some(var_1234) = &input.sort_order {
        object.key("SortOrder").string(var_1234.as_str());
    }
    if let Some(var_1235) = &input.warm_pool_status_equals {
        object.key("WarmPoolStatusEquals").string(var_1235.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_training_jobs_for_hyper_parameter_tuning_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrainingJobsForHyperParameterTuningJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1236) = &input.hyper_parameter_tuning_job_name {
        object
            .key("HyperParameterTuningJobName")
            .string(var_1236.as_str());
    }
    if let Some(var_1237) = &input.next_token {
        object.key("NextToken").string(var_1237.as_str());
    }
    if let Some(var_1238) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1238).into()),
        );
    }
    if let Some(var_1239) = &input.status_equals {
        object.key("StatusEquals").string(var_1239.as_str());
    }
    if let Some(var_1240) = &input.sort_by {
        object.key("SortBy").string(var_1240.as_str());
    }
    if let Some(var_1241) = &input.sort_order {
        object.key("SortOrder").string(var_1241.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_transform_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTransformJobsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1242) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1242, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1243) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1243, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1244) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1244, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1245) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1245, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1246) = &input.name_contains {
        object.key("NameContains").string(var_1246.as_str());
    }
    if let Some(var_1247) = &input.status_equals {
        object.key("StatusEquals").string(var_1247.as_str());
    }
    if let Some(var_1248) = &input.sort_by {
        object.key("SortBy").string(var_1248.as_str());
    }
    if let Some(var_1249) = &input.sort_order {
        object.key("SortOrder").string(var_1249.as_str());
    }
    if let Some(var_1250) = &input.next_token {
        object.key("NextToken").string(var_1250.as_str());
    }
    if let Some(var_1251) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1251).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_trial_components_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrialComponentsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1252) = &input.experiment_name {
        object.key("ExperimentName").string(var_1252.as_str());
    }
    if let Some(var_1253) = &input.trial_name {
        object.key("TrialName").string(var_1253.as_str());
    }
    if let Some(var_1254) = &input.source_arn {
        object.key("SourceArn").string(var_1254.as_str());
    }
    if let Some(var_1255) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1255, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1256) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1256, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1257) = &input.sort_by {
        object.key("SortBy").string(var_1257.as_str());
    }
    if let Some(var_1258) = &input.sort_order {
        object.key("SortOrder").string(var_1258.as_str());
    }
    if let Some(var_1259) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1259).into()),
        );
    }
    if let Some(var_1260) = &input.next_token {
        object.key("NextToken").string(var_1260.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_trials_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrialsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1261) = &input.experiment_name {
        object.key("ExperimentName").string(var_1261.as_str());
    }
    if let Some(var_1262) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1262.as_str());
    }
    if let Some(var_1263) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1263, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1264) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1264, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1265) = &input.sort_by {
        object.key("SortBy").string(var_1265.as_str());
    }
    if let Some(var_1266) = &input.sort_order {
        object.key("SortOrder").string(var_1266.as_str());
    }
    if let Some(var_1267) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1267).into()),
        );
    }
    if let Some(var_1268) = &input.next_token {
        object.key("NextToken").string(var_1268.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_user_profiles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUserProfilesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1269) = &input.next_token {
        object.key("NextToken").string(var_1269.as_str());
    }
    if let Some(var_1270) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1270).into()),
        );
    }
    if let Some(var_1271) = &input.sort_order {
        object.key("SortOrder").string(var_1271.as_str());
    }
    if let Some(var_1272) = &input.sort_by {
        object.key("SortBy").string(var_1272.as_str());
    }
    if let Some(var_1273) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_1273.as_str());
    }
    if let Some(var_1274) = &input.user_profile_name_contains {
        object
            .key("UserProfileNameContains")
            .string(var_1274.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workforces_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkforcesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1275) = &input.sort_by {
        object.key("SortBy").string(var_1275.as_str());
    }
    if let Some(var_1276) = &input.sort_order {
        object.key("SortOrder").string(var_1276.as_str());
    }
    if let Some(var_1277) = &input.name_contains {
        object.key("NameContains").string(var_1277.as_str());
    }
    if let Some(var_1278) = &input.next_token {
        object.key("NextToken").string(var_1278.as_str());
    }
    if let Some(var_1279) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1279).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workteams_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkteamsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1280) = &input.sort_by {
        object.key("SortBy").string(var_1280.as_str());
    }
    if let Some(var_1281) = &input.sort_order {
        object.key("SortOrder").string(var_1281.as_str());
    }
    if let Some(var_1282) = &input.name_contains {
        object.key("NameContains").string(var_1282.as_str());
    }
    if let Some(var_1283) = &input.next_token {
        object.key("NextToken").string(var_1283.as_str());
    }
    if let Some(var_1284) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1284).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_model_package_group_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutModelPackageGroupPolicyInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1285) = &input.model_package_group_name {
        object
            .key("ModelPackageGroupName")
            .string(var_1285.as_str());
    }
    if let Some(var_1286) = &input.resource_policy {
        object.key("ResourcePolicy").string(var_1286.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_lineage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QueryLineageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1287) = &input.start_arns {
        let mut array_1288 = object.key("StartArns").start_array();
        for item_1289 in var_1287 {
            {
                array_1288.value().string(item_1289.as_str());
            }
        }
        array_1288.finish();
    }
    if let Some(var_1290) = &input.direction {
        object.key("Direction").string(var_1290.as_str());
    }
    if input.include_edges {
        object.key("IncludeEdges").boolean(input.include_edges);
    }
    if let Some(var_1291) = &input.filters {
        #[allow(unused_mut)]
        let mut object_1292 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_query_filters(&mut object_1292, var_1291)?;
        object_1292.finish();
    }
    if let Some(var_1293) = &input.max_depth {
        object.key("MaxDepth").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1293).into()),
        );
    }
    if let Some(var_1294) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1294).into()),
        );
    }
    if let Some(var_1295) = &input.next_token {
        object.key("NextToken").string(var_1295.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_devices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterDevicesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1296) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1296.as_str());
    }
    if let Some(var_1297) = &input.devices {
        let mut array_1298 = object.key("Devices").start_array();
        for item_1299 in var_1297 {
            {
                #[allow(unused_mut)]
                let mut object_1300 = array_1298.value().start_object();
                crate::json_ser::serialize_structure_crate_model_device(
                    &mut object_1300,
                    item_1299,
                )?;
                object_1300.finish();
            }
        }
        array_1298.finish();
    }
    if let Some(var_1301) = &input.tags {
        let mut array_1302 = object.key("Tags").start_array();
        for item_1303 in var_1301 {
            {
                #[allow(unused_mut)]
                let mut object_1304 = array_1302.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_1304, item_1303)?;
                object_1304.finish();
            }
        }
        array_1302.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_render_ui_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RenderUiTemplateInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1305) = &input.ui_template {
        #[allow(unused_mut)]
        let mut object_1306 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_template(&mut object_1306, var_1305)?;
        object_1306.finish();
    }
    if let Some(var_1307) = &input.task {
        #[allow(unused_mut)]
        let mut object_1308 = object.key("Task").start_object();
        crate::json_ser::serialize_structure_crate_model_renderable_task(
            &mut object_1308,
            var_1307,
        )?;
        object_1308.finish();
    }
    if let Some(var_1309) = &input.role_arn {
        object.key("RoleArn").string(var_1309.as_str());
    }
    if let Some(var_1310) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1310.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_retry_pipeline_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RetryPipelineExecutionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1311) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1311.as_str());
    }
    if let Some(var_1312) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1312.as_str());
    }
    if let Some(var_1313) = &input.parallelism_configuration {
        #[allow(unused_mut)]
        let mut object_1314 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(
            &mut object_1314,
            var_1313,
        )?;
        object_1314.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1315) = &input.resource {
        object.key("Resource").string(var_1315.as_str());
    }
    if let Some(var_1316) = &input.search_expression {
        #[allow(unused_mut)]
        let mut object_1317 = object.key("SearchExpression").start_object();
        crate::json_ser::serialize_structure_crate_model_search_expression(
            &mut object_1317,
            var_1316,
        )?;
        object_1317.finish();
    }
    if let Some(var_1318) = &input.sort_by {
        object.key("SortBy").string(var_1318.as_str());
    }
    if let Some(var_1319) = &input.sort_order {
        object.key("SortOrder").string(var_1319.as_str());
    }
    if let Some(var_1320) = &input.next_token {
        object.key("NextToken").string(var_1320.as_str());
    }
    if let Some(var_1321) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1321).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_pipeline_execution_step_failure_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendPipelineExecutionStepFailureInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1322) = &input.callback_token {
        object.key("CallbackToken").string(var_1322.as_str());
    }
    if let Some(var_1323) = &input.failure_reason {
        object.key("FailureReason").string(var_1323.as_str());
    }
    if let Some(var_1324) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1324.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_pipeline_execution_step_success_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendPipelineExecutionStepSuccessInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1325) = &input.callback_token {
        object.key("CallbackToken").string(var_1325.as_str());
    }
    if let Some(var_1326) = &input.output_parameters {
        let mut array_1327 = object.key("OutputParameters").start_array();
        for item_1328 in var_1326 {
            {
                #[allow(unused_mut)]
                let mut object_1329 = array_1327.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_parameter(
                    &mut object_1329,
                    item_1328,
                )?;
                object_1329.finish();
            }
        }
        array_1327.finish();
    }
    if let Some(var_1330) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1330.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_edge_deployment_stage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartEdgeDeploymentStageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1331) = &input.edge_deployment_plan_name {
        object
            .key("EdgeDeploymentPlanName")
            .string(var_1331.as_str());
    }
    if let Some(var_1332) = &input.stage_name {
        object.key("StageName").string(var_1332.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1333) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_1333.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1334) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1334.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_pipeline_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartPipelineExecutionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1335) = &input.pipeline_name {
        object.key("PipelineName").string(var_1335.as_str());
    }
    if let Some(var_1336) = &input.pipeline_execution_display_name {
        object
            .key("PipelineExecutionDisplayName")
            .string(var_1336.as_str());
    }
    if let Some(var_1337) = &input.pipeline_parameters {
        let mut array_1338 = object.key("PipelineParameters").start_array();
        for item_1339 in var_1337 {
            {
                #[allow(unused_mut)]
                let mut object_1340 = array_1338.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameter(
                    &mut object_1340,
                    item_1339,
                )?;
                object_1340.finish();
            }
        }
        array_1338.finish();
    }
    if let Some(var_1341) = &input.pipeline_execution_description {
        object
            .key("PipelineExecutionDescription")
            .string(var_1341.as_str());
    }
    if let Some(var_1342) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1342.as_str());
    }
    if let Some(var_1343) = &input.parallelism_configuration {
        #[allow(unused_mut)]
        let mut object_1344 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(
            &mut object_1344,
            var_1343,
        )?;
        object_1344.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_auto_ml_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopAutoMlJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1345) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_1345.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_compilation_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCompilationJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1346) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_1346.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_edge_deployment_stage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopEdgeDeploymentStageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1347) = &input.edge_deployment_plan_name {
        object
            .key("EdgeDeploymentPlanName")
            .string(var_1347.as_str());
    }
    if let Some(var_1348) = &input.stage_name {
        object.key("StageName").string(var_1348.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_edge_packaging_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopEdgePackagingJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1349) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_1349.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_hyper_parameter_tuning_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopHyperParameterTuningJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1350) = &input.hyper_parameter_tuning_job_name {
        object
            .key("HyperParameterTuningJobName")
            .string(var_1350.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_inference_recommendations_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopInferenceRecommendationsJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1351) = &input.job_name {
        object.key("JobName").string(var_1351.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_labeling_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopLabelingJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1352) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_1352.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1353) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_1353.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1354) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1354.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_pipeline_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopPipelineExecutionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1355) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1355.as_str());
    }
    if let Some(var_1356) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1356.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_processing_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopProcessingJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1357) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_1357.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_training_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTrainingJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1358) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1358.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_transform_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTransformJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1359) = &input.transform_job_name {
        object.key("TransformJobName").string(var_1359.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateActionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1360) = &input.action_name {
        object.key("ActionName").string(var_1360.as_str());
    }
    if let Some(var_1361) = &input.description {
        object.key("Description").string(var_1361.as_str());
    }
    if let Some(var_1362) = &input.status {
        object.key("Status").string(var_1362.as_str());
    }
    if let Some(var_1363) = &input.properties {
        #[allow(unused_mut)]
        let mut object_1364 = object.key("Properties").start_object();
        for (key_1365, value_1366) in var_1363 {
            {
                object_1364
                    .key(key_1365.as_str())
                    .string(value_1366.as_str());
            }
        }
        object_1364.finish();
    }
    if let Some(var_1367) = &input.properties_to_remove {
        let mut array_1368 = object.key("PropertiesToRemove").start_array();
        for item_1369 in var_1367 {
            {
                array_1368.value().string(item_1369.as_str());
            }
        }
        array_1368.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_app_image_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAppImageConfigInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1370) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_1370.as_str());
    }
    if let Some(var_1371) = &input.kernel_gateway_image_config {
        #[allow(unused_mut)]
        let mut object_1372 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kernel_gateway_image_config(
            &mut object_1372,
            var_1371,
        )?;
        object_1372.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateArtifactInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1373) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_1373.as_str());
    }
    if let Some(var_1374) = &input.artifact_name {
        object.key("ArtifactName").string(var_1374.as_str());
    }
    if let Some(var_1375) = &input.properties {
        #[allow(unused_mut)]
        let mut object_1376 = object.key("Properties").start_object();
        for (key_1377, value_1378) in var_1375 {
            {
                object_1376
                    .key(key_1377.as_str())
                    .string(value_1378.as_str());
            }
        }
        object_1376.finish();
    }
    if let Some(var_1379) = &input.properties_to_remove {
        let mut array_1380 = object.key("PropertiesToRemove").start_array();
        for item_1381 in var_1379 {
            {
                array_1380.value().string(item_1381.as_str());
            }
        }
        array_1380.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_code_repository_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCodeRepositoryInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1382) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_1382.as_str());
    }
    if let Some(var_1383) = &input.git_config {
        #[allow(unused_mut)]
        let mut object_1384 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_git_config_for_update(
            &mut object_1384,
            var_1383,
        )?;
        object_1384.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_context_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContextInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1385) = &input.context_name {
        object.key("ContextName").string(var_1385.as_str());
    }
    if let Some(var_1386) = &input.description {
        object.key("Description").string(var_1386.as_str());
    }
    if let Some(var_1387) = &input.properties {
        #[allow(unused_mut)]
        let mut object_1388 = object.key("Properties").start_object();
        for (key_1389, value_1390) in var_1387 {
            {
                object_1388
                    .key(key_1389.as_str())
                    .string(value_1390.as_str());
            }
        }
        object_1388.finish();
    }
    if let Some(var_1391) = &input.properties_to_remove {
        let mut array_1392 = object.key("PropertiesToRemove").start_array();
        for item_1393 in var_1391 {
            {
                array_1392.value().string(item_1393.as_str());
            }
        }
        array_1392.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_device_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDeviceFleetInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1394) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1394.as_str());
    }
    if let Some(var_1395) = &input.role_arn {
        object.key("RoleArn").string(var_1395.as_str());
    }
    if let Some(var_1396) = &input.description {
        object.key("Description").string(var_1396.as_str());
    }
    if let Some(var_1397) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_1398 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_output_config(
            &mut object_1398,
            var_1397,
        )?;
        object_1398.finish();
    }
    if let Some(var_1399) = &input.enable_iot_role_alias {
        object.key("EnableIotRoleAlias").boolean(*var_1399);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_devices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDevicesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1400) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1400.as_str());
    }
    if let Some(var_1401) = &input.devices {
        let mut array_1402 = object.key("Devices").start_array();
        for item_1403 in var_1401 {
            {
                #[allow(unused_mut)]
                let mut object_1404 = array_1402.value().start_object();
                crate::json_ser::serialize_structure_crate_model_device(
                    &mut object_1404,
                    item_1403,
                )?;
                object_1404.finish();
            }
        }
        array_1402.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1405) = &input.domain_id {
        object.key("DomainId").string(var_1405.as_str());
    }
    if let Some(var_1406) = &input.default_user_settings {
        #[allow(unused_mut)]
        let mut object_1407 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_1407, var_1406)?;
        object_1407.finish();
    }
    if let Some(var_1408) = &input.domain_settings_for_update {
        #[allow(unused_mut)]
        let mut object_1409 = object.key("DomainSettingsForUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_settings_for_update(
            &mut object_1409,
            var_1408,
        )?;
        object_1409.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1410) = &input.endpoint_name {
        object.key("EndpointName").string(var_1410.as_str());
    }
    if let Some(var_1411) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_1411.as_str());
    }
    if input.retain_all_variant_properties {
        object
            .key("RetainAllVariantProperties")
            .boolean(input.retain_all_variant_properties);
    }
    if let Some(var_1412) = &input.exclude_retained_variant_properties {
        let mut array_1413 = object.key("ExcludeRetainedVariantProperties").start_array();
        for item_1414 in var_1412 {
            {
                #[allow(unused_mut)]
                let mut object_1415 = array_1413.value().start_object();
                crate::json_ser::serialize_structure_crate_model_variant_property(
                    &mut object_1415,
                    item_1414,
                )?;
                object_1415.finish();
            }
        }
        array_1413.finish();
    }
    if let Some(var_1416) = &input.deployment_config {
        #[allow(unused_mut)]
        let mut object_1417 = object.key("DeploymentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_deployment_config(
            &mut object_1417,
            var_1416,
        )?;
        object_1417.finish();
    }
    if input.retain_deployment_config {
        object
            .key("RetainDeploymentConfig")
            .boolean(input.retain_deployment_config);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_endpoint_weights_and_capacities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointWeightsAndCapacitiesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1418) = &input.endpoint_name {
        object.key("EndpointName").string(var_1418.as_str());
    }
    if let Some(var_1419) = &input.desired_weights_and_capacities {
        let mut array_1420 = object.key("DesiredWeightsAndCapacities").start_array();
        for item_1421 in var_1419 {
            {
                #[allow(unused_mut)]
                let mut object_1422 = array_1420.value().start_object();
                crate::json_ser::serialize_structure_crate_model_desired_weight_and_capacity(
                    &mut object_1422,
                    item_1421,
                )?;
                object_1422.finish();
            }
        }
        array_1420.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_experiment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExperimentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1423) = &input.experiment_name {
        object.key("ExperimentName").string(var_1423.as_str());
    }
    if let Some(var_1424) = &input.display_name {
        object.key("DisplayName").string(var_1424.as_str());
    }
    if let Some(var_1425) = &input.description {
        object.key("Description").string(var_1425.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_feature_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFeatureGroupInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1426) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_1426.as_str());
    }
    if let Some(var_1427) = &input.feature_additions {
        let mut array_1428 = object.key("FeatureAdditions").start_array();
        for item_1429 in var_1427 {
            {
                #[allow(unused_mut)]
                let mut object_1430 = array_1428.value().start_object();
                crate::json_ser::serialize_structure_crate_model_feature_definition(
                    &mut object_1430,
                    item_1429,
                )?;
                object_1430.finish();
            }
        }
        array_1428.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_feature_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFeatureMetadataInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1431) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_1431.as_str());
    }
    if let Some(var_1432) = &input.feature_name {
        object.key("FeatureName").string(var_1432.as_str());
    }
    if let Some(var_1433) = &input.description {
        object.key("Description").string(var_1433.as_str());
    }
    if let Some(var_1434) = &input.parameter_additions {
        let mut array_1435 = object.key("ParameterAdditions").start_array();
        for item_1436 in var_1434 {
            {
                #[allow(unused_mut)]
                let mut object_1437 = array_1435.value().start_object();
                crate::json_ser::serialize_structure_crate_model_feature_parameter(
                    &mut object_1437,
                    item_1436,
                )?;
                object_1437.finish();
            }
        }
        array_1435.finish();
    }
    if let Some(var_1438) = &input.parameter_removals {
        let mut array_1439 = object.key("ParameterRemovals").start_array();
        for item_1440 in var_1438 {
            {
                array_1439.value().string(item_1440.as_str());
            }
        }
        array_1439.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateImageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1441) = &input.delete_properties {
        let mut array_1442 = object.key("DeleteProperties").start_array();
        for item_1443 in var_1441 {
            {
                array_1442.value().string(item_1443.as_str());
            }
        }
        array_1442.finish();
    }
    if let Some(var_1444) = &input.description {
        object.key("Description").string(var_1444.as_str());
    }
    if let Some(var_1445) = &input.display_name {
        object.key("DisplayName").string(var_1445.as_str());
    }
    if let Some(var_1446) = &input.image_name {
        object.key("ImageName").string(var_1446.as_str());
    }
    if let Some(var_1447) = &input.role_arn {
        object.key("RoleArn").string(var_1447.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_model_package_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateModelPackageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1448) = &input.model_package_arn {
        object.key("ModelPackageArn").string(var_1448.as_str());
    }
    if let Some(var_1449) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_1449.as_str());
    }
    if let Some(var_1450) = &input.approval_description {
        object.key("ApprovalDescription").string(var_1450.as_str());
    }
    if let Some(var_1451) = &input.customer_metadata_properties {
        #[allow(unused_mut)]
        let mut object_1452 = object.key("CustomerMetadataProperties").start_object();
        for (key_1453, value_1454) in var_1451 {
            {
                object_1452
                    .key(key_1453.as_str())
                    .string(value_1454.as_str());
            }
        }
        object_1452.finish();
    }
    if let Some(var_1455) = &input.customer_metadata_properties_to_remove {
        let mut array_1456 = object
            .key("CustomerMetadataPropertiesToRemove")
            .start_array();
        for item_1457 in var_1455 {
            {
                array_1456.value().string(item_1457.as_str());
            }
        }
        array_1456.finish();
    }
    if let Some(var_1458) = &input.additional_inference_specifications_to_add {
        let mut array_1459 = object
            .key("AdditionalInferenceSpecificationsToAdd")
            .start_array();
        for item_1460 in var_1458 {
            {
                #[allow(unused_mut)]
                let mut object_1461 = array_1459.value().start_object();
                crate::json_ser::serialize_structure_crate_model_additional_inference_specification_definition(&mut object_1461, item_1460)?;
                object_1461.finish();
            }
        }
        array_1459.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1462) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_1462.as_str());
    }
    if let Some(var_1463) = &input.monitoring_schedule_config {
        #[allow(unused_mut)]
        let mut object_1464 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_schedule_config(
            &mut object_1464,
            var_1463,
        )?;
        object_1464.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1465) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1465.as_str());
    }
    if let Some(var_1466) = &input.instance_type {
        object.key("InstanceType").string(var_1466.as_str());
    }
    if let Some(var_1467) = &input.role_arn {
        object.key("RoleArn").string(var_1467.as_str());
    }
    if let Some(var_1468) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_1468.as_str());
    }
    if input.disassociate_lifecycle_config {
        object
            .key("DisassociateLifecycleConfig")
            .boolean(input.disassociate_lifecycle_config);
    }
    if let Some(var_1469) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1469).into()),
        );
    }
    if let Some(var_1470) = &input.default_code_repository {
        object
            .key("DefaultCodeRepository")
            .string(var_1470.as_str());
    }
    if let Some(var_1471) = &input.additional_code_repositories {
        let mut array_1472 = object.key("AdditionalCodeRepositories").start_array();
        for item_1473 in var_1471 {
            {
                array_1472.value().string(item_1473.as_str());
            }
        }
        array_1472.finish();
    }
    if let Some(var_1474) = &input.accelerator_types {
        let mut array_1475 = object.key("AcceleratorTypes").start_array();
        for item_1476 in var_1474 {
            {
                array_1475.value().string(item_1476.as_str());
            }
        }
        array_1475.finish();
    }
    if input.disassociate_accelerator_types {
        object
            .key("DisassociateAcceleratorTypes")
            .boolean(input.disassociate_accelerator_types);
    }
    if input.disassociate_default_code_repository {
        object
            .key("DisassociateDefaultCodeRepository")
            .boolean(input.disassociate_default_code_repository);
    }
    if input.disassociate_additional_code_repositories {
        object
            .key("DisassociateAdditionalCodeRepositories")
            .boolean(input.disassociate_additional_code_repositories);
    }
    if let Some(var_1477) = &input.root_access {
        object.key("RootAccess").string(var_1477.as_str());
    }
    if let Some(var_1478) = &input.instance_metadata_service_configuration {
        #[allow(unused_mut)]
        let mut object_1479 = object
            .key("InstanceMetadataServiceConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_instance_metadata_service_configuration(
            &mut object_1479,
            var_1478,
        )?;
        object_1479.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_notebook_instance_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNotebookInstanceLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1480) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_1480.as_str());
    }
    if let Some(var_1481) = &input.on_create {
        let mut array_1482 = object.key("OnCreate").start_array();
        for item_1483 in var_1481 {
            {
                #[allow(unused_mut)]
                let mut object_1484 = array_1482.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(
                    &mut object_1484,
                    item_1483,
                )?;
                object_1484.finish();
            }
        }
        array_1482.finish();
    }
    if let Some(var_1485) = &input.on_start {
        let mut array_1486 = object.key("OnStart").start_array();
        for item_1487 in var_1485 {
            {
                #[allow(unused_mut)]
                let mut object_1488 = array_1486.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(
                    &mut object_1488,
                    item_1487,
                )?;
                object_1488.finish();
            }
        }
        array_1486.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_pipeline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePipelineInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1489) = &input.pipeline_name {
        object.key("PipelineName").string(var_1489.as_str());
    }
    if let Some(var_1490) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_1490.as_str());
    }
    if let Some(var_1491) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_1491.as_str());
    }
    if let Some(var_1492) = &input.pipeline_definition_s3_location {
        #[allow(unused_mut)]
        let mut object_1493 = object.key("PipelineDefinitionS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_pipeline_definition_s3_location(
            &mut object_1493,
            var_1492,
        )?;
        object_1493.finish();
    }
    if let Some(var_1494) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_1494.as_str());
    }
    if let Some(var_1495) = &input.role_arn {
        object.key("RoleArn").string(var_1495.as_str());
    }
    if let Some(var_1496) = &input.parallelism_configuration {
        #[allow(unused_mut)]
        let mut object_1497 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(
            &mut object_1497,
            var_1496,
        )?;
        object_1497.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_pipeline_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePipelineExecutionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1498) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1498.as_str());
    }
    if let Some(var_1499) = &input.pipeline_execution_description {
        object
            .key("PipelineExecutionDescription")
            .string(var_1499.as_str());
    }
    if let Some(var_1500) = &input.pipeline_execution_display_name {
        object
            .key("PipelineExecutionDisplayName")
            .string(var_1500.as_str());
    }
    if let Some(var_1501) = &input.parallelism_configuration {
        #[allow(unused_mut)]
        let mut object_1502 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(
            &mut object_1502,
            var_1501,
        )?;
        object_1502.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_project_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProjectInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1503) = &input.project_name {
        object.key("ProjectName").string(var_1503.as_str());
    }
    if let Some(var_1504) = &input.project_description {
        object.key("ProjectDescription").string(var_1504.as_str());
    }
    if let Some(var_1505) = &input.service_catalog_provisioning_update_details {
        #[allow(unused_mut)]
        let mut object_1506 = object
            .key("ServiceCatalogProvisioningUpdateDetails")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_service_catalog_provisioning_update_details(&mut object_1506, var_1505)?;
        object_1506.finish();
    }
    if let Some(var_1507) = &input.tags {
        let mut array_1508 = object.key("Tags").start_array();
        for item_1509 in var_1507 {
            {
                #[allow(unused_mut)]
                let mut object_1510 = array_1508.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_1510, item_1509)?;
                object_1510.finish();
            }
        }
        array_1508.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_training_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrainingJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1511) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1511.as_str());
    }
    if let Some(var_1512) = &input.profiler_config {
        #[allow(unused_mut)]
        let mut object_1513 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_profiler_config_for_update(
            &mut object_1513,
            var_1512,
        )?;
        object_1513.finish();
    }
    if let Some(var_1514) = &input.profiler_rule_configurations {
        let mut array_1515 = object.key("ProfilerRuleConfigurations").start_array();
        for item_1516 in var_1514 {
            {
                #[allow(unused_mut)]
                let mut object_1517 = array_1515.value().start_object();
                crate::json_ser::serialize_structure_crate_model_profiler_rule_configuration(
                    &mut object_1517,
                    item_1516,
                )?;
                object_1517.finish();
            }
        }
        array_1515.finish();
    }
    if let Some(var_1518) = &input.resource_config {
        #[allow(unused_mut)]
        let mut object_1519 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_config_for_update(
            &mut object_1519,
            var_1518,
        )?;
        object_1519.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trial_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrialInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1520) = &input.trial_name {
        object.key("TrialName").string(var_1520.as_str());
    }
    if let Some(var_1521) = &input.display_name {
        object.key("DisplayName").string(var_1521.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1522) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1522.as_str());
    }
    if let Some(var_1523) = &input.display_name {
        object.key("DisplayName").string(var_1523.as_str());
    }
    if let Some(var_1524) = &input.status {
        #[allow(unused_mut)]
        let mut object_1525 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_crate_model_trial_component_status(
            &mut object_1525,
            var_1524,
        )?;
        object_1525.finish();
    }
    if let Some(var_1526) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_1526, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1527) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_1527, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1528) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_1529 = object.key("Parameters").start_object();
        for (key_1530, value_1531) in var_1528 {
            {
                #[allow(unused_mut)]
                let mut object_1532 = object_1529.key(key_1530.as_str()).start_object();
                crate::json_ser::serialize_union_crate_model_trial_component_parameter_value(
                    &mut object_1532,
                    value_1531,
                )?;
                object_1532.finish();
            }
        }
        object_1529.finish();
    }
    if let Some(var_1533) = &input.parameters_to_remove {
        let mut array_1534 = object.key("ParametersToRemove").start_array();
        for item_1535 in var_1533 {
            {
                array_1534.value().string(item_1535.as_str());
            }
        }
        array_1534.finish();
    }
    if let Some(var_1536) = &input.input_artifacts {
        #[allow(unused_mut)]
        let mut object_1537 = object.key("InputArtifacts").start_object();
        for (key_1538, value_1539) in var_1536 {
            {
                #[allow(unused_mut)]
                let mut object_1540 = object_1537.key(key_1538.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(
                    &mut object_1540,
                    value_1539,
                )?;
                object_1540.finish();
            }
        }
        object_1537.finish();
    }
    if let Some(var_1541) = &input.input_artifacts_to_remove {
        let mut array_1542 = object.key("InputArtifactsToRemove").start_array();
        for item_1543 in var_1541 {
            {
                array_1542.value().string(item_1543.as_str());
            }
        }
        array_1542.finish();
    }
    if let Some(var_1544) = &input.output_artifacts {
        #[allow(unused_mut)]
        let mut object_1545 = object.key("OutputArtifacts").start_object();
        for (key_1546, value_1547) in var_1544 {
            {
                #[allow(unused_mut)]
                let mut object_1548 = object_1545.key(key_1546.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(
                    &mut object_1548,
                    value_1547,
                )?;
                object_1548.finish();
            }
        }
        object_1545.finish();
    }
    if let Some(var_1549) = &input.output_artifacts_to_remove {
        let mut array_1550 = object.key("OutputArtifactsToRemove").start_array();
        for item_1551 in var_1549 {
            {
                array_1550.value().string(item_1551.as_str());
            }
        }
        array_1550.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserProfileInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1552) = &input.domain_id {
        object.key("DomainId").string(var_1552.as_str());
    }
    if let Some(var_1553) = &input.user_profile_name {
        object.key("UserProfileName").string(var_1553.as_str());
    }
    if let Some(var_1554) = &input.user_settings {
        #[allow(unused_mut)]
        let mut object_1555 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_1555, var_1554)?;
        object_1555.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workforce_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkforceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1556) = &input.workforce_name {
        object.key("WorkforceName").string(var_1556.as_str());
    }
    if let Some(var_1557) = &input.source_ip_config {
        #[allow(unused_mut)]
        let mut object_1558 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_source_ip_config(
            &mut object_1558,
            var_1557,
        )?;
        object_1558.finish();
    }
    if let Some(var_1559) = &input.oidc_config {
        #[allow(unused_mut)]
        let mut object_1560 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_oidc_config(&mut object_1560, var_1559)?;
        object_1560.finish();
    }
    if let Some(var_1561) = &input.workforce_vpc_config {
        #[allow(unused_mut)]
        let mut object_1562 = object.key("WorkforceVpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_workforce_vpc_config_request(
            &mut object_1562,
            var_1561,
        )?;
        object_1562.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkteamInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1563) = &input.workteam_name {
        object.key("WorkteamName").string(var_1563.as_str());
    }
    if let Some(var_1564) = &input.member_definitions {
        let mut array_1565 = object.key("MemberDefinitions").start_array();
        for item_1566 in var_1564 {
            {
                #[allow(unused_mut)]
                let mut object_1567 = array_1565.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_definition(
                    &mut object_1567,
                    item_1566,
                )?;
                object_1567.finish();
            }
        }
        array_1565.finish();
    }
    if let Some(var_1568) = &input.description {
        object.key("Description").string(var_1568.as_str());
    }
    if let Some(var_1569) = &input.notification_configuration {
        #[allow(unused_mut)]
        let mut object_1570 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_configuration(
            &mut object_1570,
            var_1569,
        )?;
        object_1570.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1571) = &input.key {
        object.key("Key").string(var_1571.as_str());
    }
    if let Some(var_1572) = &input.value {
        object.key("Value").string(var_1572.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1573) = &input.source_uri {
        object.key("SourceUri").string(var_1573.as_str());
    }
    if let Some(var_1574) = &input.source_type {
        object.key("SourceType").string(var_1574.as_str());
    }
    if let Some(var_1575) = &input.source_id {
        object.key("SourceId").string(var_1575.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataProperties,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1576) = &input.commit_id {
        object.key("CommitId").string(var_1576.as_str());
    }
    if let Some(var_1577) = &input.repository {
        object.key("Repository").string(var_1577.as_str());
    }
    if let Some(var_1578) = &input.generated_by {
        object.key("GeneratedBy").string(var_1578.as_str());
    }
    if let Some(var_1579) = &input.project_id {
        object.key("ProjectId").string(var_1579.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_training_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1580) = &input.training_image {
        object.key("TrainingImage").string(var_1580.as_str());
    }
    if let Some(var_1581) = &input.training_image_digest {
        object.key("TrainingImageDigest").string(var_1581.as_str());
    }
    if let Some(var_1582) = &input.supported_hyper_parameters {
        let mut array_1583 = object.key("SupportedHyperParameters").start_array();
        for item_1584 in var_1582 {
            {
                #[allow(unused_mut)]
                let mut object_1585 = array_1583.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hyper_parameter_specification(
                    &mut object_1585,
                    item_1584,
                )?;
                object_1585.finish();
            }
        }
        array_1583.finish();
    }
    if let Some(var_1586) = &input.supported_training_instance_types {
        let mut array_1587 = object.key("SupportedTrainingInstanceTypes").start_array();
        for item_1588 in var_1586 {
            {
                array_1587.value().string(item_1588.as_str());
            }
        }
        array_1587.finish();
    }
    if input.supports_distributed_training {
        object
            .key("SupportsDistributedTraining")
            .boolean(input.supports_distributed_training);
    }
    if let Some(var_1589) = &input.metric_definitions {
        let mut array_1590 = object.key("MetricDefinitions").start_array();
        for item_1591 in var_1589 {
            {
                #[allow(unused_mut)]
                let mut object_1592 = array_1590.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_definition(
                    &mut object_1592,
                    item_1591,
                )?;
                object_1592.finish();
            }
        }
        array_1590.finish();
    }
    if let Some(var_1593) = &input.training_channels {
        let mut array_1594 = object.key("TrainingChannels").start_array();
        for item_1595 in var_1593 {
            {
                #[allow(unused_mut)]
                let mut object_1596 = array_1594.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel_specification(
                    &mut object_1596,
                    item_1595,
                )?;
                object_1596.finish();
            }
        }
        array_1594.finish();
    }
    if let Some(var_1597) = &input.supported_tuning_job_objective_metrics {
        let mut array_1598 = object
            .key("SupportedTuningJobObjectiveMetrics")
            .start_array();
        for item_1599 in var_1597 {
            {
                #[allow(unused_mut)]
                let mut object_1600 = array_1598.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_objective(&mut object_1600, item_1599)?;
                object_1600.finish();
            }
        }
        array_1598.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inference_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1601) = &input.containers {
        let mut array_1602 = object.key("Containers").start_array();
        for item_1603 in var_1601 {
            {
                #[allow(unused_mut)]
                let mut object_1604 = array_1602.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_package_container_definition(&mut object_1604, item_1603)?;
                object_1604.finish();
            }
        }
        array_1602.finish();
    }
    if let Some(var_1605) = &input.supported_transform_instance_types {
        let mut array_1606 = object.key("SupportedTransformInstanceTypes").start_array();
        for item_1607 in var_1605 {
            {
                array_1606.value().string(item_1607.as_str());
            }
        }
        array_1606.finish();
    }
    if let Some(var_1608) = &input.supported_realtime_inference_instance_types {
        let mut array_1609 = object
            .key("SupportedRealtimeInferenceInstanceTypes")
            .start_array();
        for item_1610 in var_1608 {
            {
                array_1609.value().string(item_1610.as_str());
            }
        }
        array_1609.finish();
    }
    if let Some(var_1611) = &input.supported_content_types {
        let mut array_1612 = object.key("SupportedContentTypes").start_array();
        for item_1613 in var_1611 {
            {
                array_1612.value().string(item_1613.as_str());
            }
        }
        array_1612.finish();
    }
    if let Some(var_1614) = &input.supported_response_mime_types {
        let mut array_1615 = object.key("SupportedResponseMIMETypes").start_array();
        for item_1616 in var_1614 {
            {
                array_1615.value().string(item_1616.as_str());
            }
        }
        array_1615.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_algorithm_validation_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmValidationSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1617) = &input.validation_role {
        object.key("ValidationRole").string(var_1617.as_str());
    }
    if let Some(var_1618) = &input.validation_profiles {
        let mut array_1619 = object.key("ValidationProfiles").start_array();
        for item_1620 in var_1618 {
            {
                #[allow(unused_mut)]
                let mut object_1621 = array_1619.value().start_object();
                crate::json_ser::serialize_structure_crate_model_algorithm_validation_profile(
                    &mut object_1621,
                    item_1620,
                )?;
                object_1621.finish();
            }
        }
        array_1619.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_spec(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceSpec,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1622) = &input.sage_maker_image_arn {
        object.key("SageMakerImageArn").string(var_1622.as_str());
    }
    if let Some(var_1623) = &input.sage_maker_image_version_arn {
        object
            .key("SageMakerImageVersionArn")
            .string(var_1623.as_str());
    }
    if let Some(var_1624) = &input.instance_type {
        object.key("InstanceType").string(var_1624.as_str());
    }
    if let Some(var_1625) = &input.lifecycle_config_arn {
        object.key("LifecycleConfigArn").string(var_1625.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kernel_gateway_image_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelGatewayImageConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1626) = &input.kernel_specs {
        let mut array_1627 = object.key("KernelSpecs").start_array();
        for item_1628 in var_1626 {
            {
                #[allow(unused_mut)]
                let mut object_1629 = array_1627.value().start_object();
                crate::json_ser::serialize_structure_crate_model_kernel_spec(
                    &mut object_1629,
                    item_1628,
                )?;
                object_1629.finish();
            }
        }
        array_1627.finish();
    }
    if let Some(var_1630) = &input.file_system_config {
        #[allow(unused_mut)]
        let mut object_1631 = object.key("FileSystemConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_file_system_config(
            &mut object_1631,
            var_1630,
        )?;
        object_1631.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_artifact_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArtifactSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1632) = &input.source_uri {
        object.key("SourceUri").string(var_1632.as_str());
    }
    if let Some(var_1633) = &input.source_types {
        let mut array_1634 = object.key("SourceTypes").start_array();
        for item_1635 in var_1633 {
            {
                #[allow(unused_mut)]
                let mut object_1636 = array_1634.value().start_object();
                crate::json_ser::serialize_structure_crate_model_artifact_source_type(
                    &mut object_1636,
                    item_1635,
                )?;
                object_1636.finish();
            }
        }
        array_1634.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_channel(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlChannel,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1637) = &input.data_source {
        #[allow(unused_mut)]
        let mut object_1638 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_data_source(
            &mut object_1638,
            var_1637,
        )?;
        object_1638.finish();
    }
    if let Some(var_1639) = &input.compression_type {
        object.key("CompressionType").string(var_1639.as_str());
    }
    if let Some(var_1640) = &input.target_attribute_name {
        object.key("TargetAttributeName").string(var_1640.as_str());
    }
    if let Some(var_1641) = &input.content_type {
        object.key("ContentType").string(var_1641.as_str());
    }
    if let Some(var_1642) = &input.channel_type {
        object.key("ChannelType").string(var_1642.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_output_data_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlOutputDataConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1643) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1643.as_str());
    }
    if let Some(var_1644) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1644.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_job_objective(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobObjective,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1645) = &input.metric_name {
        object.key("MetricName").string(var_1645.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_job_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1646) = &input.completion_criteria {
        #[allow(unused_mut)]
        let mut object_1647 = object.key("CompletionCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_job_completion_criteria(
            &mut object_1647,
            var_1646,
        )?;
        object_1647.finish();
    }
    if let Some(var_1648) = &input.security_config {
        #[allow(unused_mut)]
        let mut object_1649 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_security_config(
            &mut object_1649,
            var_1648,
        )?;
        object_1649.finish();
    }
    if let Some(var_1650) = &input.data_split_config {
        #[allow(unused_mut)]
        let mut object_1651 = object.key("DataSplitConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_data_split_config(
            &mut object_1651,
            var_1650,
        )?;
        object_1651.finish();
    }
    if let Some(var_1652) = &input.candidate_generation_config {
        #[allow(unused_mut)]
        let mut object_1653 = object.key("CandidateGenerationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_candidate_generation_config(
            &mut object_1653,
            var_1652,
        )?;
        object_1653.finish();
    }
    if let Some(var_1654) = &input.mode {
        object.key("Mode").string(var_1654.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_deploy_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelDeployConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.auto_generate_endpoint_name {
        object
            .key("AutoGenerateEndpointName")
            .boolean(input.auto_generate_endpoint_name);
    }
    if let Some(var_1655) = &input.endpoint_name {
        object.key("EndpointName").string(var_1655.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_git_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1656) = &input.repository_url {
        object.key("RepositoryUrl").string(var_1656.as_str());
    }
    if let Some(var_1657) = &input.branch {
        object.key("Branch").string(var_1657.as_str());
    }
    if let Some(var_1658) = &input.secret_arn {
        object.key("SecretArn").string(var_1658.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1659) = &input.s3_uri {
        object.key("S3Uri").string(var_1659.as_str());
    }
    if let Some(var_1660) = &input.data_input_config {
        object.key("DataInputConfig").string(var_1660.as_str());
    }
    if let Some(var_1661) = &input.framework {
        object.key("Framework").string(var_1661.as_str());
    }
    if let Some(var_1662) = &input.framework_version {
        object.key("FrameworkVersion").string(var_1662.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1663) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1663.as_str());
    }
    if let Some(var_1664) = &input.target_device {
        object.key("TargetDevice").string(var_1664.as_str());
    }
    if let Some(var_1665) = &input.target_platform {
        #[allow(unused_mut)]
        let mut object_1666 = object.key("TargetPlatform").start_object();
        crate::json_ser::serialize_structure_crate_model_target_platform(
            &mut object_1666,
            var_1665,
        )?;
        object_1666.finish();
    }
    if let Some(var_1667) = &input.compiler_options {
        object.key("CompilerOptions").string(var_1667.as_str());
    }
    if let Some(var_1668) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1668.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_neo_vpc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NeoVpcConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1669) = &input.security_group_ids {
        let mut array_1670 = object.key("SecurityGroupIds").start_array();
        for item_1671 in var_1669 {
            {
                array_1670.value().string(item_1671.as_str());
            }
        }
        array_1670.finish();
    }
    if let Some(var_1672) = &input.subnets {
        let mut array_1673 = object.key("Subnets").start_array();
        for item_1674 in var_1672 {
            {
                array_1673.value().string(item_1674.as_str());
            }
        }
        array_1673.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stopping_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StoppingCondition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.max_runtime_in_seconds != 0 {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
    if let Some(var_1675) = &input.max_wait_time_in_seconds {
        object.key("MaxWaitTimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1675).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_context_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContextSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1676) = &input.source_uri {
        object.key("SourceUri").string(var_1676.as_str());
    }
    if let Some(var_1677) = &input.source_type {
        object.key("SourceType").string(var_1677.as_str());
    }
    if let Some(var_1678) = &input.source_id {
        object.key("SourceId").string(var_1678.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_baseline_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityBaselineConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1679) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1679.as_str());
    }
    if let Some(var_1680) = &input.constraints_resource {
        #[allow(unused_mut)]
        let mut object_1681 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_1681,
            var_1680,
        )?;
        object_1681.finish();
    }
    if let Some(var_1682) = &input.statistics_resource {
        #[allow(unused_mut)]
        let mut object_1683 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_statistics_resource(
            &mut object_1683,
            var_1682,
        )?;
        object_1683.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityAppSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1684) = &input.image_uri {
        object.key("ImageUri").string(var_1684.as_str());
    }
    if let Some(var_1685) = &input.container_entrypoint {
        let mut array_1686 = object.key("ContainerEntrypoint").start_array();
        for item_1687 in var_1685 {
            {
                array_1686.value().string(item_1687.as_str());
            }
        }
        array_1686.finish();
    }
    if let Some(var_1688) = &input.container_arguments {
        let mut array_1689 = object.key("ContainerArguments").start_array();
        for item_1690 in var_1688 {
            {
                array_1689.value().string(item_1690.as_str());
            }
        }
        array_1689.finish();
    }
    if let Some(var_1691) = &input.record_preprocessor_source_uri {
        object
            .key("RecordPreprocessorSourceUri")
            .string(var_1691.as_str());
    }
    if let Some(var_1692) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_1692.as_str());
    }
    if let Some(var_1693) = &input.environment {
        #[allow(unused_mut)]
        let mut object_1694 = object.key("Environment").start_object();
        for (key_1695, value_1696) in var_1693 {
            {
                object_1694
                    .key(key_1695.as_str())
                    .string(value_1696.as_str());
            }
        }
        object_1694.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1697) = &input.endpoint_input {
        #[allow(unused_mut)]
        let mut object_1698 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(
            &mut object_1698,
            var_1697,
        )?;
        object_1698.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringOutputConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1699) = &input.monitoring_outputs {
        let mut array_1700 = object.key("MonitoringOutputs").start_array();
        for item_1701 in var_1699 {
            {
                #[allow(unused_mut)]
                let mut object_1702 = array_1700.value().start_object();
                crate::json_ser::serialize_structure_crate_model_monitoring_output(
                    &mut object_1702,
                    item_1701,
                )?;
                object_1702.finish();
            }
        }
        array_1700.finish();
    }
    if let Some(var_1703) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1703.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_resources(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringResources,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1704) = &input.cluster_config {
        #[allow(unused_mut)]
        let mut object_1705 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_cluster_config(
            &mut object_1705,
            var_1704,
        )?;
        object_1705.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_network_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringNetworkConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if let Some(var_1706) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_1707 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_1707, var_1706)?;
        object_1707.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_stopping_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringStoppingCondition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_edge_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EdgeOutputConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1708) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1708.as_str());
    }
    if let Some(var_1709) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1709.as_str());
    }
    if let Some(var_1710) = &input.preset_deployment_type {
        object.key("PresetDeploymentType").string(var_1710.as_str());
    }
    if let Some(var_1711) = &input.preset_deployment_config {
        object
            .key("PresetDeploymentConfig")
            .string(var_1711.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1712) = &input.execution_role {
        object.key("ExecutionRole").string(var_1712.as_str());
    }
    if let Some(var_1713) = &input.security_groups {
        let mut array_1714 = object.key("SecurityGroups").start_array();
        for item_1715 in var_1713 {
            {
                array_1714.value().string(item_1715.as_str());
            }
        }
        array_1714.finish();
    }
    if let Some(var_1716) = &input.sharing_settings {
        #[allow(unused_mut)]
        let mut object_1717 = object.key("SharingSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sharing_settings(
            &mut object_1717,
            var_1716,
        )?;
        object_1717.finish();
    }
    if let Some(var_1718) = &input.jupyter_server_app_settings {
        #[allow(unused_mut)]
        let mut object_1719 = object.key("JupyterServerAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_jupyter_server_app_settings(
            &mut object_1719,
            var_1718,
        )?;
        object_1719.finish();
    }
    if let Some(var_1720) = &input.kernel_gateway_app_settings {
        #[allow(unused_mut)]
        let mut object_1721 = object.key("KernelGatewayAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_kernel_gateway_app_settings(
            &mut object_1721,
            var_1720,
        )?;
        object_1721.finish();
    }
    if let Some(var_1722) = &input.tensor_board_app_settings {
        #[allow(unused_mut)]
        let mut object_1723 = object.key("TensorBoardAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_tensor_board_app_settings(
            &mut object_1723,
            var_1722,
        )?;
        object_1723.finish();
    }
    if let Some(var_1724) = &input.r_studio_server_pro_app_settings {
        #[allow(unused_mut)]
        let mut object_1725 = object.key("RStudioServerProAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_r_studio_server_pro_app_settings(
            &mut object_1725,
            var_1724,
        )?;
        object_1725.finish();
    }
    if let Some(var_1726) = &input.r_session_app_settings {
        #[allow(unused_mut)]
        let mut object_1727 = object.key("RSessionAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_r_session_app_settings(
            &mut object_1727,
            var_1726,
        )?;
        object_1727.finish();
    }
    if let Some(var_1728) = &input.canvas_app_settings {
        #[allow(unused_mut)]
        let mut object_1729 = object.key("CanvasAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_canvas_app_settings(
            &mut object_1729,
            var_1728,
        )?;
        object_1729.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_domain_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DomainSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1730) = &input.security_group_ids {
        let mut array_1731 = object.key("SecurityGroupIds").start_array();
        for item_1732 in var_1730 {
            {
                array_1731.value().string(item_1732.as_str());
            }
        }
        array_1731.finish();
    }
    if let Some(var_1733) = &input.r_studio_server_pro_domain_settings {
        #[allow(unused_mut)]
        let mut object_1734 = object.key("RStudioServerProDomainSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_r_studio_server_pro_domain_settings(
            &mut object_1734,
            var_1733,
        )?;
        object_1734.finish();
    }
    if let Some(var_1735) = &input.execution_role_identity_config {
        object
            .key("ExecutionRoleIdentityConfig")
            .string(var_1735.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_edge_deployment_model_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EdgeDeploymentModelConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1736) = &input.model_handle {
        object.key("ModelHandle").string(var_1736.as_str());
    }
    if let Some(var_1737) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_1737.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_deployment_stage(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentStage,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1738) = &input.stage_name {
        object.key("StageName").string(var_1738.as_str());
    }
    if let Some(var_1739) = &input.device_selection_config {
        #[allow(unused_mut)]
        let mut object_1740 = object.key("DeviceSelectionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_device_selection_config(
            &mut object_1740,
            var_1739,
        )?;
        object_1740.finish();
    }
    if let Some(var_1741) = &input.deployment_config {
        #[allow(unused_mut)]
        let mut object_1742 = object.key("DeploymentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_deployment_config(
            &mut object_1742,
            var_1741,
        )?;
        object_1742.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_deployment_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1743) = &input.blue_green_update_policy {
        #[allow(unused_mut)]
        let mut object_1744 = object.key("BlueGreenUpdatePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_blue_green_update_policy(
            &mut object_1744,
            var_1743,
        )?;
        object_1744.finish();
    }
    if let Some(var_1745) = &input.auto_rollback_configuration {
        #[allow(unused_mut)]
        let mut object_1746 = object.key("AutoRollbackConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_rollback_config(
            &mut object_1746,
            var_1745,
        )?;
        object_1746.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_production_variant(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariant,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1747) = &input.variant_name {
        object.key("VariantName").string(var_1747.as_str());
    }
    if let Some(var_1748) = &input.model_name {
        object.key("ModelName").string(var_1748.as_str());
    }
    if let Some(var_1749) = &input.initial_instance_count {
        object.key("InitialInstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1749).into()),
        );
    }
    if let Some(var_1750) = &input.instance_type {
        object.key("InstanceType").string(var_1750.as_str());
    }
    if let Some(var_1751) = &input.initial_variant_weight {
        object.key("InitialVariantWeight").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1751).into()),
        );
    }
    if let Some(var_1752) = &input.accelerator_type {
        object.key("AcceleratorType").string(var_1752.as_str());
    }
    if let Some(var_1753) = &input.core_dump_config {
        #[allow(unused_mut)]
        let mut object_1754 = object.key("CoreDumpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_production_variant_core_dump_config(
            &mut object_1754,
            var_1753,
        )?;
        object_1754.finish();
    }
    if let Some(var_1755) = &input.serverless_config {
        #[allow(unused_mut)]
        let mut object_1756 = object.key("ServerlessConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_production_variant_serverless_config(
            &mut object_1756,
            var_1755,
        )?;
        object_1756.finish();
    }
    if let Some(var_1757) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1757).into()),
        );
    }
    if let Some(var_1758) = &input.model_data_download_timeout_in_seconds {
        object.key("ModelDataDownloadTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1758).into()),
        );
    }
    if let Some(var_1759) = &input.container_startup_health_check_timeout_in_seconds {
        object
            .key("ContainerStartupHealthCheckTimeoutInSeconds")
            .number(
                #[allow(clippy::useless_conversion)]
                aws_smithy_types::Number::NegInt((*var_1759).into()),
            );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_capture_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCaptureConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.enable_capture {
        object.key("EnableCapture").boolean(input.enable_capture);
    }
    if let Some(var_1760) = &input.initial_sampling_percentage {
        object.key("InitialSamplingPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1760).into()),
        );
    }
    if let Some(var_1761) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_1761.as_str());
    }
    if let Some(var_1762) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1762.as_str());
    }
    if let Some(var_1763) = &input.capture_options {
        let mut array_1764 = object.key("CaptureOptions").start_array();
        for item_1765 in var_1763 {
            {
                #[allow(unused_mut)]
                let mut object_1766 = array_1764.value().start_object();
                crate::json_ser::serialize_structure_crate_model_capture_option(
                    &mut object_1766,
                    item_1765,
                )?;
                object_1766.finish();
            }
        }
        array_1764.finish();
    }
    if let Some(var_1767) = &input.capture_content_type_header {
        #[allow(unused_mut)]
        let mut object_1768 = object.key("CaptureContentTypeHeader").start_object();
        crate::json_ser::serialize_structure_crate_model_capture_content_type_header(
            &mut object_1768,
            var_1767,
        )?;
        object_1768.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_async_inference_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1769) = &input.client_config {
        #[allow(unused_mut)]
        let mut object_1770 = object.key("ClientConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_client_config(
            &mut object_1770,
            var_1769,
        )?;
        object_1770.finish();
    }
    if let Some(var_1771) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_1772 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_output_config(
            &mut object_1772,
            var_1771,
        )?;
        object_1772.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_explainer_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExplainerConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1773) = &input.clarify_explainer_config {
        #[allow(unused_mut)]
        let mut object_1774 = object.key("ClarifyExplainerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_clarify_explainer_config(
            &mut object_1774,
            var_1773,
        )?;
        object_1774.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_feature_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FeatureDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1775) = &input.feature_name {
        object.key("FeatureName").string(var_1775.as_str());
    }
    if let Some(var_1776) = &input.feature_type {
        object.key("FeatureType").string(var_1776.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_online_store_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnlineStoreConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1777) = &input.security_config {
        #[allow(unused_mut)]
        let mut object_1778 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_online_store_security_config(
            &mut object_1778,
            var_1777,
        )?;
        object_1778.finish();
    }
    if input.enable_online_store {
        object
            .key("EnableOnlineStore")
            .boolean(input.enable_online_store);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_offline_store_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OfflineStoreConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1779) = &input.s3_storage_config {
        #[allow(unused_mut)]
        let mut object_1780 = object.key("S3StorageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_storage_config(
            &mut object_1780,
            var_1779,
        )?;
        object_1780.finish();
    }
    if input.disable_glue_table_creation {
        object
            .key("DisableGlueTableCreation")
            .boolean(input.disable_glue_table_creation);
    }
    if let Some(var_1781) = &input.data_catalog_config {
        #[allow(unused_mut)]
        let mut object_1782 = object.key("DataCatalogConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_data_catalog_config(
            &mut object_1782,
            var_1781,
        )?;
        object_1782.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_request_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopRequestSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1783) = &input.aws_managed_human_loop_request_source {
        object
            .key("AwsManagedHumanLoopRequestSource")
            .string(var_1783.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_activation_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopActivationConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1784) = &input.human_loop_activation_conditions_config {
        #[allow(unused_mut)]
        let mut object_1785 = object
            .key("HumanLoopActivationConditionsConfig")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_activation_conditions_config(
            &mut object_1785,
            var_1784,
        )?;
        object_1785.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1786) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1786.as_str());
    }
    if let Some(var_1787) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1787.as_str());
    }
    if let Some(var_1788) = &input.task_title {
        object.key("TaskTitle").string(var_1788.as_str());
    }
    if let Some(var_1789) = &input.task_description {
        object.key("TaskDescription").string(var_1789.as_str());
    }
    if let Some(var_1790) = &input.task_count {
        object.key("TaskCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1790).into()),
        );
    }
    if let Some(var_1791) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1791).into()),
        );
    }
    if let Some(var_1792) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1792).into()),
        );
    }
    if let Some(var_1793) = &input.task_keywords {
        let mut array_1794 = object.key("TaskKeywords").start_array();
        for item_1795 in var_1793 {
            {
                array_1794.value().string(item_1795.as_str());
            }
        }
        array_1794.finish();
    }
    if let Some(var_1796) = &input.public_workforce_task_price {
        #[allow(unused_mut)]
        let mut object_1797 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_crate_model_public_workforce_task_price(
            &mut object_1797,
            var_1796,
        )?;
        object_1797.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_flow_definition_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FlowDefinitionOutputConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1798) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1798.as_str());
    }
    if let Some(var_1799) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1799.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ui_template(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiTemplate,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1800) = &input.content {
        object.key("Content").string(var_1800.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1801) = &input.strategy {
        object.key("Strategy").string(var_1801.as_str());
    }
    if let Some(var_1802) = &input.strategy_config {
        #[allow(unused_mut)]
        let mut object_1803 = object.key("StrategyConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_strategy_config(&mut object_1803, var_1802)?;
        object_1803.finish();
    }
    if let Some(var_1804) = &input.hyper_parameter_tuning_job_objective {
        #[allow(unused_mut)]
        let mut object_1805 = object
            .key("HyperParameterTuningJobObjective")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_objective(
            &mut object_1805,
            var_1804,
        )?;
        object_1805.finish();
    }
    if let Some(var_1806) = &input.resource_limits {
        #[allow(unused_mut)]
        let mut object_1807 = object.key("ResourceLimits").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_limits(
            &mut object_1807,
            var_1806,
        )?;
        object_1807.finish();
    }
    if let Some(var_1808) = &input.parameter_ranges {
        #[allow(unused_mut)]
        let mut object_1809 = object.key("ParameterRanges").start_object();
        crate::json_ser::serialize_structure_crate_model_parameter_ranges(
            &mut object_1809,
            var_1808,
        )?;
        object_1809.finish();
    }
    if let Some(var_1810) = &input.training_job_early_stopping_type {
        object
            .key("TrainingJobEarlyStoppingType")
            .string(var_1810.as_str());
    }
    if let Some(var_1811) = &input.tuning_job_completion_criteria {
        #[allow(unused_mut)]
        let mut object_1812 = object.key("TuningJobCompletionCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_tuning_job_completion_criteria(
            &mut object_1812,
            var_1811,
        )?;
        object_1812.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_training_job_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTrainingJobDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1813) = &input.definition_name {
        object.key("DefinitionName").string(var_1813.as_str());
    }
    if let Some(var_1814) = &input.tuning_objective {
        #[allow(unused_mut)]
        let mut object_1815 = object.key("TuningObjective").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_objective(
            &mut object_1815,
            var_1814,
        )?;
        object_1815.finish();
    }
    if let Some(var_1816) = &input.hyper_parameter_ranges {
        #[allow(unused_mut)]
        let mut object_1817 = object.key("HyperParameterRanges").start_object();
        crate::json_ser::serialize_structure_crate_model_parameter_ranges(
            &mut object_1817,
            var_1816,
        )?;
        object_1817.finish();
    }
    if let Some(var_1818) = &input.static_hyper_parameters {
        #[allow(unused_mut)]
        let mut object_1819 = object.key("StaticHyperParameters").start_object();
        for (key_1820, value_1821) in var_1818 {
            {
                object_1819
                    .key(key_1820.as_str())
                    .string(value_1821.as_str());
            }
        }
        object_1819.finish();
    }
    if let Some(var_1822) = &input.algorithm_specification {
        #[allow(unused_mut)]
        let mut object_1823 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_algorithm_specification(
            &mut object_1823,
            var_1822,
        )?;
        object_1823.finish();
    }
    if let Some(var_1824) = &input.role_arn {
        object.key("RoleArn").string(var_1824.as_str());
    }
    if let Some(var_1825) = &input.input_data_config {
        let mut array_1826 = object.key("InputDataConfig").start_array();
        for item_1827 in var_1825 {
            {
                #[allow(unused_mut)]
                let mut object_1828 = array_1826.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel(
                    &mut object_1828,
                    item_1827,
                )?;
                object_1828.finish();
            }
        }
        array_1826.finish();
    }
    if let Some(var_1829) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_1830 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_1830, var_1829)?;
        object_1830.finish();
    }
    if let Some(var_1831) = &input.output_data_config {
        #[allow(unused_mut)]
        let mut object_1832 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_data_config(
            &mut object_1832,
            var_1831,
        )?;
        object_1832.finish();
    }
    if let Some(var_1833) = &input.resource_config {
        #[allow(unused_mut)]
        let mut object_1834 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_config(
            &mut object_1834,
            var_1833,
        )?;
        object_1834.finish();
    }
    if let Some(var_1835) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_1836 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(
            &mut object_1836,
            var_1835,
        )?;
        object_1836.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object
            .key("EnableManagedSpotTraining")
            .boolean(input.enable_managed_spot_training);
    }
    if let Some(var_1837) = &input.checkpoint_config {
        #[allow(unused_mut)]
        let mut object_1838 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_checkpoint_config(
            &mut object_1838,
            var_1837,
        )?;
        object_1838.finish();
    }
    if let Some(var_1839) = &input.retry_strategy {
        #[allow(unused_mut)]
        let mut object_1840 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_crate_model_retry_strategy(
            &mut object_1840,
            var_1839,
        )?;
        object_1840.finish();
    }
    if let Some(var_1841) = &input.hyper_parameter_tuning_resource_config {
        #[allow(unused_mut)]
        let mut object_1842 = object
            .key("HyperParameterTuningResourceConfig")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_resource_config(
            &mut object_1842,
            var_1841,
        )?;
        object_1842.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_warm_start_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobWarmStartConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1843) = &input.parent_hyper_parameter_tuning_jobs {
        let mut array_1844 = object.key("ParentHyperParameterTuningJobs").start_array();
        for item_1845 in var_1843 {
            {
                #[allow(unused_mut)]
                let mut object_1846 = array_1844.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parent_hyper_parameter_tuning_job(
                    &mut object_1846,
                    item_1845,
                )?;
                object_1846.finish();
            }
        }
        array_1844.finish();
    }
    if let Some(var_1847) = &input.warm_start_type {
        object.key("WarmStartType").string(var_1847.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_input_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommendationJobInputConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1848) = &input.model_package_version_arn {
        object
            .key("ModelPackageVersionArn")
            .string(var_1848.as_str());
    }
    if let Some(var_1849) = &input.job_duration_in_seconds {
        object.key("JobDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1849).into()),
        );
    }
    if let Some(var_1850) = &input.traffic_pattern {
        #[allow(unused_mut)]
        let mut object_1851 = object.key("TrafficPattern").start_object();
        crate::json_ser::serialize_structure_crate_model_traffic_pattern(
            &mut object_1851,
            var_1850,
        )?;
        object_1851.finish();
    }
    if let Some(var_1852) = &input.resource_limit {
        #[allow(unused_mut)]
        let mut object_1853 = object.key("ResourceLimit").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_resource_limit(
            &mut object_1853,
            var_1852,
        )?;
        object_1853.finish();
    }
    if let Some(var_1854) = &input.endpoint_configurations {
        let mut array_1855 = object.key("EndpointConfigurations").start_array();
        for item_1856 in var_1854 {
            {
                #[allow(unused_mut)]
                let mut object_1857 = array_1855.value().start_object();
                crate::json_ser::serialize_structure_crate_model_endpoint_input_configuration(
                    &mut object_1857,
                    item_1856,
                )?;
                object_1857.finish();
            }
        }
        array_1855.finish();
    }
    if let Some(var_1858) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1858.as_str());
    }
    if let Some(var_1859) = &input.container_config {
        #[allow(unused_mut)]
        let mut object_1860 = object.key("ContainerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_container_config(
            &mut object_1860,
            var_1859,
        )?;
        object_1860.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_stopping_conditions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommendationJobStoppingConditions,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.max_invocations != 0 {
        object.key("MaxInvocations").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_invocations).into()),
        );
    }
    if let Some(var_1861) = &input.model_latency_thresholds {
        let mut array_1862 = object.key("ModelLatencyThresholds").start_array();
        for item_1863 in var_1861 {
            {
                #[allow(unused_mut)]
                let mut object_1864 = array_1862.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_latency_threshold(
                    &mut object_1864,
                    item_1863,
                )?;
                object_1864.finish();
            }
        }
        array_1862.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommendationJobOutputConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1865) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1865.as_str());
    }
    if let Some(var_1866) = &input.compiled_output_config {
        #[allow(unused_mut)]
        let mut object_1867 = object.key("CompiledOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_compiled_output_config(
            &mut object_1867,
            var_1866,
        )?;
        object_1867.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_input_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobInputConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1868) = &input.data_source {
        #[allow(unused_mut)]
        let mut object_1869 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_data_source(
            &mut object_1869,
            var_1868,
        )?;
        object_1869.finish();
    }
    if let Some(var_1870) = &input.data_attributes {
        #[allow(unused_mut)]
        let mut object_1871 = object.key("DataAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_data_attributes(
            &mut object_1871,
            var_1870,
        )?;
        object_1871.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobOutputConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1872) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1872.as_str());
    }
    if let Some(var_1873) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1873.as_str());
    }
    if let Some(var_1874) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1874.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_stopping_conditions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobStoppingConditions,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1875) = &input.max_human_labeled_object_count {
        object.key("MaxHumanLabeledObjectCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1875).into()),
        );
    }
    if let Some(var_1876) = &input.max_percentage_of_input_dataset_labeled {
        object.key("MaxPercentageOfInputDatasetLabeled").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1876).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_algorithms_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobAlgorithmsConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1877) = &input.labeling_job_algorithm_specification_arn {
        object
            .key("LabelingJobAlgorithmSpecificationArn")
            .string(var_1877.as_str());
    }
    if let Some(var_1878) = &input.initial_active_learning_model_arn {
        object
            .key("InitialActiveLearningModelArn")
            .string(var_1878.as_str());
    }
    if let Some(var_1879) = &input.labeling_job_resource_config {
        #[allow(unused_mut)]
        let mut object_1880 = object.key("LabelingJobResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_resource_config(
            &mut object_1880,
            var_1879,
        )?;
        object_1880.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_task_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanTaskConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1881) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1881.as_str());
    }
    if let Some(var_1882) = &input.ui_config {
        #[allow(unused_mut)]
        let mut object_1883 = object.key("UiConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_config(&mut object_1883, var_1882)?;
        object_1883.finish();
    }
    if let Some(var_1884) = &input.pre_human_task_lambda_arn {
        object
            .key("PreHumanTaskLambdaArn")
            .string(var_1884.as_str());
    }
    if let Some(var_1885) = &input.task_keywords {
        let mut array_1886 = object.key("TaskKeywords").start_array();
        for item_1887 in var_1885 {
            {
                array_1886.value().string(item_1887.as_str());
            }
        }
        array_1886.finish();
    }
    if let Some(var_1888) = &input.task_title {
        object.key("TaskTitle").string(var_1888.as_str());
    }
    if let Some(var_1889) = &input.task_description {
        object.key("TaskDescription").string(var_1889.as_str());
    }
    if let Some(var_1890) = &input.number_of_human_workers_per_data_object {
        object.key("NumberOfHumanWorkersPerDataObject").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1890).into()),
        );
    }
    if let Some(var_1891) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1891).into()),
        );
    }
    if let Some(var_1892) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1892).into()),
        );
    }
    if let Some(var_1893) = &input.max_concurrent_task_count {
        object.key("MaxConcurrentTaskCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1893).into()),
        );
    }
    if let Some(var_1894) = &input.annotation_consolidation_config {
        #[allow(unused_mut)]
        let mut object_1895 = object.key("AnnotationConsolidationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_annotation_consolidation_config(
            &mut object_1895,
            var_1894,
        )?;
        object_1895.finish();
    }
    if let Some(var_1896) = &input.public_workforce_task_price {
        #[allow(unused_mut)]
        let mut object_1897 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_crate_model_public_workforce_task_price(
            &mut object_1897,
            var_1896,
        )?;
        object_1897.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_container_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1898) = &input.container_hostname {
        object.key("ContainerHostname").string(var_1898.as_str());
    }
    if let Some(var_1899) = &input.image {
        object.key("Image").string(var_1899.as_str());
    }
    if let Some(var_1900) = &input.image_config {
        #[allow(unused_mut)]
        let mut object_1901 = object.key("ImageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_image_config(&mut object_1901, var_1900)?;
        object_1901.finish();
    }
    if let Some(var_1902) = &input.mode {
        object.key("Mode").string(var_1902.as_str());
    }
    if let Some(var_1903) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_1903.as_str());
    }
    if let Some(var_1904) = &input.environment {
        #[allow(unused_mut)]
        let mut object_1905 = object.key("Environment").start_object();
        for (key_1906, value_1907) in var_1904 {
            {
                object_1905
                    .key(key_1906.as_str())
                    .string(value_1907.as_str());
            }
        }
        object_1905.finish();
    }
    if let Some(var_1908) = &input.model_package_name {
        object.key("ModelPackageName").string(var_1908.as_str());
    }
    if let Some(var_1909) = &input.inference_specification_name {
        object
            .key("InferenceSpecificationName")
            .string(var_1909.as_str());
    }
    if let Some(var_1910) = &input.multi_model_config {
        #[allow(unused_mut)]
        let mut object_1911 = object.key("MultiModelConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_multi_model_config(
            &mut object_1911,
            var_1910,
        )?;
        object_1911.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inference_execution_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceExecutionConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1912) = &input.mode {
        object.key("Mode").string(var_1912.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1913) = &input.security_group_ids {
        let mut array_1914 = object.key("SecurityGroupIds").start_array();
        for item_1915 in var_1913 {
            {
                array_1914.value().string(item_1915.as_str());
            }
        }
        array_1914.finish();
    }
    if let Some(var_1916) = &input.subnets {
        let mut array_1917 = object.key("Subnets").start_array();
        for item_1918 in var_1916 {
            {
                array_1917.value().string(item_1918.as_str());
            }
        }
        array_1917.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_bias_baseline_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasBaselineConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1919) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1919.as_str());
    }
    if let Some(var_1920) = &input.constraints_resource {
        #[allow(unused_mut)]
        let mut object_1921 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_1921,
            var_1920,
        )?;
        object_1921.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_bias_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasAppSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1922) = &input.image_uri {
        object.key("ImageUri").string(var_1922.as_str());
    }
    if let Some(var_1923) = &input.config_uri {
        object.key("ConfigUri").string(var_1923.as_str());
    }
    if let Some(var_1924) = &input.environment {
        #[allow(unused_mut)]
        let mut object_1925 = object.key("Environment").start_object();
        for (key_1926, value_1927) in var_1924 {
            {
                object_1925
                    .key(key_1926.as_str())
                    .string(value_1927.as_str());
            }
        }
        object_1925.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_bias_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1928) = &input.endpoint_input {
        #[allow(unused_mut)]
        let mut object_1929 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(
            &mut object_1929,
            var_1928,
        )?;
        object_1929.finish();
    }
    if let Some(var_1930) = &input.ground_truth_s3_input {
        #[allow(unused_mut)]
        let mut object_1931 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_ground_truth_s3_input(
            &mut object_1931,
            var_1930,
        )?;
        object_1931.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_explainability_baseline_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityBaselineConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1932) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1932.as_str());
    }
    if let Some(var_1933) = &input.constraints_resource {
        #[allow(unused_mut)]
        let mut object_1934 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_1934,
            var_1933,
        )?;
        object_1934.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_explainability_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityAppSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1935) = &input.image_uri {
        object.key("ImageUri").string(var_1935.as_str());
    }
    if let Some(var_1936) = &input.config_uri {
        object.key("ConfigUri").string(var_1936.as_str());
    }
    if let Some(var_1937) = &input.environment {
        #[allow(unused_mut)]
        let mut object_1938 = object.key("Environment").start_object();
        for (key_1939, value_1940) in var_1937 {
            {
                object_1938
                    .key(key_1939.as_str())
                    .string(value_1940.as_str());
            }
        }
        object_1938.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_explainability_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1941) = &input.endpoint_input {
        #[allow(unused_mut)]
        let mut object_1942 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(
            &mut object_1942,
            var_1941,
        )?;
        object_1942.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_package_validation_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageValidationSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1943) = &input.validation_role {
        object.key("ValidationRole").string(var_1943.as_str());
    }
    if let Some(var_1944) = &input.validation_profiles {
        let mut array_1945 = object.key("ValidationProfiles").start_array();
        for item_1946 in var_1944 {
            {
                #[allow(unused_mut)]
                let mut object_1947 = array_1945.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_package_validation_profile(
                    &mut object_1947,
                    item_1946,
                )?;
                object_1947.finish();
            }
        }
        array_1945.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_algorithm_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAlgorithmSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1948) = &input.source_algorithms {
        let mut array_1949 = object.key("SourceAlgorithms").start_array();
        for item_1950 in var_1948 {
            {
                #[allow(unused_mut)]
                let mut object_1951 = array_1949.value().start_object();
                crate::json_ser::serialize_structure_crate_model_source_algorithm(
                    &mut object_1951,
                    item_1950,
                )?;
                object_1951.finish();
            }
        }
        array_1949.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_metrics(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelMetrics,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1952) = &input.model_quality {
        #[allow(unused_mut)]
        let mut object_1953 = object.key("ModelQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality(&mut object_1953, var_1952)?;
        object_1953.finish();
    }
    if let Some(var_1954) = &input.model_data_quality {
        #[allow(unused_mut)]
        let mut object_1955 = object.key("ModelDataQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_model_data_quality(
            &mut object_1955,
            var_1954,
        )?;
        object_1955.finish();
    }
    if let Some(var_1956) = &input.bias {
        #[allow(unused_mut)]
        let mut object_1957 = object.key("Bias").start_object();
        crate::json_ser::serialize_structure_crate_model_bias(&mut object_1957, var_1956)?;
        object_1957.finish();
    }
    if let Some(var_1958) = &input.explainability {
        #[allow(unused_mut)]
        let mut object_1959 = object.key("Explainability").start_object();
        crate::json_ser::serialize_structure_crate_model_explainability(
            &mut object_1959,
            var_1958,
        )?;
        object_1959.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_baselines(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DriftCheckBaselines,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1960) = &input.bias {
        #[allow(unused_mut)]
        let mut object_1961 = object.key("Bias").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_bias(
            &mut object_1961,
            var_1960,
        )?;
        object_1961.finish();
    }
    if let Some(var_1962) = &input.explainability {
        #[allow(unused_mut)]
        let mut object_1963 = object.key("Explainability").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_explainability(
            &mut object_1963,
            var_1962,
        )?;
        object_1963.finish();
    }
    if let Some(var_1964) = &input.model_quality {
        #[allow(unused_mut)]
        let mut object_1965 = object.key("ModelQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_model_quality(
            &mut object_1965,
            var_1964,
        )?;
        object_1965.finish();
    }
    if let Some(var_1966) = &input.model_data_quality {
        #[allow(unused_mut)]
        let mut object_1967 = object.key("ModelDataQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_model_data_quality(
            &mut object_1967,
            var_1966,
        )?;
        object_1967.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_additional_inference_specification_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdditionalInferenceSpecificationDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1968) = &input.name {
        object.key("Name").string(var_1968.as_str());
    }
    if let Some(var_1969) = &input.description {
        object.key("Description").string(var_1969.as_str());
    }
    if let Some(var_1970) = &input.containers {
        let mut array_1971 = object.key("Containers").start_array();
        for item_1972 in var_1970 {
            {
                #[allow(unused_mut)]
                let mut object_1973 = array_1971.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_package_container_definition(&mut object_1973, item_1972)?;
                object_1973.finish();
            }
        }
        array_1971.finish();
    }
    if let Some(var_1974) = &input.supported_transform_instance_types {
        let mut array_1975 = object.key("SupportedTransformInstanceTypes").start_array();
        for item_1976 in var_1974 {
            {
                array_1975.value().string(item_1976.as_str());
            }
        }
        array_1975.finish();
    }
    if let Some(var_1977) = &input.supported_realtime_inference_instance_types {
        let mut array_1978 = object
            .key("SupportedRealtimeInferenceInstanceTypes")
            .start_array();
        for item_1979 in var_1977 {
            {
                array_1978.value().string(item_1979.as_str());
            }
        }
        array_1978.finish();
    }
    if let Some(var_1980) = &input.supported_content_types {
        let mut array_1981 = object.key("SupportedContentTypes").start_array();
        for item_1982 in var_1980 {
            {
                array_1981.value().string(item_1982.as_str());
            }
        }
        array_1981.finish();
    }
    if let Some(var_1983) = &input.supported_response_mime_types {
        let mut array_1984 = object.key("SupportedResponseMIMETypes").start_array();
        for item_1985 in var_1983 {
            {
                array_1984.value().string(item_1985.as_str());
            }
        }
        array_1984.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_quality_baseline_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityBaselineConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1986) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1986.as_str());
    }
    if let Some(var_1987) = &input.constraints_resource {
        #[allow(unused_mut)]
        let mut object_1988 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_1988,
            var_1987,
        )?;
        object_1988.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_quality_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityAppSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1989) = &input.image_uri {
        object.key("ImageUri").string(var_1989.as_str());
    }
    if let Some(var_1990) = &input.container_entrypoint {
        let mut array_1991 = object.key("ContainerEntrypoint").start_array();
        for item_1992 in var_1990 {
            {
                array_1991.value().string(item_1992.as_str());
            }
        }
        array_1991.finish();
    }
    if let Some(var_1993) = &input.container_arguments {
        let mut array_1994 = object.key("ContainerArguments").start_array();
        for item_1995 in var_1993 {
            {
                array_1994.value().string(item_1995.as_str());
            }
        }
        array_1994.finish();
    }
    if let Some(var_1996) = &input.record_preprocessor_source_uri {
        object
            .key("RecordPreprocessorSourceUri")
            .string(var_1996.as_str());
    }
    if let Some(var_1997) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_1997.as_str());
    }
    if let Some(var_1998) = &input.problem_type {
        object.key("ProblemType").string(var_1998.as_str());
    }
    if let Some(var_1999) = &input.environment {
        #[allow(unused_mut)]
        let mut object_2000 = object.key("Environment").start_object();
        for (key_2001, value_2002) in var_1999 {
            {
                object_2000
                    .key(key_2001.as_str())
                    .string(value_2002.as_str());
            }
        }
        object_2000.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_quality_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2003) = &input.endpoint_input {
        #[allow(unused_mut)]
        let mut object_2004 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(
            &mut object_2004,
            var_2003,
        )?;
        object_2004.finish();
    }
    if let Some(var_2005) = &input.ground_truth_s3_input {
        #[allow(unused_mut)]
        let mut object_2006 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_ground_truth_s3_input(
            &mut object_2006,
            var_2005,
        )?;
        object_2006.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_schedule_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringScheduleConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2007) = &input.schedule_config {
        #[allow(unused_mut)]
        let mut object_2008 = object.key("ScheduleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_schedule_config(
            &mut object_2008,
            var_2007,
        )?;
        object_2008.finish();
    }
    if let Some(var_2009) = &input.monitoring_job_definition {
        #[allow(unused_mut)]
        let mut object_2010 = object.key("MonitoringJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_job_definition(
            &mut object_2010,
            var_2009,
        )?;
        object_2010.finish();
    }
    if let Some(var_2011) = &input.monitoring_job_definition_name {
        object
            .key("MonitoringJobDefinitionName")
            .string(var_2011.as_str());
    }
    if let Some(var_2012) = &input.monitoring_type {
        object.key("MonitoringType").string(var_2012.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_metadata_service_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceMetadataServiceConfiguration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2013) = &input.minimum_instance_metadata_service_version {
        object
            .key("MinimumInstanceMetadataServiceVersion")
            .string(var_2013.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notebook_instance_lifecycle_hook(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotebookInstanceLifecycleHook,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2014) = &input.content {
        object.key("Content").string(var_2014.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_pipeline_definition_s3_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PipelineDefinitionS3Location,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2015) = &input.bucket {
        object.key("Bucket").string(var_2015.as_str());
    }
    if let Some(var_2016) = &input.object_key {
        object.key("ObjectKey").string(var_2016.as_str());
    }
    if let Some(var_2017) = &input.version_id {
        object.key("VersionId").string(var_2017.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parallelism_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParallelismConfiguration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("MaxParallelExecutionSteps").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_parallel_execution_steps).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2018) = &input.input_name {
        object.key("InputName").string(var_2018.as_str());
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
    if let Some(var_2019) = &input.s3_input {
        #[allow(unused_mut)]
        let mut object_2020 = object.key("S3Input").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_s3_input(
            &mut object_2020,
            var_2019,
        )?;
        object_2020.finish();
    }
    if let Some(var_2021) = &input.dataset_definition {
        #[allow(unused_mut)]
        let mut object_2022 = object.key("DatasetDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_dataset_definition(
            &mut object_2022,
            var_2021,
        )?;
        object_2022.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingOutputConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2023) = &input.outputs {
        let mut array_2024 = object.key("Outputs").start_array();
        for item_2025 in var_2023 {
            {
                #[allow(unused_mut)]
                let mut object_2026 = array_2024.value().start_object();
                crate::json_ser::serialize_structure_crate_model_processing_output(
                    &mut object_2026,
                    item_2025,
                )?;
                object_2026.finish();
            }
        }
        array_2024.finish();
    }
    if let Some(var_2027) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2027.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_resources(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingResources,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2028) = &input.cluster_config {
        #[allow(unused_mut)]
        let mut object_2029 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_cluster_config(
            &mut object_2029,
            var_2028,
        )?;
        object_2029.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_stopping_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingStoppingCondition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AppSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2030) = &input.image_uri {
        object.key("ImageUri").string(var_2030.as_str());
    }
    if let Some(var_2031) = &input.container_entrypoint {
        let mut array_2032 = object.key("ContainerEntrypoint").start_array();
        for item_2033 in var_2031 {
            {
                array_2032.value().string(item_2033.as_str());
            }
        }
        array_2032.finish();
    }
    if let Some(var_2034) = &input.container_arguments {
        let mut array_2035 = object.key("ContainerArguments").start_array();
        for item_2036 in var_2034 {
            {
                array_2035.value().string(item_2036.as_str());
            }
        }
        array_2035.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if let Some(var_2037) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_2038 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_2038, var_2037)?;
        object_2038.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_experiment_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExperimentConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2039) = &input.experiment_name {
        object.key("ExperimentName").string(var_2039.as_str());
    }
    if let Some(var_2040) = &input.trial_name {
        object.key("TrialName").string(var_2040.as_str());
    }
    if let Some(var_2041) = &input.trial_component_display_name {
        object
            .key("TrialComponentDisplayName")
            .string(var_2041.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_catalog_provisioning_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceCatalogProvisioningDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2042) = &input.product_id {
        object.key("ProductId").string(var_2042.as_str());
    }
    if let Some(var_2043) = &input.provisioning_artifact_id {
        object
            .key("ProvisioningArtifactId")
            .string(var_2043.as_str());
    }
    if let Some(var_2044) = &input.path_id {
        object.key("PathId").string(var_2044.as_str());
    }
    if let Some(var_2045) = &input.provisioning_parameters {
        let mut array_2046 = object.key("ProvisioningParameters").start_array();
        for item_2047 in var_2045 {
            {
                #[allow(unused_mut)]
                let mut object_2048 = array_2046.value().start_object();
                crate::json_ser::serialize_structure_crate_model_provisioning_parameter(
                    &mut object_2048,
                    item_2047,
                )?;
                object_2048.finish();
            }
        }
        array_2046.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_algorithm_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2049) = &input.training_image {
        object.key("TrainingImage").string(var_2049.as_str());
    }
    if let Some(var_2050) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2050.as_str());
    }
    if let Some(var_2051) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2051.as_str());
    }
    if let Some(var_2052) = &input.metric_definitions {
        let mut array_2053 = object.key("MetricDefinitions").start_array();
        for item_2054 in var_2052 {
            {
                #[allow(unused_mut)]
                let mut object_2055 = array_2053.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_definition(
                    &mut object_2055,
                    item_2054,
                )?;
                object_2055.finish();
            }
        }
        array_2053.finish();
    }
    if input.enable_sage_maker_metrics_time_series {
        object
            .key("EnableSageMakerMetricsTimeSeries")
            .boolean(input.enable_sage_maker_metrics_time_series);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_channel(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Channel,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2056) = &input.channel_name {
        object.key("ChannelName").string(var_2056.as_str());
    }
    if let Some(var_2057) = &input.data_source {
        #[allow(unused_mut)]
        let mut object_2058 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source(&mut object_2058, var_2057)?;
        object_2058.finish();
    }
    if let Some(var_2059) = &input.content_type {
        object.key("ContentType").string(var_2059.as_str());
    }
    if let Some(var_2060) = &input.compression_type {
        object.key("CompressionType").string(var_2060.as_str());
    }
    if let Some(var_2061) = &input.record_wrapper_type {
        object.key("RecordWrapperType").string(var_2061.as_str());
    }
    if let Some(var_2062) = &input.input_mode {
        object.key("InputMode").string(var_2062.as_str());
    }
    if let Some(var_2063) = &input.shuffle_config {
        #[allow(unused_mut)]
        let mut object_2064 = object.key("ShuffleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_shuffle_config(
            &mut object_2064,
            var_2063,
        )?;
        object_2064.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_data_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputDataConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2065) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2065.as_str());
    }
    if let Some(var_2066) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2066.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2067) = &input.instance_type {
        object.key("InstanceType").string(var_2067.as_str());
    }
    if input.instance_count != 0 {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_2068) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2068.as_str());
    }
    if let Some(var_2069) = &input.instance_groups {
        let mut array_2070 = object.key("InstanceGroups").start_array();
        for item_2071 in var_2069 {
            {
                #[allow(unused_mut)]
                let mut object_2072 = array_2070.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_group(
                    &mut object_2072,
                    item_2071,
                )?;
                object_2072.finish();
            }
        }
        array_2070.finish();
    }
    if let Some(var_2073) = &input.keep_alive_period_in_seconds {
        object.key("KeepAlivePeriodInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2073).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_checkpoint_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CheckpointConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2074) = &input.s3_uri {
        object.key("S3Uri").string(var_2074.as_str());
    }
    if let Some(var_2075) = &input.local_path {
        object.key("LocalPath").string(var_2075.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_debug_hook_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DebugHookConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2076) = &input.local_path {
        object.key("LocalPath").string(var_2076.as_str());
    }
    if let Some(var_2077) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2077.as_str());
    }
    if let Some(var_2078) = &input.hook_parameters {
        #[allow(unused_mut)]
        let mut object_2079 = object.key("HookParameters").start_object();
        for (key_2080, value_2081) in var_2078 {
            {
                object_2079
                    .key(key_2080.as_str())
                    .string(value_2081.as_str());
            }
        }
        object_2079.finish();
    }
    if let Some(var_2082) = &input.collection_configurations {
        let mut array_2083 = object.key("CollectionConfigurations").start_array();
        for item_2084 in var_2082 {
            {
                #[allow(unused_mut)]
                let mut object_2085 = array_2083.value().start_object();
                crate::json_ser::serialize_structure_crate_model_collection_configuration(
                    &mut object_2085,
                    item_2084,
                )?;
                object_2085.finish();
            }
        }
        array_2083.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_debug_rule_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DebugRuleConfiguration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2086) = &input.rule_configuration_name {
        object
            .key("RuleConfigurationName")
            .string(var_2086.as_str());
    }
    if let Some(var_2087) = &input.local_path {
        object.key("LocalPath").string(var_2087.as_str());
    }
    if let Some(var_2088) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2088.as_str());
    }
    if let Some(var_2089) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_2089.as_str());
    }
    if let Some(var_2090) = &input.instance_type {
        object.key("InstanceType").string(var_2090.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_2091) = &input.rule_parameters {
        #[allow(unused_mut)]
        let mut object_2092 = object.key("RuleParameters").start_object();
        for (key_2093, value_2094) in var_2091 {
            {
                object_2092
                    .key(key_2093.as_str())
                    .string(value_2094.as_str());
            }
        }
        object_2092.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tensor_board_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TensorBoardOutputConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2095) = &input.local_path {
        object.key("LocalPath").string(var_2095.as_str());
    }
    if let Some(var_2096) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2096.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_profiler_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2097) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2097.as_str());
    }
    if let Some(var_2098) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2098).into()),
        );
    }
    if let Some(var_2099) = &input.profiling_parameters {
        #[allow(unused_mut)]
        let mut object_2100 = object.key("ProfilingParameters").start_object();
        for (key_2101, value_2102) in var_2099 {
            {
                object_2100
                    .key(key_2101.as_str())
                    .string(value_2102.as_str());
            }
        }
        object_2100.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_profiler_rule_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerRuleConfiguration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2103) = &input.rule_configuration_name {
        object
            .key("RuleConfigurationName")
            .string(var_2103.as_str());
    }
    if let Some(var_2104) = &input.local_path {
        object.key("LocalPath").string(var_2104.as_str());
    }
    if let Some(var_2105) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2105.as_str());
    }
    if let Some(var_2106) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_2106.as_str());
    }
    if let Some(var_2107) = &input.instance_type {
        object.key("InstanceType").string(var_2107.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_2108) = &input.rule_parameters {
        #[allow(unused_mut)]
        let mut object_2109 = object.key("RuleParameters").start_object();
        for (key_2110, value_2111) in var_2108 {
            {
                object_2109
                    .key(key_2110.as_str())
                    .string(value_2111.as_str());
            }
        }
        object_2109.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_retry_strategy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetryStrategy,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_retry_attempts).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_client_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelClientConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2112) = &input.invocations_timeout_in_seconds {
        object.key("InvocationsTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2112).into()),
        );
    }
    if let Some(var_2113) = &input.invocations_max_retries {
        object.key("InvocationsMaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2113).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2114) = &input.data_source {
        #[allow(unused_mut)]
        let mut object_2115 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_data_source(
            &mut object_2115,
            var_2114,
        )?;
        object_2115.finish();
    }
    if let Some(var_2116) = &input.content_type {
        object.key("ContentType").string(var_2116.as_str());
    }
    if let Some(var_2117) = &input.compression_type {
        object.key("CompressionType").string(var_2117.as_str());
    }
    if let Some(var_2118) = &input.split_type {
        object.key("SplitType").string(var_2118.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformOutput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2119) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2119.as_str());
    }
    if let Some(var_2120) = &input.accept {
        object.key("Accept").string(var_2120.as_str());
    }
    if let Some(var_2121) = &input.assemble_with {
        object.key("AssembleWith").string(var_2121.as_str());
    }
    if let Some(var_2122) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2122.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_resources(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformResources,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2123) = &input.instance_type {
        object.key("InstanceType").string(var_2123.as_str());
    }
    if let Some(var_2124) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2124).into()),
        );
    }
    if let Some(var_2125) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2125.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_processing(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataProcessing,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2126) = &input.input_filter {
        object.key("InputFilter").string(var_2126.as_str());
    }
    if let Some(var_2127) = &input.output_filter {
        object.key("OutputFilter").string(var_2127.as_str());
    }
    if let Some(var_2128) = &input.join_source {
        object.key("JoinSource").string(var_2128.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trial_component_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentStatus,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2129) = &input.primary_status {
        object.key("PrimaryStatus").string(var_2129.as_str());
    }
    if let Some(var_2130) = &input.message {
        object.key("Message").string(var_2130.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_trial_component_parameter_value(
    object_642: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentParameterValue,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::TrialComponentParameterValue::StringValue(inner) => {
            object_642.key("StringValue").string(inner.as_str());
        }
        crate::model::TrialComponentParameterValue::NumberValue(inner) => {
            object_642.key("NumberValue").number(
                #[allow(clippy::useless_conversion)]
                aws_smithy_types::Number::Float((*inner).into()),
            );
        }
        crate::model::TrialComponentParameterValue::Unknown => {
            return Err(
                aws_smithy_http::operation::error::SerializationError::unknown_variant(
                    "TrialComponentParameterValue",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trial_component_artifact(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentArtifact,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2131) = &input.media_type {
        object.key("MediaType").string(var_2131.as_str());
    }
    if let Some(var_2132) = &input.value {
        object.key("Value").string(var_2132.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cognito_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2133) = &input.user_pool {
        object.key("UserPool").string(var_2133.as_str());
    }
    if let Some(var_2134) = &input.client_id {
        object.key("ClientId").string(var_2134.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oidc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OidcConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2135) = &input.client_id {
        object.key("ClientId").string(var_2135.as_str());
    }
    if let Some(var_2136) = &input.client_secret {
        object.key("ClientSecret").string(var_2136.as_str());
    }
    if let Some(var_2137) = &input.issuer {
        object.key("Issuer").string(var_2137.as_str());
    }
    if let Some(var_2138) = &input.authorization_endpoint {
        object
            .key("AuthorizationEndpoint")
            .string(var_2138.as_str());
    }
    if let Some(var_2139) = &input.token_endpoint {
        object.key("TokenEndpoint").string(var_2139.as_str());
    }
    if let Some(var_2140) = &input.user_info_endpoint {
        object.key("UserInfoEndpoint").string(var_2140.as_str());
    }
    if let Some(var_2141) = &input.logout_endpoint {
        object.key("LogoutEndpoint").string(var_2141.as_str());
    }
    if let Some(var_2142) = &input.jwks_uri {
        object.key("JwksUri").string(var_2142.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_ip_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceIpConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2143) = &input.cidrs {
        let mut array_2144 = object.key("Cidrs").start_array();
        for item_2145 in var_2143 {
            {
                array_2144.value().string(item_2145.as_str());
            }
        }
        array_2144.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workforce_vpc_config_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkforceVpcConfigRequest,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2146) = &input.vpc_id {
        object.key("VpcId").string(var_2146.as_str());
    }
    if let Some(var_2147) = &input.security_group_ids {
        let mut array_2148 = object.key("SecurityGroupIds").start_array();
        for item_2149 in var_2147 {
            {
                array_2148.value().string(item_2149.as_str());
            }
        }
        array_2148.finish();
    }
    if let Some(var_2150) = &input.subnets {
        let mut array_2151 = object.key("Subnets").start_array();
        for item_2152 in var_2150 {
            {
                array_2151.value().string(item_2152.as_str());
            }
        }
        array_2151.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_member_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2153) = &input.cognito_member_definition {
        #[allow(unused_mut)]
        let mut object_2154 = object.key("CognitoMemberDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_cognito_member_definition(
            &mut object_2154,
            var_2153,
        )?;
        object_2154.finish();
    }
    if let Some(var_2155) = &input.oidc_member_definition {
        #[allow(unused_mut)]
        let mut object_2156 = object.key("OidcMemberDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_oidc_member_definition(
            &mut object_2156,
            var_2155,
        )?;
        object_2156.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationConfiguration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2157) = &input.notification_topic_arn {
        object.key("NotificationTopicArn").string(var_2157.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_retention_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetentionPolicy,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2158) = &input.home_efs_file_system {
        object.key("HomeEfsFileSystem").string(var_2158.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_suggestion_query(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SuggestionQuery,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2159) = &input.property_name_query {
        #[allow(unused_mut)]
        let mut object_2160 = object.key("PropertyNameQuery").start_object();
        crate::json_ser::serialize_structure_crate_model_property_name_query(
            &mut object_2160,
            var_2159,
        )?;
        object_2160.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_metadata_search_expression(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelMetadataSearchExpression,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2161) = &input.filters {
        let mut array_2162 = object.key("Filters").start_array();
        for item_2163 in var_2161 {
            {
                #[allow(unused_mut)]
                let mut object_2164 = array_2162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_metadata_filter(
                    &mut object_2164,
                    item_2163,
                )?;
                object_2164.finish();
            }
        }
        array_2162.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_query_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QueryFilters,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2165) = &input.types {
        let mut array_2166 = object.key("Types").start_array();
        for item_2167 in var_2165 {
            {
                array_2166.value().string(item_2167.as_str());
            }
        }
        array_2166.finish();
    }
    if let Some(var_2168) = &input.lineage_types {
        let mut array_2169 = object.key("LineageTypes").start_array();
        for item_2170 in var_2168 {
            {
                array_2169.value().string(item_2170.as_str());
            }
        }
        array_2169.finish();
    }
    if let Some(var_2171) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_2171, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2172) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_2172, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2173) = &input.modified_before {
        object
            .key("ModifiedBefore")
            .date_time(var_2173, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2174) = &input.modified_after {
        object
            .key("ModifiedAfter")
            .date_time(var_2174, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2175) = &input.properties {
        #[allow(unused_mut)]
        let mut object_2176 = object.key("Properties").start_object();
        for (key_2177, value_2178) in var_2175 {
            {
                object_2176
                    .key(key_2177.as_str())
                    .string(value_2178.as_str());
            }
        }
        object_2176.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Device,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2179) = &input.device_name {
        object.key("DeviceName").string(var_2179.as_str());
    }
    if let Some(var_2180) = &input.description {
        object.key("Description").string(var_2180.as_str());
    }
    if let Some(var_2181) = &input.iot_thing_name {
        object.key("IotThingName").string(var_2181.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_renderable_task(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RenderableTask,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2182) = &input.input {
        object.key("Input").string(var_2182.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_expression(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SearchExpression,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2183) = &input.filters {
        let mut array_2184 = object.key("Filters").start_array();
        for item_2185 in var_2183 {
            {
                #[allow(unused_mut)]
                let mut object_2186 = array_2184.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(
                    &mut object_2186,
                    item_2185,
                )?;
                object_2186.finish();
            }
        }
        array_2184.finish();
    }
    if let Some(var_2187) = &input.nested_filters {
        let mut array_2188 = object.key("NestedFilters").start_array();
        for item_2189 in var_2187 {
            {
                #[allow(unused_mut)]
                let mut object_2190 = array_2188.value().start_object();
                crate::json_ser::serialize_structure_crate_model_nested_filters(
                    &mut object_2190,
                    item_2189,
                )?;
                object_2190.finish();
            }
        }
        array_2188.finish();
    }
    if let Some(var_2191) = &input.sub_expressions {
        let mut array_2192 = object.key("SubExpressions").start_array();
        for item_2193 in var_2191 {
            {
                #[allow(unused_mut)]
                let mut object_2194 = array_2192.value().start_object();
                crate::json_ser::serialize_structure_crate_model_search_expression(
                    &mut object_2194,
                    item_2193,
                )?;
                object_2194.finish();
            }
        }
        array_2192.finish();
    }
    if let Some(var_2195) = &input.operator {
        object.key("Operator").string(var_2195.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputParameter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2196) = &input.name {
        object.key("Name").string(var_2196.as_str());
    }
    if let Some(var_2197) = &input.value {
        object.key("Value").string(var_2197.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Parameter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2198) = &input.name {
        object.key("Name").string(var_2198.as_str());
    }
    if let Some(var_2199) = &input.value {
        object.key("Value").string(var_2199.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_git_config_for_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitConfigForUpdate,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2200) = &input.secret_arn {
        object.key("SecretArn").string(var_2200.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_domain_settings_for_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DomainSettingsForUpdate,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2201) = &input.r_studio_server_pro_domain_settings_for_update {
        #[allow(unused_mut)]
        let mut object_2202 = object
            .key("RStudioServerProDomainSettingsForUpdate")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_r_studio_server_pro_domain_settings_for_update(&mut object_2202, var_2201)?;
        object_2202.finish();
    }
    if let Some(var_2203) = &input.execution_role_identity_config {
        object
            .key("ExecutionRoleIdentityConfig")
            .string(var_2203.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_variant_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VariantProperty,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2204) = &input.variant_property_type {
        object.key("VariantPropertyType").string(var_2204.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_desired_weight_and_capacity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DesiredWeightAndCapacity,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2205) = &input.variant_name {
        object.key("VariantName").string(var_2205.as_str());
    }
    if let Some(var_2206) = &input.desired_weight {
        object.key("DesiredWeight").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_2206).into()),
        );
    }
    if let Some(var_2207) = &input.desired_instance_count {
        object.key("DesiredInstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2207).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_feature_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FeatureParameter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2208) = &input.key {
        object.key("Key").string(var_2208.as_str());
    }
    if let Some(var_2209) = &input.value {
        object.key("Value").string(var_2209.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_catalog_provisioning_update_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceCatalogProvisioningUpdateDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2210) = &input.provisioning_artifact_id {
        object
            .key("ProvisioningArtifactId")
            .string(var_2210.as_str());
    }
    if let Some(var_2211) = &input.provisioning_parameters {
        let mut array_2212 = object.key("ProvisioningParameters").start_array();
        for item_2213 in var_2211 {
            {
                #[allow(unused_mut)]
                let mut object_2214 = array_2212.value().start_object();
                crate::json_ser::serialize_structure_crate_model_provisioning_parameter(
                    &mut object_2214,
                    item_2213,
                )?;
                object_2214.finish();
            }
        }
        array_2212.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_profiler_config_for_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerConfigForUpdate,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2215) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2215.as_str());
    }
    if let Some(var_2216) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2216).into()),
        );
    }
    if let Some(var_2217) = &input.profiling_parameters {
        #[allow(unused_mut)]
        let mut object_2218 = object.key("ProfilingParameters").start_object();
        for (key_2219, value_2220) in var_2217 {
            {
                object_2218
                    .key(key_2219.as_str())
                    .string(value_2220.as_str());
            }
        }
        object_2218.finish();
    }
    if input.disable_profiler {
        object
            .key("DisableProfiler")
            .boolean(input.disable_profiler);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_config_for_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceConfigForUpdate,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2221) = &input.keep_alive_period_in_seconds {
        object.key("KeepAlivePeriodInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2221).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2222) = &input.name {
        object.key("Name").string(var_2222.as_str());
    }
    if let Some(var_2223) = &input.description {
        object.key("Description").string(var_2223.as_str());
    }
    if let Some(var_2224) = &input.r#type {
        object.key("Type").string(var_2224.as_str());
    }
    if let Some(var_2225) = &input.range {
        #[allow(unused_mut)]
        let mut object_2226 = object.key("Range").start_object();
        crate::json_ser::serialize_structure_crate_model_parameter_range(
            &mut object_2226,
            var_2225,
        )?;
        object_2226.finish();
    }
    if input.is_tunable {
        object.key("IsTunable").boolean(input.is_tunable);
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_2227) = &input.default_value {
        object.key("DefaultValue").string(var_2227.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2228) = &input.name {
        object.key("Name").string(var_2228.as_str());
    }
    if let Some(var_2229) = &input.regex {
        object.key("Regex").string(var_2229.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_channel_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChannelSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2230) = &input.name {
        object.key("Name").string(var_2230.as_str());
    }
    if let Some(var_2231) = &input.description {
        object.key("Description").string(var_2231.as_str());
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_2232) = &input.supported_content_types {
        let mut array_2233 = object.key("SupportedContentTypes").start_array();
        for item_2234 in var_2232 {
            {
                array_2233.value().string(item_2234.as_str());
            }
        }
        array_2233.finish();
    }
    if let Some(var_2235) = &input.supported_compression_types {
        let mut array_2236 = object.key("SupportedCompressionTypes").start_array();
        for item_2237 in var_2235 {
            {
                array_2236.value().string(item_2237.as_str());
            }
        }
        array_2236.finish();
    }
    if let Some(var_2238) = &input.supported_input_modes {
        let mut array_2239 = object.key("SupportedInputModes").start_array();
        for item_2240 in var_2238 {
            {
                array_2239.value().string(item_2240.as_str());
            }
        }
        array_2239.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_objective(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobObjective,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2241) = &input.r#type {
        object.key("Type").string(var_2241.as_str());
    }
    if let Some(var_2242) = &input.metric_name {
        object.key("MetricName").string(var_2242.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_package_container_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageContainerDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2243) = &input.container_hostname {
        object.key("ContainerHostname").string(var_2243.as_str());
    }
    if let Some(var_2244) = &input.image {
        object.key("Image").string(var_2244.as_str());
    }
    if let Some(var_2245) = &input.image_digest {
        object.key("ImageDigest").string(var_2245.as_str());
    }
    if let Some(var_2246) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_2246.as_str());
    }
    if let Some(var_2247) = &input.product_id {
        object.key("ProductId").string(var_2247.as_str());
    }
    if let Some(var_2248) = &input.environment {
        #[allow(unused_mut)]
        let mut object_2249 = object.key("Environment").start_object();
        for (key_2250, value_2251) in var_2248 {
            {
                object_2249
                    .key(key_2250.as_str())
                    .string(value_2251.as_str());
            }
        }
        object_2249.finish();
    }
    if let Some(var_2252) = &input.model_input {
        #[allow(unused_mut)]
        let mut object_2253 = object.key("ModelInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_input(&mut object_2253, var_2252)?;
        object_2253.finish();
    }
    if let Some(var_2254) = &input.framework {
        object.key("Framework").string(var_2254.as_str());
    }
    if let Some(var_2255) = &input.framework_version {
        object.key("FrameworkVersion").string(var_2255.as_str());
    }
    if let Some(var_2256) = &input.nearest_model_name {
        object.key("NearestModelName").string(var_2256.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_algorithm_validation_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmValidationProfile,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2257) = &input.profile_name {
        object.key("ProfileName").string(var_2257.as_str());
    }
    if let Some(var_2258) = &input.training_job_definition {
        #[allow(unused_mut)]
        let mut object_2259 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_training_job_definition(
            &mut object_2259,
            var_2258,
        )?;
        object_2259.finish();
    }
    if let Some(var_2260) = &input.transform_job_definition {
        #[allow(unused_mut)]
        let mut object_2261 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_job_definition(
            &mut object_2261,
            var_2260,
        )?;
        object_2261.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kernel_spec(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelSpec,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2262) = &input.name {
        object.key("Name").string(var_2262.as_str());
    }
    if let Some(var_2263) = &input.display_name {
        object.key("DisplayName").string(var_2263.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_system_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2264) = &input.mount_path {
        object.key("MountPath").string(var_2264.as_str());
    }
    if let Some(var_2265) = &input.default_uid {
        object.key("DefaultUid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2265).into()),
        );
    }
    if let Some(var_2266) = &input.default_gid {
        object.key("DefaultGid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2266).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_artifact_source_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArtifactSourceType,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2267) = &input.source_id_type {
        object.key("SourceIdType").string(var_2267.as_str());
    }
    if let Some(var_2268) = &input.value {
        object.key("Value").string(var_2268.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlDataSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2269) = &input.s3_data_source {
        #[allow(unused_mut)]
        let mut object_2270 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_mls3_data_source(
            &mut object_2270,
            var_2269,
        )?;
        object_2270.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_job_completion_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobCompletionCriteria,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2271) = &input.max_candidates {
        object.key("MaxCandidates").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2271).into()),
        );
    }
    if let Some(var_2272) = &input.max_runtime_per_training_job_in_seconds {
        object.key("MaxRuntimePerTrainingJobInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2272).into()),
        );
    }
    if let Some(var_2273) = &input.max_auto_ml_job_runtime_in_seconds {
        object.key("MaxAutoMLJobRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2273).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_security_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlSecurityConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2274) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2274.as_str());
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if let Some(var_2275) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_2276 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_2276, var_2275)?;
        object_2276.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_data_split_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlDataSplitConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2277) = &input.validation_fraction {
        object.key("ValidationFraction").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_2277).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_candidate_generation_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlCandidateGenerationConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2278) = &input.feature_specification_s3_uri {
        object
            .key("FeatureSpecificationS3Uri")
            .string(var_2278.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_target_platform(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TargetPlatform,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2279) = &input.os {
        object.key("Os").string(var_2279.as_str());
    }
    if let Some(var_2280) = &input.arch {
        object.key("Arch").string(var_2280.as_str());
    }
    if let Some(var_2281) = &input.accelerator {
        object.key("Accelerator").string(var_2281.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_constraints_resource(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringConstraintsResource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2282) = &input.s3_uri {
        object.key("S3Uri").string(var_2282.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_statistics_resource(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringStatisticsResource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2283) = &input.s3_uri {
        object.key("S3Uri").string(var_2283.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2284) = &input.endpoint_name {
        object.key("EndpointName").string(var_2284.as_str());
    }
    if let Some(var_2285) = &input.local_path {
        object.key("LocalPath").string(var_2285.as_str());
    }
    if let Some(var_2286) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_2286.as_str());
    }
    if let Some(var_2287) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2287.as_str());
    }
    if let Some(var_2288) = &input.features_attribute {
        object.key("FeaturesAttribute").string(var_2288.as_str());
    }
    if let Some(var_2289) = &input.inference_attribute {
        object.key("InferenceAttribute").string(var_2289.as_str());
    }
    if let Some(var_2290) = &input.probability_attribute {
        object.key("ProbabilityAttribute").string(var_2290.as_str());
    }
    if let Some(var_2291) = &input.probability_threshold_attribute {
        object.key("ProbabilityThresholdAttribute").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_2291).into()),
        );
    }
    if let Some(var_2292) = &input.start_time_offset {
        object.key("StartTimeOffset").string(var_2292.as_str());
    }
    if let Some(var_2293) = &input.end_time_offset {
        object.key("EndTimeOffset").string(var_2293.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringOutput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2294) = &input.s3_output {
        #[allow(unused_mut)]
        let mut object_2295 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_s3_output(
            &mut object_2295,
            var_2294,
        )?;
        object_2295.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_cluster_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringClusterConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2296) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2296).into()),
        );
    }
    if let Some(var_2297) = &input.instance_type {
        object.key("InstanceType").string(var_2297.as_str());
    }
    if let Some(var_2298) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2298).into()),
        );
    }
    if let Some(var_2299) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2299.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sharing_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SharingSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2300) = &input.notebook_output_option {
        object.key("NotebookOutputOption").string(var_2300.as_str());
    }
    if let Some(var_2301) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2301.as_str());
    }
    if let Some(var_2302) = &input.s3_kms_key_id {
        object.key("S3KmsKeyId").string(var_2302.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jupyter_server_app_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JupyterServerAppSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2303) = &input.default_resource_spec {
        #[allow(unused_mut)]
        let mut object_2304 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2304, var_2303)?;
        object_2304.finish();
    }
    if let Some(var_2305) = &input.lifecycle_config_arns {
        let mut array_2306 = object.key("LifecycleConfigArns").start_array();
        for item_2307 in var_2305 {
            {
                array_2306.value().string(item_2307.as_str());
            }
        }
        array_2306.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kernel_gateway_app_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelGatewayAppSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2308) = &input.default_resource_spec {
        #[allow(unused_mut)]
        let mut object_2309 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2309, var_2308)?;
        object_2309.finish();
    }
    if let Some(var_2310) = &input.custom_images {
        let mut array_2311 = object.key("CustomImages").start_array();
        for item_2312 in var_2310 {
            {
                #[allow(unused_mut)]
                let mut object_2313 = array_2311.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_image(
                    &mut object_2313,
                    item_2312,
                )?;
                object_2313.finish();
            }
        }
        array_2311.finish();
    }
    if let Some(var_2314) = &input.lifecycle_config_arns {
        let mut array_2315 = object.key("LifecycleConfigArns").start_array();
        for item_2316 in var_2314 {
            {
                array_2315.value().string(item_2316.as_str());
            }
        }
        array_2315.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tensor_board_app_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TensorBoardAppSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2317) = &input.default_resource_spec {
        #[allow(unused_mut)]
        let mut object_2318 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2318, var_2317)?;
        object_2318.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_r_studio_server_pro_app_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RStudioServerProAppSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2319) = &input.access_status {
        object.key("AccessStatus").string(var_2319.as_str());
    }
    if let Some(var_2320) = &input.user_group {
        object.key("UserGroup").string(var_2320.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_r_session_app_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RSessionAppSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2321) = &input.default_resource_spec {
        #[allow(unused_mut)]
        let mut object_2322 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2322, var_2321)?;
        object_2322.finish();
    }
    if let Some(var_2323) = &input.custom_images {
        let mut array_2324 = object.key("CustomImages").start_array();
        for item_2325 in var_2323 {
            {
                #[allow(unused_mut)]
                let mut object_2326 = array_2324.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_image(
                    &mut object_2326,
                    item_2325,
                )?;
                object_2326.finish();
            }
        }
        array_2324.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_canvas_app_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CanvasAppSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2327) = &input.time_series_forecasting_settings {
        #[allow(unused_mut)]
        let mut object_2328 = object.key("TimeSeriesForecastingSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_time_series_forecasting_settings(
            &mut object_2328,
            var_2327,
        )?;
        object_2328.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_r_studio_server_pro_domain_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RStudioServerProDomainSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2329) = &input.domain_execution_role_arn {
        object
            .key("DomainExecutionRoleArn")
            .string(var_2329.as_str());
    }
    if let Some(var_2330) = &input.r_studio_connect_url {
        object.key("RStudioConnectUrl").string(var_2330.as_str());
    }
    if let Some(var_2331) = &input.r_studio_package_manager_url {
        object
            .key("RStudioPackageManagerUrl")
            .string(var_2331.as_str());
    }
    if let Some(var_2332) = &input.default_resource_spec {
        #[allow(unused_mut)]
        let mut object_2333 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2333, var_2332)?;
        object_2333.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device_selection_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeviceSelectionConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2334) = &input.device_subset_type {
        object.key("DeviceSubsetType").string(var_2334.as_str());
    }
    if input.percentage != 0 {
        object.key("Percentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.percentage).into()),
        );
    }
    if let Some(var_2335) = &input.device_names {
        let mut array_2336 = object.key("DeviceNames").start_array();
        for item_2337 in var_2335 {
            {
                array_2336.value().string(item_2337.as_str());
            }
        }
        array_2336.finish();
    }
    if let Some(var_2338) = &input.device_name_contains {
        object.key("DeviceNameContains").string(var_2338.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_edge_deployment_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EdgeDeploymentConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2339) = &input.failure_handling_policy {
        object
            .key("FailureHandlingPolicy")
            .string(var_2339.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_blue_green_update_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlueGreenUpdatePolicy,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2340) = &input.traffic_routing_configuration {
        #[allow(unused_mut)]
        let mut object_2341 = object.key("TrafficRoutingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_traffic_routing_config(
            &mut object_2341,
            var_2340,
        )?;
        object_2341.finish();
    }
    if let Some(var_2342) = &input.termination_wait_in_seconds {
        object.key("TerminationWaitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2342).into()),
        );
    }
    if let Some(var_2343) = &input.maximum_execution_timeout_in_seconds {
        object.key("MaximumExecutionTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2343).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_rollback_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoRollbackConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2344) = &input.alarms {
        let mut array_2345 = object.key("Alarms").start_array();
        for item_2346 in var_2344 {
            {
                #[allow(unused_mut)]
                let mut object_2347 = array_2345.value().start_object();
                crate::json_ser::serialize_structure_crate_model_alarm(
                    &mut object_2347,
                    item_2346,
                )?;
                object_2347.finish();
            }
        }
        array_2345.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_production_variant_core_dump_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariantCoreDumpConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2348) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_2348.as_str());
    }
    if let Some(var_2349) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2349.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_production_variant_serverless_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariantServerlessConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2350) = &input.memory_size_in_mb {
        object.key("MemorySizeInMB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2350).into()),
        );
    }
    if let Some(var_2351) = &input.max_concurrency {
        object.key("MaxConcurrency").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2351).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capture_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptureOption,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2352) = &input.capture_mode {
        object.key("CaptureMode").string(var_2352.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capture_content_type_header(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptureContentTypeHeader,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2353) = &input.csv_content_types {
        let mut array_2354 = object.key("CsvContentTypes").start_array();
        for item_2355 in var_2353 {
            {
                array_2354.value().string(item_2355.as_str());
            }
        }
        array_2354.finish();
    }
    if let Some(var_2356) = &input.json_content_types {
        let mut array_2357 = object.key("JsonContentTypes").start_array();
        for item_2358 in var_2356 {
            {
                array_2357.value().string(item_2358.as_str());
            }
        }
        array_2357.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_async_inference_client_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceClientConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2359) = &input.max_concurrent_invocations_per_instance {
        object.key("MaxConcurrentInvocationsPerInstance").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2359).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_async_inference_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceOutputConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2360) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2360.as_str());
    }
    if let Some(var_2361) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2361.as_str());
    }
    if let Some(var_2362) = &input.notification_config {
        #[allow(unused_mut)]
        let mut object_2363 = object.key("NotificationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_notification_config(
            &mut object_2363,
            var_2362,
        )?;
        object_2363.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_clarify_explainer_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClarifyExplainerConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2364) = &input.enable_explanations {
        object.key("EnableExplanations").string(var_2364.as_str());
    }
    if let Some(var_2365) = &input.inference_config {
        #[allow(unused_mut)]
        let mut object_2366 = object.key("InferenceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_clarify_inference_config(
            &mut object_2366,
            var_2365,
        )?;
        object_2366.finish();
    }
    if let Some(var_2367) = &input.shap_config {
        #[allow(unused_mut)]
        let mut object_2368 = object.key("ShapConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_clarify_shap_config(
            &mut object_2368,
            var_2367,
        )?;
        object_2368.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_online_store_security_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnlineStoreSecurityConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2369) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2369.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_storage_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3StorageConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2370) = &input.s3_uri {
        object.key("S3Uri").string(var_2370.as_str());
    }
    if let Some(var_2371) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2371.as_str());
    }
    if let Some(var_2372) = &input.resolved_output_s3_uri {
        object.key("ResolvedOutputS3Uri").string(var_2372.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_catalog_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2373) = &input.table_name {
        object.key("TableName").string(var_2373.as_str());
    }
    if let Some(var_2374) = &input.catalog {
        object.key("Catalog").string(var_2374.as_str());
    }
    if let Some(var_2375) = &input.database {
        object.key("Database").string(var_2375.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_activation_conditions_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopActivationConditionsConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2376) = &input.human_loop_activation_conditions {
        object
            .key("HumanLoopActivationConditions")
            .string(var_2376.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_public_workforce_task_price(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PublicWorkforceTaskPrice,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2377) = &input.amount_in_usd {
        #[allow(unused_mut)]
        let mut object_2378 = object.key("AmountInUsd").start_object();
        crate::json_ser::serialize_structure_crate_model_usd(&mut object_2378, var_2377)?;
        object_2378.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_strategy_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobStrategyConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2379) = &input.hyperband_strategy_config {
        #[allow(unused_mut)]
        let mut object_2380 = object.key("HyperbandStrategyConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hyperband_strategy_config(
            &mut object_2380,
            var_2379,
        )?;
        object_2380.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_limits(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceLimits,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("MaxNumberOfTrainingJobs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_number_of_training_jobs).into()),
        );
    }
    {
        object.key("MaxParallelTrainingJobs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_parallel_training_jobs).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameter_ranges(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRanges,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2381) = &input.integer_parameter_ranges {
        let mut array_2382 = object.key("IntegerParameterRanges").start_array();
        for item_2383 in var_2381 {
            {
                #[allow(unused_mut)]
                let mut object_2384 = array_2382.value().start_object();
                crate::json_ser::serialize_structure_crate_model_integer_parameter_range(
                    &mut object_2384,
                    item_2383,
                )?;
                object_2384.finish();
            }
        }
        array_2382.finish();
    }
    if let Some(var_2385) = &input.continuous_parameter_ranges {
        let mut array_2386 = object.key("ContinuousParameterRanges").start_array();
        for item_2387 in var_2385 {
            {
                #[allow(unused_mut)]
                let mut object_2388 = array_2386.value().start_object();
                crate::json_ser::serialize_structure_crate_model_continuous_parameter_range(
                    &mut object_2388,
                    item_2387,
                )?;
                object_2388.finish();
            }
        }
        array_2386.finish();
    }
    if let Some(var_2389) = &input.categorical_parameter_ranges {
        let mut array_2390 = object.key("CategoricalParameterRanges").start_array();
        for item_2391 in var_2389 {
            {
                #[allow(unused_mut)]
                let mut object_2392 = array_2390.value().start_object();
                crate::json_ser::serialize_structure_crate_model_categorical_parameter_range(
                    &mut object_2392,
                    item_2391,
                )?;
                object_2392.finish();
            }
        }
        array_2390.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tuning_job_completion_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TuningJobCompletionCriteria,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2393) = &input.target_objective_metric_value {
        object.key("TargetObjectiveMetricValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_2393).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_algorithm_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterAlgorithmSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2394) = &input.training_image {
        object.key("TrainingImage").string(var_2394.as_str());
    }
    if let Some(var_2395) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2395.as_str());
    }
    if let Some(var_2396) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2396.as_str());
    }
    if let Some(var_2397) = &input.metric_definitions {
        let mut array_2398 = object.key("MetricDefinitions").start_array();
        for item_2399 in var_2397 {
            {
                #[allow(unused_mut)]
                let mut object_2400 = array_2398.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_definition(
                    &mut object_2400,
                    item_2399,
                )?;
                object_2400.finish();
            }
        }
        array_2398.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_resource_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningResourceConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2401) = &input.instance_type {
        object.key("InstanceType").string(var_2401.as_str());
    }
    if input.instance_count != 0 {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_2402) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2402.as_str());
    }
    if let Some(var_2403) = &input.allocation_strategy {
        object.key("AllocationStrategy").string(var_2403.as_str());
    }
    if let Some(var_2404) = &input.instance_configs {
        let mut array_2405 = object.key("InstanceConfigs").start_array();
        for item_2406 in var_2404 {
            {
                #[allow(unused_mut)]
                let mut object_2407 = array_2405.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_instance_config(&mut object_2407, item_2406)?;
                object_2407.finish();
            }
        }
        array_2405.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parent_hyper_parameter_tuning_job(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParentHyperParameterTuningJob,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2408) = &input.hyper_parameter_tuning_job_name {
        object
            .key("HyperParameterTuningJobName")
            .string(var_2408.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_traffic_pattern(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrafficPattern,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2409) = &input.traffic_type {
        object.key("TrafficType").string(var_2409.as_str());
    }
    if let Some(var_2410) = &input.phases {
        let mut array_2411 = object.key("Phases").start_array();
        for item_2412 in var_2410 {
            {
                #[allow(unused_mut)]
                let mut object_2413 = array_2411.value().start_object();
                crate::json_ser::serialize_structure_crate_model_phase(
                    &mut object_2413,
                    item_2412,
                )?;
                object_2413.finish();
            }
        }
        array_2411.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_resource_limit(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommendationJobResourceLimit,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2414) = &input.max_number_of_tests {
        object.key("MaxNumberOfTests").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2414).into()),
        );
    }
    if let Some(var_2415) = &input.max_parallel_of_tests {
        object.key("MaxParallelOfTests").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2415).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_endpoint_input_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointInputConfiguration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2416) = &input.instance_type {
        object.key("InstanceType").string(var_2416.as_str());
    }
    if let Some(var_2417) = &input.inference_specification_name {
        object
            .key("InferenceSpecificationName")
            .string(var_2417.as_str());
    }
    if let Some(var_2418) = &input.environment_parameter_ranges {
        #[allow(unused_mut)]
        let mut object_2419 = object.key("EnvironmentParameterRanges").start_object();
        crate::json_ser::serialize_structure_crate_model_environment_parameter_ranges(
            &mut object_2419,
            var_2418,
        )?;
        object_2419.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_container_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommendationJobContainerConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2420) = &input.domain {
        object.key("Domain").string(var_2420.as_str());
    }
    if let Some(var_2421) = &input.task {
        object.key("Task").string(var_2421.as_str());
    }
    if let Some(var_2422) = &input.framework {
        object.key("Framework").string(var_2422.as_str());
    }
    if let Some(var_2423) = &input.framework_version {
        object.key("FrameworkVersion").string(var_2423.as_str());
    }
    if let Some(var_2424) = &input.payload_config {
        #[allow(unused_mut)]
        let mut object_2425 = object.key("PayloadConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_payload_config(
            &mut object_2425,
            var_2424,
        )?;
        object_2425.finish();
    }
    if let Some(var_2426) = &input.nearest_model_name {
        object.key("NearestModelName").string(var_2426.as_str());
    }
    if let Some(var_2427) = &input.supported_instance_types {
        let mut array_2428 = object.key("SupportedInstanceTypes").start_array();
        for item_2429 in var_2427 {
            {
                array_2428.value().string(item_2429.as_str());
            }
        }
        array_2428.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_latency_threshold(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelLatencyThreshold,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2430) = &input.percentile {
        object.key("Percentile").string(var_2430.as_str());
    }
    if input.value_in_milliseconds != 0 {
        object.key("ValueInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.value_in_milliseconds).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_compiled_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommendationJobCompiledOutputConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2431) = &input.s3_output_uri {
        object.key("S3OutputUri").string(var_2431.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobDataSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2432) = &input.s3_data_source {
        #[allow(unused_mut)]
        let mut object_2433 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_s3_data_source(
            &mut object_2433,
            var_2432,
        )?;
        object_2433.finish();
    }
    if let Some(var_2434) = &input.sns_data_source {
        #[allow(unused_mut)]
        let mut object_2435 = object.key("SnsDataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_sns_data_source(
            &mut object_2435,
            var_2434,
        )?;
        object_2435.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_data_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobDataAttributes,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2436) = &input.content_classifiers {
        let mut array_2437 = object.key("ContentClassifiers").start_array();
        for item_2438 in var_2436 {
            {
                array_2437.value().string(item_2438.as_str());
            }
        }
        array_2437.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_resource_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobResourceConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2439) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2439.as_str());
    }
    if let Some(var_2440) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_2441 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_2441, var_2440)?;
        object_2441.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ui_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2442) = &input.ui_template_s3_uri {
        object.key("UiTemplateS3Uri").string(var_2442.as_str());
    }
    if let Some(var_2443) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_2443.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_annotation_consolidation_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnnotationConsolidationConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2444) = &input.annotation_consolidation_lambda_arn {
        object
            .key("AnnotationConsolidationLambdaArn")
            .string(var_2444.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2445) = &input.repository_access_mode {
        object.key("RepositoryAccessMode").string(var_2445.as_str());
    }
    if let Some(var_2446) = &input.repository_auth_config {
        #[allow(unused_mut)]
        let mut object_2447 = object.key("RepositoryAuthConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_repository_auth_config(
            &mut object_2447,
            var_2446,
        )?;
        object_2447.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_multi_model_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiModelConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2448) = &input.model_cache_setting {
        object.key("ModelCacheSetting").string(var_2448.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_ground_truth_s3_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringGroundTruthS3Input,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2449) = &input.s3_uri {
        object.key("S3Uri").string(var_2449.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_package_validation_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageValidationProfile,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2450) = &input.profile_name {
        object.key("ProfileName").string(var_2450.as_str());
    }
    if let Some(var_2451) = &input.transform_job_definition {
        #[allow(unused_mut)]
        let mut object_2452 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_job_definition(
            &mut object_2452,
            var_2451,
        )?;
        object_2452.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_algorithm(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAlgorithm,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2453) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_2453.as_str());
    }
    if let Some(var_2454) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2454.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_quality(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQuality,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2455) = &input.statistics {
        #[allow(unused_mut)]
        let mut object_2456 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2456,
            var_2455,
        )?;
        object_2456.finish();
    }
    if let Some(var_2457) = &input.constraints {
        #[allow(unused_mut)]
        let mut object_2458 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2458,
            var_2457,
        )?;
        object_2458.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_data_quality(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelDataQuality,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2459) = &input.statistics {
        #[allow(unused_mut)]
        let mut object_2460 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2460,
            var_2459,
        )?;
        object_2460.finish();
    }
    if let Some(var_2461) = &input.constraints {
        #[allow(unused_mut)]
        let mut object_2462 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2462,
            var_2461,
        )?;
        object_2462.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bias(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Bias,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2463) = &input.report {
        #[allow(unused_mut)]
        let mut object_2464 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2464,
            var_2463,
        )?;
        object_2464.finish();
    }
    if let Some(var_2465) = &input.pre_training_report {
        #[allow(unused_mut)]
        let mut object_2466 = object.key("PreTrainingReport").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2466,
            var_2465,
        )?;
        object_2466.finish();
    }
    if let Some(var_2467) = &input.post_training_report {
        #[allow(unused_mut)]
        let mut object_2468 = object.key("PostTrainingReport").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2468,
            var_2467,
        )?;
        object_2468.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_explainability(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Explainability,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2469) = &input.report {
        #[allow(unused_mut)]
        let mut object_2470 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2470,
            var_2469,
        )?;
        object_2470.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_bias(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DriftCheckBias,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2471) = &input.config_file {
        #[allow(unused_mut)]
        let mut object_2472 = object.key("ConfigFile").start_object();
        crate::json_ser::serialize_structure_crate_model_file_source(&mut object_2472, var_2471)?;
        object_2472.finish();
    }
    if let Some(var_2473) = &input.pre_training_constraints {
        #[allow(unused_mut)]
        let mut object_2474 = object.key("PreTrainingConstraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2474,
            var_2473,
        )?;
        object_2474.finish();
    }
    if let Some(var_2475) = &input.post_training_constraints {
        #[allow(unused_mut)]
        let mut object_2476 = object.key("PostTrainingConstraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2476,
            var_2475,
        )?;
        object_2476.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_explainability(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DriftCheckExplainability,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2477) = &input.constraints {
        #[allow(unused_mut)]
        let mut object_2478 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2478,
            var_2477,
        )?;
        object_2478.finish();
    }
    if let Some(var_2479) = &input.config_file {
        #[allow(unused_mut)]
        let mut object_2480 = object.key("ConfigFile").start_object();
        crate::json_ser::serialize_structure_crate_model_file_source(&mut object_2480, var_2479)?;
        object_2480.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_model_quality(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DriftCheckModelQuality,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2481) = &input.statistics {
        #[allow(unused_mut)]
        let mut object_2482 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2482,
            var_2481,
        )?;
        object_2482.finish();
    }
    if let Some(var_2483) = &input.constraints {
        #[allow(unused_mut)]
        let mut object_2484 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2484,
            var_2483,
        )?;
        object_2484.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_model_data_quality(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DriftCheckModelDataQuality,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2485) = &input.statistics {
        #[allow(unused_mut)]
        let mut object_2486 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2486,
            var_2485,
        )?;
        object_2486.finish();
    }
    if let Some(var_2487) = &input.constraints {
        #[allow(unused_mut)]
        let mut object_2488 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2488,
            var_2487,
        )?;
        object_2488.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schedule_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScheduleConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2489) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_2489.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_job_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringJobDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2490) = &input.baseline_config {
        #[allow(unused_mut)]
        let mut object_2491 = object.key("BaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_baseline_config(
            &mut object_2491,
            var_2490,
        )?;
        object_2491.finish();
    }
    if let Some(var_2492) = &input.monitoring_inputs {
        let mut array_2493 = object.key("MonitoringInputs").start_array();
        for item_2494 in var_2492 {
            {
                #[allow(unused_mut)]
                let mut object_2495 = array_2493.value().start_object();
                crate::json_ser::serialize_structure_crate_model_monitoring_input(
                    &mut object_2495,
                    item_2494,
                )?;
                object_2495.finish();
            }
        }
        array_2493.finish();
    }
    if let Some(var_2496) = &input.monitoring_output_config {
        #[allow(unused_mut)]
        let mut object_2497 = object.key("MonitoringOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_2497,
            var_2496,
        )?;
        object_2497.finish();
    }
    if let Some(var_2498) = &input.monitoring_resources {
        #[allow(unused_mut)]
        let mut object_2499 = object.key("MonitoringResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_2499,
            var_2498,
        )?;
        object_2499.finish();
    }
    if let Some(var_2500) = &input.monitoring_app_specification {
        #[allow(unused_mut)]
        let mut object_2501 = object.key("MonitoringAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_app_specification(
            &mut object_2501,
            var_2500,
        )?;
        object_2501.finish();
    }
    if let Some(var_2502) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_2503 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_2503,
            var_2502,
        )?;
        object_2503.finish();
    }
    if let Some(var_2504) = &input.environment {
        #[allow(unused_mut)]
        let mut object_2505 = object.key("Environment").start_object();
        for (key_2506, value_2507) in var_2504 {
            {
                object_2505
                    .key(key_2506.as_str())
                    .string(value_2507.as_str());
            }
        }
        object_2505.finish();
    }
    if let Some(var_2508) = &input.network_config {
        #[allow(unused_mut)]
        let mut object_2509 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_network_config(
            &mut object_2509,
            var_2508,
        )?;
        object_2509.finish();
    }
    if let Some(var_2510) = &input.role_arn {
        object.key("RoleArn").string(var_2510.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_s3_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingS3Input,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2511) = &input.s3_uri {
        object.key("S3Uri").string(var_2511.as_str());
    }
    if let Some(var_2512) = &input.local_path {
        object.key("LocalPath").string(var_2512.as_str());
    }
    if let Some(var_2513) = &input.s3_data_type {
        object.key("S3DataType").string(var_2513.as_str());
    }
    if let Some(var_2514) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_2514.as_str());
    }
    if let Some(var_2515) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2515.as_str());
    }
    if let Some(var_2516) = &input.s3_compression_type {
        object.key("S3CompressionType").string(var_2516.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dataset_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatasetDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2517) = &input.athena_dataset_definition {
        #[allow(unused_mut)]
        let mut object_2518 = object.key("AthenaDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_athena_dataset_definition(
            &mut object_2518,
            var_2517,
        )?;
        object_2518.finish();
    }
    if let Some(var_2519) = &input.redshift_dataset_definition {
        #[allow(unused_mut)]
        let mut object_2520 = object.key("RedshiftDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_dataset_definition(
            &mut object_2520,
            var_2519,
        )?;
        object_2520.finish();
    }
    if let Some(var_2521) = &input.local_path {
        object.key("LocalPath").string(var_2521.as_str());
    }
    if let Some(var_2522) = &input.data_distribution_type {
        object.key("DataDistributionType").string(var_2522.as_str());
    }
    if let Some(var_2523) = &input.input_mode {
        object.key("InputMode").string(var_2523.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingOutput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2524) = &input.output_name {
        object.key("OutputName").string(var_2524.as_str());
    }
    if let Some(var_2525) = &input.s3_output {
        #[allow(unused_mut)]
        let mut object_2526 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_s3_output(
            &mut object_2526,
            var_2525,
        )?;
        object_2526.finish();
    }
    if let Some(var_2527) = &input.feature_store_output {
        #[allow(unused_mut)]
        let mut object_2528 = object.key("FeatureStoreOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_feature_store_output(
            &mut object_2528,
            var_2527,
        )?;
        object_2528.finish();
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_cluster_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingClusterConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2529) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2529).into()),
        );
    }
    if let Some(var_2530) = &input.instance_type {
        object.key("InstanceType").string(var_2530.as_str());
    }
    if let Some(var_2531) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2531).into()),
        );
    }
    if let Some(var_2532) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2532.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_provisioning_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProvisioningParameter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2533) = &input.key {
        object.key("Key").string(var_2533.as_str());
    }
    if let Some(var_2534) = &input.value {
        object.key("Value").string(var_2534.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2535) = &input.s3_data_source {
        #[allow(unused_mut)]
        let mut object_2536 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_source(
            &mut object_2536,
            var_2535,
        )?;
        object_2536.finish();
    }
    if let Some(var_2537) = &input.file_system_data_source {
        #[allow(unused_mut)]
        let mut object_2538 = object.key("FileSystemDataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_file_system_data_source(
            &mut object_2538,
            var_2537,
        )?;
        object_2538.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_shuffle_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ShuffleConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("Seed").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.seed).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceGroup,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2539) = &input.instance_type {
        object.key("InstanceType").string(var_2539.as_str());
    }
    {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    if let Some(var_2540) = &input.instance_group_name {
        object.key("InstanceGroupName").string(var_2540.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_collection_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CollectionConfiguration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2541) = &input.collection_name {
        object.key("CollectionName").string(var_2541.as_str());
    }
    if let Some(var_2542) = &input.collection_parameters {
        #[allow(unused_mut)]
        let mut object_2543 = object.key("CollectionParameters").start_object();
        for (key_2544, value_2545) in var_2542 {
            {
                object_2543
                    .key(key_2544.as_str())
                    .string(value_2545.as_str());
            }
        }
        object_2543.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformDataSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2546) = &input.s3_data_source {
        #[allow(unused_mut)]
        let mut object_2547 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_s3_data_source(
            &mut object_2547,
            var_2546,
        )?;
        object_2547.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cognito_member_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoMemberDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2548) = &input.user_pool {
        object.key("UserPool").string(var_2548.as_str());
    }
    if let Some(var_2549) = &input.user_group {
        object.key("UserGroup").string(var_2549.as_str());
    }
    if let Some(var_2550) = &input.client_id {
        object.key("ClientId").string(var_2550.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oidc_member_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OidcMemberDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2551) = &input.groups {
        let mut array_2552 = object.key("Groups").start_array();
        for item_2553 in var_2551 {
            {
                array_2552.value().string(item_2553.as_str());
            }
        }
        array_2552.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_name_query(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyNameQuery,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2554) = &input.property_name_hint {
        object.key("PropertyNameHint").string(var_2554.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_metadata_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelMetadataFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2555) = &input.name {
        object.key("Name").string(var_2555.as_str());
    }
    if let Some(var_2556) = &input.value {
        object.key("Value").string(var_2556.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2557) = &input.name {
        object.key("Name").string(var_2557.as_str());
    }
    if let Some(var_2558) = &input.operator {
        object.key("Operator").string(var_2558.as_str());
    }
    if let Some(var_2559) = &input.value {
        object.key("Value").string(var_2559.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_nested_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NestedFilters,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2560) = &input.nested_property_name {
        object.key("NestedPropertyName").string(var_2560.as_str());
    }
    if let Some(var_2561) = &input.filters {
        let mut array_2562 = object.key("Filters").start_array();
        for item_2563 in var_2561 {
            {
                #[allow(unused_mut)]
                let mut object_2564 = array_2562.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(
                    &mut object_2564,
                    item_2563,
                )?;
                object_2564.finish();
            }
        }
        array_2562.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_r_studio_server_pro_domain_settings_for_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RStudioServerProDomainSettingsForUpdate,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2565) = &input.domain_execution_role_arn {
        object
            .key("DomainExecutionRoleArn")
            .string(var_2565.as_str());
    }
    if let Some(var_2566) = &input.default_resource_spec {
        #[allow(unused_mut)]
        let mut object_2567 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2567, var_2566)?;
        object_2567.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRange,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2568) = &input.integer_parameter_range_specification {
        #[allow(unused_mut)]
        let mut object_2569 = object
            .key("IntegerParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_integer_parameter_range_specification(
            &mut object_2569,
            var_2568,
        )?;
        object_2569.finish();
    }
    if let Some(var_2570) = &input.continuous_parameter_range_specification {
        #[allow(unused_mut)]
        let mut object_2571 = object
            .key("ContinuousParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_continuous_parameter_range_specification(
            &mut object_2571,
            var_2570,
        )?;
        object_2571.finish();
    }
    if let Some(var_2572) = &input.categorical_parameter_range_specification {
        #[allow(unused_mut)]
        let mut object_2573 = object
            .key("CategoricalParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_categorical_parameter_range_specification(
            &mut object_2573,
            var_2572,
        )?;
        object_2573.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2574) = &input.data_input_config {
        object.key("DataInputConfig").string(var_2574.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_training_job_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingJobDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2575) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2575.as_str());
    }
    if let Some(var_2576) = &input.hyper_parameters {
        #[allow(unused_mut)]
        let mut object_2577 = object.key("HyperParameters").start_object();
        for (key_2578, value_2579) in var_2576 {
            {
                object_2577
                    .key(key_2578.as_str())
                    .string(value_2579.as_str());
            }
        }
        object_2577.finish();
    }
    if let Some(var_2580) = &input.input_data_config {
        let mut array_2581 = object.key("InputDataConfig").start_array();
        for item_2582 in var_2580 {
            {
                #[allow(unused_mut)]
                let mut object_2583 = array_2581.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel(
                    &mut object_2583,
                    item_2582,
                )?;
                object_2583.finish();
            }
        }
        array_2581.finish();
    }
    if let Some(var_2584) = &input.output_data_config {
        #[allow(unused_mut)]
        let mut object_2585 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_data_config(
            &mut object_2585,
            var_2584,
        )?;
        object_2585.finish();
    }
    if let Some(var_2586) = &input.resource_config {
        #[allow(unused_mut)]
        let mut object_2587 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_config(
            &mut object_2587,
            var_2586,
        )?;
        object_2587.finish();
    }
    if let Some(var_2588) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_2589 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(
            &mut object_2589,
            var_2588,
        )?;
        object_2589.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_job_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformJobDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2590) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2590).into()),
        );
    }
    if let Some(var_2591) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2591).into()),
        );
    }
    if let Some(var_2592) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_2592.as_str());
    }
    if let Some(var_2593) = &input.environment {
        #[allow(unused_mut)]
        let mut object_2594 = object.key("Environment").start_object();
        for (key_2595, value_2596) in var_2593 {
            {
                object_2594
                    .key(key_2595.as_str())
                    .string(value_2596.as_str());
            }
        }
        object_2594.finish();
    }
    if let Some(var_2597) = &input.transform_input {
        #[allow(unused_mut)]
        let mut object_2598 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_input(
            &mut object_2598,
            var_2597,
        )?;
        object_2598.finish();
    }
    if let Some(var_2599) = &input.transform_output {
        #[allow(unused_mut)]
        let mut object_2600 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_output(
            &mut object_2600,
            var_2599,
        )?;
        object_2600.finish();
    }
    if let Some(var_2601) = &input.transform_resources {
        #[allow(unused_mut)]
        let mut object_2602 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_resources(
            &mut object_2602,
            var_2601,
        )?;
        object_2602.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_mls3_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMls3DataSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2603) = &input.s3_data_type {
        object.key("S3DataType").string(var_2603.as_str());
    }
    if let Some(var_2604) = &input.s3_uri {
        object.key("S3Uri").string(var_2604.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_s3_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringS3Output,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2605) = &input.s3_uri {
        object.key("S3Uri").string(var_2605.as_str());
    }
    if let Some(var_2606) = &input.local_path {
        object.key("LocalPath").string(var_2606.as_str());
    }
    if let Some(var_2607) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2607.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_image(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomImage,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2608) = &input.image_name {
        object.key("ImageName").string(var_2608.as_str());
    }
    if let Some(var_2609) = &input.image_version_number {
        object.key("ImageVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2609).into()),
        );
    }
    if let Some(var_2610) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_2610.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_time_series_forecasting_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeSeriesForecastingSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2611) = &input.status {
        object.key("Status").string(var_2611.as_str());
    }
    if let Some(var_2612) = &input.amazon_forecast_role_arn {
        object
            .key("AmazonForecastRoleArn")
            .string(var_2612.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_traffic_routing_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrafficRoutingConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2613) = &input.r#type {
        object.key("Type").string(var_2613.as_str());
    }
    if let Some(var_2614) = &input.wait_interval_in_seconds {
        object.key("WaitIntervalInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2614).into()),
        );
    }
    if let Some(var_2615) = &input.canary_size {
        #[allow(unused_mut)]
        let mut object_2616 = object.key("CanarySize").start_object();
        crate::json_ser::serialize_structure_crate_model_capacity_size(&mut object_2616, var_2615)?;
        object_2616.finish();
    }
    if let Some(var_2617) = &input.linear_step_size {
        #[allow(unused_mut)]
        let mut object_2618 = object.key("LinearStepSize").start_object();
        crate::json_ser::serialize_structure_crate_model_capacity_size(&mut object_2618, var_2617)?;
        object_2618.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_alarm(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Alarm,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2619) = &input.alarm_name {
        object.key("AlarmName").string(var_2619.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_async_inference_notification_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceNotificationConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2620) = &input.success_topic {
        object.key("SuccessTopic").string(var_2620.as_str());
    }
    if let Some(var_2621) = &input.error_topic {
        object.key("ErrorTopic").string(var_2621.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_clarify_inference_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClarifyInferenceConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2622) = &input.features_attribute {
        object.key("FeaturesAttribute").string(var_2622.as_str());
    }
    if let Some(var_2623) = &input.content_template {
        object.key("ContentTemplate").string(var_2623.as_str());
    }
    if let Some(var_2624) = &input.max_record_count {
        object.key("MaxRecordCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2624).into()),
        );
    }
    if let Some(var_2625) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2625).into()),
        );
    }
    if let Some(var_2626) = &input.probability_index {
        object.key("ProbabilityIndex").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2626).into()),
        );
    }
    if let Some(var_2627) = &input.label_index {
        object.key("LabelIndex").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2627).into()),
        );
    }
    if let Some(var_2628) = &input.probability_attribute {
        object.key("ProbabilityAttribute").string(var_2628.as_str());
    }
    if let Some(var_2629) = &input.label_attribute {
        object.key("LabelAttribute").string(var_2629.as_str());
    }
    if let Some(var_2630) = &input.label_headers {
        let mut array_2631 = object.key("LabelHeaders").start_array();
        for item_2632 in var_2630 {
            {
                array_2631.value().string(item_2632.as_str());
            }
        }
        array_2631.finish();
    }
    if let Some(var_2633) = &input.feature_headers {
        let mut array_2634 = object.key("FeatureHeaders").start_array();
        for item_2635 in var_2633 {
            {
                array_2634.value().string(item_2635.as_str());
            }
        }
        array_2634.finish();
    }
    if let Some(var_2636) = &input.feature_types {
        let mut array_2637 = object.key("FeatureTypes").start_array();
        for item_2638 in var_2636 {
            {
                array_2637.value().string(item_2638.as_str());
            }
        }
        array_2637.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_clarify_shap_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClarifyShapConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2639) = &input.shap_baseline_config {
        #[allow(unused_mut)]
        let mut object_2640 = object.key("ShapBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_clarify_shap_baseline_config(
            &mut object_2640,
            var_2639,
        )?;
        object_2640.finish();
    }
    if let Some(var_2641) = &input.number_of_samples {
        object.key("NumberOfSamples").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2641).into()),
        );
    }
    if let Some(var_2642) = &input.use_logit {
        object.key("UseLogit").boolean(*var_2642);
    }
    if let Some(var_2643) = &input.seed {
        object.key("Seed").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2643).into()),
        );
    }
    if let Some(var_2644) = &input.text_config {
        #[allow(unused_mut)]
        let mut object_2645 = object.key("TextConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_clarify_text_config(
            &mut object_2645,
            var_2644,
        )?;
        object_2645.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_usd(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Usd,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.dollars != 0 {
        object.key("Dollars").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.dollars).into()),
        );
    }
    if input.cents != 0 {
        object.key("Cents").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.cents).into()),
        );
    }
    if input.tenth_fractions_of_a_cent != 0 {
        object.key("TenthFractionsOfACent").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.tenth_fractions_of_a_cent).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyperband_strategy_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperbandStrategyConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2646) = &input.min_resource {
        object.key("MinResource").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2646).into()),
        );
    }
    if let Some(var_2647) = &input.max_resource {
        object.key("MaxResource").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2647).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_integer_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRange,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2648) = &input.name {
        object.key("Name").string(var_2648.as_str());
    }
    if let Some(var_2649) = &input.min_value {
        object.key("MinValue").string(var_2649.as_str());
    }
    if let Some(var_2650) = &input.max_value {
        object.key("MaxValue").string(var_2650.as_str());
    }
    if let Some(var_2651) = &input.scaling_type {
        object.key("ScalingType").string(var_2651.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_continuous_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRange,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2652) = &input.name {
        object.key("Name").string(var_2652.as_str());
    }
    if let Some(var_2653) = &input.min_value {
        object.key("MinValue").string(var_2653.as_str());
    }
    if let Some(var_2654) = &input.max_value {
        object.key("MaxValue").string(var_2654.as_str());
    }
    if let Some(var_2655) = &input.scaling_type {
        object.key("ScalingType").string(var_2655.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_categorical_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRange,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2656) = &input.name {
        object.key("Name").string(var_2656.as_str());
    }
    if let Some(var_2657) = &input.values {
        let mut array_2658 = object.key("Values").start_array();
        for item_2659 in var_2657 {
            {
                array_2658.value().string(item_2659.as_str());
            }
        }
        array_2658.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_instance_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningInstanceConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2660) = &input.instance_type {
        object.key("InstanceType").string(var_2660.as_str());
    }
    {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_phase(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Phase,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2661) = &input.initial_number_of_users {
        object.key("InitialNumberOfUsers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2661).into()),
        );
    }
    if let Some(var_2662) = &input.spawn_rate {
        object.key("SpawnRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2662).into()),
        );
    }
    if let Some(var_2663) = &input.duration_in_seconds {
        object.key("DurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2663).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_environment_parameter_ranges(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EnvironmentParameterRanges,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2664) = &input.categorical_parameter_ranges {
        let mut array_2665 = object.key("CategoricalParameterRanges").start_array();
        for item_2666 in var_2664 {
            {
                #[allow(unused_mut)]
                let mut object_2667 = array_2665.value().start_object();
                crate::json_ser::serialize_structure_crate_model_categorical_parameter(
                    &mut object_2667,
                    item_2666,
                )?;
                object_2667.finish();
            }
        }
        array_2665.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_payload_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommendationJobPayloadConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2668) = &input.sample_payload_url {
        object.key("SamplePayloadUrl").string(var_2668.as_str());
    }
    if let Some(var_2669) = &input.supported_content_types {
        let mut array_2670 = object.key("SupportedContentTypes").start_array();
        for item_2671 in var_2669 {
            {
                array_2670.value().string(item_2671.as_str());
            }
        }
        array_2670.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_s3_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobS3DataSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2672) = &input.manifest_s3_uri {
        object.key("ManifestS3Uri").string(var_2672.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_sns_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobSnsDataSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2673) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_2673.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_repository_auth_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RepositoryAuthConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2674) = &input.repository_credentials_provider_arn {
        object
            .key("RepositoryCredentialsProviderArn")
            .string(var_2674.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metrics_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricsSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2675) = &input.content_type {
        object.key("ContentType").string(var_2675.as_str());
    }
    if let Some(var_2676) = &input.content_digest {
        object.key("ContentDigest").string(var_2676.as_str());
    }
    if let Some(var_2677) = &input.s3_uri {
        object.key("S3Uri").string(var_2677.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2678) = &input.content_type {
        object.key("ContentType").string(var_2678.as_str());
    }
    if let Some(var_2679) = &input.content_digest {
        object.key("ContentDigest").string(var_2679.as_str());
    }
    if let Some(var_2680) = &input.s3_uri {
        object.key("S3Uri").string(var_2680.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_baseline_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringBaselineConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2681) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_2681.as_str());
    }
    if let Some(var_2682) = &input.constraints_resource {
        #[allow(unused_mut)]
        let mut object_2683 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_2683,
            var_2682,
        )?;
        object_2683.finish();
    }
    if let Some(var_2684) = &input.statistics_resource {
        #[allow(unused_mut)]
        let mut object_2685 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_statistics_resource(
            &mut object_2685,
            var_2684,
        )?;
        object_2685.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2686) = &input.endpoint_input {
        #[allow(unused_mut)]
        let mut object_2687 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(
            &mut object_2687,
            var_2686,
        )?;
        object_2687.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringAppSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2688) = &input.image_uri {
        object.key("ImageUri").string(var_2688.as_str());
    }
    if let Some(var_2689) = &input.container_entrypoint {
        let mut array_2690 = object.key("ContainerEntrypoint").start_array();
        for item_2691 in var_2689 {
            {
                array_2690.value().string(item_2691.as_str());
            }
        }
        array_2690.finish();
    }
    if let Some(var_2692) = &input.container_arguments {
        let mut array_2693 = object.key("ContainerArguments").start_array();
        for item_2694 in var_2692 {
            {
                array_2693.value().string(item_2694.as_str());
            }
        }
        array_2693.finish();
    }
    if let Some(var_2695) = &input.record_preprocessor_source_uri {
        object
            .key("RecordPreprocessorSourceUri")
            .string(var_2695.as_str());
    }
    if let Some(var_2696) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_2696.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_athena_dataset_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AthenaDatasetDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2697) = &input.catalog {
        object.key("Catalog").string(var_2697.as_str());
    }
    if let Some(var_2698) = &input.database {
        object.key("Database").string(var_2698.as_str());
    }
    if let Some(var_2699) = &input.query_string {
        object.key("QueryString").string(var_2699.as_str());
    }
    if let Some(var_2700) = &input.work_group {
        object.key("WorkGroup").string(var_2700.as_str());
    }
    if let Some(var_2701) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2701.as_str());
    }
    if let Some(var_2702) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2702.as_str());
    }
    if let Some(var_2703) = &input.output_format {
        object.key("OutputFormat").string(var_2703.as_str());
    }
    if let Some(var_2704) = &input.output_compression {
        object.key("OutputCompression").string(var_2704.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_dataset_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftDatasetDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2705) = &input.cluster_id {
        object.key("ClusterId").string(var_2705.as_str());
    }
    if let Some(var_2706) = &input.database {
        object.key("Database").string(var_2706.as_str());
    }
    if let Some(var_2707) = &input.db_user {
        object.key("DbUser").string(var_2707.as_str());
    }
    if let Some(var_2708) = &input.query_string {
        object.key("QueryString").string(var_2708.as_str());
    }
    if let Some(var_2709) = &input.cluster_role_arn {
        object.key("ClusterRoleArn").string(var_2709.as_str());
    }
    if let Some(var_2710) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2710.as_str());
    }
    if let Some(var_2711) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2711.as_str());
    }
    if let Some(var_2712) = &input.output_format {
        object.key("OutputFormat").string(var_2712.as_str());
    }
    if let Some(var_2713) = &input.output_compression {
        object.key("OutputCompression").string(var_2713.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_s3_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingS3Output,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2714) = &input.s3_uri {
        object.key("S3Uri").string(var_2714.as_str());
    }
    if let Some(var_2715) = &input.local_path {
        object.key("LocalPath").string(var_2715.as_str());
    }
    if let Some(var_2716) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2716.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_feature_store_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingFeatureStoreOutput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2717) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_2717.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2718) = &input.s3_data_type {
        object.key("S3DataType").string(var_2718.as_str());
    }
    if let Some(var_2719) = &input.s3_uri {
        object.key("S3Uri").string(var_2719.as_str());
    }
    if let Some(var_2720) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2720.as_str());
    }
    if let Some(var_2721) = &input.attribute_names {
        let mut array_2722 = object.key("AttributeNames").start_array();
        for item_2723 in var_2721 {
            {
                array_2722.value().string(item_2723.as_str());
            }
        }
        array_2722.finish();
    }
    if let Some(var_2724) = &input.instance_group_names {
        let mut array_2725 = object.key("InstanceGroupNames").start_array();
        for item_2726 in var_2724 {
            {
                array_2725.value().string(item_2726.as_str());
            }
        }
        array_2725.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_system_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemDataSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2727) = &input.file_system_id {
        object.key("FileSystemId").string(var_2727.as_str());
    }
    if let Some(var_2728) = &input.file_system_access_mode {
        object.key("FileSystemAccessMode").string(var_2728.as_str());
    }
    if let Some(var_2729) = &input.file_system_type {
        object.key("FileSystemType").string(var_2729.as_str());
    }
    if let Some(var_2730) = &input.directory_path {
        object.key("DirectoryPath").string(var_2730.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_s3_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformS3DataSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2731) = &input.s3_data_type {
        object.key("S3DataType").string(var_2731.as_str());
    }
    if let Some(var_2732) = &input.s3_uri {
        object.key("S3Uri").string(var_2732.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_integer_parameter_range_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRangeSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2733) = &input.min_value {
        object.key("MinValue").string(var_2733.as_str());
    }
    if let Some(var_2734) = &input.max_value {
        object.key("MaxValue").string(var_2734.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_continuous_parameter_range_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRangeSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2735) = &input.min_value {
        object.key("MinValue").string(var_2735.as_str());
    }
    if let Some(var_2736) = &input.max_value {
        object.key("MaxValue").string(var_2736.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_categorical_parameter_range_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRangeSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2737) = &input.values {
        let mut array_2738 = object.key("Values").start_array();
        for item_2739 in var_2737 {
            {
                array_2738.value().string(item_2739.as_str());
            }
        }
        array_2738.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capacity_size(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacitySize,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2740) = &input.r#type {
        object.key("Type").string(var_2740.as_str());
    }
    if let Some(var_2741) = &input.value {
        object.key("Value").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2741).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_clarify_shap_baseline_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClarifyShapBaselineConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2742) = &input.mime_type {
        object.key("MimeType").string(var_2742.as_str());
    }
    if let Some(var_2743) = &input.shap_baseline {
        object.key("ShapBaseline").string(var_2743.as_str());
    }
    if let Some(var_2744) = &input.shap_baseline_uri {
        object.key("ShapBaselineUri").string(var_2744.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_clarify_text_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClarifyTextConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2745) = &input.language {
        object.key("Language").string(var_2745.as_str());
    }
    if let Some(var_2746) = &input.granularity {
        object.key("Granularity").string(var_2746.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_categorical_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2747) = &input.name {
        object.key("Name").string(var_2747.as_str());
    }
    if let Some(var_2748) = &input.value {
        let mut array_2749 = object.key("Value").start_array();
        for item_2750 in var_2748 {
            {
                array_2749.value().string(item_2750.as_str());
            }
        }
        array_2749.finish();
    }
    Ok(())
}
