// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_firewall_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateFirewallPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.update_token {
        object.key("UpdateToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.firewall_arn {
        object.key("FirewallArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.firewall_name {
        object.key("FirewallName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_subnets_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateSubnetsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_5) = &input.update_token {
        object.key("UpdateToken").string(var_5.as_str());
    }
    if let Some(var_6) = &input.firewall_arn {
        object.key("FirewallArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.firewall_name {
        object.key("FirewallName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.subnet_mappings {
        let mut array_9 = object.key("SubnetMappings").start_array();
        for item_10 in var_8 {
             {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_crate_model_subnet_mapping(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_firewall_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateFirewallInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_12) = &input.firewall_name {
        object.key("FirewallName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_13.as_str());
    }
    if let Some(var_14) = &input.vpc_id {
        object.key("VpcId").string(var_14.as_str());
    }
    if let Some(var_15) = &input.subnet_mappings {
        let mut array_16 = object.key("SubnetMappings").start_array();
        for item_17 in var_15 {
             {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_subnet_mapping(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    if input.delete_protection {
        object.key("DeleteProtection").boolean(input.delete_protection);
    }
    if input.subnet_change_protection {
        object.key("SubnetChangeProtection").boolean(input.subnet_change_protection);
    }
    if input.firewall_policy_change_protection {
        object.key("FirewallPolicyChangeProtection").boolean(input.firewall_policy_change_protection);
    }
    if let Some(var_19) = &input.description {
        object.key("Description").string(var_19.as_str());
    }
    if let Some(var_20) = &input.tags {
        let mut array_21 = object.key("Tags").start_array();
        for item_22 in var_20 {
             {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_25 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(&mut object_25, var_24)?;
        object_25.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_firewall_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateFirewallPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_26) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_26.as_str());
    }
    if let Some(var_27) = &input.firewall_policy {
        #[allow(unused_mut)]
        let mut object_28 = object.key("FirewallPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_firewall_policy(&mut object_28, var_27)?;
        object_28.finish();
    }
    if let Some(var_29) = &input.description {
        object.key("Description").string(var_29.as_str());
    }
    if let Some(var_30) = &input.tags {
        let mut array_31 = object.key("Tags").start_array();
        for item_32 in var_30 {
             {
                #[allow(unused_mut)]
                let mut object_33 = array_31.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_33, item_32)?;
                object_33.finish();
            }
        }
        array_31.finish();
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    if let Some(var_34) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_35 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(&mut object_35, var_34)?;
        object_35.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_rule_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateRuleGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_36) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_36.as_str());
    }
    if let Some(var_37) = &input.rule_group {
        #[allow(unused_mut)]
        let mut object_38 = object.key("RuleGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group(&mut object_38, var_37)?;
        object_38.finish();
    }
    if let Some(var_39) = &input.rules {
        object.key("Rules").string(var_39.as_str());
    }
    if let Some(var_40) = &input.r#type {
        object.key("Type").string(var_40.as_str());
    }
    if let Some(var_41) = &input.description {
        object.key("Description").string(var_41.as_str());
    }
    if let Some(var_42) = &input.capacity {
        object.key("Capacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_42).into()));
    }
    if let Some(var_43) = &input.tags {
        let mut array_44 = object.key("Tags").start_array();
        for item_45 in var_43 {
             {
                #[allow(unused_mut)]
                let mut object_46 = array_44.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_46, item_45)?;
                object_46.finish();
            }
        }
        array_44.finish();
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    if let Some(var_47) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_48 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(&mut object_48, var_47)?;
        object_48.finish();
    }
    if let Some(var_49) = &input.source_metadata {
        #[allow(unused_mut)]
        let mut object_50 = object.key("SourceMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_source_metadata(&mut object_50, var_49)?;
        object_50.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_firewall_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteFirewallInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_51) = &input.firewall_name {
        object.key("FirewallName").string(var_51.as_str());
    }
    if let Some(var_52) = &input.firewall_arn {
        object.key("FirewallArn").string(var_52.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_firewall_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteFirewallPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_53) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_53.as_str());
    }
    if let Some(var_54) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_54.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_55) = &input.resource_arn {
        object.key("ResourceArn").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_rule_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteRuleGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_56) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_56.as_str());
    }
    if let Some(var_57) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_57.as_str());
    }
    if let Some(var_58) = &input.r#type {
        object.key("Type").string(var_58.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_firewall_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeFirewallInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_59) = &input.firewall_name {
        object.key("FirewallName").string(var_59.as_str());
    }
    if let Some(var_60) = &input.firewall_arn {
        object.key("FirewallArn").string(var_60.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_firewall_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeFirewallPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_61) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_61.as_str());
    }
    if let Some(var_62) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_62.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_logging_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeLoggingConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_63) = &input.firewall_arn {
        object.key("FirewallArn").string(var_63.as_str());
    }
    if let Some(var_64) = &input.firewall_name {
        object.key("FirewallName").string(var_64.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_65) = &input.resource_arn {
        object.key("ResourceArn").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_rule_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeRuleGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_66) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_66.as_str());
    }
    if let Some(var_67) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_67.as_str());
    }
    if let Some(var_68) = &input.r#type {
        object.key("Type").string(var_68.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_rule_group_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeRuleGroupMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_69) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_69.as_str());
    }
    if let Some(var_70) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_70.as_str());
    }
    if let Some(var_71) = &input.r#type {
        object.key("Type").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_subnets_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateSubnetsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_72) = &input.update_token {
        object.key("UpdateToken").string(var_72.as_str());
    }
    if let Some(var_73) = &input.firewall_arn {
        object.key("FirewallArn").string(var_73.as_str());
    }
    if let Some(var_74) = &input.firewall_name {
        object.key("FirewallName").string(var_74.as_str());
    }
    if let Some(var_75) = &input.subnet_ids {
        let mut array_76 = object.key("SubnetIds").start_array();
        for item_77 in var_75 {
             {
                array_76.value().string(item_77.as_str());
            }
        }
        array_76.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_firewall_policies_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListFirewallPoliciesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_78) = &input.next_token {
        object.key("NextToken").string(var_78.as_str());
    }
    if let Some(var_79) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_79).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_firewalls_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListFirewallsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_80) = &input.next_token {
        object.key("NextToken").string(var_80.as_str());
    }
    if let Some(var_81) = &input.vpc_ids {
        let mut array_82 = object.key("VpcIds").start_array();
        for item_83 in var_81 {
             {
                array_82.value().string(item_83.as_str());
            }
        }
        array_82.finish();
    }
    if let Some(var_84) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_84).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_rule_groups_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListRuleGroupsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_85) = &input.next_token {
        object.key("NextToken").string(var_85.as_str());
    }
    if let Some(var_86) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_86).into()));
    }
    if let Some(var_87) = &input.scope {
        object.key("Scope").string(var_87.as_str());
    }
    if let Some(var_88) = &input.managed_type {
        object.key("ManagedType").string(var_88.as_str());
    }
    if let Some(var_89) = &input.r#type {
        object.key("Type").string(var_89.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTagsForResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_90) = &input.next_token {
        object.key("NextToken").string(var_90.as_str());
    }
    if let Some(var_91) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_91).into()));
    }
    if let Some(var_92) = &input.resource_arn {
        object.key("ResourceArn").string(var_92.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_93) = &input.resource_arn {
        object.key("ResourceArn").string(var_93.as_str());
    }
    if let Some(var_94) = &input.policy {
        object.key("Policy").string(var_94.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_95) = &input.resource_arn {
        object.key("ResourceArn").string(var_95.as_str());
    }
    if let Some(var_96) = &input.tags {
        let mut array_97 = object.key("Tags").start_array();
        for item_98 in var_96 {
             {
                #[allow(unused_mut)]
                let mut object_99 = array_97.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_99, item_98)?;
                object_99.finish();
            }
        }
        array_97.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UntagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_100) = &input.resource_arn {
        object.key("ResourceArn").string(var_100.as_str());
    }
    if let Some(var_101) = &input.tag_keys {
        let mut array_102 = object.key("TagKeys").start_array();
        for item_103 in var_101 {
             {
                array_102.value().string(item_103.as_str());
            }
        }
        array_102.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_firewall_delete_protection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFirewallDeleteProtectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_104) = &input.update_token {
        object.key("UpdateToken").string(var_104.as_str());
    }
    if let Some(var_105) = &input.firewall_arn {
        object.key("FirewallArn").string(var_105.as_str());
    }
    if let Some(var_106) = &input.firewall_name {
        object.key("FirewallName").string(var_106.as_str());
    }
     {
        object.key("DeleteProtection").boolean(input.delete_protection);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_firewall_description_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFirewallDescriptionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_107) = &input.update_token {
        object.key("UpdateToken").string(var_107.as_str());
    }
    if let Some(var_108) = &input.firewall_arn {
        object.key("FirewallArn").string(var_108.as_str());
    }
    if let Some(var_109) = &input.firewall_name {
        object.key("FirewallName").string(var_109.as_str());
    }
    if let Some(var_110) = &input.description {
        object.key("Description").string(var_110.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_firewall_encryption_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFirewallEncryptionConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_111) = &input.update_token {
        object.key("UpdateToken").string(var_111.as_str());
    }
    if let Some(var_112) = &input.firewall_arn {
        object.key("FirewallArn").string(var_112.as_str());
    }
    if let Some(var_113) = &input.firewall_name {
        object.key("FirewallName").string(var_113.as_str());
    }
    if let Some(var_114) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_115 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(&mut object_115, var_114)?;
        object_115.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_firewall_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFirewallPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_116) = &input.update_token {
        object.key("UpdateToken").string(var_116.as_str());
    }
    if let Some(var_117) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_117.as_str());
    }
    if let Some(var_118) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_118.as_str());
    }
    if let Some(var_119) = &input.firewall_policy {
        #[allow(unused_mut)]
        let mut object_120 = object.key("FirewallPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_firewall_policy(&mut object_120, var_119)?;
        object_120.finish();
    }
    if let Some(var_121) = &input.description {
        object.key("Description").string(var_121.as_str());
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    if let Some(var_122) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_123 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(&mut object_123, var_122)?;
        object_123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_firewall_policy_change_protection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFirewallPolicyChangeProtectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_124) = &input.update_token {
        object.key("UpdateToken").string(var_124.as_str());
    }
    if let Some(var_125) = &input.firewall_arn {
        object.key("FirewallArn").string(var_125.as_str());
    }
    if let Some(var_126) = &input.firewall_name {
        object.key("FirewallName").string(var_126.as_str());
    }
     {
        object.key("FirewallPolicyChangeProtection").boolean(input.firewall_policy_change_protection);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_logging_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateLoggingConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_127) = &input.firewall_arn {
        object.key("FirewallArn").string(var_127.as_str());
    }
    if let Some(var_128) = &input.firewall_name {
        object.key("FirewallName").string(var_128.as_str());
    }
    if let Some(var_129) = &input.logging_configuration {
        #[allow(unused_mut)]
        let mut object_130 = object.key("LoggingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_configuration(&mut object_130, var_129)?;
        object_130.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_rule_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRuleGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_131) = &input.update_token {
        object.key("UpdateToken").string(var_131.as_str());
    }
    if let Some(var_132) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_132.as_str());
    }
    if let Some(var_133) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_133.as_str());
    }
    if let Some(var_134) = &input.rule_group {
        #[allow(unused_mut)]
        let mut object_135 = object.key("RuleGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group(&mut object_135, var_134)?;
        object_135.finish();
    }
    if let Some(var_136) = &input.rules {
        object.key("Rules").string(var_136.as_str());
    }
    if let Some(var_137) = &input.r#type {
        object.key("Type").string(var_137.as_str());
    }
    if let Some(var_138) = &input.description {
        object.key("Description").string(var_138.as_str());
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    if let Some(var_139) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_140 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(&mut object_140, var_139)?;
        object_140.finish();
    }
    if let Some(var_141) = &input.source_metadata {
        #[allow(unused_mut)]
        let mut object_142 = object.key("SourceMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_source_metadata(&mut object_142, var_141)?;
        object_142.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_subnet_change_protection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateSubnetChangeProtectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_143) = &input.update_token {
        object.key("UpdateToken").string(var_143.as_str());
    }
    if let Some(var_144) = &input.firewall_arn {
        object.key("FirewallArn").string(var_144.as_str());
    }
    if let Some(var_145) = &input.firewall_name {
        object.key("FirewallName").string(var_145.as_str());
    }
     {
        object.key("SubnetChangeProtection").boolean(input.subnet_change_protection);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_subnet_mapping(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SubnetMapping) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_146) = &input.subnet_id {
        object.key("SubnetId").string(var_146.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Tag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_147) = &input.key {
        object.key("Key").string(var_147.as_str());
    }
    if let Some(var_148) = &input.value {
        object.key("Value").string(var_148.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EncryptionConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_149) = &input.key_id {
        object.key("KeyId").string(var_149.as_str());
    }
    if let Some(var_150) = &input.r#type {
        object.key("Type").string(var_150.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firewall_policy(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FirewallPolicy) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_151) = &input.stateless_rule_group_references {
        let mut array_152 = object.key("StatelessRuleGroupReferences").start_array();
        for item_153 in var_151 {
             {
                #[allow(unused_mut)]
                let mut object_154 = array_152.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stateless_rule_group_reference(&mut object_154, item_153)?;
                object_154.finish();
            }
        }
        array_152.finish();
    }
    if let Some(var_155) = &input.stateless_default_actions {
        let mut array_156 = object.key("StatelessDefaultActions").start_array();
        for item_157 in var_155 {
             {
                array_156.value().string(item_157.as_str());
            }
        }
        array_156.finish();
    }
    if let Some(var_158) = &input.stateless_fragment_default_actions {
        let mut array_159 = object.key("StatelessFragmentDefaultActions").start_array();
        for item_160 in var_158 {
             {
                array_159.value().string(item_160.as_str());
            }
        }
        array_159.finish();
    }
    if let Some(var_161) = &input.stateless_custom_actions {
        let mut array_162 = object.key("StatelessCustomActions").start_array();
        for item_163 in var_161 {
             {
                #[allow(unused_mut)]
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_action(&mut object_164, item_163)?;
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.stateful_rule_group_references {
        let mut array_166 = object.key("StatefulRuleGroupReferences").start_array();
        for item_167 in var_165 {
             {
                #[allow(unused_mut)]
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stateful_rule_group_reference(&mut object_168, item_167)?;
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.stateful_default_actions {
        let mut array_170 = object.key("StatefulDefaultActions").start_array();
        for item_171 in var_169 {
             {
                array_170.value().string(item_171.as_str());
            }
        }
        array_170.finish();
    }
    if let Some(var_172) = &input.stateful_engine_options {
        #[allow(unused_mut)]
        let mut object_173 = object.key("StatefulEngineOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_stateful_engine_options(&mut object_173, var_172)?;
        object_173.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RuleGroup) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_174) = &input.rule_variables {
        #[allow(unused_mut)]
        let mut object_175 = object.key("RuleVariables").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_variables(&mut object_175, var_174)?;
        object_175.finish();
    }
    if let Some(var_176) = &input.reference_sets {
        #[allow(unused_mut)]
        let mut object_177 = object.key("ReferenceSets").start_object();
        crate::json_ser::serialize_structure_crate_model_reference_sets(&mut object_177, var_176)?;
        object_177.finish();
    }
    if let Some(var_178) = &input.rules_source {
        #[allow(unused_mut)]
        let mut object_179 = object.key("RulesSource").start_object();
        crate::json_ser::serialize_structure_crate_model_rules_source(&mut object_179, var_178)?;
        object_179.finish();
    }
    if let Some(var_180) = &input.stateful_rule_options {
        #[allow(unused_mut)]
        let mut object_181 = object.key("StatefulRuleOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_stateful_rule_options(&mut object_181, var_180)?;
        object_181.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_metadata(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SourceMetadata) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_182) = &input.source_arn {
        object.key("SourceArn").string(var_182.as_str());
    }
    if let Some(var_183) = &input.source_update_token {
        object.key("SourceUpdateToken").string(var_183.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logging_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LoggingConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_184) = &input.log_destination_configs {
        let mut array_185 = object.key("LogDestinationConfigs").start_array();
        for item_186 in var_184 {
             {
                #[allow(unused_mut)]
                let mut object_187 = array_185.value().start_object();
                crate::json_ser::serialize_structure_crate_model_log_destination_config(&mut object_187, item_186)?;
                object_187.finish();
            }
        }
        array_185.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_rule_group_reference(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StatelessRuleGroupReference) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_188) = &input.resource_arn {
        object.key("ResourceArn").string(var_188.as_str());
    }
     {
        object.key("Priority").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.priority).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_action(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CustomAction) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_189) = &input.action_name {
        object.key("ActionName").string(var_189.as_str());
    }
    if let Some(var_190) = &input.action_definition {
        #[allow(unused_mut)]
        let mut object_191 = object.key("ActionDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_action_definition(&mut object_191, var_190)?;
        object_191.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateful_rule_group_reference(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StatefulRuleGroupReference) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_192) = &input.resource_arn {
        object.key("ResourceArn").string(var_192.as_str());
    }
    if let Some(var_193) = &input.priority {
        object.key("Priority").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_193).into()));
    }
    if let Some(var_194) = &input.r#override {
        #[allow(unused_mut)]
        let mut object_195 = object.key("Override").start_object();
        crate::json_ser::serialize_structure_crate_model_stateful_rule_group_override(&mut object_195, var_194)?;
        object_195.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateful_engine_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StatefulEngineOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_196) = &input.rule_order {
        object.key("RuleOrder").string(var_196.as_str());
    }
    if let Some(var_197) = &input.stream_exception_policy {
        object.key("StreamExceptionPolicy").string(var_197.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_variables(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RuleVariables) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_198) = &input.ip_sets {
        #[allow(unused_mut)]
        let mut object_199 = object.key("IPSets").start_object();
        for (key_200, value_201) in var_198 {
             {
                #[allow(unused_mut)]
                let mut object_202 = object_199.key(key_200.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_ip_set(&mut object_202, value_201)?;
                object_202.finish();
            }
        }
        object_199.finish();
    }
    if let Some(var_203) = &input.port_sets {
        #[allow(unused_mut)]
        let mut object_204 = object.key("PortSets").start_object();
        for (key_205, value_206) in var_203 {
             {
                #[allow(unused_mut)]
                let mut object_207 = object_204.key(key_205.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_port_set(&mut object_207, value_206)?;
                object_207.finish();
            }
        }
        object_204.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_reference_sets(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ReferenceSets) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_208) = &input.ip_set_references {
        #[allow(unused_mut)]
        let mut object_209 = object.key("IPSetReferences").start_object();
        for (key_210, value_211) in var_208 {
             {
                #[allow(unused_mut)]
                let mut object_212 = object_209.key(key_210.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_ip_set_reference(&mut object_212, value_211)?;
                object_212.finish();
            }
        }
        object_209.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rules_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RulesSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_213) = &input.rules_string {
        object.key("RulesString").string(var_213.as_str());
    }
    if let Some(var_214) = &input.rules_source_list {
        #[allow(unused_mut)]
        let mut object_215 = object.key("RulesSourceList").start_object();
        crate::json_ser::serialize_structure_crate_model_rules_source_list(&mut object_215, var_214)?;
        object_215.finish();
    }
    if let Some(var_216) = &input.stateful_rules {
        let mut array_217 = object.key("StatefulRules").start_array();
        for item_218 in var_216 {
             {
                #[allow(unused_mut)]
                let mut object_219 = array_217.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stateful_rule(&mut object_219, item_218)?;
                object_219.finish();
            }
        }
        array_217.finish();
    }
    if let Some(var_220) = &input.stateless_rules_and_custom_actions {
        #[allow(unused_mut)]
        let mut object_221 = object.key("StatelessRulesAndCustomActions").start_object();
        crate::json_ser::serialize_structure_crate_model_stateless_rules_and_custom_actions(&mut object_221, var_220)?;
        object_221.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateful_rule_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StatefulRuleOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_222) = &input.rule_order {
        object.key("RuleOrder").string(var_222.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_log_destination_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LogDestinationConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_223) = &input.log_type {
        object.key("LogType").string(var_223.as_str());
    }
    if let Some(var_224) = &input.log_destination_type {
        object.key("LogDestinationType").string(var_224.as_str());
    }
    if let Some(var_225) = &input.log_destination {
        #[allow(unused_mut)]
        let mut object_226 = object.key("LogDestination").start_object();
        for (key_227, value_228) in var_225 {
             {
                object_226.key(key_227.as_str()).string(value_228.as_str());
            }
        }
        object_226.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ActionDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_229) = &input.publish_metric_action {
        #[allow(unused_mut)]
        let mut object_230 = object.key("PublishMetricAction").start_object();
        crate::json_ser::serialize_structure_crate_model_publish_metric_action(&mut object_230, var_229)?;
        object_230.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateful_rule_group_override(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StatefulRuleGroupOverride) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_231) = &input.action {
        object.key("Action").string(var_231.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ip_set(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::IpSet) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_232) = &input.definition {
        let mut array_233 = object.key("Definition").start_array();
        for item_234 in var_232 {
             {
                array_233.value().string(item_234.as_str());
            }
        }
        array_233.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_set(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PortSet) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_235) = &input.definition {
        let mut array_236 = object.key("Definition").start_array();
        for item_237 in var_235 {
             {
                array_236.value().string(item_237.as_str());
            }
        }
        array_236.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ip_set_reference(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::IpSetReference) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_238) = &input.reference_arn {
        object.key("ReferenceArn").string(var_238.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rules_source_list(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RulesSourceList) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_239) = &input.targets {
        let mut array_240 = object.key("Targets").start_array();
        for item_241 in var_239 {
             {
                array_240.value().string(item_241.as_str());
            }
        }
        array_240.finish();
    }
    if let Some(var_242) = &input.target_types {
        let mut array_243 = object.key("TargetTypes").start_array();
        for item_244 in var_242 {
             {
                array_243.value().string(item_244.as_str());
            }
        }
        array_243.finish();
    }
    if let Some(var_245) = &input.generated_rules_type {
        object.key("GeneratedRulesType").string(var_245.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateful_rule(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StatefulRule) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_246) = &input.action {
        object.key("Action").string(var_246.as_str());
    }
    if let Some(var_247) = &input.header {
        #[allow(unused_mut)]
        let mut object_248 = object.key("Header").start_object();
        crate::json_ser::serialize_structure_crate_model_header(&mut object_248, var_247)?;
        object_248.finish();
    }
    if let Some(var_249) = &input.rule_options {
        let mut array_250 = object.key("RuleOptions").start_array();
        for item_251 in var_249 {
             {
                #[allow(unused_mut)]
                let mut object_252 = array_250.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_option(&mut object_252, item_251)?;
                object_252.finish();
            }
        }
        array_250.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_rules_and_custom_actions(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StatelessRulesAndCustomActions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_253) = &input.stateless_rules {
        let mut array_254 = object.key("StatelessRules").start_array();
        for item_255 in var_253 {
             {
                #[allow(unused_mut)]
                let mut object_256 = array_254.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stateless_rule(&mut object_256, item_255)?;
                object_256.finish();
            }
        }
        array_254.finish();
    }
    if let Some(var_257) = &input.custom_actions {
        let mut array_258 = object.key("CustomActions").start_array();
        for item_259 in var_257 {
             {
                #[allow(unused_mut)]
                let mut object_260 = array_258.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_action(&mut object_260, item_259)?;
                object_260.finish();
            }
        }
        array_258.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_publish_metric_action(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PublishMetricAction) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_261) = &input.dimensions {
        let mut array_262 = object.key("Dimensions").start_array();
        for item_263 in var_261 {
             {
                #[allow(unused_mut)]
                let mut object_264 = array_262.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dimension(&mut object_264, item_263)?;
                object_264.finish();
            }
        }
        array_262.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_header(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Header) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_265) = &input.protocol {
        object.key("Protocol").string(var_265.as_str());
    }
    if let Some(var_266) = &input.source {
        object.key("Source").string(var_266.as_str());
    }
    if let Some(var_267) = &input.source_port {
        object.key("SourcePort").string(var_267.as_str());
    }
    if let Some(var_268) = &input.direction {
        object.key("Direction").string(var_268.as_str());
    }
    if let Some(var_269) = &input.destination {
        object.key("Destination").string(var_269.as_str());
    }
    if let Some(var_270) = &input.destination_port {
        object.key("DestinationPort").string(var_270.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_option(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RuleOption) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_271) = &input.keyword {
        object.key("Keyword").string(var_271.as_str());
    }
    if let Some(var_272) = &input.settings {
        let mut array_273 = object.key("Settings").start_array();
        for item_274 in var_272 {
             {
                array_273.value().string(item_274.as_str());
            }
        }
        array_273.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_rule(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StatelessRule) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_275) = &input.rule_definition {
        #[allow(unused_mut)]
        let mut object_276 = object.key("RuleDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_definition(&mut object_276, var_275)?;
        object_276.finish();
    }
     {
        object.key("Priority").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.priority).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dimension(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Dimension) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_277) = &input.value {
        object.key("Value").string(var_277.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RuleDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_278) = &input.match_attributes {
        #[allow(unused_mut)]
        let mut object_279 = object.key("MatchAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_match_attributes(&mut object_279, var_278)?;
        object_279.finish();
    }
    if let Some(var_280) = &input.actions {
        let mut array_281 = object.key("Actions").start_array();
        for item_282 in var_280 {
             {
                array_281.value().string(item_282.as_str());
            }
        }
        array_281.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_match_attributes(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MatchAttributes) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_283) = &input.sources {
        let mut array_284 = object.key("Sources").start_array();
        for item_285 in var_283 {
             {
                #[allow(unused_mut)]
                let mut object_286 = array_284.value().start_object();
                crate::json_ser::serialize_structure_crate_model_address(&mut object_286, item_285)?;
                object_286.finish();
            }
        }
        array_284.finish();
    }
    if let Some(var_287) = &input.destinations {
        let mut array_288 = object.key("Destinations").start_array();
        for item_289 in var_287 {
             {
                #[allow(unused_mut)]
                let mut object_290 = array_288.value().start_object();
                crate::json_ser::serialize_structure_crate_model_address(&mut object_290, item_289)?;
                object_290.finish();
            }
        }
        array_288.finish();
    }
    if let Some(var_291) = &input.source_ports {
        let mut array_292 = object.key("SourcePorts").start_array();
        for item_293 in var_291 {
             {
                #[allow(unused_mut)]
                let mut object_294 = array_292.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_range(&mut object_294, item_293)?;
                object_294.finish();
            }
        }
        array_292.finish();
    }
    if let Some(var_295) = &input.destination_ports {
        let mut array_296 = object.key("DestinationPorts").start_array();
        for item_297 in var_295 {
             {
                #[allow(unused_mut)]
                let mut object_298 = array_296.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_range(&mut object_298, item_297)?;
                object_298.finish();
            }
        }
        array_296.finish();
    }
    if let Some(var_299) = &input.protocols {
        let mut array_300 = object.key("Protocols").start_array();
        for item_301 in var_299 {
             {
                array_300.value().number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*item_301).into()));
            }
        }
        array_300.finish();
    }
    if let Some(var_302) = &input.tcp_flags {
        let mut array_303 = object.key("TCPFlags").start_array();
        for item_304 in var_302 {
             {
                #[allow(unused_mut)]
                let mut object_305 = array_303.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tcp_flag_field(&mut object_305, item_304)?;
                object_305.finish();
            }
        }
        array_303.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_address(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Address) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_306) = &input.address_definition {
        object.key("AddressDefinition").string(var_306.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_range(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PortRange) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("FromPort").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.from_port).into()));
    }
     {
        object.key("ToPort").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.to_port).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tcp_flag_field(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TcpFlagField) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_307) = &input.flags {
        let mut array_308 = object.key("Flags").start_array();
        for item_309 in var_307 {
             {
                array_308.value().string(item_309.as_str());
            }
        }
        array_308.finish();
    }
    if let Some(var_310) = &input.masks {
        let mut array_311 = object.key("Masks").start_array();
        for item_312 in var_310 {
             {
                array_311.value().string(item_312.as_str());
            }
        }
        array_311.finish();
    }
    Ok(())
}

