// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_member_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateMemberInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.account_id {
        object.key("accountId").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_account_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetAccountStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2) = &input.account_ids {
        let mut array_3 = object.key("accountIds").start_array();
        for item_4 in var_2 {
             {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_free_trial_info_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetFreeTrialInfoInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_5) = &input.account_ids {
        let mut array_6 = object.key("accountIds").start_array();
        for item_7 in var_5 {
             {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_findings_report_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CancelFindingsReportInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_8) = &input.report_id {
        object.key("reportId").string(var_8.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_filter_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateFilterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_9) = &input.action {
        object.key("action").string(var_9.as_str());
    }
    if let Some(var_10) = &input.description {
        object.key("description").string(var_10.as_str());
    }
    if let Some(var_11) = &input.filter_criteria {
        #[allow(unused_mut)]
        let mut object_12 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_filter_criteria(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.name {
        object.key("name").string(var_13.as_str());
    }
    if let Some(var_14) = &input.reason {
        object.key("reason").string(var_14.as_str());
    }
    if let Some(var_15) = &input.tags {
        #[allow(unused_mut)]
        let mut object_16 = object.key("tags").start_object();
        for (key_17, value_18) in var_15 {
             {
                object_16.key(key_17.as_str()).string(value_18.as_str());
            }
        }
        object_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_findings_report_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateFindingsReportInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_19) = &input.filter_criteria {
        #[allow(unused_mut)]
        let mut object_20 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_filter_criteria(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.report_format {
        object.key("reportFormat").string(var_21.as_str());
    }
    if let Some(var_22) = &input.s3_destination {
        #[allow(unused_mut)]
        let mut object_23 = object.key("s3Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_destination(&mut object_23, var_22)?;
        object_23.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_filter_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteFilterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_24) = &input.arn {
        object.key("arn").string(var_24.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_25) = &input.account_ids {
        let mut array_26 = object.key("accountIds").start_array();
        for item_27 in var_25 {
             {
                array_26.value().string(item_27.as_str());
            }
        }
        array_26.finish();
    }
    if let Some(var_28) = &input.resource_types {
        let mut array_29 = object.key("resourceTypes").start_array();
        for item_30 in var_28 {
             {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_delegated_admin_account_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisableDelegatedAdminAccountInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_31) = &input.delegated_admin_account_id {
        object.key("delegatedAdminAccountId").string(var_31.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_member_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateMemberInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_32) = &input.account_id {
        object.key("accountId").string(var_32.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::EnableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_33) = &input.account_ids {
        let mut array_34 = object.key("accountIds").start_array();
        for item_35 in var_33 {
             {
                array_34.value().string(item_35.as_str());
            }
        }
        array_34.finish();
    }
    if let Some(var_36) = &input.client_token {
        object.key("clientToken").string(var_36.as_str());
    }
    if let Some(var_37) = &input.resource_types {
        let mut array_38 = object.key("resourceTypes").start_array();
        for item_39 in var_37 {
             {
                array_38.value().string(item_39.as_str());
            }
        }
        array_38.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_delegated_admin_account_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::EnableDelegatedAdminAccountInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_40) = &input.client_token {
        object.key("clientToken").string(var_40.as_str());
    }
    if let Some(var_41) = &input.delegated_admin_account_id {
        object.key("delegatedAdminAccountId").string(var_41.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_findings_report_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetFindingsReportStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_42) = &input.report_id {
        object.key("reportId").string(var_42.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_member_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMemberInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_43) = &input.account_id {
        object.key("accountId").string(var_43.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_account_permissions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListAccountPermissionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_44) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_44).into()));
    }
    if let Some(var_45) = &input.next_token {
        object.key("nextToken").string(var_45.as_str());
    }
    if let Some(var_46) = &input.service {
        object.key("service").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_coverage_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCoverageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_47) = &input.filter_criteria {
        #[allow(unused_mut)]
        let mut object_48 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_coverage_filter_criteria(&mut object_48, var_47)?;
        object_48.finish();
    }
    if let Some(var_49) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_49).into()));
    }
    if let Some(var_50) = &input.next_token {
        object.key("nextToken").string(var_50.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_coverage_statistics_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCoverageStatisticsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_51) = &input.filter_criteria {
        #[allow(unused_mut)]
        let mut object_52 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_coverage_filter_criteria(&mut object_52, var_51)?;
        object_52.finish();
    }
    if let Some(var_53) = &input.group_by {
        object.key("groupBy").string(var_53.as_str());
    }
    if let Some(var_54) = &input.next_token {
        object.key("nextToken").string(var_54.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_delegated_admin_accounts_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDelegatedAdminAccountsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_55) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_55).into()));
    }
    if let Some(var_56) = &input.next_token {
        object.key("nextToken").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_filters_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListFiltersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_57) = &input.action {
        object.key("action").string(var_57.as_str());
    }
    if let Some(var_58) = &input.arns {
        let mut array_59 = object.key("arns").start_array();
        for item_60 in var_58 {
             {
                array_59.value().string(item_60.as_str());
            }
        }
        array_59.finish();
    }
    if let Some(var_61) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_61).into()));
    }
    if let Some(var_62) = &input.next_token {
        object.key("nextToken").string(var_62.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_finding_aggregations_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListFindingAggregationsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_63) = &input.account_ids {
        let mut array_64 = object.key("accountIds").start_array();
        for item_65 in var_63 {
             {
                #[allow(unused_mut)]
                let mut object_66 = array_64.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_66, item_65)?;
                object_66.finish();
            }
        }
        array_64.finish();
    }
    if let Some(var_67) = &input.aggregation_request {
        #[allow(unused_mut)]
        let mut object_68 = object.key("aggregationRequest").start_object();
        crate::json_ser::serialize_union_crate_model_aggregation_request(&mut object_68, var_67)?;
        object_68.finish();
    }
    if let Some(var_69) = &input.aggregation_type {
        object.key("aggregationType").string(var_69.as_str());
    }
    if let Some(var_70) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_70).into()));
    }
    if let Some(var_71) = &input.next_token {
        object.key("nextToken").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_findings_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListFindingsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_72) = &input.filter_criteria {
        #[allow(unused_mut)]
        let mut object_73 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_filter_criteria(&mut object_73, var_72)?;
        object_73.finish();
    }
    if let Some(var_74) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_74).into()));
    }
    if let Some(var_75) = &input.next_token {
        object.key("nextToken").string(var_75.as_str());
    }
    if let Some(var_76) = &input.sort_criteria {
        #[allow(unused_mut)]
        let mut object_77 = object.key("sortCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_sort_criteria(&mut object_77, var_76)?;
        object_77.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_members_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListMembersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_78) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_78).into()));
    }
    if let Some(var_79) = &input.next_token {
        object.key("nextToken").string(var_79.as_str());
    }
    if let Some(var_80) = &input.only_associated {
        object.key("onlyAssociated").boolean(*var_80);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_usage_totals_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListUsageTotalsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_81) = &input.account_ids {
        let mut array_82 = object.key("accountIds").start_array();
        for item_83 in var_81 {
             {
                array_82.value().string(item_83.as_str());
            }
        }
        array_82.finish();
    }
    if let Some(var_84) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_84).into()));
    }
    if let Some(var_85) = &input.next_token {
        object.key("nextToken").string(var_85.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_86) = &input.tags {
        #[allow(unused_mut)]
        let mut object_87 = object.key("tags").start_object();
        for (key_88, value_89) in var_86 {
             {
                object_87.key(key_88.as_str()).string(value_89.as_str());
            }
        }
        object_87.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_90) = &input.ecr_configuration {
        #[allow(unused_mut)]
        let mut object_91 = object.key("ecrConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_ecr_configuration(&mut object_91, var_90)?;
        object_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_filter_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFilterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_92) = &input.action {
        object.key("action").string(var_92.as_str());
    }
    if let Some(var_93) = &input.description {
        object.key("description").string(var_93.as_str());
    }
    if let Some(var_94) = &input.filter_arn {
        object.key("filterArn").string(var_94.as_str());
    }
    if let Some(var_95) = &input.filter_criteria {
        #[allow(unused_mut)]
        let mut object_96 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_filter_criteria(&mut object_96, var_95)?;
        object_96.finish();
    }
    if let Some(var_97) = &input.name {
        object.key("name").string(var_97.as_str());
    }
    if let Some(var_98) = &input.reason {
        object.key("reason").string(var_98.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_organization_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateOrganizationConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_99) = &input.auto_enable {
        #[allow(unused_mut)]
        let mut object_100 = object.key("autoEnable").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_enable(&mut object_100, var_99)?;
        object_100.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FilterCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_101) = &input.finding_arn {
        let mut array_102 = object.key("findingArn").start_array();
        for item_103 in var_101 {
             {
                #[allow(unused_mut)]
                let mut object_104 = array_102.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_104, item_103)?;
                object_104.finish();
            }
        }
        array_102.finish();
    }
    if let Some(var_105) = &input.aws_account_id {
        let mut array_106 = object.key("awsAccountId").start_array();
        for item_107 in var_105 {
             {
                #[allow(unused_mut)]
                let mut object_108 = array_106.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_108, item_107)?;
                object_108.finish();
            }
        }
        array_106.finish();
    }
    if let Some(var_109) = &input.finding_type {
        let mut array_110 = object.key("findingType").start_array();
        for item_111 in var_109 {
             {
                #[allow(unused_mut)]
                let mut object_112 = array_110.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_112, item_111)?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    if let Some(var_113) = &input.severity {
        let mut array_114 = object.key("severity").start_array();
        for item_115 in var_113 {
             {
                #[allow(unused_mut)]
                let mut object_116 = array_114.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_116, item_115)?;
                object_116.finish();
            }
        }
        array_114.finish();
    }
    if let Some(var_117) = &input.first_observed_at {
        let mut array_118 = object.key("firstObservedAt").start_array();
        for item_119 in var_117 {
             {
                #[allow(unused_mut)]
                let mut object_120 = array_118.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(&mut object_120, item_119)?;
                object_120.finish();
            }
        }
        array_118.finish();
    }
    if let Some(var_121) = &input.last_observed_at {
        let mut array_122 = object.key("lastObservedAt").start_array();
        for item_123 in var_121 {
             {
                #[allow(unused_mut)]
                let mut object_124 = array_122.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(&mut object_124, item_123)?;
                object_124.finish();
            }
        }
        array_122.finish();
    }
    if let Some(var_125) = &input.updated_at {
        let mut array_126 = object.key("updatedAt").start_array();
        for item_127 in var_125 {
             {
                #[allow(unused_mut)]
                let mut object_128 = array_126.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(&mut object_128, item_127)?;
                object_128.finish();
            }
        }
        array_126.finish();
    }
    if let Some(var_129) = &input.finding_status {
        let mut array_130 = object.key("findingStatus").start_array();
        for item_131 in var_129 {
             {
                #[allow(unused_mut)]
                let mut object_132 = array_130.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_132, item_131)?;
                object_132.finish();
            }
        }
        array_130.finish();
    }
    if let Some(var_133) = &input.title {
        let mut array_134 = object.key("title").start_array();
        for item_135 in var_133 {
             {
                #[allow(unused_mut)]
                let mut object_136 = array_134.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_136, item_135)?;
                object_136.finish();
            }
        }
        array_134.finish();
    }
    if let Some(var_137) = &input.inspector_score {
        let mut array_138 = object.key("inspectorScore").start_array();
        for item_139 in var_137 {
             {
                #[allow(unused_mut)]
                let mut object_140 = array_138.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(&mut object_140, item_139)?;
                object_140.finish();
            }
        }
        array_138.finish();
    }
    if let Some(var_141) = &input.resource_type {
        let mut array_142 = object.key("resourceType").start_array();
        for item_143 in var_141 {
             {
                #[allow(unused_mut)]
                let mut object_144 = array_142.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_144, item_143)?;
                object_144.finish();
            }
        }
        array_142.finish();
    }
    if let Some(var_145) = &input.resource_id {
        let mut array_146 = object.key("resourceId").start_array();
        for item_147 in var_145 {
             {
                #[allow(unused_mut)]
                let mut object_148 = array_146.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_148, item_147)?;
                object_148.finish();
            }
        }
        array_146.finish();
    }
    if let Some(var_149) = &input.resource_tags {
        let mut array_150 = object.key("resourceTags").start_array();
        for item_151 in var_149 {
             {
                #[allow(unused_mut)]
                let mut object_152 = array_150.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(&mut object_152, item_151)?;
                object_152.finish();
            }
        }
        array_150.finish();
    }
    if let Some(var_153) = &input.ec2_instance_image_id {
        let mut array_154 = object.key("ec2InstanceImageId").start_array();
        for item_155 in var_153 {
             {
                #[allow(unused_mut)]
                let mut object_156 = array_154.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_156, item_155)?;
                object_156.finish();
            }
        }
        array_154.finish();
    }
    if let Some(var_157) = &input.ec2_instance_vpc_id {
        let mut array_158 = object.key("ec2InstanceVpcId").start_array();
        for item_159 in var_157 {
             {
                #[allow(unused_mut)]
                let mut object_160 = array_158.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_160, item_159)?;
                object_160.finish();
            }
        }
        array_158.finish();
    }
    if let Some(var_161) = &input.ec2_instance_subnet_id {
        let mut array_162 = object.key("ec2InstanceSubnetId").start_array();
        for item_163 in var_161 {
             {
                #[allow(unused_mut)]
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_164, item_163)?;
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.ecr_image_pushed_at {
        let mut array_166 = object.key("ecrImagePushedAt").start_array();
        for item_167 in var_165 {
             {
                #[allow(unused_mut)]
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(&mut object_168, item_167)?;
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.ecr_image_architecture {
        let mut array_170 = object.key("ecrImageArchitecture").start_array();
        for item_171 in var_169 {
             {
                #[allow(unused_mut)]
                let mut object_172 = array_170.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_172, item_171)?;
                object_172.finish();
            }
        }
        array_170.finish();
    }
    if let Some(var_173) = &input.ecr_image_registry {
        let mut array_174 = object.key("ecrImageRegistry").start_array();
        for item_175 in var_173 {
             {
                #[allow(unused_mut)]
                let mut object_176 = array_174.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_176, item_175)?;
                object_176.finish();
            }
        }
        array_174.finish();
    }
    if let Some(var_177) = &input.ecr_image_repository_name {
        let mut array_178 = object.key("ecrImageRepositoryName").start_array();
        for item_179 in var_177 {
             {
                #[allow(unused_mut)]
                let mut object_180 = array_178.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_180, item_179)?;
                object_180.finish();
            }
        }
        array_178.finish();
    }
    if let Some(var_181) = &input.ecr_image_tags {
        let mut array_182 = object.key("ecrImageTags").start_array();
        for item_183 in var_181 {
             {
                #[allow(unused_mut)]
                let mut object_184 = array_182.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_184, item_183)?;
                object_184.finish();
            }
        }
        array_182.finish();
    }
    if let Some(var_185) = &input.ecr_image_hash {
        let mut array_186 = object.key("ecrImageHash").start_array();
        for item_187 in var_185 {
             {
                #[allow(unused_mut)]
                let mut object_188 = array_186.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_188, item_187)?;
                object_188.finish();
            }
        }
        array_186.finish();
    }
    if let Some(var_189) = &input.port_range {
        let mut array_190 = object.key("portRange").start_array();
        for item_191 in var_189 {
             {
                #[allow(unused_mut)]
                let mut object_192 = array_190.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_range_filter(&mut object_192, item_191)?;
                object_192.finish();
            }
        }
        array_190.finish();
    }
    if let Some(var_193) = &input.network_protocol {
        let mut array_194 = object.key("networkProtocol").start_array();
        for item_195 in var_193 {
             {
                #[allow(unused_mut)]
                let mut object_196 = array_194.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_196, item_195)?;
                object_196.finish();
            }
        }
        array_194.finish();
    }
    if let Some(var_197) = &input.component_id {
        let mut array_198 = object.key("componentId").start_array();
        for item_199 in var_197 {
             {
                #[allow(unused_mut)]
                let mut object_200 = array_198.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_200, item_199)?;
                object_200.finish();
            }
        }
        array_198.finish();
    }
    if let Some(var_201) = &input.component_type {
        let mut array_202 = object.key("componentType").start_array();
        for item_203 in var_201 {
             {
                #[allow(unused_mut)]
                let mut object_204 = array_202.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_204, item_203)?;
                object_204.finish();
            }
        }
        array_202.finish();
    }
    if let Some(var_205) = &input.vulnerability_id {
        let mut array_206 = object.key("vulnerabilityId").start_array();
        for item_207 in var_205 {
             {
                #[allow(unused_mut)]
                let mut object_208 = array_206.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_208, item_207)?;
                object_208.finish();
            }
        }
        array_206.finish();
    }
    if let Some(var_209) = &input.vulnerability_source {
        let mut array_210 = object.key("vulnerabilitySource").start_array();
        for item_211 in var_209 {
             {
                #[allow(unused_mut)]
                let mut object_212 = array_210.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_212, item_211)?;
                object_212.finish();
            }
        }
        array_210.finish();
    }
    if let Some(var_213) = &input.vendor_severity {
        let mut array_214 = object.key("vendorSeverity").start_array();
        for item_215 in var_213 {
             {
                #[allow(unused_mut)]
                let mut object_216 = array_214.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_216, item_215)?;
                object_216.finish();
            }
        }
        array_214.finish();
    }
    if let Some(var_217) = &input.vulnerable_packages {
        let mut array_218 = object.key("vulnerablePackages").start_array();
        for item_219 in var_217 {
             {
                #[allow(unused_mut)]
                let mut object_220 = array_218.value().start_object();
                crate::json_ser::serialize_structure_crate_model_package_filter(&mut object_220, item_219)?;
                object_220.finish();
            }
        }
        array_218.finish();
    }
    if let Some(var_221) = &input.related_vulnerabilities {
        let mut array_222 = object.key("relatedVulnerabilities").start_array();
        for item_223 in var_221 {
             {
                #[allow(unused_mut)]
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_224, item_223)?;
                object_224.finish();
            }
        }
        array_222.finish();
    }
    if let Some(var_225) = &input.fix_available {
        let mut array_226 = object.key("fixAvailable").start_array();
        for item_227 in var_225 {
             {
                #[allow(unused_mut)]
                let mut object_228 = array_226.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_228, item_227)?;
                object_228.finish();
            }
        }
        array_226.finish();
    }
    if let Some(var_229) = &input.lambda_function_name {
        let mut array_230 = object.key("lambdaFunctionName").start_array();
        for item_231 in var_229 {
             {
                #[allow(unused_mut)]
                let mut object_232 = array_230.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_232, item_231)?;
                object_232.finish();
            }
        }
        array_230.finish();
    }
    if let Some(var_233) = &input.lambda_function_layers {
        let mut array_234 = object.key("lambdaFunctionLayers").start_array();
        for item_235 in var_233 {
             {
                #[allow(unused_mut)]
                let mut object_236 = array_234.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_236, item_235)?;
                object_236.finish();
            }
        }
        array_234.finish();
    }
    if let Some(var_237) = &input.lambda_function_runtime {
        let mut array_238 = object.key("lambdaFunctionRuntime").start_array();
        for item_239 in var_237 {
             {
                #[allow(unused_mut)]
                let mut object_240 = array_238.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_240, item_239)?;
                object_240.finish();
            }
        }
        array_238.finish();
    }
    if let Some(var_241) = &input.lambda_function_last_modified_at {
        let mut array_242 = object.key("lambdaFunctionLastModifiedAt").start_array();
        for item_243 in var_241 {
             {
                #[allow(unused_mut)]
                let mut object_244 = array_242.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(&mut object_244, item_243)?;
                object_244.finish();
            }
        }
        array_242.finish();
    }
    if let Some(var_245) = &input.lambda_function_execution_role_arn {
        let mut array_246 = object.key("lambdaFunctionExecutionRoleArn").start_array();
        for item_247 in var_245 {
             {
                #[allow(unused_mut)]
                let mut object_248 = array_246.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_248, item_247)?;
                object_248.finish();
            }
        }
        array_246.finish();
    }
    if let Some(var_249) = &input.exploit_available {
        let mut array_250 = object.key("exploitAvailable").start_array();
        for item_251 in var_249 {
             {
                #[allow(unused_mut)]
                let mut object_252 = array_250.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_252, item_251)?;
                object_252.finish();
            }
        }
        array_250.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_destination(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Destination) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_253) = &input.bucket_name {
        object.key("bucketName").string(var_253.as_str());
    }
    if let Some(var_254) = &input.key_prefix {
        object.key("keyPrefix").string(var_254.as_str());
    }
    if let Some(var_255) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_255.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_coverage_filter_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CoverageFilterCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_256) = &input.scan_status_code {
        let mut array_257 = object.key("scanStatusCode").start_array();
        for item_258 in var_256 {
             {
                #[allow(unused_mut)]
                let mut object_259 = array_257.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(&mut object_259, item_258)?;
                object_259.finish();
            }
        }
        array_257.finish();
    }
    if let Some(var_260) = &input.scan_status_reason {
        let mut array_261 = object.key("scanStatusReason").start_array();
        for item_262 in var_260 {
             {
                #[allow(unused_mut)]
                let mut object_263 = array_261.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(&mut object_263, item_262)?;
                object_263.finish();
            }
        }
        array_261.finish();
    }
    if let Some(var_264) = &input.account_id {
        let mut array_265 = object.key("accountId").start_array();
        for item_266 in var_264 {
             {
                #[allow(unused_mut)]
                let mut object_267 = array_265.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(&mut object_267, item_266)?;
                object_267.finish();
            }
        }
        array_265.finish();
    }
    if let Some(var_268) = &input.resource_id {
        let mut array_269 = object.key("resourceId").start_array();
        for item_270 in var_268 {
             {
                #[allow(unused_mut)]
                let mut object_271 = array_269.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(&mut object_271, item_270)?;
                object_271.finish();
            }
        }
        array_269.finish();
    }
    if let Some(var_272) = &input.resource_type {
        let mut array_273 = object.key("resourceType").start_array();
        for item_274 in var_272 {
             {
                #[allow(unused_mut)]
                let mut object_275 = array_273.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(&mut object_275, item_274)?;
                object_275.finish();
            }
        }
        array_273.finish();
    }
    if let Some(var_276) = &input.scan_type {
        let mut array_277 = object.key("scanType").start_array();
        for item_278 in var_276 {
             {
                #[allow(unused_mut)]
                let mut object_279 = array_277.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(&mut object_279, item_278)?;
                object_279.finish();
            }
        }
        array_277.finish();
    }
    if let Some(var_280) = &input.ecr_repository_name {
        let mut array_281 = object.key("ecrRepositoryName").start_array();
        for item_282 in var_280 {
             {
                #[allow(unused_mut)]
                let mut object_283 = array_281.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(&mut object_283, item_282)?;
                object_283.finish();
            }
        }
        array_281.finish();
    }
    if let Some(var_284) = &input.ecr_image_tags {
        let mut array_285 = object.key("ecrImageTags").start_array();
        for item_286 in var_284 {
             {
                #[allow(unused_mut)]
                let mut object_287 = array_285.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(&mut object_287, item_286)?;
                object_287.finish();
            }
        }
        array_285.finish();
    }
    if let Some(var_288) = &input.ec2_instance_tags {
        let mut array_289 = object.key("ec2InstanceTags").start_array();
        for item_290 in var_288 {
             {
                #[allow(unused_mut)]
                let mut object_291 = array_289.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_map_filter(&mut object_291, item_290)?;
                object_291.finish();
            }
        }
        array_289.finish();
    }
    if let Some(var_292) = &input.lambda_function_name {
        let mut array_293 = object.key("lambdaFunctionName").start_array();
        for item_294 in var_292 {
             {
                #[allow(unused_mut)]
                let mut object_295 = array_293.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(&mut object_295, item_294)?;
                object_295.finish();
            }
        }
        array_293.finish();
    }
    if let Some(var_296) = &input.lambda_function_tags {
        let mut array_297 = object.key("lambdaFunctionTags").start_array();
        for item_298 in var_296 {
             {
                #[allow(unused_mut)]
                let mut object_299 = array_297.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_map_filter(&mut object_299, item_298)?;
                object_299.finish();
            }
        }
        array_297.finish();
    }
    if let Some(var_300) = &input.lambda_function_runtime {
        let mut array_301 = object.key("lambdaFunctionRuntime").start_array();
        for item_302 in var_300 {
             {
                #[allow(unused_mut)]
                let mut object_303 = array_301.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(&mut object_303, item_302)?;
                object_303.finish();
            }
        }
        array_301.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StringFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_304) = &input.comparison {
        object.key("comparison").string(var_304.as_str());
    }
    if let Some(var_305) = &input.value {
        object.key("value").string(var_305.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_aggregation_request(object_68: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AggregationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::AggregationRequest::AccountAggregation(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_306 = object_68.key("accountAggregation").start_object();
                crate::json_ser::serialize_structure_crate_model_account_aggregation(&mut object_306, inner)?;
                object_306.finish();
            }
        },
        crate::model::AggregationRequest::AmiAggregation(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_307 = object_68.key("amiAggregation").start_object();
                crate::json_ser::serialize_structure_crate_model_ami_aggregation(&mut object_307, inner)?;
                object_307.finish();
            }
        },
        crate::model::AggregationRequest::AwsEcrContainerAggregation(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_308 = object_68.key("awsEcrContainerAggregation").start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecr_container_aggregation(&mut object_308, inner)?;
                object_308.finish();
            }
        },
        crate::model::AggregationRequest::Ec2InstanceAggregation(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_309 = object_68.key("ec2InstanceAggregation").start_object();
                crate::json_ser::serialize_structure_crate_model_ec2_instance_aggregation(&mut object_309, inner)?;
                object_309.finish();
            }
        },
        crate::model::AggregationRequest::FindingTypeAggregation(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_310 = object_68.key("findingTypeAggregation").start_object();
                crate::json_ser::serialize_structure_crate_model_finding_type_aggregation(&mut object_310, inner)?;
                object_310.finish();
            }
        },
        crate::model::AggregationRequest::ImageLayerAggregation(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_311 = object_68.key("imageLayerAggregation").start_object();
                crate::json_ser::serialize_structure_crate_model_image_layer_aggregation(&mut object_311, inner)?;
                object_311.finish();
            }
        },
        crate::model::AggregationRequest::PackageAggregation(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_312 = object_68.key("packageAggregation").start_object();
                crate::json_ser::serialize_structure_crate_model_package_aggregation(&mut object_312, inner)?;
                object_312.finish();
            }
        },
        crate::model::AggregationRequest::RepositoryAggregation(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_313 = object_68.key("repositoryAggregation").start_object();
                crate::json_ser::serialize_structure_crate_model_repository_aggregation(&mut object_313, inner)?;
                object_313.finish();
            }
        },
        crate::model::AggregationRequest::TitleAggregation(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_314 = object_68.key("titleAggregation").start_object();
                crate::json_ser::serialize_structure_crate_model_title_aggregation(&mut object_314, inner)?;
                object_314.finish();
            }
        },
        crate::model::AggregationRequest::LambdaLayerAggregation(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_315 = object_68.key("lambdaLayerAggregation").start_object();
                crate::json_ser::serialize_structure_crate_model_lambda_layer_aggregation(&mut object_315, inner)?;
                object_315.finish();
            }
        },
        crate::model::AggregationRequest::LambdaFunctionAggregation(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_316 = object_68.key("lambdaFunctionAggregation").start_object();
                crate::json_ser::serialize_structure_crate_model_lambda_function_aggregation(&mut object_316, inner)?;
                object_316.finish();
            }
        },
        crate::model::AggregationRequest::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("AggregationRequest"))
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SortCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_317) = &input.field {
        object.key("field").string(var_317.as_str());
    }
    if let Some(var_318) = &input.sort_order {
        object.key("sortOrder").string(var_318.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ecr_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EcrConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_319) = &input.rescan_duration {
        object.key("rescanDuration").string(var_319.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_enable(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AutoEnable) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_320) = &input.ec2 {
        object.key("ec2").boolean(*var_320);
    }
    if let Some(var_321) = &input.ecr {
        object.key("ecr").boolean(*var_321);
    }
    if let Some(var_322) = &input.lambda {
        object.key("lambda").boolean(*var_322);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DateFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_323) = &input.start_inclusive {
        object.key("startInclusive").date_time(var_323, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_324) = &input.end_inclusive {
        object.key("endInclusive").date_time(var_324, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_number_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NumberFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_325) = &input.upper_inclusive {
        object.key("upperInclusive").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_325).into()));
    }
    if let Some(var_326) = &input.lower_inclusive {
        object.key("lowerInclusive").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_326).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_map_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MapFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_327) = &input.comparison {
        object.key("comparison").string(var_327.as_str());
    }
    if let Some(var_328) = &input.key {
        object.key("key").string(var_328.as_str());
    }
    if let Some(var_329) = &input.value {
        object.key("value").string(var_329.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_range_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PortRangeFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_330) = &input.begin_inclusive {
        object.key("beginInclusive").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_330).into()));
    }
    if let Some(var_331) = &input.end_inclusive {
        object.key("endInclusive").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_331).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_package_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PackageFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_332) = &input.name {
        #[allow(unused_mut)]
        let mut object_333 = object.key("name").start_object();
        crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_333, var_332)?;
        object_333.finish();
    }
    if let Some(var_334) = &input.version {
        #[allow(unused_mut)]
        let mut object_335 = object.key("version").start_object();
        crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_335, var_334)?;
        object_335.finish();
    }
    if let Some(var_336) = &input.epoch {
        #[allow(unused_mut)]
        let mut object_337 = object.key("epoch").start_object();
        crate::json_ser::serialize_structure_crate_model_number_filter(&mut object_337, var_336)?;
        object_337.finish();
    }
    if let Some(var_338) = &input.release {
        #[allow(unused_mut)]
        let mut object_339 = object.key("release").start_object();
        crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_339, var_338)?;
        object_339.finish();
    }
    if let Some(var_340) = &input.architecture {
        #[allow(unused_mut)]
        let mut object_341 = object.key("architecture").start_object();
        crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_341, var_340)?;
        object_341.finish();
    }
    if let Some(var_342) = &input.source_layer_hash {
        #[allow(unused_mut)]
        let mut object_343 = object.key("sourceLayerHash").start_object();
        crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_343, var_342)?;
        object_343.finish();
    }
    if let Some(var_344) = &input.source_lambda_layer_arn {
        #[allow(unused_mut)]
        let mut object_345 = object.key("sourceLambdaLayerArn").start_object();
        crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_345, var_344)?;
        object_345.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_coverage_string_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CoverageStringFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_346) = &input.comparison {
        object.key("comparison").string(var_346.as_str());
    }
    if let Some(var_347) = &input.value {
        object.key("value").string(var_347.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_coverage_map_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CoverageMapFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_348) = &input.comparison {
        object.key("comparison").string(var_348.as_str());
    }
    if let Some(var_349) = &input.key {
        object.key("key").string(var_349.as_str());
    }
    if let Some(var_350) = &input.value {
        object.key("value").string(var_350.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_aggregation(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AccountAggregation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_351) = &input.finding_type {
        object.key("findingType").string(var_351.as_str());
    }
    if let Some(var_352) = &input.resource_type {
        object.key("resourceType").string(var_352.as_str());
    }
    if let Some(var_353) = &input.sort_order {
        object.key("sortOrder").string(var_353.as_str());
    }
    if let Some(var_354) = &input.sort_by {
        object.key("sortBy").string(var_354.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ami_aggregation(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AmiAggregation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_355) = &input.amis {
        let mut array_356 = object.key("amis").start_array();
        for item_357 in var_355 {
             {
                #[allow(unused_mut)]
                let mut object_358 = array_356.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_358, item_357)?;
                object_358.finish();
            }
        }
        array_356.finish();
    }
    if let Some(var_359) = &input.sort_order {
        object.key("sortOrder").string(var_359.as_str());
    }
    if let Some(var_360) = &input.sort_by {
        object.key("sortBy").string(var_360.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecr_container_aggregation(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AwsEcrContainerAggregation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_361) = &input.resource_ids {
        let mut array_362 = object.key("resourceIds").start_array();
        for item_363 in var_361 {
             {
                #[allow(unused_mut)]
                let mut object_364 = array_362.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_364, item_363)?;
                object_364.finish();
            }
        }
        array_362.finish();
    }
    if let Some(var_365) = &input.image_shas {
        let mut array_366 = object.key("imageShas").start_array();
        for item_367 in var_365 {
             {
                #[allow(unused_mut)]
                let mut object_368 = array_366.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_368, item_367)?;
                object_368.finish();
            }
        }
        array_366.finish();
    }
    if let Some(var_369) = &input.repositories {
        let mut array_370 = object.key("repositories").start_array();
        for item_371 in var_369 {
             {
                #[allow(unused_mut)]
                let mut object_372 = array_370.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_372, item_371)?;
                object_372.finish();
            }
        }
        array_370.finish();
    }
    if let Some(var_373) = &input.architectures {
        let mut array_374 = object.key("architectures").start_array();
        for item_375 in var_373 {
             {
                #[allow(unused_mut)]
                let mut object_376 = array_374.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_376, item_375)?;
                object_376.finish();
            }
        }
        array_374.finish();
    }
    if let Some(var_377) = &input.image_tags {
        let mut array_378 = object.key("imageTags").start_array();
        for item_379 in var_377 {
             {
                #[allow(unused_mut)]
                let mut object_380 = array_378.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_380, item_379)?;
                object_380.finish();
            }
        }
        array_378.finish();
    }
    if let Some(var_381) = &input.sort_order {
        object.key("sortOrder").string(var_381.as_str());
    }
    if let Some(var_382) = &input.sort_by {
        object.key("sortBy").string(var_382.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ec2_instance_aggregation(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Ec2InstanceAggregation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_383) = &input.amis {
        let mut array_384 = object.key("amis").start_array();
        for item_385 in var_383 {
             {
                #[allow(unused_mut)]
                let mut object_386 = array_384.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_386, item_385)?;
                object_386.finish();
            }
        }
        array_384.finish();
    }
    if let Some(var_387) = &input.operating_systems {
        let mut array_388 = object.key("operatingSystems").start_array();
        for item_389 in var_387 {
             {
                #[allow(unused_mut)]
                let mut object_390 = array_388.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_390, item_389)?;
                object_390.finish();
            }
        }
        array_388.finish();
    }
    if let Some(var_391) = &input.instance_ids {
        let mut array_392 = object.key("instanceIds").start_array();
        for item_393 in var_391 {
             {
                #[allow(unused_mut)]
                let mut object_394 = array_392.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_394, item_393)?;
                object_394.finish();
            }
        }
        array_392.finish();
    }
    if let Some(var_395) = &input.instance_tags {
        let mut array_396 = object.key("instanceTags").start_array();
        for item_397 in var_395 {
             {
                #[allow(unused_mut)]
                let mut object_398 = array_396.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(&mut object_398, item_397)?;
                object_398.finish();
            }
        }
        array_396.finish();
    }
    if let Some(var_399) = &input.sort_order {
        object.key("sortOrder").string(var_399.as_str());
    }
    if let Some(var_400) = &input.sort_by {
        object.key("sortBy").string(var_400.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_finding_type_aggregation(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FindingTypeAggregation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_401) = &input.finding_type {
        object.key("findingType").string(var_401.as_str());
    }
    if let Some(var_402) = &input.resource_type {
        object.key("resourceType").string(var_402.as_str());
    }
    if let Some(var_403) = &input.sort_order {
        object.key("sortOrder").string(var_403.as_str());
    }
    if let Some(var_404) = &input.sort_by {
        object.key("sortBy").string(var_404.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_layer_aggregation(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ImageLayerAggregation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_405) = &input.repositories {
        let mut array_406 = object.key("repositories").start_array();
        for item_407 in var_405 {
             {
                #[allow(unused_mut)]
                let mut object_408 = array_406.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_408, item_407)?;
                object_408.finish();
            }
        }
        array_406.finish();
    }
    if let Some(var_409) = &input.resource_ids {
        let mut array_410 = object.key("resourceIds").start_array();
        for item_411 in var_409 {
             {
                #[allow(unused_mut)]
                let mut object_412 = array_410.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_412, item_411)?;
                object_412.finish();
            }
        }
        array_410.finish();
    }
    if let Some(var_413) = &input.layer_hashes {
        let mut array_414 = object.key("layerHashes").start_array();
        for item_415 in var_413 {
             {
                #[allow(unused_mut)]
                let mut object_416 = array_414.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_416, item_415)?;
                object_416.finish();
            }
        }
        array_414.finish();
    }
    if let Some(var_417) = &input.sort_order {
        object.key("sortOrder").string(var_417.as_str());
    }
    if let Some(var_418) = &input.sort_by {
        object.key("sortBy").string(var_418.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_package_aggregation(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PackageAggregation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_419) = &input.package_names {
        let mut array_420 = object.key("packageNames").start_array();
        for item_421 in var_419 {
             {
                #[allow(unused_mut)]
                let mut object_422 = array_420.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_422, item_421)?;
                object_422.finish();
            }
        }
        array_420.finish();
    }
    if let Some(var_423) = &input.sort_order {
        object.key("sortOrder").string(var_423.as_str());
    }
    if let Some(var_424) = &input.sort_by {
        object.key("sortBy").string(var_424.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_repository_aggregation(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RepositoryAggregation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_425) = &input.repositories {
        let mut array_426 = object.key("repositories").start_array();
        for item_427 in var_425 {
             {
                #[allow(unused_mut)]
                let mut object_428 = array_426.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_428, item_427)?;
                object_428.finish();
            }
        }
        array_426.finish();
    }
    if let Some(var_429) = &input.sort_order {
        object.key("sortOrder").string(var_429.as_str());
    }
    if let Some(var_430) = &input.sort_by {
        object.key("sortBy").string(var_430.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_title_aggregation(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TitleAggregation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_431) = &input.titles {
        let mut array_432 = object.key("titles").start_array();
        for item_433 in var_431 {
             {
                #[allow(unused_mut)]
                let mut object_434 = array_432.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_434, item_433)?;
                object_434.finish();
            }
        }
        array_432.finish();
    }
    if let Some(var_435) = &input.vulnerability_ids {
        let mut array_436 = object.key("vulnerabilityIds").start_array();
        for item_437 in var_435 {
             {
                #[allow(unused_mut)]
                let mut object_438 = array_436.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_438, item_437)?;
                object_438.finish();
            }
        }
        array_436.finish();
    }
    if let Some(var_439) = &input.resource_type {
        object.key("resourceType").string(var_439.as_str());
    }
    if let Some(var_440) = &input.sort_order {
        object.key("sortOrder").string(var_440.as_str());
    }
    if let Some(var_441) = &input.sort_by {
        object.key("sortBy").string(var_441.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_layer_aggregation(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LambdaLayerAggregation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_442) = &input.function_names {
        let mut array_443 = object.key("functionNames").start_array();
        for item_444 in var_442 {
             {
                #[allow(unused_mut)]
                let mut object_445 = array_443.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_445, item_444)?;
                object_445.finish();
            }
        }
        array_443.finish();
    }
    if let Some(var_446) = &input.resource_ids {
        let mut array_447 = object.key("resourceIds").start_array();
        for item_448 in var_446 {
             {
                #[allow(unused_mut)]
                let mut object_449 = array_447.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_449, item_448)?;
                object_449.finish();
            }
        }
        array_447.finish();
    }
    if let Some(var_450) = &input.layer_arns {
        let mut array_451 = object.key("layerArns").start_array();
        for item_452 in var_450 {
             {
                #[allow(unused_mut)]
                let mut object_453 = array_451.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_453, item_452)?;
                object_453.finish();
            }
        }
        array_451.finish();
    }
    if let Some(var_454) = &input.sort_order {
        object.key("sortOrder").string(var_454.as_str());
    }
    if let Some(var_455) = &input.sort_by {
        object.key("sortBy").string(var_455.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_function_aggregation(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LambdaFunctionAggregation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_456) = &input.resource_ids {
        let mut array_457 = object.key("resourceIds").start_array();
        for item_458 in var_456 {
             {
                #[allow(unused_mut)]
                let mut object_459 = array_457.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_459, item_458)?;
                object_459.finish();
            }
        }
        array_457.finish();
    }
    if let Some(var_460) = &input.function_names {
        let mut array_461 = object.key("functionNames").start_array();
        for item_462 in var_460 {
             {
                #[allow(unused_mut)]
                let mut object_463 = array_461.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_463, item_462)?;
                object_463.finish();
            }
        }
        array_461.finish();
    }
    if let Some(var_464) = &input.runtimes {
        let mut array_465 = object.key("runtimes").start_array();
        for item_466 in var_464 {
             {
                #[allow(unused_mut)]
                let mut object_467 = array_465.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_467, item_466)?;
                object_467.finish();
            }
        }
        array_465.finish();
    }
    if let Some(var_468) = &input.function_tags {
        let mut array_469 = object.key("functionTags").start_array();
        for item_470 in var_468 {
             {
                #[allow(unused_mut)]
                let mut object_471 = array_469.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(&mut object_471, item_470)?;
                object_471.finish();
            }
        }
        array_469.finish();
    }
    if let Some(var_472) = &input.sort_order {
        object.key("sortOrder").string(var_472.as_str());
    }
    if let Some(var_473) = &input.sort_by {
        object.key("sortBy").string(var_473.as_str());
    }
    Ok(())
}

