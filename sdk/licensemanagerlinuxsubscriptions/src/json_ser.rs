// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_list_linux_subscription_instances_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListLinuxSubscriptionInstancesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.filters {
        let mut array_2 = object.key("Filters").start_array();
        for item_3 in var_1 {
             {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5).into()));
    }
    if let Some(var_6) = &input.next_token {
        object.key("NextToken").string(var_6.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_linux_subscriptions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListLinuxSubscriptionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_7) = &input.filters {
        let mut array_8 = object.key("Filters").start_array();
        for item_9 in var_7 {
             {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_11).into()));
    }
    if let Some(var_12) = &input.next_token {
        object.key("NextToken").string(var_12.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_service_settings_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateServiceSettingsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_13) = &input.allow_update {
        object.key("AllowUpdate").boolean(*var_13);
    }
    if let Some(var_14) = &input.linux_subscriptions_discovery {
        object.key("LinuxSubscriptionsDiscovery").string(var_14.as_str());
    }
    if let Some(var_15) = &input.linux_subscriptions_discovery_settings {
        #[allow(unused_mut)]
        let mut object_16 = object.key("LinuxSubscriptionsDiscoverySettings").start_object();
        crate::json_ser::serialize_structure_crate_model_linux_subscriptions_discovery_settings(&mut object_16, var_15)?;
        object_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Filter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_17) = &input.name {
        object.key("Name").string(var_17.as_str());
    }
    if let Some(var_18) = &input.values {
        let mut array_19 = object.key("Values").start_array();
        for item_20 in var_18 {
             {
                array_19.value().string(item_20.as_str());
            }
        }
        array_19.finish();
    }
    if let Some(var_21) = &input.operator {
        object.key("Operator").string(var_21.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_linux_subscriptions_discovery_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LinuxSubscriptionsDiscoverySettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_22) = &input.source_regions {
        let mut array_23 = object.key("SourceRegions").start_array();
        for item_24 in var_22 {
             {
                array_23.value().string(item_24.as_str());
            }
        }
        array_23.finish();
    }
    if let Some(var_25) = &input.organization_integration {
        object.key("OrganizationIntegration").string(var_25.as_str());
    }
    Ok(())
}

