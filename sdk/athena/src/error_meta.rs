// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Indicates a platform issue, which may be due to a transient condition or outage.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>Indicates that something is wrong with the input to the request. For example, a required parameter may be missing or out of range.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>An exception that Athena received when it called a custom metastore. Occurs if the error is not caused by user input (<code>InvalidRequestException</code>) or from the Athena platform (<code>InternalServerException</code>). For example, if a user-created Lambda function is missing permissions, the Lambda <code>4XX</code> exception is returned in a <code>MetadataException</code>.</p>
    MetadataException(crate::error::MetadataException),
    /// <p>A resource, such as a workgroup, was not found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The specified session already exists.</p>
    SessionAlreadyExistsException(crate::error::SessionAlreadyExistsException),
    /// <p>Indicates that the request was throttled.</p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// 
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    /// 
    /// When logging an error from the SDK, it is recommended that you either wrap the error in
    /// [`DisplayErrorContext`](crate::types::DisplayErrorContext), use another
    /// error reporter library that visits the error's cause/source chain, or call
    /// [`Error::source`](std::error::Error::source) for more details about the underlying cause.
    /// 
    Unhandled(crate::error::Unhandled)
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::MetadataException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::SessionAlreadyExistsException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f)
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchGetNamedQueryError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BatchGetNamedQueryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::BatchGetNamedQueryError> for Error {
    fn from(err: crate::error::BatchGetNamedQueryError) -> Self {
        match err.kind {
            crate::error::BatchGetNamedQueryErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::BatchGetNamedQueryErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::BatchGetNamedQueryErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchGetPreparedStatementError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BatchGetPreparedStatementError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::BatchGetPreparedStatementError> for Error {
    fn from(err: crate::error::BatchGetPreparedStatementError) -> Self {
        match err.kind {
            crate::error::BatchGetPreparedStatementErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::BatchGetPreparedStatementErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::BatchGetPreparedStatementErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchGetQueryExecutionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BatchGetQueryExecutionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::BatchGetQueryExecutionError> for Error {
    fn from(err: crate::error::BatchGetQueryExecutionError) -> Self {
        match err.kind {
            crate::error::BatchGetQueryExecutionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::BatchGetQueryExecutionErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::BatchGetQueryExecutionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDataCatalogError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDataCatalogError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateDataCatalogError> for Error {
    fn from(err: crate::error::CreateDataCatalogError) -> Self {
        match err.kind {
            crate::error::CreateDataCatalogErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateDataCatalogErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::CreateDataCatalogErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateNamedQueryError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateNamedQueryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateNamedQueryError> for Error {
    fn from(err: crate::error::CreateNamedQueryError) -> Self {
        match err.kind {
            crate::error::CreateNamedQueryErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateNamedQueryErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::CreateNamedQueryErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateNotebookError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateNotebookError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateNotebookError> for Error {
    fn from(err: crate::error::CreateNotebookError) -> Self {
        match err.kind {
            crate::error::CreateNotebookErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateNotebookErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::CreateNotebookErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::CreateNotebookErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePreparedStatementError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreatePreparedStatementError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreatePreparedStatementError> for Error {
    fn from(err: crate::error::CreatePreparedStatementError) -> Self {
        match err.kind {
            crate::error::CreatePreparedStatementErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreatePreparedStatementErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::CreatePreparedStatementErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePresignedNotebookUrlError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreatePresignedNotebookUrlError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreatePresignedNotebookUrlError> for Error {
    fn from(err: crate::error::CreatePresignedNotebookUrlError) -> Self {
        match err.kind {
            crate::error::CreatePresignedNotebookUrlErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreatePresignedNotebookUrlErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::CreatePresignedNotebookUrlErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreatePresignedNotebookUrlErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateWorkGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateWorkGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateWorkGroupError> for Error {
    fn from(err: crate::error::CreateWorkGroupError) -> Self {
        match err.kind {
            crate::error::CreateWorkGroupErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateWorkGroupErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::CreateWorkGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDataCatalogError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDataCatalogError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteDataCatalogError> for Error {
    fn from(err: crate::error::DeleteDataCatalogError) -> Self {
        match err.kind {
            crate::error::DeleteDataCatalogErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteDataCatalogErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DeleteDataCatalogErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteNamedQueryError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteNamedQueryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteNamedQueryError> for Error {
    fn from(err: crate::error::DeleteNamedQueryError) -> Self {
        match err.kind {
            crate::error::DeleteNamedQueryErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteNamedQueryErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DeleteNamedQueryErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteNotebookError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteNotebookError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteNotebookError> for Error {
    fn from(err: crate::error::DeleteNotebookError) -> Self {
        match err.kind {
            crate::error::DeleteNotebookErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteNotebookErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DeleteNotebookErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::DeleteNotebookErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePreparedStatementError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeletePreparedStatementError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeletePreparedStatementError> for Error {
    fn from(err: crate::error::DeletePreparedStatementError) -> Self {
        match err.kind {
            crate::error::DeletePreparedStatementErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeletePreparedStatementErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DeletePreparedStatementErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeletePreparedStatementErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteWorkGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteWorkGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteWorkGroupError> for Error {
    fn from(err: crate::error::DeleteWorkGroupError) -> Self {
        match err.kind {
            crate::error::DeleteWorkGroupErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteWorkGroupErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DeleteWorkGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ExportNotebookError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ExportNotebookError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ExportNotebookError> for Error {
    fn from(err: crate::error::ExportNotebookError) -> Self {
        match err.kind {
            crate::error::ExportNotebookErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ExportNotebookErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ExportNotebookErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::ExportNotebookErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCalculationExecutionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetCalculationExecutionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetCalculationExecutionError> for Error {
    fn from(err: crate::error::GetCalculationExecutionError) -> Self {
        match err.kind {
            crate::error::GetCalculationExecutionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetCalculationExecutionErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetCalculationExecutionErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetCalculationExecutionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCalculationExecutionCodeError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetCalculationExecutionCodeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetCalculationExecutionCodeError> for Error {
    fn from(err: crate::error::GetCalculationExecutionCodeError) -> Self {
        match err.kind {
            crate::error::GetCalculationExecutionCodeErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetCalculationExecutionCodeErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetCalculationExecutionCodeErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetCalculationExecutionCodeErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCalculationExecutionStatusError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetCalculationExecutionStatusError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetCalculationExecutionStatusError> for Error {
    fn from(err: crate::error::GetCalculationExecutionStatusError) -> Self {
        match err.kind {
            crate::error::GetCalculationExecutionStatusErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetCalculationExecutionStatusErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetCalculationExecutionStatusErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetCalculationExecutionStatusErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDatabaseError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDatabaseError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetDatabaseError> for Error {
    fn from(err: crate::error::GetDatabaseError) -> Self {
        match err.kind {
            crate::error::GetDatabaseErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetDatabaseErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetDatabaseErrorKind::MetadataException(inner) => Error::MetadataException(inner),
            crate::error::GetDatabaseErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDataCatalogError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDataCatalogError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetDataCatalogError> for Error {
    fn from(err: crate::error::GetDataCatalogError) -> Self {
        match err.kind {
            crate::error::GetDataCatalogErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetDataCatalogErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetDataCatalogErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetNamedQueryError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetNamedQueryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetNamedQueryError> for Error {
    fn from(err: crate::error::GetNamedQueryError) -> Self {
        match err.kind {
            crate::error::GetNamedQueryErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetNamedQueryErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetNamedQueryErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetNotebookMetadataError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetNotebookMetadataError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetNotebookMetadataError> for Error {
    fn from(err: crate::error::GetNotebookMetadataError) -> Self {
        match err.kind {
            crate::error::GetNotebookMetadataErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetNotebookMetadataErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetNotebookMetadataErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::GetNotebookMetadataErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPreparedStatementError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetPreparedStatementError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetPreparedStatementError> for Error {
    fn from(err: crate::error::GetPreparedStatementError) -> Self {
        match err.kind {
            crate::error::GetPreparedStatementErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetPreparedStatementErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetPreparedStatementErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetPreparedStatementErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetQueryExecutionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetQueryExecutionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetQueryExecutionError> for Error {
    fn from(err: crate::error::GetQueryExecutionError) -> Self {
        match err.kind {
            crate::error::GetQueryExecutionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetQueryExecutionErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetQueryExecutionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetQueryResultsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetQueryResultsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetQueryResultsError> for Error {
    fn from(err: crate::error::GetQueryResultsError) -> Self {
        match err.kind {
            crate::error::GetQueryResultsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetQueryResultsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetQueryResultsErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::GetQueryResultsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetQueryRuntimeStatisticsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetQueryRuntimeStatisticsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetQueryRuntimeStatisticsError> for Error {
    fn from(err: crate::error::GetQueryRuntimeStatisticsError) -> Self {
        match err.kind {
            crate::error::GetQueryRuntimeStatisticsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetQueryRuntimeStatisticsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetQueryRuntimeStatisticsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSessionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetSessionError> for Error {
    fn from(err: crate::error::GetSessionError) -> Self {
        match err.kind {
            crate::error::GetSessionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetSessionErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetSessionErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetSessionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSessionStatusError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSessionStatusError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetSessionStatusError> for Error {
    fn from(err: crate::error::GetSessionStatusError) -> Self {
        match err.kind {
            crate::error::GetSessionStatusErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetSessionStatusErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetSessionStatusErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetSessionStatusErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTableMetadataError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetTableMetadataError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetTableMetadataError> for Error {
    fn from(err: crate::error::GetTableMetadataError) -> Self {
        match err.kind {
            crate::error::GetTableMetadataErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetTableMetadataErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetTableMetadataErrorKind::MetadataException(inner) => Error::MetadataException(inner),
            crate::error::GetTableMetadataErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetWorkGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetWorkGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetWorkGroupError> for Error {
    fn from(err: crate::error::GetWorkGroupError) -> Self {
        match err.kind {
            crate::error::GetWorkGroupErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetWorkGroupErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetWorkGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportNotebookError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ImportNotebookError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ImportNotebookError> for Error {
    fn from(err: crate::error::ImportNotebookError) -> Self {
        match err.kind {
            crate::error::ImportNotebookErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ImportNotebookErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ImportNotebookErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::ImportNotebookErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListApplicationDPUSizesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListApplicationDPUSizesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListApplicationDPUSizesError> for Error {
    fn from(err: crate::error::ListApplicationDPUSizesError) -> Self {
        match err.kind {
            crate::error::ListApplicationDPUSizesErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListApplicationDPUSizesErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListApplicationDPUSizesErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::ListApplicationDPUSizesErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCalculationExecutionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListCalculationExecutionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListCalculationExecutionsError> for Error {
    fn from(err: crate::error::ListCalculationExecutionsError) -> Self {
        match err.kind {
            crate::error::ListCalculationExecutionsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListCalculationExecutionsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListCalculationExecutionsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListCalculationExecutionsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDatabasesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDatabasesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListDatabasesError> for Error {
    fn from(err: crate::error::ListDatabasesError) -> Self {
        match err.kind {
            crate::error::ListDatabasesErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListDatabasesErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListDatabasesErrorKind::MetadataException(inner) => Error::MetadataException(inner),
            crate::error::ListDatabasesErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDataCatalogsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDataCatalogsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListDataCatalogsError> for Error {
    fn from(err: crate::error::ListDataCatalogsError) -> Self {
        match err.kind {
            crate::error::ListDataCatalogsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListDataCatalogsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListDataCatalogsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEngineVersionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListEngineVersionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListEngineVersionsError> for Error {
    fn from(err: crate::error::ListEngineVersionsError) -> Self {
        match err.kind {
            crate::error::ListEngineVersionsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListEngineVersionsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListEngineVersionsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListExecutorsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListExecutorsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListExecutorsError> for Error {
    fn from(err: crate::error::ListExecutorsError) -> Self {
        match err.kind {
            crate::error::ListExecutorsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListExecutorsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListExecutorsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListExecutorsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListNamedQueriesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListNamedQueriesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListNamedQueriesError> for Error {
    fn from(err: crate::error::ListNamedQueriesError) -> Self {
        match err.kind {
            crate::error::ListNamedQueriesErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListNamedQueriesErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListNamedQueriesErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListNotebookMetadataError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListNotebookMetadataError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListNotebookMetadataError> for Error {
    fn from(err: crate::error::ListNotebookMetadataError) -> Self {
        match err.kind {
            crate::error::ListNotebookMetadataErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListNotebookMetadataErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListNotebookMetadataErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::ListNotebookMetadataErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListNotebookSessionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListNotebookSessionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListNotebookSessionsError> for Error {
    fn from(err: crate::error::ListNotebookSessionsError) -> Self {
        match err.kind {
            crate::error::ListNotebookSessionsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListNotebookSessionsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListNotebookSessionsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListNotebookSessionsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPreparedStatementsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPreparedStatementsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListPreparedStatementsError> for Error {
    fn from(err: crate::error::ListPreparedStatementsError) -> Self {
        match err.kind {
            crate::error::ListPreparedStatementsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListPreparedStatementsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListPreparedStatementsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListQueryExecutionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListQueryExecutionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListQueryExecutionsError> for Error {
    fn from(err: crate::error::ListQueryExecutionsError) -> Self {
        match err.kind {
            crate::error::ListQueryExecutionsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListQueryExecutionsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListQueryExecutionsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSessionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSessionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListSessionsError> for Error {
    fn from(err: crate::error::ListSessionsError) -> Self {
        match err.kind {
            crate::error::ListSessionsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListSessionsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListSessionsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListSessionsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTableMetadataError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTableMetadataError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTableMetadataError> for Error {
    fn from(err: crate::error::ListTableMetadataError) -> Self {
        match err.kind {
            crate::error::ListTableMetadataErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListTableMetadataErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListTableMetadataErrorKind::MetadataException(inner) => Error::MetadataException(inner),
            crate::error::ListTableMetadataErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err.kind {
            crate::error::ListTagsForResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListTagsForResourceErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListTagsForResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWorkGroupsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListWorkGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListWorkGroupsError> for Error {
    fn from(err: crate::error::ListWorkGroupsError) -> Self {
        match err.kind {
            crate::error::ListWorkGroupsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListWorkGroupsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListWorkGroupsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartCalculationExecutionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartCalculationExecutionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StartCalculationExecutionError> for Error {
    fn from(err: crate::error::StartCalculationExecutionError) -> Self {
        match err.kind {
            crate::error::StartCalculationExecutionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StartCalculationExecutionErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::StartCalculationExecutionErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StartCalculationExecutionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartQueryExecutionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartQueryExecutionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StartQueryExecutionError> for Error {
    fn from(err: crate::error::StartQueryExecutionError) -> Self {
        match err.kind {
            crate::error::StartQueryExecutionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StartQueryExecutionErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::StartQueryExecutionErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::StartQueryExecutionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartSessionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartSessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StartSessionError> for Error {
    fn from(err: crate::error::StartSessionError) -> Self {
        match err.kind {
            crate::error::StartSessionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StartSessionErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::StartSessionErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StartSessionErrorKind::SessionAlreadyExistsException(inner) => Error::SessionAlreadyExistsException(inner),
            crate::error::StartSessionErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::StartSessionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopCalculationExecutionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopCalculationExecutionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StopCalculationExecutionError> for Error {
    fn from(err: crate::error::StopCalculationExecutionError) -> Self {
        match err.kind {
            crate::error::StopCalculationExecutionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StopCalculationExecutionErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::StopCalculationExecutionErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StopCalculationExecutionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopQueryExecutionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopQueryExecutionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StopQueryExecutionError> for Error {
    fn from(err: crate::error::StopQueryExecutionError) -> Self {
        match err.kind {
            crate::error::StopQueryExecutionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StopQueryExecutionErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::StopQueryExecutionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err.kind {
            crate::error::TagResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::TagResourceErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::TagResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TerminateSessionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TerminateSessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::TerminateSessionError> for Error {
    fn from(err: crate::error::TerminateSessionError) -> Self {
        match err.kind {
            crate::error::TerminateSessionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::TerminateSessionErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::TerminateSessionErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::TerminateSessionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err.kind {
            crate::error::UntagResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UntagResourceErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::UntagResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDataCatalogError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateDataCatalogError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateDataCatalogError> for Error {
    fn from(err: crate::error::UpdateDataCatalogError) -> Self {
        match err.kind {
            crate::error::UpdateDataCatalogErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateDataCatalogErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::UpdateDataCatalogErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateNamedQueryError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateNamedQueryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateNamedQueryError> for Error {
    fn from(err: crate::error::UpdateNamedQueryError) -> Self {
        match err.kind {
            crate::error::UpdateNamedQueryErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateNamedQueryErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::UpdateNamedQueryErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateNotebookError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateNotebookError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateNotebookError> for Error {
    fn from(err: crate::error::UpdateNotebookError) -> Self {
        match err.kind {
            crate::error::UpdateNotebookErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateNotebookErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::UpdateNotebookErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::UpdateNotebookErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateNotebookMetadataError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateNotebookMetadataError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateNotebookMetadataError> for Error {
    fn from(err: crate::error::UpdateNotebookMetadataError) -> Self {
        match err.kind {
            crate::error::UpdateNotebookMetadataErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateNotebookMetadataErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::UpdateNotebookMetadataErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::UpdateNotebookMetadataErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePreparedStatementError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdatePreparedStatementError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdatePreparedStatementError> for Error {
    fn from(err: crate::error::UpdatePreparedStatementError) -> Self {
        match err.kind {
            crate::error::UpdatePreparedStatementErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdatePreparedStatementErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::UpdatePreparedStatementErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdatePreparedStatementErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateWorkGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateWorkGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateWorkGroupError> for Error {
    fn from(err: crate::error::UpdateWorkGroupError) -> Self {
        match err.kind {
            crate::error::UpdateWorkGroupErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateWorkGroupErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::UpdateWorkGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl std::error::Error for Error {}

