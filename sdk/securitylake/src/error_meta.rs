// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>Amazon Security Lake cannot find an Amazon Web Services account with the accountID that you specified, or the account whose credentials you used to make this request isn't a member of an organization.</p>
    AccountNotFoundException(crate::error::AccountNotFoundException),
    /// <p>Amazon Security Lake generally returns 404 errors if the requested object is missing from the bucket.</p>
    BucketNotFoundException(crate::error::BucketNotFoundException),
    /// <p>More than one process tried to modify a resource at the same time. </p>
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    /// <p>Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>There was a conflict when you attempted to modify a Security Lake source name. </p>
    ConflictSourceNamesException(crate::error::ConflictSourceNamesException),
    /// <p>A conflicting subscription exception operation is in progress. </p>
    ConflictSubscriptionException(crate::error::ConflictSubscriptionException),
    /// <p>Represents an error interacting with the Amazon EventBridge service.</p>
    EventBridgeException(crate::error::EventBridgeException),
    /// <p>Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>The request was rejected because a value that's not valid or is out of range was supplied for an input parameter. </p>
    InvalidInputException(crate::error::InvalidInputException),
    /// <p>The resource could not be found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>Provides an extension of the AmazonServiceException for errors reported by Amazon S3 while processing a request. In particular, this class provides access to the Amazon S3 extended request ID. If Amazon S3 is incorrectly handling a request and you need to contact Amazon, this extended request ID may provide useful debugging information. </p>
    S3Exception(crate::error::S3Exception),
    /// <p>You have exceeded your service quota. To perform the requested action, remove some of the relevant resources, or use Service Quotas to request a service quota increase. </p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The limit on the number of requests per second was exceeded. </p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>Your signing certificate could not be validated. </p>
    ValidationException(crate::error::ValidationException),
    /// 
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    /// 
    /// When logging an error from the SDK, it is recommended that you either wrap the error in
    /// [`DisplayErrorContext`](crate::types::DisplayErrorContext), use another
    /// error reporter library that visits the error's cause/source chain, or call
    /// [`Error::source`](std::error::Error::source) for more details about the underlying cause.
    /// 
    Unhandled(crate::error::Unhandled)
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::AccountNotFoundException(inner) => inner.fmt(f),
            Error::BucketNotFoundException(inner) => inner.fmt(f),
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ConflictSourceNamesException(inner) => inner.fmt(f),
            Error::ConflictSubscriptionException(inner) => inner.fmt(f),
            Error::EventBridgeException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidInputException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::S3Exception(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f)
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAwsLogSourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateAwsLogSourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateAwsLogSourceError> for Error {
    fn from(err: crate::error::CreateAwsLogSourceError) -> Self {
        match err.kind {
            crate::error::CreateAwsLogSourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateAwsLogSourceErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::CreateAwsLogSourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateAwsLogSourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateAwsLogSourceErrorKind::S3Exception(inner) => Error::S3Exception(inner),
            crate::error::CreateAwsLogSourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateAwsLogSourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCustomLogSourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateCustomLogSourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateCustomLogSourceError> for Error {
    fn from(err: crate::error::CreateCustomLogSourceError) -> Self {
        match err.kind {
            crate::error::CreateCustomLogSourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateCustomLogSourceErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::CreateCustomLogSourceErrorKind::BucketNotFoundException(inner) => Error::BucketNotFoundException(inner),
            crate::error::CreateCustomLogSourceErrorKind::ConflictSourceNamesException(inner) => Error::ConflictSourceNamesException(inner),
            crate::error::CreateCustomLogSourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateCustomLogSourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateCustomLogSourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateCustomLogSourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDatalakeError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDatalakeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateDatalakeError> for Error {
    fn from(err: crate::error::CreateDatalakeError) -> Self {
        match err.kind {
            crate::error::CreateDatalakeErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateDatalakeErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateDatalakeErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateDatalakeErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateDatalakeErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateDatalakeErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateDatalakeErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateDatalakeErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDatalakeAutoEnableError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDatalakeAutoEnableError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateDatalakeAutoEnableError> for Error {
    fn from(err: crate::error::CreateDatalakeAutoEnableError) -> Self {
        match err.kind {
            crate::error::CreateDatalakeAutoEnableErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateDatalakeAutoEnableErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::CreateDatalakeAutoEnableErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateDatalakeAutoEnableErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateDatalakeAutoEnableErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDatalakeDelegatedAdminError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDatalakeDelegatedAdminError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateDatalakeDelegatedAdminError> for Error {
    fn from(err: crate::error::CreateDatalakeDelegatedAdminError) -> Self {
        match err.kind {
            crate::error::CreateDatalakeDelegatedAdminErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateDatalakeDelegatedAdminErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateDatalakeDelegatedAdminErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateDatalakeDelegatedAdminErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateDatalakeDelegatedAdminErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDatalakeExceptionsSubscriptionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDatalakeExceptionsSubscriptionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateDatalakeExceptionsSubscriptionError> for Error {
    fn from(err: crate::error::CreateDatalakeExceptionsSubscriptionError) -> Self {
        match err.kind {
            crate::error::CreateDatalakeExceptionsSubscriptionErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateDatalakeExceptionsSubscriptionErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::CreateDatalakeExceptionsSubscriptionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateDatalakeExceptionsSubscriptionErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateDatalakeExceptionsSubscriptionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSubscriberError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSubscriberError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateSubscriberError> for Error {
    fn from(err: crate::error::CreateSubscriberError) -> Self {
        match err.kind {
            crate::error::CreateSubscriberErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateSubscriberErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::CreateSubscriberErrorKind::BucketNotFoundException(inner) => Error::BucketNotFoundException(inner),
            crate::error::CreateSubscriberErrorKind::ConflictSubscriptionException(inner) => Error::ConflictSubscriptionException(inner),
            crate::error::CreateSubscriberErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateSubscriberErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateSubscriberErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateSubscriberErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateSubscriberErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSubscriptionNotificationConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSubscriptionNotificationConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateSubscriptionNotificationConfigurationError> for Error {
    fn from(err: crate::error::CreateSubscriptionNotificationConfigurationError) -> Self {
        match err.kind {
            crate::error::CreateSubscriptionNotificationConfigurationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateSubscriptionNotificationConfigurationErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::CreateSubscriptionNotificationConfigurationErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::error::CreateSubscriptionNotificationConfigurationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateSubscriptionNotificationConfigurationErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateSubscriptionNotificationConfigurationErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateSubscriptionNotificationConfigurationErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateSubscriptionNotificationConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAwsLogSourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteAwsLogSourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteAwsLogSourceError> for Error {
    fn from(err: crate::error::DeleteAwsLogSourceError) -> Self {
        match err.kind {
            crate::error::DeleteAwsLogSourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteAwsLogSourceErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::DeleteAwsLogSourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteAwsLogSourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteAwsLogSourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCustomLogSourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteCustomLogSourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteCustomLogSourceError> for Error {
    fn from(err: crate::error::DeleteCustomLogSourceError) -> Self {
        match err.kind {
            crate::error::DeleteCustomLogSourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteCustomLogSourceErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::DeleteCustomLogSourceErrorKind::BucketNotFoundException(inner) => Error::BucketNotFoundException(inner),
            crate::error::DeleteCustomLogSourceErrorKind::ConflictSourceNamesException(inner) => Error::ConflictSourceNamesException(inner),
            crate::error::DeleteCustomLogSourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteCustomLogSourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteCustomLogSourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteCustomLogSourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDatalakeError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDatalakeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteDatalakeError> for Error {
    fn from(err: crate::error::DeleteDatalakeError) -> Self {
        match err.kind {
            crate::error::DeleteDatalakeErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteDatalakeErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteDatalakeErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteDatalakeErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteDatalakeErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::DeleteDatalakeErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteDatalakeErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteDatalakeErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDatalakeAutoEnableError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDatalakeAutoEnableError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteDatalakeAutoEnableError> for Error {
    fn from(err: crate::error::DeleteDatalakeAutoEnableError) -> Self {
        match err.kind {
            crate::error::DeleteDatalakeAutoEnableErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteDatalakeAutoEnableErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::DeleteDatalakeAutoEnableErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteDatalakeAutoEnableErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteDatalakeAutoEnableErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDatalakeDelegatedAdminError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDatalakeDelegatedAdminError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteDatalakeDelegatedAdminError> for Error {
    fn from(err: crate::error::DeleteDatalakeDelegatedAdminError) -> Self {
        match err.kind {
            crate::error::DeleteDatalakeDelegatedAdminErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteDatalakeDelegatedAdminErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteDatalakeDelegatedAdminErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteDatalakeDelegatedAdminErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteDatalakeDelegatedAdminErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDatalakeExceptionsSubscriptionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDatalakeExceptionsSubscriptionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteDatalakeExceptionsSubscriptionError> for Error {
    fn from(err: crate::error::DeleteDatalakeExceptionsSubscriptionError) -> Self {
        match err.kind {
            crate::error::DeleteDatalakeExceptionsSubscriptionErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteDatalakeExceptionsSubscriptionErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::DeleteDatalakeExceptionsSubscriptionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteDatalakeExceptionsSubscriptionErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteDatalakeExceptionsSubscriptionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSubscriberError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSubscriberError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteSubscriberError> for Error {
    fn from(err: crate::error::DeleteSubscriberError) -> Self {
        match err.kind {
            crate::error::DeleteSubscriberErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteSubscriberErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::DeleteSubscriberErrorKind::BucketNotFoundException(inner) => Error::BucketNotFoundException(inner),
            crate::error::DeleteSubscriberErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::error::DeleteSubscriberErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteSubscriberErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeleteSubscriberErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteSubscriberErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteSubscriberErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSubscriptionNotificationConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSubscriptionNotificationConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteSubscriptionNotificationConfigurationError> for Error {
    fn from(err: crate::error::DeleteSubscriptionNotificationConfigurationError) -> Self {
        match err.kind {
            crate::error::DeleteSubscriptionNotificationConfigurationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteSubscriptionNotificationConfigurationErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::DeleteSubscriptionNotificationConfigurationErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::error::DeleteSubscriptionNotificationConfigurationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteSubscriptionNotificationConfigurationErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeleteSubscriptionNotificationConfigurationErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteSubscriptionNotificationConfigurationErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteSubscriptionNotificationConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDatalakeError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDatalakeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetDatalakeError> for Error {
    fn from(err: crate::error::GetDatalakeError) -> Self {
        match err.kind {
            crate::error::GetDatalakeErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetDatalakeErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::GetDatalakeErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetDatalakeErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetDatalakeErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetDatalakeErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDatalakeAutoEnableError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDatalakeAutoEnableError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetDatalakeAutoEnableError> for Error {
    fn from(err: crate::error::GetDatalakeAutoEnableError) -> Self {
        match err.kind {
            crate::error::GetDatalakeAutoEnableErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetDatalakeAutoEnableErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::GetDatalakeAutoEnableErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetDatalakeAutoEnableErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetDatalakeAutoEnableErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDatalakeExceptionsExpiryError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDatalakeExceptionsExpiryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetDatalakeExceptionsExpiryError> for Error {
    fn from(err: crate::error::GetDatalakeExceptionsExpiryError) -> Self {
        match err.kind {
            crate::error::GetDatalakeExceptionsExpiryErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetDatalakeExceptionsExpiryErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::GetDatalakeExceptionsExpiryErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetDatalakeExceptionsExpiryErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetDatalakeExceptionsExpiryErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDatalakeExceptionsSubscriptionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDatalakeExceptionsSubscriptionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetDatalakeExceptionsSubscriptionError> for Error {
    fn from(err: crate::error::GetDatalakeExceptionsSubscriptionError) -> Self {
        match err.kind {
            crate::error::GetDatalakeExceptionsSubscriptionErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetDatalakeExceptionsSubscriptionErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::GetDatalakeExceptionsSubscriptionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetDatalakeExceptionsSubscriptionErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetDatalakeExceptionsSubscriptionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDatalakeStatusError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDatalakeStatusError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetDatalakeStatusError> for Error {
    fn from(err: crate::error::GetDatalakeStatusError) -> Self {
        match err.kind {
            crate::error::GetDatalakeStatusErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetDatalakeStatusErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::GetDatalakeStatusErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetDatalakeStatusErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetDatalakeStatusErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSubscriberError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSubscriberError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetSubscriberError> for Error {
    fn from(err: crate::error::GetSubscriberError) -> Self {
        match err.kind {
            crate::error::GetSubscriberErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetSubscriberErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::GetSubscriberErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetSubscriberErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::GetSubscriberErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetSubscriberErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDatalakeExceptionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDatalakeExceptionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListDatalakeExceptionsError> for Error {
    fn from(err: crate::error::ListDatalakeExceptionsError) -> Self {
        match err.kind {
            crate::error::ListDatalakeExceptionsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListDatalakeExceptionsErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::ListDatalakeExceptionsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListDatalakeExceptionsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListDatalakeExceptionsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListLogSourcesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListLogSourcesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListLogSourcesError> for Error {
    fn from(err: crate::error::ListLogSourcesError) -> Self {
        match err.kind {
            crate::error::ListLogSourcesErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListLogSourcesErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::ListLogSourcesErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListLogSourcesErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListLogSourcesErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListLogSourcesErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSubscribersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSubscribersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListSubscribersError> for Error {
    fn from(err: crate::error::ListSubscribersError) -> Self {
        match err.kind {
            crate::error::ListSubscribersErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListSubscribersErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::ListSubscribersErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListSubscribersErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::ListSubscribersErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListSubscribersErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListSubscribersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDatalakeError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateDatalakeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateDatalakeError> for Error {
    fn from(err: crate::error::UpdateDatalakeError) -> Self {
        match err.kind {
            crate::error::UpdateDatalakeErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateDatalakeErrorKind::EventBridgeException(inner) => Error::EventBridgeException(inner),
            crate::error::UpdateDatalakeErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateDatalakeErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateDatalakeErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateDatalakeErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDatalakeExceptionsExpiryError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateDatalakeExceptionsExpiryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateDatalakeExceptionsExpiryError> for Error {
    fn from(err: crate::error::UpdateDatalakeExceptionsExpiryError) -> Self {
        match err.kind {
            crate::error::UpdateDatalakeExceptionsExpiryErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateDatalakeExceptionsExpiryErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::UpdateDatalakeExceptionsExpiryErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateDatalakeExceptionsExpiryErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateDatalakeExceptionsExpiryErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDatalakeExceptionsSubscriptionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateDatalakeExceptionsSubscriptionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateDatalakeExceptionsSubscriptionError> for Error {
    fn from(err: crate::error::UpdateDatalakeExceptionsSubscriptionError) -> Self {
        match err.kind {
            crate::error::UpdateDatalakeExceptionsSubscriptionErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateDatalakeExceptionsSubscriptionErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::UpdateDatalakeExceptionsSubscriptionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateDatalakeExceptionsSubscriptionErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateDatalakeExceptionsSubscriptionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSubscriberError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateSubscriberError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateSubscriberError> for Error {
    fn from(err: crate::error::UpdateSubscriberError) -> Self {
        match err.kind {
            crate::error::UpdateSubscriberErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateSubscriberErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::UpdateSubscriberErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::error::UpdateSubscriberErrorKind::ConflictSubscriptionException(inner) => Error::ConflictSubscriptionException(inner),
            crate::error::UpdateSubscriberErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateSubscriberErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::UpdateSubscriberErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateSubscriberErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSubscriptionNotificationConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateSubscriptionNotificationConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateSubscriptionNotificationConfigurationError> for Error {
    fn from(err: crate::error::UpdateSubscriptionNotificationConfigurationError) -> Self {
        match err.kind {
            crate::error::UpdateSubscriptionNotificationConfigurationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateSubscriptionNotificationConfigurationErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::UpdateSubscriptionNotificationConfigurationErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::error::UpdateSubscriptionNotificationConfigurationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateSubscriptionNotificationConfigurationErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::UpdateSubscriptionNotificationConfigurationErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateSubscriptionNotificationConfigurationErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateSubscriptionNotificationConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl std::error::Error for Error {}

