// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_approved_origin_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateApprovedOriginInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.origin {
        object.key("Origin").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_bot_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateBotInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2) = &input.lex_bot {
        #[allow(unused_mut)]
        let mut object_3 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_bot(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.lex_v2_bot {
        #[allow(unused_mut)]
        let mut object_5 = object.key("LexV2Bot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_v2_bot(&mut object_5, var_4)?;
        object_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_default_vocabulary_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateDefaultVocabularyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_6) = &input.vocabulary_id {
        object.key("VocabularyId").string(var_6.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_instance_storage_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateInstanceStorageConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_7) = &input.resource_type {
        object.key("ResourceType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.storage_config {
        #[allow(unused_mut)]
        let mut object_9 = object.key("StorageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_storage_config(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_lambda_function_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateLambdaFunctionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_10) = &input.function_arn {
        object.key("FunctionArn").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_lex_bot_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateLexBotInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_11) = &input.lex_bot {
        #[allow(unused_mut)]
        let mut object_12 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_bot(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_phone_number_contact_flow_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociatePhoneNumberContactFlowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_13) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.instance_id {
        object.key("InstanceId").string(var_14.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_queue_quick_connects_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateQueueQuickConnectsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_15) = &input.quick_connect_ids {
        let mut array_16 = object.key("QuickConnectIds").start_array();
        for item_17 in var_15 {
             {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_routing_profile_queues_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateRoutingProfileQueuesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_18) = &input.queue_configs {
        let mut array_19 = object.key("QueueConfigs").start_array();
        for item_20 in var_18 {
             {
                #[allow(unused_mut)]
                let mut object_21 = array_19.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_config(&mut object_21, item_20)?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_security_key_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateSecurityKeyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_22) = &input.key {
        object.key("Key").string(var_22.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_claim_phone_number_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ClaimPhoneNumberInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_23) = &input.client_token {
        object.key("ClientToken").string(var_23.as_str());
    }
    if let Some(var_24) = &input.phone_number {
        object.key("PhoneNumber").string(var_24.as_str());
    }
    if let Some(var_25) = &input.phone_number_description {
        object.key("PhoneNumberDescription").string(var_25.as_str());
    }
    if let Some(var_26) = &input.tags {
        #[allow(unused_mut)]
        let mut object_27 = object.key("Tags").start_object();
        for (key_28, value_29) in var_26 {
             {
                object_27.key(key_28.as_str()).string(value_29.as_str());
            }
        }
        object_27.finish();
    }
    if let Some(var_30) = &input.target_arn {
        object.key("TargetArn").string(var_30.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_agent_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateAgentStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_31) = &input.description {
        object.key("Description").string(var_31.as_str());
    }
    if let Some(var_32) = &input.display_order {
        object.key("DisplayOrder").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_32).into()));
    }
    if let Some(var_33) = &input.name {
        object.key("Name").string(var_33.as_str());
    }
    if let Some(var_34) = &input.state {
        object.key("State").string(var_34.as_str());
    }
    if let Some(var_35) = &input.tags {
        #[allow(unused_mut)]
        let mut object_36 = object.key("Tags").start_object();
        for (key_37, value_38) in var_35 {
             {
                object_36.key(key_37.as_str()).string(value_38.as_str());
            }
        }
        object_36.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_contact_flow_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateContactFlowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_39) = &input.content {
        object.key("Content").string(var_39.as_str());
    }
    if let Some(var_40) = &input.description {
        object.key("Description").string(var_40.as_str());
    }
    if let Some(var_41) = &input.name {
        object.key("Name").string(var_41.as_str());
    }
    if let Some(var_42) = &input.tags {
        #[allow(unused_mut)]
        let mut object_43 = object.key("Tags").start_object();
        for (key_44, value_45) in var_42 {
             {
                object_43.key(key_44.as_str()).string(value_45.as_str());
            }
        }
        object_43.finish();
    }
    if let Some(var_46) = &input.r#type {
        object.key("Type").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_contact_flow_module_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateContactFlowModuleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_47) = &input.client_token {
        object.key("ClientToken").string(var_47.as_str());
    }
    if let Some(var_48) = &input.content {
        object.key("Content").string(var_48.as_str());
    }
    if let Some(var_49) = &input.description {
        object.key("Description").string(var_49.as_str());
    }
    if let Some(var_50) = &input.name {
        object.key("Name").string(var_50.as_str());
    }
    if let Some(var_51) = &input.tags {
        #[allow(unused_mut)]
        let mut object_52 = object.key("Tags").start_object();
        for (key_53, value_54) in var_51 {
             {
                object_52.key(key_53.as_str()).string(value_54.as_str());
            }
        }
        object_52.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_hours_of_operation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateHoursOfOperationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_55) = &input.config {
        let mut array_56 = object.key("Config").start_array();
        for item_57 in var_55 {
             {
                #[allow(unused_mut)]
                let mut object_58 = array_56.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hours_of_operation_config(&mut object_58, item_57)?;
                object_58.finish();
            }
        }
        array_56.finish();
    }
    if let Some(var_59) = &input.description {
        object.key("Description").string(var_59.as_str());
    }
    if let Some(var_60) = &input.name {
        object.key("Name").string(var_60.as_str());
    }
    if let Some(var_61) = &input.tags {
        #[allow(unused_mut)]
        let mut object_62 = object.key("Tags").start_object();
        for (key_63, value_64) in var_61 {
             {
                object_62.key(key_63.as_str()).string(value_64.as_str());
            }
        }
        object_62.finish();
    }
    if let Some(var_65) = &input.time_zone {
        object.key("TimeZone").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_instance_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateInstanceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_66) = &input.client_token {
        object.key("ClientToken").string(var_66.as_str());
    }
    if let Some(var_67) = &input.directory_id {
        object.key("DirectoryId").string(var_67.as_str());
    }
    if let Some(var_68) = &input.identity_management_type {
        object.key("IdentityManagementType").string(var_68.as_str());
    }
    if let Some(var_69) = &input.inbound_calls_enabled {
        object.key("InboundCallsEnabled").boolean(*var_69);
    }
    if let Some(var_70) = &input.instance_alias {
        object.key("InstanceAlias").string(var_70.as_str());
    }
    if let Some(var_71) = &input.outbound_calls_enabled {
        object.key("OutboundCallsEnabled").boolean(*var_71);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_integration_association_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateIntegrationAssociationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_72) = &input.integration_arn {
        object.key("IntegrationArn").string(var_72.as_str());
    }
    if let Some(var_73) = &input.integration_type {
        object.key("IntegrationType").string(var_73.as_str());
    }
    if let Some(var_74) = &input.source_application_name {
        object.key("SourceApplicationName").string(var_74.as_str());
    }
    if let Some(var_75) = &input.source_application_url {
        object.key("SourceApplicationUrl").string(var_75.as_str());
    }
    if let Some(var_76) = &input.source_type {
        object.key("SourceType").string(var_76.as_str());
    }
    if let Some(var_77) = &input.tags {
        #[allow(unused_mut)]
        let mut object_78 = object.key("Tags").start_object();
        for (key_79, value_80) in var_77 {
             {
                object_78.key(key_79.as_str()).string(value_80.as_str());
            }
        }
        object_78.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_queue_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateQueueInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_81) = &input.description {
        object.key("Description").string(var_81.as_str());
    }
    if let Some(var_82) = &input.hours_of_operation_id {
        object.key("HoursOfOperationId").string(var_82.as_str());
    }
    if let Some(var_83) = &input.max_contacts {
        object.key("MaxContacts").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_83).into()));
    }
    if let Some(var_84) = &input.name {
        object.key("Name").string(var_84.as_str());
    }
    if let Some(var_85) = &input.outbound_caller_config {
        #[allow(unused_mut)]
        let mut object_86 = object.key("OutboundCallerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_outbound_caller_config(&mut object_86, var_85)?;
        object_86.finish();
    }
    if let Some(var_87) = &input.quick_connect_ids {
        let mut array_88 = object.key("QuickConnectIds").start_array();
        for item_89 in var_87 {
             {
                array_88.value().string(item_89.as_str());
            }
        }
        array_88.finish();
    }
    if let Some(var_90) = &input.tags {
        #[allow(unused_mut)]
        let mut object_91 = object.key("Tags").start_object();
        for (key_92, value_93) in var_90 {
             {
                object_91.key(key_92.as_str()).string(value_93.as_str());
            }
        }
        object_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_quick_connect_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateQuickConnectInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_94) = &input.description {
        object.key("Description").string(var_94.as_str());
    }
    if let Some(var_95) = &input.name {
        object.key("Name").string(var_95.as_str());
    }
    if let Some(var_96) = &input.quick_connect_config {
        #[allow(unused_mut)]
        let mut object_97 = object.key("QuickConnectConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_quick_connect_config(&mut object_97, var_96)?;
        object_97.finish();
    }
    if let Some(var_98) = &input.tags {
        #[allow(unused_mut)]
        let mut object_99 = object.key("Tags").start_object();
        for (key_100, value_101) in var_98 {
             {
                object_99.key(key_100.as_str()).string(value_101.as_str());
            }
        }
        object_99.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_routing_profile_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateRoutingProfileInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_102) = &input.default_outbound_queue_id {
        object.key("DefaultOutboundQueueId").string(var_102.as_str());
    }
    if let Some(var_103) = &input.description {
        object.key("Description").string(var_103.as_str());
    }
    if let Some(var_104) = &input.media_concurrencies {
        let mut array_105 = object.key("MediaConcurrencies").start_array();
        for item_106 in var_104 {
             {
                #[allow(unused_mut)]
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_crate_model_media_concurrency(&mut object_107, item_106)?;
                object_107.finish();
            }
        }
        array_105.finish();
    }
    if let Some(var_108) = &input.name {
        object.key("Name").string(var_108.as_str());
    }
    if let Some(var_109) = &input.queue_configs {
        let mut array_110 = object.key("QueueConfigs").start_array();
        for item_111 in var_109 {
             {
                #[allow(unused_mut)]
                let mut object_112 = array_110.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_config(&mut object_112, item_111)?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    if let Some(var_113) = &input.tags {
        #[allow(unused_mut)]
        let mut object_114 = object.key("Tags").start_object();
        for (key_115, value_116) in var_113 {
             {
                object_114.key(key_115.as_str()).string(value_116.as_str());
            }
        }
        object_114.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_rule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateRuleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_117) = &input.actions {
        let mut array_118 = object.key("Actions").start_array();
        for item_119 in var_117 {
             {
                #[allow(unused_mut)]
                let mut object_120 = array_118.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_action(&mut object_120, item_119)?;
                object_120.finish();
            }
        }
        array_118.finish();
    }
    if let Some(var_121) = &input.client_token {
        object.key("ClientToken").string(var_121.as_str());
    }
    if let Some(var_122) = &input.function {
        object.key("Function").string(var_122.as_str());
    }
    if let Some(var_123) = &input.name {
        object.key("Name").string(var_123.as_str());
    }
    if let Some(var_124) = &input.publish_status {
        object.key("PublishStatus").string(var_124.as_str());
    }
    if let Some(var_125) = &input.trigger_event_source {
        #[allow(unused_mut)]
        let mut object_126 = object.key("TriggerEventSource").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_trigger_event_source(&mut object_126, var_125)?;
        object_126.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_profile_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateSecurityProfileInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_127) = &input.allowed_access_control_tags {
        #[allow(unused_mut)]
        let mut object_128 = object.key("AllowedAccessControlTags").start_object();
        for (key_129, value_130) in var_127 {
             {
                object_128.key(key_129.as_str()).string(value_130.as_str());
            }
        }
        object_128.finish();
    }
    if let Some(var_131) = &input.description {
        object.key("Description").string(var_131.as_str());
    }
    if let Some(var_132) = &input.permissions {
        let mut array_133 = object.key("Permissions").start_array();
        for item_134 in var_132 {
             {
                array_133.value().string(item_134.as_str());
            }
        }
        array_133.finish();
    }
    if let Some(var_135) = &input.security_profile_name {
        object.key("SecurityProfileName").string(var_135.as_str());
    }
    if let Some(var_136) = &input.tag_restricted_resources {
        let mut array_137 = object.key("TagRestrictedResources").start_array();
        for item_138 in var_136 {
             {
                array_137.value().string(item_138.as_str());
            }
        }
        array_137.finish();
    }
    if let Some(var_139) = &input.tags {
        #[allow(unused_mut)]
        let mut object_140 = object.key("Tags").start_object();
        for (key_141, value_142) in var_139 {
             {
                object_140.key(key_141.as_str()).string(value_142.as_str());
            }
        }
        object_140.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_task_template_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateTaskTemplateInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_143) = &input.client_token {
        object.key("ClientToken").string(var_143.as_str());
    }
    if let Some(var_144) = &input.constraints {
        #[allow(unused_mut)]
        let mut object_145 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_constraints(&mut object_145, var_144)?;
        object_145.finish();
    }
    if let Some(var_146) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_146.as_str());
    }
    if let Some(var_147) = &input.defaults {
        #[allow(unused_mut)]
        let mut object_148 = object.key("Defaults").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_defaults(&mut object_148, var_147)?;
        object_148.finish();
    }
    if let Some(var_149) = &input.description {
        object.key("Description").string(var_149.as_str());
    }
    if let Some(var_150) = &input.fields {
        let mut array_151 = object.key("Fields").start_array();
        for item_152 in var_150 {
             {
                #[allow(unused_mut)]
                let mut object_153 = array_151.value().start_object();
                crate::json_ser::serialize_structure_crate_model_task_template_field(&mut object_153, item_152)?;
                object_153.finish();
            }
        }
        array_151.finish();
    }
    if let Some(var_154) = &input.name {
        object.key("Name").string(var_154.as_str());
    }
    if let Some(var_155) = &input.status {
        object.key("Status").string(var_155.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_traffic_distribution_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateTrafficDistributionGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_156) = &input.client_token {
        object.key("ClientToken").string(var_156.as_str());
    }
    if let Some(var_157) = &input.description {
        object.key("Description").string(var_157.as_str());
    }
    if let Some(var_158) = &input.instance_id {
        object.key("InstanceId").string(var_158.as_str());
    }
    if let Some(var_159) = &input.name {
        object.key("Name").string(var_159.as_str());
    }
    if let Some(var_160) = &input.tags {
        #[allow(unused_mut)]
        let mut object_161 = object.key("Tags").start_object();
        for (key_162, value_163) in var_160 {
             {
                object_161.key(key_162.as_str()).string(value_163.as_str());
            }
        }
        object_161.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_use_case_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateUseCaseInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_164) = &input.tags {
        #[allow(unused_mut)]
        let mut object_165 = object.key("Tags").start_object();
        for (key_166, value_167) in var_164 {
             {
                object_165.key(key_166.as_str()).string(value_167.as_str());
            }
        }
        object_165.finish();
    }
    if let Some(var_168) = &input.use_case_type {
        object.key("UseCaseType").string(var_168.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateUserInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_169) = &input.directory_user_id {
        object.key("DirectoryUserId").string(var_169.as_str());
    }
    if let Some(var_170) = &input.hierarchy_group_id {
        object.key("HierarchyGroupId").string(var_170.as_str());
    }
    if let Some(var_171) = &input.identity_info {
        #[allow(unused_mut)]
        let mut object_172 = object.key("IdentityInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_user_identity_info(&mut object_172, var_171)?;
        object_172.finish();
    }
    if let Some(var_173) = &input.password {
        object.key("Password").string(var_173.as_str());
    }
    if let Some(var_174) = &input.phone_config {
        #[allow(unused_mut)]
        let mut object_175 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_phone_config(&mut object_175, var_174)?;
        object_175.finish();
    }
    if let Some(var_176) = &input.routing_profile_id {
        object.key("RoutingProfileId").string(var_176.as_str());
    }
    if let Some(var_177) = &input.security_profile_ids {
        let mut array_178 = object.key("SecurityProfileIds").start_array();
        for item_179 in var_177 {
             {
                array_178.value().string(item_179.as_str());
            }
        }
        array_178.finish();
    }
    if let Some(var_180) = &input.tags {
        #[allow(unused_mut)]
        let mut object_181 = object.key("Tags").start_object();
        for (key_182, value_183) in var_180 {
             {
                object_181.key(key_182.as_str()).string(value_183.as_str());
            }
        }
        object_181.finish();
    }
    if let Some(var_184) = &input.username {
        object.key("Username").string(var_184.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_hierarchy_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateUserHierarchyGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_185) = &input.name {
        object.key("Name").string(var_185.as_str());
    }
    if let Some(var_186) = &input.parent_group_id {
        object.key("ParentGroupId").string(var_186.as_str());
    }
    if let Some(var_187) = &input.tags {
        #[allow(unused_mut)]
        let mut object_188 = object.key("Tags").start_object();
        for (key_189, value_190) in var_187 {
             {
                object_188.key(key_189.as_str()).string(value_190.as_str());
            }
        }
        object_188.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_vocabulary_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateVocabularyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_191) = &input.client_token {
        object.key("ClientToken").string(var_191.as_str());
    }
    if let Some(var_192) = &input.content {
        object.key("Content").string(var_192.as_str());
    }
    if let Some(var_193) = &input.language_code {
        object.key("LanguageCode").string(var_193.as_str());
    }
    if let Some(var_194) = &input.tags {
        #[allow(unused_mut)]
        let mut object_195 = object.key("Tags").start_object();
        for (key_196, value_197) in var_194 {
             {
                object_195.key(key_196.as_str()).string(value_197.as_str());
            }
        }
        object_195.finish();
    }
    if let Some(var_198) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_198.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_bot_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateBotInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_199) = &input.lex_bot {
        #[allow(unused_mut)]
        let mut object_200 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_bot(&mut object_200, var_199)?;
        object_200.finish();
    }
    if let Some(var_201) = &input.lex_v2_bot {
        #[allow(unused_mut)]
        let mut object_202 = object.key("LexV2Bot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_v2_bot(&mut object_202, var_201)?;
        object_202.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_queue_quick_connects_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateQueueQuickConnectsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_203) = &input.quick_connect_ids {
        let mut array_204 = object.key("QuickConnectIds").start_array();
        for item_205 in var_203 {
             {
                array_204.value().string(item_205.as_str());
            }
        }
        array_204.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_routing_profile_queues_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateRoutingProfileQueuesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_206) = &input.queue_references {
        let mut array_207 = object.key("QueueReferences").start_array();
        for item_208 in var_206 {
             {
                #[allow(unused_mut)]
                let mut object_209 = array_207.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_reference(&mut object_209, item_208)?;
                object_209.finish();
            }
        }
        array_207.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_dismiss_user_contact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DismissUserContactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_210) = &input.contact_id {
        object.key("ContactId").string(var_210.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_current_metric_data_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCurrentMetricDataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_211) = &input.current_metrics {
        let mut array_212 = object.key("CurrentMetrics").start_array();
        for item_213 in var_211 {
             {
                #[allow(unused_mut)]
                let mut object_214 = array_212.value().start_object();
                crate::json_ser::serialize_structure_crate_model_current_metric(&mut object_214, item_213)?;
                object_214.finish();
            }
        }
        array_212.finish();
    }
    if let Some(var_215) = &input.filters {
        #[allow(unused_mut)]
        let mut object_216 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_filters(&mut object_216, var_215)?;
        object_216.finish();
    }
    if let Some(var_217) = &input.groupings {
        let mut array_218 = object.key("Groupings").start_array();
        for item_219 in var_217 {
             {
                array_218.value().string(item_219.as_str());
            }
        }
        array_218.finish();
    }
    if let Some(var_220) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_220).into()));
    }
    if let Some(var_221) = &input.next_token {
        object.key("NextToken").string(var_221.as_str());
    }
    if let Some(var_222) = &input.sort_criteria {
        let mut array_223 = object.key("SortCriteria").start_array();
        for item_224 in var_222 {
             {
                #[allow(unused_mut)]
                let mut object_225 = array_223.value().start_object();
                crate::json_ser::serialize_structure_crate_model_current_metric_sort_criteria(&mut object_225, item_224)?;
                object_225.finish();
            }
        }
        array_223.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_current_user_data_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCurrentUserDataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_226) = &input.filters {
        #[allow(unused_mut)]
        let mut object_227 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_user_data_filters(&mut object_227, var_226)?;
        object_227.finish();
    }
    if let Some(var_228) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_228).into()));
    }
    if let Some(var_229) = &input.next_token {
        object.key("NextToken").string(var_229.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_metric_data_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMetricDataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_230) = &input.end_time {
        object.key("EndTime").date_time(var_230, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_231) = &input.filters {
        #[allow(unused_mut)]
        let mut object_232 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_filters(&mut object_232, var_231)?;
        object_232.finish();
    }
    if let Some(var_233) = &input.groupings {
        let mut array_234 = object.key("Groupings").start_array();
        for item_235 in var_233 {
             {
                array_234.value().string(item_235.as_str());
            }
        }
        array_234.finish();
    }
    if let Some(var_236) = &input.historical_metrics {
        let mut array_237 = object.key("HistoricalMetrics").start_array();
        for item_238 in var_236 {
             {
                #[allow(unused_mut)]
                let mut object_239 = array_237.value().start_object();
                crate::json_ser::serialize_structure_crate_model_historical_metric(&mut object_239, item_238)?;
                object_239.finish();
            }
        }
        array_237.finish();
    }
    if let Some(var_240) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_240).into()));
    }
    if let Some(var_241) = &input.next_token {
        object.key("NextToken").string(var_241.as_str());
    }
    if let Some(var_242) = &input.start_time {
        object.key("StartTime").date_time(var_242, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_default_vocabularies_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDefaultVocabulariesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_243) = &input.language_code {
        object.key("LanguageCode").string(var_243.as_str());
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_244) = &input.next_token {
        object.key("NextToken").string(var_244.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_phone_numbers_v2_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListPhoneNumbersV2Input) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_245) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_245).into()));
    }
    if let Some(var_246) = &input.next_token {
        object.key("NextToken").string(var_246.as_str());
    }
    if let Some(var_247) = &input.phone_number_country_codes {
        let mut array_248 = object.key("PhoneNumberCountryCodes").start_array();
        for item_249 in var_247 {
             {
                array_248.value().string(item_249.as_str());
            }
        }
        array_248.finish();
    }
    if let Some(var_250) = &input.phone_number_prefix {
        object.key("PhoneNumberPrefix").string(var_250.as_str());
    }
    if let Some(var_251) = &input.phone_number_types {
        let mut array_252 = object.key("PhoneNumberTypes").start_array();
        for item_253 in var_251 {
             {
                array_252.value().string(item_253.as_str());
            }
        }
        array_252.finish();
    }
    if let Some(var_254) = &input.target_arn {
        object.key("TargetArn").string(var_254.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_monitor_contact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::MonitorContactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_255) = &input.allowed_monitor_capabilities {
        let mut array_256 = object.key("AllowedMonitorCapabilities").start_array();
        for item_257 in var_255 {
             {
                array_256.value().string(item_257.as_str());
            }
        }
        array_256.finish();
    }
    if let Some(var_258) = &input.client_token {
        object.key("ClientToken").string(var_258.as_str());
    }
    if let Some(var_259) = &input.contact_id {
        object.key("ContactId").string(var_259.as_str());
    }
    if let Some(var_260) = &input.instance_id {
        object.key("InstanceId").string(var_260.as_str());
    }
    if let Some(var_261) = &input.user_id {
        object.key("UserId").string(var_261.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_user_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutUserStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_262) = &input.agent_status_id {
        object.key("AgentStatusId").string(var_262.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_replicate_instance_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ReplicateInstanceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_263) = &input.client_token {
        object.key("ClientToken").string(var_263.as_str());
    }
    if let Some(var_264) = &input.replica_alias {
        object.key("ReplicaAlias").string(var_264.as_str());
    }
    if let Some(var_265) = &input.replica_region {
        object.key("ReplicaRegion").string(var_265.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_contact_recording_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ResumeContactRecordingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_266) = &input.contact_id {
        object.key("ContactId").string(var_266.as_str());
    }
    if let Some(var_267) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_267.as_str());
    }
    if let Some(var_268) = &input.instance_id {
        object.key("InstanceId").string(var_268.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_available_phone_numbers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchAvailablePhoneNumbersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_269) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_269).into()));
    }
    if let Some(var_270) = &input.next_token {
        object.key("NextToken").string(var_270.as_str());
    }
    if let Some(var_271) = &input.phone_number_country_code {
        object.key("PhoneNumberCountryCode").string(var_271.as_str());
    }
    if let Some(var_272) = &input.phone_number_prefix {
        object.key("PhoneNumberPrefix").string(var_272.as_str());
    }
    if let Some(var_273) = &input.phone_number_type {
        object.key("PhoneNumberType").string(var_273.as_str());
    }
    if let Some(var_274) = &input.target_arn {
        object.key("TargetArn").string(var_274.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_queues_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchQueuesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_275) = &input.instance_id {
        object.key("InstanceId").string(var_275.as_str());
    }
    if let Some(var_276) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_276).into()));
    }
    if let Some(var_277) = &input.next_token {
        object.key("NextToken").string(var_277.as_str());
    }
    if let Some(var_278) = &input.search_criteria {
        #[allow(unused_mut)]
        let mut object_279 = object.key("SearchCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_queue_search_criteria(&mut object_279, var_278)?;
        object_279.finish();
    }
    if let Some(var_280) = &input.search_filter {
        #[allow(unused_mut)]
        let mut object_281 = object.key("SearchFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_queue_search_filter(&mut object_281, var_280)?;
        object_281.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_routing_profiles_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchRoutingProfilesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_282) = &input.instance_id {
        object.key("InstanceId").string(var_282.as_str());
    }
    if let Some(var_283) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_283).into()));
    }
    if let Some(var_284) = &input.next_token {
        object.key("NextToken").string(var_284.as_str());
    }
    if let Some(var_285) = &input.search_criteria {
        #[allow(unused_mut)]
        let mut object_286 = object.key("SearchCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_routing_profile_search_criteria(&mut object_286, var_285)?;
        object_286.finish();
    }
    if let Some(var_287) = &input.search_filter {
        #[allow(unused_mut)]
        let mut object_288 = object.key("SearchFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_routing_profile_search_filter(&mut object_288, var_287)?;
        object_288.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_security_profiles_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchSecurityProfilesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_289) = &input.instance_id {
        object.key("InstanceId").string(var_289.as_str());
    }
    if let Some(var_290) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_290).into()));
    }
    if let Some(var_291) = &input.next_token {
        object.key("NextToken").string(var_291.as_str());
    }
    if let Some(var_292) = &input.search_criteria {
        #[allow(unused_mut)]
        let mut object_293 = object.key("SearchCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_security_profile_search_criteria(&mut object_293, var_292)?;
        object_293.finish();
    }
    if let Some(var_294) = &input.search_filter {
        #[allow(unused_mut)]
        let mut object_295 = object.key("SearchFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_security_profiles_search_filter(&mut object_295, var_294)?;
        object_295.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_users_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchUsersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_296) = &input.instance_id {
        object.key("InstanceId").string(var_296.as_str());
    }
    if let Some(var_297) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_297).into()));
    }
    if let Some(var_298) = &input.next_token {
        object.key("NextToken").string(var_298.as_str());
    }
    if let Some(var_299) = &input.search_criteria {
        #[allow(unused_mut)]
        let mut object_300 = object.key("SearchCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_user_search_criteria(&mut object_300, var_299)?;
        object_300.finish();
    }
    if let Some(var_301) = &input.search_filter {
        #[allow(unused_mut)]
        let mut object_302 = object.key("SearchFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_user_search_filter(&mut object_302, var_301)?;
        object_302.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_vocabularies_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchVocabulariesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_303) = &input.language_code {
        object.key("LanguageCode").string(var_303.as_str());
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_304) = &input.name_starts_with {
        object.key("NameStartsWith").string(var_304.as_str());
    }
    if let Some(var_305) = &input.next_token {
        object.key("NextToken").string(var_305.as_str());
    }
    if let Some(var_306) = &input.state {
        object.key("State").string(var_306.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_chat_contact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartChatContactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_307) = &input.attributes {
        #[allow(unused_mut)]
        let mut object_308 = object.key("Attributes").start_object();
        for (key_309, value_310) in var_307 {
             {
                object_308.key(key_309.as_str()).string(value_310.as_str());
            }
        }
        object_308.finish();
    }
    if let Some(var_311) = &input.chat_duration_in_minutes {
        object.key("ChatDurationInMinutes").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_311).into()));
    }
    if let Some(var_312) = &input.client_token {
        object.key("ClientToken").string(var_312.as_str());
    }
    if let Some(var_313) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_313.as_str());
    }
    if let Some(var_314) = &input.initial_message {
        #[allow(unused_mut)]
        let mut object_315 = object.key("InitialMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_chat_message(&mut object_315, var_314)?;
        object_315.finish();
    }
    if let Some(var_316) = &input.instance_id {
        object.key("InstanceId").string(var_316.as_str());
    }
    if let Some(var_317) = &input.participant_details {
        #[allow(unused_mut)]
        let mut object_318 = object.key("ParticipantDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_participant_details(&mut object_318, var_317)?;
        object_318.finish();
    }
    if let Some(var_319) = &input.supported_messaging_content_types {
        let mut array_320 = object.key("SupportedMessagingContentTypes").start_array();
        for item_321 in var_319 {
             {
                array_320.value().string(item_321.as_str());
            }
        }
        array_320.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_contact_recording_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartContactRecordingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_322) = &input.contact_id {
        object.key("ContactId").string(var_322.as_str());
    }
    if let Some(var_323) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_323.as_str());
    }
    if let Some(var_324) = &input.instance_id {
        object.key("InstanceId").string(var_324.as_str());
    }
    if let Some(var_325) = &input.voice_recording_configuration {
        #[allow(unused_mut)]
        let mut object_326 = object.key("VoiceRecordingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_recording_configuration(&mut object_326, var_325)?;
        object_326.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_contact_streaming_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartContactStreamingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_327) = &input.chat_streaming_configuration {
        #[allow(unused_mut)]
        let mut object_328 = object.key("ChatStreamingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_chat_streaming_configuration(&mut object_328, var_327)?;
        object_328.finish();
    }
    if let Some(var_329) = &input.client_token {
        object.key("ClientToken").string(var_329.as_str());
    }
    if let Some(var_330) = &input.contact_id {
        object.key("ContactId").string(var_330.as_str());
    }
    if let Some(var_331) = &input.instance_id {
        object.key("InstanceId").string(var_331.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_outbound_voice_contact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartOutboundVoiceContactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_332) = &input.answer_machine_detection_config {
        #[allow(unused_mut)]
        let mut object_333 = object.key("AnswerMachineDetectionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_answer_machine_detection_config(&mut object_333, var_332)?;
        object_333.finish();
    }
    if let Some(var_334) = &input.attributes {
        #[allow(unused_mut)]
        let mut object_335 = object.key("Attributes").start_object();
        for (key_336, value_337) in var_334 {
             {
                object_335.key(key_336.as_str()).string(value_337.as_str());
            }
        }
        object_335.finish();
    }
    if let Some(var_338) = &input.campaign_id {
        object.key("CampaignId").string(var_338.as_str());
    }
    if let Some(var_339) = &input.client_token {
        object.key("ClientToken").string(var_339.as_str());
    }
    if let Some(var_340) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_340.as_str());
    }
    if let Some(var_341) = &input.destination_phone_number {
        object.key("DestinationPhoneNumber").string(var_341.as_str());
    }
    if let Some(var_342) = &input.instance_id {
        object.key("InstanceId").string(var_342.as_str());
    }
    if let Some(var_343) = &input.queue_id {
        object.key("QueueId").string(var_343.as_str());
    }
    if let Some(var_344) = &input.source_phone_number {
        object.key("SourcePhoneNumber").string(var_344.as_str());
    }
    if let Some(var_345) = &input.traffic_type {
        object.key("TrafficType").string(var_345.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_task_contact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartTaskContactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_346) = &input.attributes {
        #[allow(unused_mut)]
        let mut object_347 = object.key("Attributes").start_object();
        for (key_348, value_349) in var_346 {
             {
                object_347.key(key_348.as_str()).string(value_349.as_str());
            }
        }
        object_347.finish();
    }
    if let Some(var_350) = &input.client_token {
        object.key("ClientToken").string(var_350.as_str());
    }
    if let Some(var_351) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_351.as_str());
    }
    if let Some(var_352) = &input.description {
        object.key("Description").string(var_352.as_str());
    }
    if let Some(var_353) = &input.instance_id {
        object.key("InstanceId").string(var_353.as_str());
    }
    if let Some(var_354) = &input.name {
        object.key("Name").string(var_354.as_str());
    }
    if let Some(var_355) = &input.previous_contact_id {
        object.key("PreviousContactId").string(var_355.as_str());
    }
    if let Some(var_356) = &input.quick_connect_id {
        object.key("QuickConnectId").string(var_356.as_str());
    }
    if let Some(var_357) = &input.references {
        #[allow(unused_mut)]
        let mut object_358 = object.key("References").start_object();
        for (key_359, value_360) in var_357 {
             {
                #[allow(unused_mut)]
                let mut object_361 = object_358.key(key_359.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_reference(&mut object_361, value_360)?;
                object_361.finish();
            }
        }
        object_358.finish();
    }
    if let Some(var_362) = &input.scheduled_time {
        object.key("ScheduledTime").date_time(var_362, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_363) = &input.task_template_id {
        object.key("TaskTemplateId").string(var_363.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_contact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopContactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_364) = &input.contact_id {
        object.key("ContactId").string(var_364.as_str());
    }
    if let Some(var_365) = &input.instance_id {
        object.key("InstanceId").string(var_365.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_contact_recording_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopContactRecordingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_366) = &input.contact_id {
        object.key("ContactId").string(var_366.as_str());
    }
    if let Some(var_367) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_367.as_str());
    }
    if let Some(var_368) = &input.instance_id {
        object.key("InstanceId").string(var_368.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_contact_streaming_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopContactStreamingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_369) = &input.contact_id {
        object.key("ContactId").string(var_369.as_str());
    }
    if let Some(var_370) = &input.instance_id {
        object.key("InstanceId").string(var_370.as_str());
    }
    if let Some(var_371) = &input.streaming_id {
        object.key("StreamingId").string(var_371.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_suspend_contact_recording_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SuspendContactRecordingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_372) = &input.contact_id {
        object.key("ContactId").string(var_372.as_str());
    }
    if let Some(var_373) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_373.as_str());
    }
    if let Some(var_374) = &input.instance_id {
        object.key("InstanceId").string(var_374.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_375) = &input.tags {
        #[allow(unused_mut)]
        let mut object_376 = object.key("tags").start_object();
        for (key_377, value_378) in var_375 {
             {
                object_376.key(key_377.as_str()).string(value_378.as_str());
            }
        }
        object_376.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_transfer_contact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TransferContactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_379) = &input.client_token {
        object.key("ClientToken").string(var_379.as_str());
    }
    if let Some(var_380) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_380.as_str());
    }
    if let Some(var_381) = &input.contact_id {
        object.key("ContactId").string(var_381.as_str());
    }
    if let Some(var_382) = &input.instance_id {
        object.key("InstanceId").string(var_382.as_str());
    }
    if let Some(var_383) = &input.queue_id {
        object.key("QueueId").string(var_383.as_str());
    }
    if let Some(var_384) = &input.user_id {
        object.key("UserId").string(var_384.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_agent_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateAgentStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_385) = &input.description {
        object.key("Description").string(var_385.as_str());
    }
    if let Some(var_386) = &input.display_order {
        object.key("DisplayOrder").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_386).into()));
    }
    if let Some(var_387) = &input.name {
        object.key("Name").string(var_387.as_str());
    }
    if input.reset_order_number {
        object.key("ResetOrderNumber").boolean(input.reset_order_number);
    }
    if let Some(var_388) = &input.state {
        object.key("State").string(var_388.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateContactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_389) = &input.description {
        object.key("Description").string(var_389.as_str());
    }
    if let Some(var_390) = &input.name {
        object.key("Name").string(var_390.as_str());
    }
    if let Some(var_391) = &input.references {
        #[allow(unused_mut)]
        let mut object_392 = object.key("References").start_object();
        for (key_393, value_394) in var_391 {
             {
                #[allow(unused_mut)]
                let mut object_395 = object_392.key(key_393.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_reference(&mut object_395, value_394)?;
                object_395.finish();
            }
        }
        object_392.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_attributes_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateContactAttributesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_396) = &input.attributes {
        #[allow(unused_mut)]
        let mut object_397 = object.key("Attributes").start_object();
        for (key_398, value_399) in var_396 {
             {
                object_397.key(key_398.as_str()).string(value_399.as_str());
            }
        }
        object_397.finish();
    }
    if let Some(var_400) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_400.as_str());
    }
    if let Some(var_401) = &input.instance_id {
        object.key("InstanceId").string(var_401.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_content_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateContactFlowContentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_402) = &input.content {
        object.key("Content").string(var_402.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateContactFlowMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_403) = &input.contact_flow_state {
        object.key("ContactFlowState").string(var_403.as_str());
    }
    if let Some(var_404) = &input.description {
        object.key("Description").string(var_404.as_str());
    }
    if let Some(var_405) = &input.name {
        object.key("Name").string(var_405.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_module_content_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateContactFlowModuleContentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_406) = &input.content {
        object.key("Content").string(var_406.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_module_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateContactFlowModuleMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_407) = &input.description {
        object.key("Description").string(var_407.as_str());
    }
    if let Some(var_408) = &input.name {
        object.key("Name").string(var_408.as_str());
    }
    if let Some(var_409) = &input.state {
        object.key("State").string(var_409.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_name_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateContactFlowNameInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_410) = &input.description {
        object.key("Description").string(var_410.as_str());
    }
    if let Some(var_411) = &input.name {
        object.key("Name").string(var_411.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_schedule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateContactScheduleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_412) = &input.contact_id {
        object.key("ContactId").string(var_412.as_str());
    }
    if let Some(var_413) = &input.instance_id {
        object.key("InstanceId").string(var_413.as_str());
    }
    if let Some(var_414) = &input.scheduled_time {
        object.key("ScheduledTime").date_time(var_414, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_hours_of_operation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateHoursOfOperationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_415) = &input.config {
        let mut array_416 = object.key("Config").start_array();
        for item_417 in var_415 {
             {
                #[allow(unused_mut)]
                let mut object_418 = array_416.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hours_of_operation_config(&mut object_418, item_417)?;
                object_418.finish();
            }
        }
        array_416.finish();
    }
    if let Some(var_419) = &input.description {
        object.key("Description").string(var_419.as_str());
    }
    if let Some(var_420) = &input.name {
        object.key("Name").string(var_420.as_str());
    }
    if let Some(var_421) = &input.time_zone {
        object.key("TimeZone").string(var_421.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_instance_attribute_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateInstanceAttributeInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_422) = &input.value {
        object.key("Value").string(var_422.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_instance_storage_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateInstanceStorageConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_423) = &input.storage_config {
        #[allow(unused_mut)]
        let mut object_424 = object.key("StorageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_storage_config(&mut object_424, var_423)?;
        object_424.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_participant_role_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateParticipantRoleConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_425) = &input.channel_configuration {
        #[allow(unused_mut)]
        let mut object_426 = object.key("ChannelConfiguration").start_object();
        crate::json_ser::serialize_union_crate_model_update_participant_role_config_channel_info(&mut object_426, var_425)?;
        object_426.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_phone_number_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdatePhoneNumberInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_427) = &input.client_token {
        object.key("ClientToken").string(var_427.as_str());
    }
    if let Some(var_428) = &input.target_arn {
        object.key("TargetArn").string(var_428.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_hours_of_operation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateQueueHoursOfOperationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_429) = &input.hours_of_operation_id {
        object.key("HoursOfOperationId").string(var_429.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_max_contacts_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateQueueMaxContactsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_430) = &input.max_contacts {
        object.key("MaxContacts").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_430).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_name_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateQueueNameInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_431) = &input.description {
        object.key("Description").string(var_431.as_str());
    }
    if let Some(var_432) = &input.name {
        object.key("Name").string(var_432.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_outbound_caller_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateQueueOutboundCallerConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_433) = &input.outbound_caller_config {
        #[allow(unused_mut)]
        let mut object_434 = object.key("OutboundCallerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_outbound_caller_config(&mut object_434, var_433)?;
        object_434.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateQueueStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_435) = &input.status {
        object.key("Status").string(var_435.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_quick_connect_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateQuickConnectConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_436) = &input.quick_connect_config {
        #[allow(unused_mut)]
        let mut object_437 = object.key("QuickConnectConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_quick_connect_config(&mut object_437, var_436)?;
        object_437.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_quick_connect_name_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateQuickConnectNameInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_438) = &input.description {
        object.key("Description").string(var_438.as_str());
    }
    if let Some(var_439) = &input.name {
        object.key("Name").string(var_439.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_concurrency_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRoutingProfileConcurrencyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_440) = &input.media_concurrencies {
        let mut array_441 = object.key("MediaConcurrencies").start_array();
        for item_442 in var_440 {
             {
                #[allow(unused_mut)]
                let mut object_443 = array_441.value().start_object();
                crate::json_ser::serialize_structure_crate_model_media_concurrency(&mut object_443, item_442)?;
                object_443.finish();
            }
        }
        array_441.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_default_outbound_queue_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRoutingProfileDefaultOutboundQueueInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_444) = &input.default_outbound_queue_id {
        object.key("DefaultOutboundQueueId").string(var_444.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_name_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRoutingProfileNameInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_445) = &input.description {
        object.key("Description").string(var_445.as_str());
    }
    if let Some(var_446) = &input.name {
        object.key("Name").string(var_446.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_queues_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRoutingProfileQueuesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_447) = &input.queue_configs {
        let mut array_448 = object.key("QueueConfigs").start_array();
        for item_449 in var_447 {
             {
                #[allow(unused_mut)]
                let mut object_450 = array_448.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_config(&mut object_450, item_449)?;
                object_450.finish();
            }
        }
        array_448.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_rule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRuleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_451) = &input.actions {
        let mut array_452 = object.key("Actions").start_array();
        for item_453 in var_451 {
             {
                #[allow(unused_mut)]
                let mut object_454 = array_452.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_action(&mut object_454, item_453)?;
                object_454.finish();
            }
        }
        array_452.finish();
    }
    if let Some(var_455) = &input.function {
        object.key("Function").string(var_455.as_str());
    }
    if let Some(var_456) = &input.name {
        object.key("Name").string(var_456.as_str());
    }
    if let Some(var_457) = &input.publish_status {
        object.key("PublishStatus").string(var_457.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_security_profile_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateSecurityProfileInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_458) = &input.allowed_access_control_tags {
        #[allow(unused_mut)]
        let mut object_459 = object.key("AllowedAccessControlTags").start_object();
        for (key_460, value_461) in var_458 {
             {
                object_459.key(key_460.as_str()).string(value_461.as_str());
            }
        }
        object_459.finish();
    }
    if let Some(var_462) = &input.description {
        object.key("Description").string(var_462.as_str());
    }
    if let Some(var_463) = &input.permissions {
        let mut array_464 = object.key("Permissions").start_array();
        for item_465 in var_463 {
             {
                array_464.value().string(item_465.as_str());
            }
        }
        array_464.finish();
    }
    if let Some(var_466) = &input.tag_restricted_resources {
        let mut array_467 = object.key("TagRestrictedResources").start_array();
        for item_468 in var_466 {
             {
                array_467.value().string(item_468.as_str());
            }
        }
        array_467.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_task_template_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateTaskTemplateInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_469) = &input.constraints {
        #[allow(unused_mut)]
        let mut object_470 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_constraints(&mut object_470, var_469)?;
        object_470.finish();
    }
    if let Some(var_471) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_471.as_str());
    }
    if let Some(var_472) = &input.defaults {
        #[allow(unused_mut)]
        let mut object_473 = object.key("Defaults").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_defaults(&mut object_473, var_472)?;
        object_473.finish();
    }
    if let Some(var_474) = &input.description {
        object.key("Description").string(var_474.as_str());
    }
    if let Some(var_475) = &input.fields {
        let mut array_476 = object.key("Fields").start_array();
        for item_477 in var_475 {
             {
                #[allow(unused_mut)]
                let mut object_478 = array_476.value().start_object();
                crate::json_ser::serialize_structure_crate_model_task_template_field(&mut object_478, item_477)?;
                object_478.finish();
            }
        }
        array_476.finish();
    }
    if let Some(var_479) = &input.name {
        object.key("Name").string(var_479.as_str());
    }
    if let Some(var_480) = &input.status {
        object.key("Status").string(var_480.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_traffic_distribution_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateTrafficDistributionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_481) = &input.telephony_config {
        #[allow(unused_mut)]
        let mut object_482 = object.key("TelephonyConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_telephony_config(&mut object_482, var_481)?;
        object_482.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_hierarchy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserHierarchyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_483) = &input.hierarchy_group_id {
        object.key("HierarchyGroupId").string(var_483.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_hierarchy_group_name_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserHierarchyGroupNameInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_484) = &input.name {
        object.key("Name").string(var_484.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_hierarchy_structure_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserHierarchyStructureInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_485) = &input.hierarchy_structure {
        #[allow(unused_mut)]
        let mut object_486 = object.key("HierarchyStructure").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_structure_update(&mut object_486, var_485)?;
        object_486.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_identity_info_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserIdentityInfoInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_487) = &input.identity_info {
        #[allow(unused_mut)]
        let mut object_488 = object.key("IdentityInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_user_identity_info(&mut object_488, var_487)?;
        object_488.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_phone_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserPhoneConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_489) = &input.phone_config {
        #[allow(unused_mut)]
        let mut object_490 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_phone_config(&mut object_490, var_489)?;
        object_490.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_routing_profile_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserRoutingProfileInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_491) = &input.routing_profile_id {
        object.key("RoutingProfileId").string(var_491.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_security_profiles_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserSecurityProfilesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_492) = &input.security_profile_ids {
        let mut array_493 = object.key("SecurityProfileIds").start_array();
        for item_494 in var_492 {
             {
                array_493.value().string(item_494.as_str());
            }
        }
        array_493.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lex_bot(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LexBot) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_495) = &input.name {
        object.key("Name").string(var_495.as_str());
    }
    if let Some(var_496) = &input.lex_region {
        object.key("LexRegion").string(var_496.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lex_v2_bot(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LexV2Bot) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_497) = &input.alias_arn {
        object.key("AliasArn").string(var_497.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_storage_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InstanceStorageConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_498) = &input.association_id {
        object.key("AssociationId").string(var_498.as_str());
    }
    if let Some(var_499) = &input.storage_type {
        object.key("StorageType").string(var_499.as_str());
    }
    if let Some(var_500) = &input.s3_config {
        #[allow(unused_mut)]
        let mut object_501 = object.key("S3Config").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_config(&mut object_501, var_500)?;
        object_501.finish();
    }
    if let Some(var_502) = &input.kinesis_video_stream_config {
        #[allow(unused_mut)]
        let mut object_503 = object.key("KinesisVideoStreamConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_video_stream_config(&mut object_503, var_502)?;
        object_503.finish();
    }
    if let Some(var_504) = &input.kinesis_stream_config {
        #[allow(unused_mut)]
        let mut object_505 = object.key("KinesisStreamConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_stream_config(&mut object_505, var_504)?;
        object_505.finish();
    }
    if let Some(var_506) = &input.kinesis_firehose_config {
        #[allow(unused_mut)]
        let mut object_507 = object.key("KinesisFirehoseConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_firehose_config(&mut object_507, var_506)?;
        object_507.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_routing_profile_queue_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RoutingProfileQueueConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_508) = &input.queue_reference {
        #[allow(unused_mut)]
        let mut object_509 = object.key("QueueReference").start_object();
        crate::json_ser::serialize_structure_crate_model_routing_profile_queue_reference(&mut object_509, var_508)?;
        object_509.finish();
    }
    if let Some(var_510) = &input.priority {
        object.key("Priority").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_510).into()));
    }
    if let Some(var_511) = &input.delay {
        object.key("Delay").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_511).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hours_of_operation_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HoursOfOperationConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_512) = &input.day {
        object.key("Day").string(var_512.as_str());
    }
    if let Some(var_513) = &input.start_time {
        #[allow(unused_mut)]
        let mut object_514 = object.key("StartTime").start_object();
        crate::json_ser::serialize_structure_crate_model_hours_of_operation_time_slice(&mut object_514, var_513)?;
        object_514.finish();
    }
    if let Some(var_515) = &input.end_time {
        #[allow(unused_mut)]
        let mut object_516 = object.key("EndTime").start_object();
        crate::json_ser::serialize_structure_crate_model_hours_of_operation_time_slice(&mut object_516, var_515)?;
        object_516.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_outbound_caller_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OutboundCallerConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_517) = &input.outbound_caller_id_name {
        object.key("OutboundCallerIdName").string(var_517.as_str());
    }
    if let Some(var_518) = &input.outbound_caller_id_number_id {
        object.key("OutboundCallerIdNumberId").string(var_518.as_str());
    }
    if let Some(var_519) = &input.outbound_flow_id {
        object.key("OutboundFlowId").string(var_519.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_quick_connect_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::QuickConnectConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_520) = &input.quick_connect_type {
        object.key("QuickConnectType").string(var_520.as_str());
    }
    if let Some(var_521) = &input.user_config {
        #[allow(unused_mut)]
        let mut object_522 = object.key("UserConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_quick_connect_config(&mut object_522, var_521)?;
        object_522.finish();
    }
    if let Some(var_523) = &input.queue_config {
        #[allow(unused_mut)]
        let mut object_524 = object.key("QueueConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_queue_quick_connect_config(&mut object_524, var_523)?;
        object_524.finish();
    }
    if let Some(var_525) = &input.phone_config {
        #[allow(unused_mut)]
        let mut object_526 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_phone_number_quick_connect_config(&mut object_526, var_525)?;
        object_526.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_media_concurrency(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MediaConcurrency) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_527) = &input.channel {
        object.key("Channel").string(var_527.as_str());
    }
     {
        object.key("Concurrency").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.concurrency).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_action(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RuleAction) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_528) = &input.action_type {
        object.key("ActionType").string(var_528.as_str());
    }
    if let Some(var_529) = &input.task_action {
        #[allow(unused_mut)]
        let mut object_530 = object.key("TaskAction").start_object();
        crate::json_ser::serialize_structure_crate_model_task_action_definition(&mut object_530, var_529)?;
        object_530.finish();
    }
    if let Some(var_531) = &input.event_bridge_action {
        #[allow(unused_mut)]
        let mut object_532 = object.key("EventBridgeAction").start_object();
        crate::json_ser::serialize_structure_crate_model_event_bridge_action_definition(&mut object_532, var_531)?;
        object_532.finish();
    }
    if let Some(var_533) = &input.assign_contact_category_action {
        #[allow(unused_mut)]
        let mut object_534 = object.key("AssignContactCategoryAction").start_object();
        crate::json_ser::serialize_structure_crate_model_assign_contact_category_action_definition(&mut object_534, var_533)?;
        object_534.finish();
    }
    if let Some(var_535) = &input.send_notification_action {
        #[allow(unused_mut)]
        let mut object_536 = object.key("SendNotificationAction").start_object();
        crate::json_ser::serialize_structure_crate_model_send_notification_action_definition(&mut object_536, var_535)?;
        object_536.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_trigger_event_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RuleTriggerEventSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_537) = &input.event_source_name {
        object.key("EventSourceName").string(var_537.as_str());
    }
    if let Some(var_538) = &input.integration_association_id {
        object.key("IntegrationAssociationId").string(var_538.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_template_constraints(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TaskTemplateConstraints) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_539) = &input.required_fields {
        let mut array_540 = object.key("RequiredFields").start_array();
        for item_541 in var_539 {
             {
                #[allow(unused_mut)]
                let mut object_542 = array_540.value().start_object();
                crate::json_ser::serialize_structure_crate_model_required_field_info(&mut object_542, item_541)?;
                object_542.finish();
            }
        }
        array_540.finish();
    }
    if let Some(var_543) = &input.read_only_fields {
        let mut array_544 = object.key("ReadOnlyFields").start_array();
        for item_545 in var_543 {
             {
                #[allow(unused_mut)]
                let mut object_546 = array_544.value().start_object();
                crate::json_ser::serialize_structure_crate_model_read_only_field_info(&mut object_546, item_545)?;
                object_546.finish();
            }
        }
        array_544.finish();
    }
    if let Some(var_547) = &input.invisible_fields {
        let mut array_548 = object.key("InvisibleFields").start_array();
        for item_549 in var_547 {
             {
                #[allow(unused_mut)]
                let mut object_550 = array_548.value().start_object();
                crate::json_ser::serialize_structure_crate_model_invisible_field_info(&mut object_550, item_549)?;
                object_550.finish();
            }
        }
        array_548.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_template_defaults(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TaskTemplateDefaults) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_551) = &input.default_field_values {
        let mut array_552 = object.key("DefaultFieldValues").start_array();
        for item_553 in var_551 {
             {
                #[allow(unused_mut)]
                let mut object_554 = array_552.value().start_object();
                crate::json_ser::serialize_structure_crate_model_task_template_default_field_value(&mut object_554, item_553)?;
                object_554.finish();
            }
        }
        array_552.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_template_field(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TaskTemplateField) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_555) = &input.id {
        #[allow(unused_mut)]
        let mut object_556 = object.key("Id").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_field_identifier(&mut object_556, var_555)?;
        object_556.finish();
    }
    if let Some(var_557) = &input.description {
        object.key("Description").string(var_557.as_str());
    }
    if let Some(var_558) = &input.r#type {
        object.key("Type").string(var_558.as_str());
    }
    if let Some(var_559) = &input.single_select_options {
        let mut array_560 = object.key("SingleSelectOptions").start_array();
        for item_561 in var_559 {
             {
                array_560.value().string(item_561.as_str());
            }
        }
        array_560.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_identity_info(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserIdentityInfo) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_562) = &input.first_name {
        object.key("FirstName").string(var_562.as_str());
    }
    if let Some(var_563) = &input.last_name {
        object.key("LastName").string(var_563.as_str());
    }
    if let Some(var_564) = &input.email {
        object.key("Email").string(var_564.as_str());
    }
    if let Some(var_565) = &input.secondary_email {
        object.key("SecondaryEmail").string(var_565.as_str());
    }
    if let Some(var_566) = &input.mobile {
        object.key("Mobile").string(var_566.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_phone_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserPhoneConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_567) = &input.phone_type {
        object.key("PhoneType").string(var_567.as_str());
    }
    if input.auto_accept {
        object.key("AutoAccept").boolean(input.auto_accept);
    }
    if input.after_contact_work_time_limit != 0 {
        object.key("AfterContactWorkTimeLimit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.after_contact_work_time_limit).into()));
    }
    if let Some(var_568) = &input.desk_phone_number {
        object.key("DeskPhoneNumber").string(var_568.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_routing_profile_queue_reference(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RoutingProfileQueueReference) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_569) = &input.queue_id {
        object.key("QueueId").string(var_569.as_str());
    }
    if let Some(var_570) = &input.channel {
        object.key("Channel").string(var_570.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_current_metric(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CurrentMetric) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_571) = &input.name {
        object.key("Name").string(var_571.as_str());
    }
    if let Some(var_572) = &input.unit {
        object.key("Unit").string(var_572.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Filters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_573) = &input.queues {
        let mut array_574 = object.key("Queues").start_array();
        for item_575 in var_573 {
             {
                array_574.value().string(item_575.as_str());
            }
        }
        array_574.finish();
    }
    if let Some(var_576) = &input.channels {
        let mut array_577 = object.key("Channels").start_array();
        for item_578 in var_576 {
             {
                array_577.value().string(item_578.as_str());
            }
        }
        array_577.finish();
    }
    if let Some(var_579) = &input.routing_profiles {
        let mut array_580 = object.key("RoutingProfiles").start_array();
        for item_581 in var_579 {
             {
                array_580.value().string(item_581.as_str());
            }
        }
        array_580.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_current_metric_sort_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CurrentMetricSortCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_582) = &input.sort_by_metric {
        object.key("SortByMetric").string(var_582.as_str());
    }
    if let Some(var_583) = &input.sort_order {
        object.key("SortOrder").string(var_583.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_data_filters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserDataFilters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_584) = &input.queues {
        let mut array_585 = object.key("Queues").start_array();
        for item_586 in var_584 {
             {
                array_585.value().string(item_586.as_str());
            }
        }
        array_585.finish();
    }
    if let Some(var_587) = &input.contact_filter {
        #[allow(unused_mut)]
        let mut object_588 = object.key("ContactFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_contact_filter(&mut object_588, var_587)?;
        object_588.finish();
    }
    if let Some(var_589) = &input.routing_profiles {
        let mut array_590 = object.key("RoutingProfiles").start_array();
        for item_591 in var_589 {
             {
                array_590.value().string(item_591.as_str());
            }
        }
        array_590.finish();
    }
    if let Some(var_592) = &input.agents {
        let mut array_593 = object.key("Agents").start_array();
        for item_594 in var_592 {
             {
                array_593.value().string(item_594.as_str());
            }
        }
        array_593.finish();
    }
    if let Some(var_595) = &input.user_hierarchy_groups {
        let mut array_596 = object.key("UserHierarchyGroups").start_array();
        for item_597 in var_595 {
             {
                array_596.value().string(item_597.as_str());
            }
        }
        array_596.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_historical_metric(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HistoricalMetric) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_598) = &input.name {
        object.key("Name").string(var_598.as_str());
    }
    if let Some(var_599) = &input.threshold {
        #[allow(unused_mut)]
        let mut object_600 = object.key("Threshold").start_object();
        crate::json_ser::serialize_structure_crate_model_threshold(&mut object_600, var_599)?;
        object_600.finish();
    }
    if let Some(var_601) = &input.statistic {
        object.key("Statistic").string(var_601.as_str());
    }
    if let Some(var_602) = &input.unit {
        object.key("Unit").string(var_602.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_queue_search_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::QueueSearchCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_603) = &input.or_conditions {
        let mut array_604 = object.key("OrConditions").start_array();
        for item_605 in var_603 {
             {
                #[allow(unused_mut)]
                let mut object_606 = array_604.value().start_object();
                crate::json_ser::serialize_structure_crate_model_queue_search_criteria(&mut object_606, item_605)?;
                object_606.finish();
            }
        }
        array_604.finish();
    }
    if let Some(var_607) = &input.and_conditions {
        let mut array_608 = object.key("AndConditions").start_array();
        for item_609 in var_607 {
             {
                #[allow(unused_mut)]
                let mut object_610 = array_608.value().start_object();
                crate::json_ser::serialize_structure_crate_model_queue_search_criteria(&mut object_610, item_609)?;
                object_610.finish();
            }
        }
        array_608.finish();
    }
    if let Some(var_611) = &input.string_condition {
        #[allow(unused_mut)]
        let mut object_612 = object.key("StringCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_string_condition(&mut object_612, var_611)?;
        object_612.finish();
    }
    if let Some(var_613) = &input.queue_type_condition {
        object.key("QueueTypeCondition").string(var_613.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_queue_search_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::QueueSearchFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_614) = &input.tag_filter {
        #[allow(unused_mut)]
        let mut object_615 = object.key("TagFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_control_plane_tag_filter(&mut object_615, var_614)?;
        object_615.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_routing_profile_search_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RoutingProfileSearchCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_616) = &input.or_conditions {
        let mut array_617 = object.key("OrConditions").start_array();
        for item_618 in var_616 {
             {
                #[allow(unused_mut)]
                let mut object_619 = array_617.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_search_criteria(&mut object_619, item_618)?;
                object_619.finish();
            }
        }
        array_617.finish();
    }
    if let Some(var_620) = &input.and_conditions {
        let mut array_621 = object.key("AndConditions").start_array();
        for item_622 in var_620 {
             {
                #[allow(unused_mut)]
                let mut object_623 = array_621.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_search_criteria(&mut object_623, item_622)?;
                object_623.finish();
            }
        }
        array_621.finish();
    }
    if let Some(var_624) = &input.string_condition {
        #[allow(unused_mut)]
        let mut object_625 = object.key("StringCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_string_condition(&mut object_625, var_624)?;
        object_625.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_routing_profile_search_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RoutingProfileSearchFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_626) = &input.tag_filter {
        #[allow(unused_mut)]
        let mut object_627 = object.key("TagFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_control_plane_tag_filter(&mut object_627, var_626)?;
        object_627.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_security_profile_search_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SecurityProfileSearchCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_628) = &input.or_conditions {
        let mut array_629 = object.key("OrConditions").start_array();
        for item_630 in var_628 {
             {
                #[allow(unused_mut)]
                let mut object_631 = array_629.value().start_object();
                crate::json_ser::serialize_structure_crate_model_security_profile_search_criteria(&mut object_631, item_630)?;
                object_631.finish();
            }
        }
        array_629.finish();
    }
    if let Some(var_632) = &input.and_conditions {
        let mut array_633 = object.key("AndConditions").start_array();
        for item_634 in var_632 {
             {
                #[allow(unused_mut)]
                let mut object_635 = array_633.value().start_object();
                crate::json_ser::serialize_structure_crate_model_security_profile_search_criteria(&mut object_635, item_634)?;
                object_635.finish();
            }
        }
        array_633.finish();
    }
    if let Some(var_636) = &input.string_condition {
        #[allow(unused_mut)]
        let mut object_637 = object.key("StringCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_string_condition(&mut object_637, var_636)?;
        object_637.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_security_profiles_search_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SecurityProfilesSearchFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_638) = &input.tag_filter {
        #[allow(unused_mut)]
        let mut object_639 = object.key("TagFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_control_plane_tag_filter(&mut object_639, var_638)?;
        object_639.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_search_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserSearchCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_640) = &input.or_conditions {
        let mut array_641 = object.key("OrConditions").start_array();
        for item_642 in var_640 {
             {
                #[allow(unused_mut)]
                let mut object_643 = array_641.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_search_criteria(&mut object_643, item_642)?;
                object_643.finish();
            }
        }
        array_641.finish();
    }
    if let Some(var_644) = &input.and_conditions {
        let mut array_645 = object.key("AndConditions").start_array();
        for item_646 in var_644 {
             {
                #[allow(unused_mut)]
                let mut object_647 = array_645.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_search_criteria(&mut object_647, item_646)?;
                object_647.finish();
            }
        }
        array_645.finish();
    }
    if let Some(var_648) = &input.string_condition {
        #[allow(unused_mut)]
        let mut object_649 = object.key("StringCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_string_condition(&mut object_649, var_648)?;
        object_649.finish();
    }
    if let Some(var_650) = &input.hierarchy_group_condition {
        #[allow(unused_mut)]
        let mut object_651 = object.key("HierarchyGroupCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_group_condition(&mut object_651, var_650)?;
        object_651.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_search_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserSearchFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_652) = &input.tag_filter {
        #[allow(unused_mut)]
        let mut object_653 = object.key("TagFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_control_plane_tag_filter(&mut object_653, var_652)?;
        object_653.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_chat_message(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ChatMessage) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_654) = &input.content_type {
        object.key("ContentType").string(var_654.as_str());
    }
    if let Some(var_655) = &input.content {
        object.key("Content").string(var_655.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_participant_details(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ParticipantDetails) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_656) = &input.display_name {
        object.key("DisplayName").string(var_656.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_voice_recording_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::VoiceRecordingConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_657) = &input.voice_recording_track {
        object.key("VoiceRecordingTrack").string(var_657.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_chat_streaming_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ChatStreamingConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_658) = &input.streaming_endpoint_arn {
        object.key("StreamingEndpointArn").string(var_658.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_answer_machine_detection_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AnswerMachineDetectionConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.enable_answer_machine_detection {
        object.key("EnableAnswerMachineDetection").boolean(input.enable_answer_machine_detection);
    }
    if input.await_answer_machine_prompt {
        object.key("AwaitAnswerMachinePrompt").boolean(input.await_answer_machine_prompt);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_reference(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Reference) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_659) = &input.value {
        object.key("Value").string(var_659.as_str());
    }
    if let Some(var_660) = &input.r#type {
        object.key("Type").string(var_660.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_update_participant_role_config_channel_info(object_426: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateParticipantRoleConfigChannelInfo) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::UpdateParticipantRoleConfigChannelInfo::Chat(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_661 = object_426.key("Chat").start_object();
                crate::json_ser::serialize_structure_crate_model_chat_participant_role_config(&mut object_661, inner)?;
                object_661.finish();
            }
        },
        crate::model::UpdateParticipantRoleConfigChannelInfo::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("UpdateParticipantRoleConfigChannelInfo"))
    }
    Ok(())
}

pub fn serialize_structure_crate_model_telephony_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TelephonyConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_662) = &input.distributions {
        let mut array_663 = object.key("Distributions").start_array();
        for item_664 in var_662 {
             {
                #[allow(unused_mut)]
                let mut object_665 = array_663.value().start_object();
                crate::json_ser::serialize_structure_crate_model_distribution(&mut object_665, item_664)?;
                object_665.finish();
            }
        }
        array_663.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchy_structure_update(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HierarchyStructureUpdate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_666) = &input.level_one {
        #[allow(unused_mut)]
        let mut object_667 = object.key("LevelOne").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(&mut object_667, var_666)?;
        object_667.finish();
    }
    if let Some(var_668) = &input.level_two {
        #[allow(unused_mut)]
        let mut object_669 = object.key("LevelTwo").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(&mut object_669, var_668)?;
        object_669.finish();
    }
    if let Some(var_670) = &input.level_three {
        #[allow(unused_mut)]
        let mut object_671 = object.key("LevelThree").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(&mut object_671, var_670)?;
        object_671.finish();
    }
    if let Some(var_672) = &input.level_four {
        #[allow(unused_mut)]
        let mut object_673 = object.key("LevelFour").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(&mut object_673, var_672)?;
        object_673.finish();
    }
    if let Some(var_674) = &input.level_five {
        #[allow(unused_mut)]
        let mut object_675 = object.key("LevelFive").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(&mut object_675, var_674)?;
        object_675.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3Config) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_676) = &input.bucket_name {
        object.key("BucketName").string(var_676.as_str());
    }
    if let Some(var_677) = &input.bucket_prefix {
        object.key("BucketPrefix").string(var_677.as_str());
    }
    if let Some(var_678) = &input.encryption_config {
        #[allow(unused_mut)]
        let mut object_679 = object.key("EncryptionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_config(&mut object_679, var_678)?;
        object_679.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_video_stream_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::KinesisVideoStreamConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_680) = &input.prefix {
        object.key("Prefix").string(var_680.as_str());
    }
     {
        object.key("RetentionPeriodHours").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.retention_period_hours).into()));
    }
    if let Some(var_681) = &input.encryption_config {
        #[allow(unused_mut)]
        let mut object_682 = object.key("EncryptionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_config(&mut object_682, var_681)?;
        object_682.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_stream_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::KinesisStreamConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_683) = &input.stream_arn {
        object.key("StreamArn").string(var_683.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_firehose_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::KinesisFirehoseConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_684) = &input.firehose_arn {
        object.key("FirehoseArn").string(var_684.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hours_of_operation_time_slice(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HoursOfOperationTimeSlice) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_685) = &input.hours {
        object.key("Hours").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_685).into()));
    }
    if let Some(var_686) = &input.minutes {
        object.key("Minutes").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_686).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_quick_connect_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserQuickConnectConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_687) = &input.user_id {
        object.key("UserId").string(var_687.as_str());
    }
    if let Some(var_688) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_688.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_queue_quick_connect_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::QueueQuickConnectConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_689) = &input.queue_id {
        object.key("QueueId").string(var_689.as_str());
    }
    if let Some(var_690) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_690.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_phone_number_quick_connect_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PhoneNumberQuickConnectConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_691) = &input.phone_number {
        object.key("PhoneNumber").string(var_691.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_action_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TaskActionDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_692) = &input.name {
        object.key("Name").string(var_692.as_str());
    }
    if let Some(var_693) = &input.description {
        object.key("Description").string(var_693.as_str());
    }
    if let Some(var_694) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_694.as_str());
    }
    if let Some(var_695) = &input.references {
        #[allow(unused_mut)]
        let mut object_696 = object.key("References").start_object();
        for (key_697, value_698) in var_695 {
             {
                #[allow(unused_mut)]
                let mut object_699 = object_696.key(key_697.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_reference(&mut object_699, value_698)?;
                object_699.finish();
            }
        }
        object_696.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_event_bridge_action_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EventBridgeActionDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_700) = &input.name {
        object.key("Name").string(var_700.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_assign_contact_category_action_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AssignContactCategoryActionDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_send_notification_action_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SendNotificationActionDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_701) = &input.delivery_method {
        object.key("DeliveryMethod").string(var_701.as_str());
    }
    if let Some(var_702) = &input.subject {
        object.key("Subject").string(var_702.as_str());
    }
    if let Some(var_703) = &input.content {
        object.key("Content").string(var_703.as_str());
    }
    if let Some(var_704) = &input.content_type {
        object.key("ContentType").string(var_704.as_str());
    }
    if let Some(var_705) = &input.recipient {
        #[allow(unused_mut)]
        let mut object_706 = object.key("Recipient").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_recipient_type(&mut object_706, var_705)?;
        object_706.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_required_field_info(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RequiredFieldInfo) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_707) = &input.id {
        #[allow(unused_mut)]
        let mut object_708 = object.key("Id").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_field_identifier(&mut object_708, var_707)?;
        object_708.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_read_only_field_info(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ReadOnlyFieldInfo) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_709) = &input.id {
        #[allow(unused_mut)]
        let mut object_710 = object.key("Id").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_field_identifier(&mut object_710, var_709)?;
        object_710.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_invisible_field_info(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InvisibleFieldInfo) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_711) = &input.id {
        #[allow(unused_mut)]
        let mut object_712 = object.key("Id").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_field_identifier(&mut object_712, var_711)?;
        object_712.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_template_default_field_value(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TaskTemplateDefaultFieldValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_713) = &input.id {
        #[allow(unused_mut)]
        let mut object_714 = object.key("Id").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_field_identifier(&mut object_714, var_713)?;
        object_714.finish();
    }
    if let Some(var_715) = &input.default_value {
        object.key("DefaultValue").string(var_715.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_template_field_identifier(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TaskTemplateFieldIdentifier) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_716) = &input.name {
        object.key("Name").string(var_716.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_contact_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ContactFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_717) = &input.contact_states {
        let mut array_718 = object.key("ContactStates").start_array();
        for item_719 in var_717 {
             {
                array_718.value().string(item_719.as_str());
            }
        }
        array_718.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_threshold(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Threshold) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_720) = &input.comparison {
        object.key("Comparison").string(var_720.as_str());
    }
    if let Some(var_721) = &input.threshold_value {
        object.key("ThresholdValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_721).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_condition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StringCondition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_722) = &input.field_name {
        object.key("FieldName").string(var_722.as_str());
    }
    if let Some(var_723) = &input.value {
        object.key("Value").string(var_723.as_str());
    }
    if let Some(var_724) = &input.comparison_type {
        object.key("ComparisonType").string(var_724.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_control_plane_tag_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ControlPlaneTagFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_725) = &input.or_conditions {
        let mut array_726 = object.key("OrConditions").start_array();
        for item_727 in var_725 {
             {
                let mut array_728 = array_726.value().start_array();
                for item_729 in item_727 {
                     {
                        #[allow(unused_mut)]
                        let mut object_730 = array_728.value().start_object();
                        crate::json_ser::serialize_structure_crate_model_tag_condition(&mut object_730, item_729)?;
                        object_730.finish();
                    }
                }
                array_728.finish();
            }
        }
        array_726.finish();
    }
    if let Some(var_731) = &input.and_conditions {
        let mut array_732 = object.key("AndConditions").start_array();
        for item_733 in var_731 {
             {
                #[allow(unused_mut)]
                let mut object_734 = array_732.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_condition(&mut object_734, item_733)?;
                object_734.finish();
            }
        }
        array_732.finish();
    }
    if let Some(var_735) = &input.tag_condition {
        #[allow(unused_mut)]
        let mut object_736 = object.key("TagCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_tag_condition(&mut object_736, var_735)?;
        object_736.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchy_group_condition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HierarchyGroupCondition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_737) = &input.value {
        object.key("Value").string(var_737.as_str());
    }
    if let Some(var_738) = &input.hierarchy_group_match_type {
        object.key("HierarchyGroupMatchType").string(var_738.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_chat_participant_role_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ChatParticipantRoleConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_739) = &input.participant_timer_config_list {
        let mut array_740 = object.key("ParticipantTimerConfigList").start_array();
        for item_741 in var_739 {
             {
                #[allow(unused_mut)]
                let mut object_742 = array_740.value().start_object();
                crate::json_ser::serialize_structure_crate_model_participant_timer_configuration(&mut object_742, item_741)?;
                object_742.finish();
            }
        }
        array_740.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_distribution(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Distribution) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_743) = &input.region {
        object.key("Region").string(var_743.as_str());
    }
     {
        object.key("Percentage").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.percentage).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchy_level_update(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HierarchyLevelUpdate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_744) = &input.name {
        object.key("Name").string(var_744.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EncryptionConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_745) = &input.encryption_type {
        object.key("EncryptionType").string(var_745.as_str());
    }
    if let Some(var_746) = &input.key_id {
        object.key("KeyId").string(var_746.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_recipient_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NotificationRecipientType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_747) = &input.user_tags {
        #[allow(unused_mut)]
        let mut object_748 = object.key("UserTags").start_object();
        for (key_749, value_750) in var_747 {
             {
                object_748.key(key_749.as_str()).string(value_750.as_str());
            }
        }
        object_748.finish();
    }
    if let Some(var_751) = &input.user_ids {
        let mut array_752 = object.key("UserIds").start_array();
        for item_753 in var_751 {
             {
                array_752.value().string(item_753.as_str());
            }
        }
        array_752.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_condition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TagCondition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_754) = &input.tag_key {
        object.key("TagKey").string(var_754.as_str());
    }
    if let Some(var_755) = &input.tag_value {
        object.key("TagValue").string(var_755.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_participant_timer_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ParticipantTimerConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_756) = &input.participant_role {
        object.key("ParticipantRole").string(var_756.as_str());
    }
    if let Some(var_757) = &input.timer_type {
        object.key("TimerType").string(var_757.as_str());
    }
    if let Some(var_758) = &input.timer_value {
        #[allow(unused_mut)]
        let mut object_759 = object.key("TimerValue").start_object();
        crate::json_ser::serialize_union_crate_model_participant_timer_value(&mut object_759, var_758)?;
        object_759.finish();
    }
    Ok(())
}

pub fn serialize_union_crate_model_participant_timer_value(object_759: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ParticipantTimerValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::ParticipantTimerValue::ParticipantTimerAction(inner) => {
             {
                object_759.key("ParticipantTimerAction").string(inner.as_str());
            }
        },
        crate::model::ParticipantTimerValue::ParticipantTimerDurationInMinutes(inner) => {
             {
                object_759.key("ParticipantTimerDurationInMinutes").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*inner).into()));
            }
        },
        crate::model::ParticipantTimerValue::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("ParticipantTimerValue"))
    }
    Ok(())
}

