// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p></p>
    ConflictException(crate::error::ConflictException),
    /// <p>The request processing has failed because of an unknown error, exception, or failure.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p></p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>You have exceeded the service quota.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints specified by an Amazon Web Services service.</p>
    ValidationException(crate::error::ValidationException),
    /// 
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    /// 
    /// When logging an error from the SDK, it is recommended that you either wrap the error in
    /// [`DisplayErrorContext`](crate::types::DisplayErrorContext), use another
    /// error reporter library that visits the error's cause/source chain, or call
    /// [`Error::source`](std::error::Error::source) for more details about the underlying cause.
    /// 
    Unhandled(crate::error::Unhandled)
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f)
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEarthObservationJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteEarthObservationJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteEarthObservationJobError> for Error {
    fn from(err: crate::error::DeleteEarthObservationJobError) -> Self {
        match err.kind {
            crate::error::DeleteEarthObservationJobErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteEarthObservationJobErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteEarthObservationJobErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteEarthObservationJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteEarthObservationJobErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteEarthObservationJobErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteEarthObservationJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVectorEnrichmentJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteVectorEnrichmentJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteVectorEnrichmentJobError> for Error {
    fn from(err: crate::error::DeleteVectorEnrichmentJobError) -> Self {
        match err.kind {
            crate::error::DeleteVectorEnrichmentJobErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteVectorEnrichmentJobErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteVectorEnrichmentJobErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteVectorEnrichmentJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteVectorEnrichmentJobErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteVectorEnrichmentJobErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteVectorEnrichmentJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ExportEarthObservationJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ExportEarthObservationJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ExportEarthObservationJobError> for Error {
    fn from(err: crate::error::ExportEarthObservationJobError) -> Self {
        match err.kind {
            crate::error::ExportEarthObservationJobErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ExportEarthObservationJobErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::ExportEarthObservationJobErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ExportEarthObservationJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ExportEarthObservationJobErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::ExportEarthObservationJobErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ExportEarthObservationJobErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ExportEarthObservationJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ExportVectorEnrichmentJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ExportVectorEnrichmentJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ExportVectorEnrichmentJobError> for Error {
    fn from(err: crate::error::ExportVectorEnrichmentJobError) -> Self {
        match err.kind {
            crate::error::ExportVectorEnrichmentJobErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ExportVectorEnrichmentJobErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::ExportVectorEnrichmentJobErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ExportVectorEnrichmentJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ExportVectorEnrichmentJobErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::ExportVectorEnrichmentJobErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ExportVectorEnrichmentJobErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ExportVectorEnrichmentJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEarthObservationJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetEarthObservationJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetEarthObservationJobError> for Error {
    fn from(err: crate::error::GetEarthObservationJobError) -> Self {
        match err.kind {
            crate::error::GetEarthObservationJobErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetEarthObservationJobErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetEarthObservationJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetEarthObservationJobErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetEarthObservationJobErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetEarthObservationJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRasterDataCollectionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRasterDataCollectionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetRasterDataCollectionError> for Error {
    fn from(err: crate::error::GetRasterDataCollectionError) -> Self {
        match err.kind {
            crate::error::GetRasterDataCollectionErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetRasterDataCollectionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetRasterDataCollectionErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetRasterDataCollectionErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetRasterDataCollectionErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetRasterDataCollectionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTileError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetTileError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetTileError> for Error {
    fn from(err: crate::error::GetTileError) -> Self {
        match err.kind {
            crate::error::GetTileErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetTileErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetTileErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetTileErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetTileErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetTileErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVectorEnrichmentJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetVectorEnrichmentJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetVectorEnrichmentJobError> for Error {
    fn from(err: crate::error::GetVectorEnrichmentJobError) -> Self {
        match err.kind {
            crate::error::GetVectorEnrichmentJobErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetVectorEnrichmentJobErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetVectorEnrichmentJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetVectorEnrichmentJobErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetVectorEnrichmentJobErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetVectorEnrichmentJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEarthObservationJobsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListEarthObservationJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListEarthObservationJobsError> for Error {
    fn from(err: crate::error::ListEarthObservationJobsError) -> Self {
        match err.kind {
            crate::error::ListEarthObservationJobsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListEarthObservationJobsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListEarthObservationJobsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListEarthObservationJobsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListEarthObservationJobsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListEarthObservationJobsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRasterDataCollectionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListRasterDataCollectionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListRasterDataCollectionsError> for Error {
    fn from(err: crate::error::ListRasterDataCollectionsError) -> Self {
        match err.kind {
            crate::error::ListRasterDataCollectionsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListRasterDataCollectionsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListRasterDataCollectionsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListRasterDataCollectionsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListRasterDataCollectionsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListRasterDataCollectionsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err.kind {
            crate::error::ListTagsForResourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListTagsForResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListTagsForResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListTagsForResourceErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListTagsForResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVectorEnrichmentJobsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListVectorEnrichmentJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListVectorEnrichmentJobsError> for Error {
    fn from(err: crate::error::ListVectorEnrichmentJobsError) -> Self {
        match err.kind {
            crate::error::ListVectorEnrichmentJobsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListVectorEnrichmentJobsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListVectorEnrichmentJobsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListVectorEnrichmentJobsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListVectorEnrichmentJobsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListVectorEnrichmentJobsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchRasterDataCollectionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SearchRasterDataCollectionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::SearchRasterDataCollectionError> for Error {
    fn from(err: crate::error::SearchRasterDataCollectionError) -> Self {
        match err.kind {
            crate::error::SearchRasterDataCollectionErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::SearchRasterDataCollectionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::SearchRasterDataCollectionErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::SearchRasterDataCollectionErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::SearchRasterDataCollectionErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::SearchRasterDataCollectionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartEarthObservationJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartEarthObservationJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StartEarthObservationJobError> for Error {
    fn from(err: crate::error::StartEarthObservationJobError) -> Self {
        match err.kind {
            crate::error::StartEarthObservationJobErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StartEarthObservationJobErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::StartEarthObservationJobErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StartEarthObservationJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StartEarthObservationJobErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::StartEarthObservationJobErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::StartEarthObservationJobErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StartEarthObservationJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartVectorEnrichmentJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartVectorEnrichmentJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StartVectorEnrichmentJobError> for Error {
    fn from(err: crate::error::StartVectorEnrichmentJobError) -> Self {
        match err.kind {
            crate::error::StartVectorEnrichmentJobErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StartVectorEnrichmentJobErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::StartVectorEnrichmentJobErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StartVectorEnrichmentJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StartVectorEnrichmentJobErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::StartVectorEnrichmentJobErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::StartVectorEnrichmentJobErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StartVectorEnrichmentJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopEarthObservationJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopEarthObservationJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StopEarthObservationJobError> for Error {
    fn from(err: crate::error::StopEarthObservationJobError) -> Self {
        match err.kind {
            crate::error::StopEarthObservationJobErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StopEarthObservationJobErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::StopEarthObservationJobErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StopEarthObservationJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StopEarthObservationJobErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::StopEarthObservationJobErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StopEarthObservationJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopVectorEnrichmentJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopVectorEnrichmentJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StopVectorEnrichmentJobError> for Error {
    fn from(err: crate::error::StopVectorEnrichmentJobError) -> Self {
        match err.kind {
            crate::error::StopVectorEnrichmentJobErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StopVectorEnrichmentJobErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::StopVectorEnrichmentJobErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StopVectorEnrichmentJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StopVectorEnrichmentJobErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::StopVectorEnrichmentJobErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StopVectorEnrichmentJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err.kind {
            crate::error::TagResourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::TagResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::TagResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::TagResourceErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::TagResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err.kind {
            crate::error::UntagResourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UntagResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UntagResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UntagResourceErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UntagResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl std::error::Error for Error {}

