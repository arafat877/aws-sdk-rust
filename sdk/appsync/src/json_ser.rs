// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_api_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateApiInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.api_id {
        object.key("apiId").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_api_cache_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateApiCacheInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2) = &input.api_caching_behavior {
        object.key("apiCachingBehavior").string(var_2.as_str());
    }
    if input.at_rest_encryption_enabled {
        object.key("atRestEncryptionEnabled").boolean(input.at_rest_encryption_enabled);
    }
    if input.transit_encryption_enabled {
        object.key("transitEncryptionEnabled").boolean(input.transit_encryption_enabled);
    }
     {
        object.key("ttl").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.ttl).into()));
    }
    if let Some(var_3) = &input.r#type {
        object.key("type").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_api_key_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateApiKeyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_4) = &input.description {
        object.key("description").string(var_4.as_str());
    }
    if input.expires != 0 {
        object.key("expires").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.expires).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_source_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateDataSourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_5) = &input.description {
        object.key("description").string(var_5.as_str());
    }
    if let Some(var_6) = &input.dynamodb_config {
        #[allow(unused_mut)]
        let mut object_7 = object.key("dynamodbConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_dynamodb_data_source_config(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.elasticsearch_config {
        #[allow(unused_mut)]
        let mut object_9 = object.key("elasticsearchConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_elasticsearch_data_source_config(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.http_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("httpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_http_data_source_config(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.lambda_config {
        #[allow(unused_mut)]
        let mut object_13 = object.key("lambdaConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_data_source_config(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.name {
        object.key("name").string(var_14.as_str());
    }
    if let Some(var_15) = &input.open_search_service_config {
        #[allow(unused_mut)]
        let mut object_16 = object.key("openSearchServiceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_open_search_service_data_source_config(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.relational_database_config {
        #[allow(unused_mut)]
        let mut object_18 = object.key("relationalDatabaseConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_relational_database_data_source_config(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.service_role_arn {
        object.key("serviceRoleArn").string(var_19.as_str());
    }
    if let Some(var_20) = &input.r#type {
        object.key("type").string(var_20.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_domain_name_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateDomainNameInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_21) = &input.certificate_arn {
        object.key("certificateArn").string(var_21.as_str());
    }
    if let Some(var_22) = &input.description {
        object.key("description").string(var_22.as_str());
    }
    if let Some(var_23) = &input.domain_name {
        object.key("domainName").string(var_23.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_function_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateFunctionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_24) = &input.code {
        object.key("code").string(var_24.as_str());
    }
    if let Some(var_25) = &input.data_source_name {
        object.key("dataSourceName").string(var_25.as_str());
    }
    if let Some(var_26) = &input.description {
        object.key("description").string(var_26.as_str());
    }
    if let Some(var_27) = &input.function_version {
        object.key("functionVersion").string(var_27.as_str());
    }
    if input.max_batch_size != 0 {
        object.key("maxBatchSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_batch_size).into()));
    }
    if let Some(var_28) = &input.name {
        object.key("name").string(var_28.as_str());
    }
    if let Some(var_29) = &input.request_mapping_template {
        object.key("requestMappingTemplate").string(var_29.as_str());
    }
    if let Some(var_30) = &input.response_mapping_template {
        object.key("responseMappingTemplate").string(var_30.as_str());
    }
    if let Some(var_31) = &input.runtime {
        #[allow(unused_mut)]
        let mut object_32 = object.key("runtime").start_object();
        crate::json_ser::serialize_structure_crate_model_app_sync_runtime(&mut object_32, var_31)?;
        object_32.finish();
    }
    if let Some(var_33) = &input.sync_config {
        #[allow(unused_mut)]
        let mut object_34 = object.key("syncConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_sync_config(&mut object_34, var_33)?;
        object_34.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_graphql_api_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateGraphqlApiInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_35) = &input.additional_authentication_providers {
        let mut array_36 = object.key("additionalAuthenticationProviders").start_array();
        for item_37 in var_35 {
             {
                #[allow(unused_mut)]
                let mut object_38 = array_36.value().start_object();
                crate::json_ser::serialize_structure_crate_model_additional_authentication_provider(&mut object_38, item_37)?;
                object_38.finish();
            }
        }
        array_36.finish();
    }
    if let Some(var_39) = &input.authentication_type {
        object.key("authenticationType").string(var_39.as_str());
    }
    if let Some(var_40) = &input.lambda_authorizer_config {
        #[allow(unused_mut)]
        let mut object_41 = object.key("lambdaAuthorizerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_authorizer_config(&mut object_41, var_40)?;
        object_41.finish();
    }
    if let Some(var_42) = &input.log_config {
        #[allow(unused_mut)]
        let mut object_43 = object.key("logConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_log_config(&mut object_43, var_42)?;
        object_43.finish();
    }
    if let Some(var_44) = &input.name {
        object.key("name").string(var_44.as_str());
    }
    if let Some(var_45) = &input.open_id_connect_config {
        #[allow(unused_mut)]
        let mut object_46 = object.key("openIDConnectConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_open_id_connect_config(&mut object_46, var_45)?;
        object_46.finish();
    }
    if let Some(var_47) = &input.tags {
        #[allow(unused_mut)]
        let mut object_48 = object.key("tags").start_object();
        for (key_49, value_50) in var_47 {
             {
                object_48.key(key_49.as_str()).string(value_50.as_str());
            }
        }
        object_48.finish();
    }
    if let Some(var_51) = &input.user_pool_config {
        #[allow(unused_mut)]
        let mut object_52 = object.key("userPoolConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_pool_config(&mut object_52, var_51)?;
        object_52.finish();
    }
    if input.xray_enabled {
        object.key("xrayEnabled").boolean(input.xray_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resolver_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateResolverInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_53) = &input.caching_config {
        #[allow(unused_mut)]
        let mut object_54 = object.key("cachingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_caching_config(&mut object_54, var_53)?;
        object_54.finish();
    }
    if let Some(var_55) = &input.code {
        object.key("code").string(var_55.as_str());
    }
    if let Some(var_56) = &input.data_source_name {
        object.key("dataSourceName").string(var_56.as_str());
    }
    if let Some(var_57) = &input.field_name {
        object.key("fieldName").string(var_57.as_str());
    }
    if let Some(var_58) = &input.kind {
        object.key("kind").string(var_58.as_str());
    }
    if input.max_batch_size != 0 {
        object.key("maxBatchSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_batch_size).into()));
    }
    if let Some(var_59) = &input.pipeline_config {
        #[allow(unused_mut)]
        let mut object_60 = object.key("pipelineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_pipeline_config(&mut object_60, var_59)?;
        object_60.finish();
    }
    if let Some(var_61) = &input.request_mapping_template {
        object.key("requestMappingTemplate").string(var_61.as_str());
    }
    if let Some(var_62) = &input.response_mapping_template {
        object.key("responseMappingTemplate").string(var_62.as_str());
    }
    if let Some(var_63) = &input.runtime {
        #[allow(unused_mut)]
        let mut object_64 = object.key("runtime").start_object();
        crate::json_ser::serialize_structure_crate_model_app_sync_runtime(&mut object_64, var_63)?;
        object_64.finish();
    }
    if let Some(var_65) = &input.sync_config {
        #[allow(unused_mut)]
        let mut object_66 = object.key("syncConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_sync_config(&mut object_66, var_65)?;
        object_66.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_type_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateTypeInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_67) = &input.definition {
        object.key("definition").string(var_67.as_str());
    }
    if let Some(var_68) = &input.format {
        object.key("format").string(var_68.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_evaluate_code_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::EvaluateCodeInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_69) = &input.code {
        object.key("code").string(var_69.as_str());
    }
    if let Some(var_70) = &input.context {
        object.key("context").string(var_70.as_str());
    }
    if let Some(var_71) = &input.function {
        object.key("function").string(var_71.as_str());
    }
    if let Some(var_72) = &input.runtime {
        #[allow(unused_mut)]
        let mut object_73 = object.key("runtime").start_object();
        crate::json_ser::serialize_structure_crate_model_app_sync_runtime(&mut object_73, var_72)?;
        object_73.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_evaluate_mapping_template_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::EvaluateMappingTemplateInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_74) = &input.context {
        object.key("context").string(var_74.as_str());
    }
    if let Some(var_75) = &input.template {
        object.key("template").string(var_75.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_schema_creation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartSchemaCreationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_76) = &input.definition {
        object.key("definition").string_unchecked(&aws_smithy_types::base64::encode(var_76));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_77) = &input.tags {
        #[allow(unused_mut)]
        let mut object_78 = object.key("tags").start_object();
        for (key_79, value_80) in var_77 {
             {
                object_78.key(key_79.as_str()).string(value_80.as_str());
            }
        }
        object_78.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_api_cache_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateApiCacheInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_81) = &input.api_caching_behavior {
        object.key("apiCachingBehavior").string(var_81.as_str());
    }
     {
        object.key("ttl").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.ttl).into()));
    }
    if let Some(var_82) = &input.r#type {
        object.key("type").string(var_82.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_api_key_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateApiKeyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_83) = &input.description {
        object.key("description").string(var_83.as_str());
    }
    if input.expires != 0 {
        object.key("expires").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.expires).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_source_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDataSourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_84) = &input.description {
        object.key("description").string(var_84.as_str());
    }
    if let Some(var_85) = &input.dynamodb_config {
        #[allow(unused_mut)]
        let mut object_86 = object.key("dynamodbConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_dynamodb_data_source_config(&mut object_86, var_85)?;
        object_86.finish();
    }
    if let Some(var_87) = &input.elasticsearch_config {
        #[allow(unused_mut)]
        let mut object_88 = object.key("elasticsearchConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_elasticsearch_data_source_config(&mut object_88, var_87)?;
        object_88.finish();
    }
    if let Some(var_89) = &input.http_config {
        #[allow(unused_mut)]
        let mut object_90 = object.key("httpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_http_data_source_config(&mut object_90, var_89)?;
        object_90.finish();
    }
    if let Some(var_91) = &input.lambda_config {
        #[allow(unused_mut)]
        let mut object_92 = object.key("lambdaConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_data_source_config(&mut object_92, var_91)?;
        object_92.finish();
    }
    if let Some(var_93) = &input.open_search_service_config {
        #[allow(unused_mut)]
        let mut object_94 = object.key("openSearchServiceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_open_search_service_data_source_config(&mut object_94, var_93)?;
        object_94.finish();
    }
    if let Some(var_95) = &input.relational_database_config {
        #[allow(unused_mut)]
        let mut object_96 = object.key("relationalDatabaseConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_relational_database_data_source_config(&mut object_96, var_95)?;
        object_96.finish();
    }
    if let Some(var_97) = &input.service_role_arn {
        object.key("serviceRoleArn").string(var_97.as_str());
    }
    if let Some(var_98) = &input.r#type {
        object.key("type").string(var_98.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_domain_name_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDomainNameInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_99) = &input.description {
        object.key("description").string(var_99.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_function_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFunctionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_100) = &input.code {
        object.key("code").string(var_100.as_str());
    }
    if let Some(var_101) = &input.data_source_name {
        object.key("dataSourceName").string(var_101.as_str());
    }
    if let Some(var_102) = &input.description {
        object.key("description").string(var_102.as_str());
    }
    if let Some(var_103) = &input.function_version {
        object.key("functionVersion").string(var_103.as_str());
    }
    if input.max_batch_size != 0 {
        object.key("maxBatchSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_batch_size).into()));
    }
    if let Some(var_104) = &input.name {
        object.key("name").string(var_104.as_str());
    }
    if let Some(var_105) = &input.request_mapping_template {
        object.key("requestMappingTemplate").string(var_105.as_str());
    }
    if let Some(var_106) = &input.response_mapping_template {
        object.key("responseMappingTemplate").string(var_106.as_str());
    }
    if let Some(var_107) = &input.runtime {
        #[allow(unused_mut)]
        let mut object_108 = object.key("runtime").start_object();
        crate::json_ser::serialize_structure_crate_model_app_sync_runtime(&mut object_108, var_107)?;
        object_108.finish();
    }
    if let Some(var_109) = &input.sync_config {
        #[allow(unused_mut)]
        let mut object_110 = object.key("syncConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_sync_config(&mut object_110, var_109)?;
        object_110.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_graphql_api_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateGraphqlApiInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_111) = &input.additional_authentication_providers {
        let mut array_112 = object.key("additionalAuthenticationProviders").start_array();
        for item_113 in var_111 {
             {
                #[allow(unused_mut)]
                let mut object_114 = array_112.value().start_object();
                crate::json_ser::serialize_structure_crate_model_additional_authentication_provider(&mut object_114, item_113)?;
                object_114.finish();
            }
        }
        array_112.finish();
    }
    if let Some(var_115) = &input.authentication_type {
        object.key("authenticationType").string(var_115.as_str());
    }
    if let Some(var_116) = &input.lambda_authorizer_config {
        #[allow(unused_mut)]
        let mut object_117 = object.key("lambdaAuthorizerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_authorizer_config(&mut object_117, var_116)?;
        object_117.finish();
    }
    if let Some(var_118) = &input.log_config {
        #[allow(unused_mut)]
        let mut object_119 = object.key("logConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_log_config(&mut object_119, var_118)?;
        object_119.finish();
    }
    if let Some(var_120) = &input.name {
        object.key("name").string(var_120.as_str());
    }
    if let Some(var_121) = &input.open_id_connect_config {
        #[allow(unused_mut)]
        let mut object_122 = object.key("openIDConnectConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_open_id_connect_config(&mut object_122, var_121)?;
        object_122.finish();
    }
    if let Some(var_123) = &input.user_pool_config {
        #[allow(unused_mut)]
        let mut object_124 = object.key("userPoolConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_pool_config(&mut object_124, var_123)?;
        object_124.finish();
    }
    if input.xray_enabled {
        object.key("xrayEnabled").boolean(input.xray_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resolver_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateResolverInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_125) = &input.caching_config {
        #[allow(unused_mut)]
        let mut object_126 = object.key("cachingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_caching_config(&mut object_126, var_125)?;
        object_126.finish();
    }
    if let Some(var_127) = &input.code {
        object.key("code").string(var_127.as_str());
    }
    if let Some(var_128) = &input.data_source_name {
        object.key("dataSourceName").string(var_128.as_str());
    }
    if let Some(var_129) = &input.kind {
        object.key("kind").string(var_129.as_str());
    }
    if input.max_batch_size != 0 {
        object.key("maxBatchSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_batch_size).into()));
    }
    if let Some(var_130) = &input.pipeline_config {
        #[allow(unused_mut)]
        let mut object_131 = object.key("pipelineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_pipeline_config(&mut object_131, var_130)?;
        object_131.finish();
    }
    if let Some(var_132) = &input.request_mapping_template {
        object.key("requestMappingTemplate").string(var_132.as_str());
    }
    if let Some(var_133) = &input.response_mapping_template {
        object.key("responseMappingTemplate").string(var_133.as_str());
    }
    if let Some(var_134) = &input.runtime {
        #[allow(unused_mut)]
        let mut object_135 = object.key("runtime").start_object();
        crate::json_ser::serialize_structure_crate_model_app_sync_runtime(&mut object_135, var_134)?;
        object_135.finish();
    }
    if let Some(var_136) = &input.sync_config {
        #[allow(unused_mut)]
        let mut object_137 = object.key("syncConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_sync_config(&mut object_137, var_136)?;
        object_137.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_type_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateTypeInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_138) = &input.definition {
        object.key("definition").string(var_138.as_str());
    }
    if let Some(var_139) = &input.format {
        object.key("format").string(var_139.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamodb_data_source_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DynamodbDataSourceConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_140) = &input.table_name {
        object.key("tableName").string(var_140.as_str());
    }
    if let Some(var_141) = &input.aws_region {
        object.key("awsRegion").string(var_141.as_str());
    }
    if input.use_caller_credentials {
        object.key("useCallerCredentials").boolean(input.use_caller_credentials);
    }
    if let Some(var_142) = &input.delta_sync_config {
        #[allow(unused_mut)]
        let mut object_143 = object.key("deltaSyncConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_delta_sync_config(&mut object_143, var_142)?;
        object_143.finish();
    }
    if input.versioned {
        object.key("versioned").boolean(input.versioned);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_elasticsearch_data_source_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ElasticsearchDataSourceConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_144) = &input.endpoint {
        object.key("endpoint").string(var_144.as_str());
    }
    if let Some(var_145) = &input.aws_region {
        object.key("awsRegion").string(var_145.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_data_source_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HttpDataSourceConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_146) = &input.endpoint {
        object.key("endpoint").string(var_146.as_str());
    }
    if let Some(var_147) = &input.authorization_config {
        #[allow(unused_mut)]
        let mut object_148 = object.key("authorizationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_authorization_config(&mut object_148, var_147)?;
        object_148.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_data_source_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LambdaDataSourceConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_149) = &input.lambda_function_arn {
        object.key("lambdaFunctionArn").string(var_149.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_open_search_service_data_source_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OpenSearchServiceDataSourceConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_150) = &input.endpoint {
        object.key("endpoint").string(var_150.as_str());
    }
    if let Some(var_151) = &input.aws_region {
        object.key("awsRegion").string(var_151.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relational_database_data_source_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RelationalDatabaseDataSourceConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_152) = &input.relational_database_source_type {
        object.key("relationalDatabaseSourceType").string(var_152.as_str());
    }
    if let Some(var_153) = &input.rds_http_endpoint_config {
        #[allow(unused_mut)]
        let mut object_154 = object.key("rdsHttpEndpointConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_rds_http_endpoint_config(&mut object_154, var_153)?;
        object_154.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_app_sync_runtime(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AppSyncRuntime) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_155) = &input.name {
        object.key("name").string(var_155.as_str());
    }
    if let Some(var_156) = &input.runtime_version {
        object.key("runtimeVersion").string(var_156.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sync_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SyncConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_157) = &input.conflict_handler {
        object.key("conflictHandler").string(var_157.as_str());
    }
    if let Some(var_158) = &input.conflict_detection {
        object.key("conflictDetection").string(var_158.as_str());
    }
    if let Some(var_159) = &input.lambda_conflict_handler_config {
        #[allow(unused_mut)]
        let mut object_160 = object.key("lambdaConflictHandlerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_conflict_handler_config(&mut object_160, var_159)?;
        object_160.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_additional_authentication_provider(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AdditionalAuthenticationProvider) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_161) = &input.authentication_type {
        object.key("authenticationType").string(var_161.as_str());
    }
    if let Some(var_162) = &input.open_id_connect_config {
        #[allow(unused_mut)]
        let mut object_163 = object.key("openIDConnectConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_open_id_connect_config(&mut object_163, var_162)?;
        object_163.finish();
    }
    if let Some(var_164) = &input.user_pool_config {
        #[allow(unused_mut)]
        let mut object_165 = object.key("userPoolConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cognito_user_pool_config(&mut object_165, var_164)?;
        object_165.finish();
    }
    if let Some(var_166) = &input.lambda_authorizer_config {
        #[allow(unused_mut)]
        let mut object_167 = object.key("lambdaAuthorizerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_authorizer_config(&mut object_167, var_166)?;
        object_167.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_authorizer_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LambdaAuthorizerConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.authorizer_result_ttl_in_seconds != 0 {
        object.key("authorizerResultTtlInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.authorizer_result_ttl_in_seconds).into()));
    }
    if let Some(var_168) = &input.authorizer_uri {
        object.key("authorizerUri").string(var_168.as_str());
    }
    if let Some(var_169) = &input.identity_validation_expression {
        object.key("identityValidationExpression").string(var_169.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_log_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LogConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_170) = &input.field_log_level {
        object.key("fieldLogLevel").string(var_170.as_str());
    }
    if let Some(var_171) = &input.cloud_watch_logs_role_arn {
        object.key("cloudWatchLogsRoleArn").string(var_171.as_str());
    }
    if input.exclude_verbose_content {
        object.key("excludeVerboseContent").boolean(input.exclude_verbose_content);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_open_id_connect_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OpenIdConnectConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_172) = &input.issuer {
        object.key("issuer").string(var_172.as_str());
    }
    if let Some(var_173) = &input.client_id {
        object.key("clientId").string(var_173.as_str());
    }
    if input.iat_ttl != 0 {
        object.key("iatTTL").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.iat_ttl).into()));
    }
    if input.auth_ttl != 0 {
        object.key("authTTL").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.auth_ttl).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_pool_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserPoolConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_174) = &input.user_pool_id {
        object.key("userPoolId").string(var_174.as_str());
    }
    if let Some(var_175) = &input.aws_region {
        object.key("awsRegion").string(var_175.as_str());
    }
    if let Some(var_176) = &input.default_action {
        object.key("defaultAction").string(var_176.as_str());
    }
    if let Some(var_177) = &input.app_id_client_regex {
        object.key("appIdClientRegex").string(var_177.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_caching_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CachingConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("ttl").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.ttl).into()));
    }
    if let Some(var_178) = &input.caching_keys {
        let mut array_179 = object.key("cachingKeys").start_array();
        for item_180 in var_178 {
             {
                array_179.value().string(item_180.as_str());
            }
        }
        array_179.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_pipeline_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PipelineConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_181) = &input.functions {
        let mut array_182 = object.key("functions").start_array();
        for item_183 in var_181 {
             {
                array_182.value().string(item_183.as_str());
            }
        }
        array_182.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delta_sync_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DeltaSyncConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.base_table_ttl != 0 {
        object.key("baseTableTTL").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.base_table_ttl).into()));
    }
    if let Some(var_184) = &input.delta_sync_table_name {
        object.key("deltaSyncTableName").string(var_184.as_str());
    }
    if input.delta_sync_table_ttl != 0 {
        object.key("deltaSyncTableTTL").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.delta_sync_table_ttl).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_authorization_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AuthorizationConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_185) = &input.authorization_type {
        object.key("authorizationType").string(var_185.as_str());
    }
    if let Some(var_186) = &input.aws_iam_config {
        #[allow(unused_mut)]
        let mut object_187 = object.key("awsIamConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_config(&mut object_187, var_186)?;
        object_187.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rds_http_endpoint_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RdsHttpEndpointConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_188) = &input.aws_region {
        object.key("awsRegion").string(var_188.as_str());
    }
    if let Some(var_189) = &input.db_cluster_identifier {
        object.key("dbClusterIdentifier").string(var_189.as_str());
    }
    if let Some(var_190) = &input.database_name {
        object.key("databaseName").string(var_190.as_str());
    }
    if let Some(var_191) = &input.schema {
        object.key("schema").string(var_191.as_str());
    }
    if let Some(var_192) = &input.aws_secret_store_arn {
        object.key("awsSecretStoreArn").string(var_192.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_conflict_handler_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LambdaConflictHandlerConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_193) = &input.lambda_conflict_handler_arn {
        object.key("lambdaConflictHandlerArn").string(var_193.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cognito_user_pool_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CognitoUserPoolConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_194) = &input.user_pool_id {
        object.key("userPoolId").string(var_194.as_str());
    }
    if let Some(var_195) = &input.aws_region {
        object.key("awsRegion").string(var_195.as_str());
    }
    if let Some(var_196) = &input.app_id_client_regex {
        object.key("appIdClientRegex").string(var_196.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AwsIamConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_197) = &input.signing_region {
        object.key("signingRegion").string(var_197.as_str());
    }
    if let Some(var_198) = &input.signing_service_name {
        object.key("signingServiceName").string(var_198.as_str());
    }
    Ok(())
}

