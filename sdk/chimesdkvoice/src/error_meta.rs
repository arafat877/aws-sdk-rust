// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    #[allow(missing_docs)] // documentation missing in model
    AccessDeniedException(crate::error::AccessDeniedException),
    #[allow(missing_docs)] // documentation missing in model
    BadRequestException(crate::error::BadRequestException),
    #[allow(missing_docs)] // documentation missing in model
    ConflictException(crate::error::ConflictException),
    #[allow(missing_docs)] // documentation missing in model
    ForbiddenException(crate::error::ForbiddenException),
    #[allow(missing_docs)] // documentation missing in model
    NotFoundException(crate::error::NotFoundException),
    #[allow(missing_docs)] // documentation missing in model
    ResourceLimitExceededException(crate::error::ResourceLimitExceededException),
    #[allow(missing_docs)] // documentation missing in model
    ServiceFailureException(crate::error::ServiceFailureException),
    #[allow(missing_docs)] // documentation missing in model
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    #[allow(missing_docs)] // documentation missing in model
    ThrottledClientException(crate::error::ThrottledClientException),
    #[allow(missing_docs)] // documentation missing in model
    UnauthorizedClientException(crate::error::UnauthorizedClientException),
    /// 
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    /// 
    /// When logging an error from the SDK, it is recommended that you either wrap the error in
    /// [`DisplayErrorContext`](crate::types::DisplayErrorContext), use another
    /// error reporter library that visits the error's cause/source chain, or call
    /// [`Error::source`](std::error::Error::source) for more details about the underlying cause.
    /// 
    Unhandled(crate::error::Unhandled)
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ResourceLimitExceededException(inner) => inner.fmt(f),
            Error::ServiceFailureException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottledClientException(inner) => inner.fmt(f),
            Error::UnauthorizedClientException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f)
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociatePhoneNumbersWithVoiceConnectorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AssociatePhoneNumbersWithVoiceConnectorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::AssociatePhoneNumbersWithVoiceConnectorError> for Error {
    fn from(err: crate::error::AssociatePhoneNumbersWithVoiceConnectorError) -> Self {
        match err.kind {
            crate::error::AssociatePhoneNumbersWithVoiceConnectorErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError) -> Self {
        match err.kind {
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDeletePhoneNumberError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BatchDeletePhoneNumberError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::BatchDeletePhoneNumberError> for Error {
    fn from(err: crate::error::BatchDeletePhoneNumberError) -> Self {
        match err.kind {
            crate::error::BatchDeletePhoneNumberErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::BatchDeletePhoneNumberErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::BatchDeletePhoneNumberErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::BatchDeletePhoneNumberErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::BatchDeletePhoneNumberErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::BatchDeletePhoneNumberErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::BatchDeletePhoneNumberErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::BatchDeletePhoneNumberErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchUpdatePhoneNumberError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BatchUpdatePhoneNumberError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::BatchUpdatePhoneNumberError> for Error {
    fn from(err: crate::error::BatchUpdatePhoneNumberError) -> Self {
        match err.kind {
            crate::error::BatchUpdatePhoneNumberErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::BatchUpdatePhoneNumberErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::BatchUpdatePhoneNumberErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::BatchUpdatePhoneNumberErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::BatchUpdatePhoneNumberErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::BatchUpdatePhoneNumberErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::BatchUpdatePhoneNumberErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::BatchUpdatePhoneNumberErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePhoneNumberOrderError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreatePhoneNumberOrderError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreatePhoneNumberOrderError> for Error {
    fn from(err: crate::error::CreatePhoneNumberOrderError) -> Self {
        match err.kind {
            crate::error::CreatePhoneNumberOrderErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreatePhoneNumberOrderErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::CreatePhoneNumberOrderErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::CreatePhoneNumberOrderErrorKind::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::CreatePhoneNumberOrderErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::CreatePhoneNumberOrderErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::CreatePhoneNumberOrderErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::CreatePhoneNumberOrderErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::CreatePhoneNumberOrderErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateProxySessionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateProxySessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateProxySessionError> for Error {
    fn from(err: crate::error::CreateProxySessionError) -> Self {
        match err.kind {
            crate::error::CreateProxySessionErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::CreateProxySessionErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::CreateProxySessionErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::CreateProxySessionErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::CreateProxySessionErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::CreateProxySessionErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::CreateProxySessionErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::CreateProxySessionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSipMediaApplicationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSipMediaApplicationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateSipMediaApplicationError> for Error {
    fn from(err: crate::error::CreateSipMediaApplicationError) -> Self {
        match err.kind {
            crate::error::CreateSipMediaApplicationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateSipMediaApplicationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::CreateSipMediaApplicationErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateSipMediaApplicationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::CreateSipMediaApplicationErrorKind::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::CreateSipMediaApplicationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::CreateSipMediaApplicationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::CreateSipMediaApplicationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::CreateSipMediaApplicationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::CreateSipMediaApplicationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSipMediaApplicationCallError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSipMediaApplicationCallError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateSipMediaApplicationCallError> for Error {
    fn from(err: crate::error::CreateSipMediaApplicationCallError) -> Self {
        match err.kind {
            crate::error::CreateSipMediaApplicationCallErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateSipMediaApplicationCallErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::CreateSipMediaApplicationCallErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::CreateSipMediaApplicationCallErrorKind::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::CreateSipMediaApplicationCallErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::CreateSipMediaApplicationCallErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::CreateSipMediaApplicationCallErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::CreateSipMediaApplicationCallErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::CreateSipMediaApplicationCallErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSipRuleError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSipRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateSipRuleError> for Error {
    fn from(err: crate::error::CreateSipRuleError) -> Self {
        match err.kind {
            crate::error::CreateSipRuleErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateSipRuleErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::CreateSipRuleErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateSipRuleErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::CreateSipRuleErrorKind::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::CreateSipRuleErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::CreateSipRuleErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::CreateSipRuleErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::CreateSipRuleErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::CreateSipRuleErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVoiceConnectorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateVoiceConnectorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateVoiceConnectorError> for Error {
    fn from(err: crate::error::CreateVoiceConnectorError) -> Self {
        match err.kind {
            crate::error::CreateVoiceConnectorErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateVoiceConnectorErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::CreateVoiceConnectorErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::CreateVoiceConnectorErrorKind::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::CreateVoiceConnectorErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::CreateVoiceConnectorErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::CreateVoiceConnectorErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::CreateVoiceConnectorErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::CreateVoiceConnectorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVoiceConnectorGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateVoiceConnectorGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::CreateVoiceConnectorGroupError) -> Self {
        match err.kind {
            crate::error::CreateVoiceConnectorGroupErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateVoiceConnectorGroupErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::CreateVoiceConnectorGroupErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::CreateVoiceConnectorGroupErrorKind::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::CreateVoiceConnectorGroupErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::CreateVoiceConnectorGroupErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::CreateVoiceConnectorGroupErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::CreateVoiceConnectorGroupErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::CreateVoiceConnectorGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePhoneNumberError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeletePhoneNumberError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeletePhoneNumberError> for Error {
    fn from(err: crate::error::DeletePhoneNumberError) -> Self {
        match err.kind {
            crate::error::DeletePhoneNumberErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeletePhoneNumberErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeletePhoneNumberErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeletePhoneNumberErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeletePhoneNumberErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeletePhoneNumberErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeletePhoneNumberErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeletePhoneNumberErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteProxySessionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteProxySessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteProxySessionError> for Error {
    fn from(err: crate::error::DeleteProxySessionError) -> Self {
        match err.kind {
            crate::error::DeleteProxySessionErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteProxySessionErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteProxySessionErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteProxySessionErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteProxySessionErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteProxySessionErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteProxySessionErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteProxySessionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSipMediaApplicationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSipMediaApplicationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteSipMediaApplicationError> for Error {
    fn from(err: crate::error::DeleteSipMediaApplicationError) -> Self {
        match err.kind {
            crate::error::DeleteSipMediaApplicationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteSipMediaApplicationErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteSipMediaApplicationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteSipMediaApplicationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteSipMediaApplicationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteSipMediaApplicationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteSipMediaApplicationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteSipMediaApplicationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteSipMediaApplicationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSipRuleError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSipRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteSipRuleError> for Error {
    fn from(err: crate::error::DeleteSipRuleError) -> Self {
        match err.kind {
            crate::error::DeleteSipRuleErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteSipRuleErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteSipRuleErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteSipRuleErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteSipRuleErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteSipRuleErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteSipRuleErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteSipRuleErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteSipRuleErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorError) -> Self {
        match err.kind {
            crate::error::DeleteVoiceConnectorErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteVoiceConnectorErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteVoiceConnectorErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteVoiceConnectorErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteVoiceConnectorErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteVoiceConnectorErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteVoiceConnectorErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError) -> Self {
        match err.kind {
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorGroupError) -> Self {
        match err.kind {
            crate::error::DeleteVoiceConnectorGroupErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteVoiceConnectorGroupErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteVoiceConnectorGroupErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteVoiceConnectorGroupErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteVoiceConnectorGroupErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteVoiceConnectorGroupErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorGroupErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteVoiceConnectorGroupErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorOriginationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorOriginationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorOriginationError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorOriginationError) -> Self {
        match err.kind {
            crate::error::DeleteVoiceConnectorOriginationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteVoiceConnectorOriginationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteVoiceConnectorOriginationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteVoiceConnectorOriginationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteVoiceConnectorOriginationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorOriginationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteVoiceConnectorOriginationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorOriginationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorProxyError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorProxyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorProxyError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorProxyError) -> Self {
        match err.kind {
            crate::error::DeleteVoiceConnectorProxyErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteVoiceConnectorProxyErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteVoiceConnectorProxyErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteVoiceConnectorProxyErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteVoiceConnectorProxyErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorProxyErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteVoiceConnectorProxyErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorProxyErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorStreamingConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorStreamingConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorStreamingConfigurationError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorStreamingConfigurationError) -> Self {
        match err.kind {
            crate::error::DeleteVoiceConnectorStreamingConfigurationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorTerminationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorTerminationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorTerminationError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorTerminationError) -> Self {
        match err.kind {
            crate::error::DeleteVoiceConnectorTerminationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteVoiceConnectorTerminationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteVoiceConnectorTerminationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteVoiceConnectorTerminationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteVoiceConnectorTerminationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorTerminationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteVoiceConnectorTerminationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorTerminationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorTerminationCredentialsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorTerminationCredentialsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorTerminationCredentialsError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorTerminationCredentialsError) -> Self {
        match err.kind {
            crate::error::DeleteVoiceConnectorTerminationCredentialsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociatePhoneNumbersFromVoiceConnectorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DisassociatePhoneNumbersFromVoiceConnectorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DisassociatePhoneNumbersFromVoiceConnectorError> for Error {
    fn from(err: crate::error::DisassociatePhoneNumbersFromVoiceConnectorError) -> Self {
        match err.kind {
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError) -> Self {
        match err.kind {
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGlobalSettingsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetGlobalSettingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetGlobalSettingsError> for Error {
    fn from(err: crate::error::GetGlobalSettingsError) -> Self {
        match err.kind {
            crate::error::GetGlobalSettingsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetGlobalSettingsErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetGlobalSettingsErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetGlobalSettingsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetGlobalSettingsErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetGlobalSettingsErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetGlobalSettingsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetPhoneNumberError> for Error {
    fn from(err: crate::error::GetPhoneNumberError) -> Self {
        match err.kind {
            crate::error::GetPhoneNumberErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetPhoneNumberErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetPhoneNumberErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetPhoneNumberErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetPhoneNumberErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetPhoneNumberErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetPhoneNumberErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetPhoneNumberErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberOrderError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberOrderError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetPhoneNumberOrderError> for Error {
    fn from(err: crate::error::GetPhoneNumberOrderError) -> Self {
        match err.kind {
            crate::error::GetPhoneNumberOrderErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetPhoneNumberOrderErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetPhoneNumberOrderErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetPhoneNumberOrderErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetPhoneNumberOrderErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetPhoneNumberOrderErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetPhoneNumberOrderErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetPhoneNumberOrderErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberSettingsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberSettingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetPhoneNumberSettingsError> for Error {
    fn from(err: crate::error::GetPhoneNumberSettingsError) -> Self {
        match err.kind {
            crate::error::GetPhoneNumberSettingsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetPhoneNumberSettingsErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetPhoneNumberSettingsErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetPhoneNumberSettingsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetPhoneNumberSettingsErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetPhoneNumberSettingsErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetPhoneNumberSettingsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetProxySessionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetProxySessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetProxySessionError> for Error {
    fn from(err: crate::error::GetProxySessionError) -> Self {
        match err.kind {
            crate::error::GetProxySessionErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetProxySessionErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetProxySessionErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetProxySessionErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetProxySessionErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetProxySessionErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetProxySessionErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetProxySessionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSipMediaApplicationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSipMediaApplicationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetSipMediaApplicationError> for Error {
    fn from(err: crate::error::GetSipMediaApplicationError) -> Self {
        match err.kind {
            crate::error::GetSipMediaApplicationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetSipMediaApplicationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetSipMediaApplicationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetSipMediaApplicationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetSipMediaApplicationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetSipMediaApplicationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetSipMediaApplicationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetSipMediaApplicationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSipMediaApplicationAlexaSkillConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSipMediaApplicationAlexaSkillConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetSipMediaApplicationAlexaSkillConfigurationError> for Error {
    fn from(err: crate::error::GetSipMediaApplicationAlexaSkillConfigurationError) -> Self {
        match err.kind {
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSipMediaApplicationLoggingConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSipMediaApplicationLoggingConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetSipMediaApplicationLoggingConfigurationError> for Error {
    fn from(err: crate::error::GetSipMediaApplicationLoggingConfigurationError) -> Self {
        match err.kind {
            crate::error::GetSipMediaApplicationLoggingConfigurationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSipRuleError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSipRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetSipRuleError> for Error {
    fn from(err: crate::error::GetSipRuleError) -> Self {
        match err.kind {
            crate::error::GetSipRuleErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetSipRuleErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetSipRuleErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetSipRuleErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetSipRuleErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetSipRuleErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetSipRuleErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetSipRuleErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetVoiceConnectorError> for Error {
    fn from(err: crate::error::GetVoiceConnectorError) -> Self {
        match err.kind {
            crate::error::GetVoiceConnectorErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetVoiceConnectorErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetVoiceConnectorErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetVoiceConnectorErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetVoiceConnectorErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetVoiceConnectorErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetVoiceConnectorErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetVoiceConnectorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorEmergencyCallingConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorEmergencyCallingConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetVoiceConnectorEmergencyCallingConfigurationError> for Error {
    fn from(err: crate::error::GetVoiceConnectorEmergencyCallingConfigurationError) -> Self {
        match err.kind {
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::GetVoiceConnectorGroupError) -> Self {
        match err.kind {
            crate::error::GetVoiceConnectorGroupErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetVoiceConnectorGroupErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetVoiceConnectorGroupErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetVoiceConnectorGroupErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetVoiceConnectorGroupErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetVoiceConnectorGroupErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetVoiceConnectorGroupErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetVoiceConnectorGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorLoggingConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorLoggingConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetVoiceConnectorLoggingConfigurationError> for Error {
    fn from(err: crate::error::GetVoiceConnectorLoggingConfigurationError) -> Self {
        match err.kind {
            crate::error::GetVoiceConnectorLoggingConfigurationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorOriginationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorOriginationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetVoiceConnectorOriginationError> for Error {
    fn from(err: crate::error::GetVoiceConnectorOriginationError) -> Self {
        match err.kind {
            crate::error::GetVoiceConnectorOriginationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetVoiceConnectorOriginationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetVoiceConnectorOriginationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetVoiceConnectorOriginationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetVoiceConnectorOriginationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetVoiceConnectorOriginationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetVoiceConnectorOriginationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetVoiceConnectorOriginationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorProxyError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorProxyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetVoiceConnectorProxyError> for Error {
    fn from(err: crate::error::GetVoiceConnectorProxyError) -> Self {
        match err.kind {
            crate::error::GetVoiceConnectorProxyErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetVoiceConnectorProxyErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetVoiceConnectorProxyErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetVoiceConnectorProxyErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetVoiceConnectorProxyErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetVoiceConnectorProxyErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetVoiceConnectorProxyErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetVoiceConnectorProxyErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorStreamingConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorStreamingConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetVoiceConnectorStreamingConfigurationError> for Error {
    fn from(err: crate::error::GetVoiceConnectorStreamingConfigurationError) -> Self {
        match err.kind {
            crate::error::GetVoiceConnectorStreamingConfigurationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorTerminationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorTerminationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetVoiceConnectorTerminationError> for Error {
    fn from(err: crate::error::GetVoiceConnectorTerminationError) -> Self {
        match err.kind {
            crate::error::GetVoiceConnectorTerminationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetVoiceConnectorTerminationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetVoiceConnectorTerminationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetVoiceConnectorTerminationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetVoiceConnectorTerminationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetVoiceConnectorTerminationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetVoiceConnectorTerminationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetVoiceConnectorTerminationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorTerminationHealthError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorTerminationHealthError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetVoiceConnectorTerminationHealthError> for Error {
    fn from(err: crate::error::GetVoiceConnectorTerminationHealthError) -> Self {
        match err.kind {
            crate::error::GetVoiceConnectorTerminationHealthErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetVoiceConnectorTerminationHealthErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetVoiceConnectorTerminationHealthErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetVoiceConnectorTerminationHealthErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetVoiceConnectorTerminationHealthErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetVoiceConnectorTerminationHealthErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetVoiceConnectorTerminationHealthErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetVoiceConnectorTerminationHealthErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAvailableVoiceConnectorRegionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAvailableVoiceConnectorRegionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListAvailableVoiceConnectorRegionsError> for Error {
    fn from(err: crate::error::ListAvailableVoiceConnectorRegionsError) -> Self {
        match err.kind {
            crate::error::ListAvailableVoiceConnectorRegionsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListAvailableVoiceConnectorRegionsErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListAvailableVoiceConnectorRegionsErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ListAvailableVoiceConnectorRegionsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListAvailableVoiceConnectorRegionsErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ListAvailableVoiceConnectorRegionsErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ListAvailableVoiceConnectorRegionsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPhoneNumberOrdersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPhoneNumberOrdersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListPhoneNumberOrdersError> for Error {
    fn from(err: crate::error::ListPhoneNumberOrdersError) -> Self {
        match err.kind {
            crate::error::ListPhoneNumberOrdersErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListPhoneNumberOrdersErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListPhoneNumberOrdersErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ListPhoneNumberOrdersErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListPhoneNumberOrdersErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ListPhoneNumberOrdersErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ListPhoneNumberOrdersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPhoneNumbersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPhoneNumbersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListPhoneNumbersError> for Error {
    fn from(err: crate::error::ListPhoneNumbersError) -> Self {
        match err.kind {
            crate::error::ListPhoneNumbersErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListPhoneNumbersErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListPhoneNumbersErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::ListPhoneNumbersErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ListPhoneNumbersErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListPhoneNumbersErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ListPhoneNumbersErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ListPhoneNumbersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListProxySessionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListProxySessionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListProxySessionsError> for Error {
    fn from(err: crate::error::ListProxySessionsError) -> Self {
        match err.kind {
            crate::error::ListProxySessionsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListProxySessionsErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListProxySessionsErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::ListProxySessionsErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ListProxySessionsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListProxySessionsErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ListProxySessionsErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ListProxySessionsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSipMediaApplicationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSipMediaApplicationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListSipMediaApplicationsError> for Error {
    fn from(err: crate::error::ListSipMediaApplicationsError) -> Self {
        match err.kind {
            crate::error::ListSipMediaApplicationsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListSipMediaApplicationsErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListSipMediaApplicationsErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ListSipMediaApplicationsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListSipMediaApplicationsErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ListSipMediaApplicationsErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ListSipMediaApplicationsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSipRulesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSipRulesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListSipRulesError> for Error {
    fn from(err: crate::error::ListSipRulesError) -> Self {
        match err.kind {
            crate::error::ListSipRulesErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListSipRulesErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListSipRulesErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ListSipRulesErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListSipRulesErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ListSipRulesErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ListSipRulesErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSupportedPhoneNumberCountriesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSupportedPhoneNumberCountriesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListSupportedPhoneNumberCountriesError> for Error {
    fn from(err: crate::error::ListSupportedPhoneNumberCountriesError) -> Self {
        match err.kind {
            crate::error::ListSupportedPhoneNumberCountriesErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListSupportedPhoneNumberCountriesErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListSupportedPhoneNumberCountriesErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListSupportedPhoneNumberCountriesErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ListSupportedPhoneNumberCountriesErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListSupportedPhoneNumberCountriesErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ListSupportedPhoneNumberCountriesErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ListSupportedPhoneNumberCountriesErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorGroupsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListVoiceConnectorGroupsError> for Error {
    fn from(err: crate::error::ListVoiceConnectorGroupsError) -> Self {
        match err.kind {
            crate::error::ListVoiceConnectorGroupsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListVoiceConnectorGroupsErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListVoiceConnectorGroupsErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ListVoiceConnectorGroupsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListVoiceConnectorGroupsErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ListVoiceConnectorGroupsErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ListVoiceConnectorGroupsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListVoiceConnectorsError> for Error {
    fn from(err: crate::error::ListVoiceConnectorsError) -> Self {
        match err.kind {
            crate::error::ListVoiceConnectorsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListVoiceConnectorsErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListVoiceConnectorsErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ListVoiceConnectorsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListVoiceConnectorsErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ListVoiceConnectorsErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ListVoiceConnectorsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorTerminationCredentialsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorTerminationCredentialsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListVoiceConnectorTerminationCredentialsError> for Error {
    fn from(err: crate::error::ListVoiceConnectorTerminationCredentialsError) -> Self {
        match err.kind {
            crate::error::ListVoiceConnectorTerminationCredentialsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutSipMediaApplicationAlexaSkillConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutSipMediaApplicationAlexaSkillConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::PutSipMediaApplicationAlexaSkillConfigurationError> for Error {
    fn from(err: crate::error::PutSipMediaApplicationAlexaSkillConfigurationError) -> Self {
        match err.kind {
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutSipMediaApplicationLoggingConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutSipMediaApplicationLoggingConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::PutSipMediaApplicationLoggingConfigurationError> for Error {
    fn from(err: crate::error::PutSipMediaApplicationLoggingConfigurationError) -> Self {
        match err.kind {
            crate::error::PutSipMediaApplicationLoggingConfigurationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorEmergencyCallingConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorEmergencyCallingConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::PutVoiceConnectorEmergencyCallingConfigurationError> for Error {
    fn from(err: crate::error::PutVoiceConnectorEmergencyCallingConfigurationError) -> Self {
        match err.kind {
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorLoggingConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorLoggingConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::PutVoiceConnectorLoggingConfigurationError> for Error {
    fn from(err: crate::error::PutVoiceConnectorLoggingConfigurationError) -> Self {
        match err.kind {
            crate::error::PutVoiceConnectorLoggingConfigurationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorOriginationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorOriginationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::PutVoiceConnectorOriginationError> for Error {
    fn from(err: crate::error::PutVoiceConnectorOriginationError) -> Self {
        match err.kind {
            crate::error::PutVoiceConnectorOriginationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutVoiceConnectorOriginationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutVoiceConnectorOriginationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutVoiceConnectorOriginationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutVoiceConnectorOriginationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutVoiceConnectorOriginationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutVoiceConnectorOriginationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutVoiceConnectorOriginationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorProxyError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorProxyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::PutVoiceConnectorProxyError> for Error {
    fn from(err: crate::error::PutVoiceConnectorProxyError) -> Self {
        match err.kind {
            crate::error::PutVoiceConnectorProxyErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::PutVoiceConnectorProxyErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutVoiceConnectorProxyErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutVoiceConnectorProxyErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutVoiceConnectorProxyErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutVoiceConnectorProxyErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutVoiceConnectorProxyErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutVoiceConnectorProxyErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutVoiceConnectorProxyErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorStreamingConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorStreamingConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::PutVoiceConnectorStreamingConfigurationError> for Error {
    fn from(err: crate::error::PutVoiceConnectorStreamingConfigurationError) -> Self {
        match err.kind {
            crate::error::PutVoiceConnectorStreamingConfigurationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorTerminationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorTerminationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::PutVoiceConnectorTerminationError> for Error {
    fn from(err: crate::error::PutVoiceConnectorTerminationError) -> Self {
        match err.kind {
            crate::error::PutVoiceConnectorTerminationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::PutVoiceConnectorTerminationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutVoiceConnectorTerminationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutVoiceConnectorTerminationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutVoiceConnectorTerminationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutVoiceConnectorTerminationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutVoiceConnectorTerminationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutVoiceConnectorTerminationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutVoiceConnectorTerminationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorTerminationCredentialsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorTerminationCredentialsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::PutVoiceConnectorTerminationCredentialsError> for Error {
    fn from(err: crate::error::PutVoiceConnectorTerminationCredentialsError) -> Self {
        match err.kind {
            crate::error::PutVoiceConnectorTerminationCredentialsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RestorePhoneNumberError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RestorePhoneNumberError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::RestorePhoneNumberError> for Error {
    fn from(err: crate::error::RestorePhoneNumberError) -> Self {
        match err.kind {
            crate::error::RestorePhoneNumberErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::RestorePhoneNumberErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::RestorePhoneNumberErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::RestorePhoneNumberErrorKind::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::RestorePhoneNumberErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::RestorePhoneNumberErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::RestorePhoneNumberErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::RestorePhoneNumberErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::RestorePhoneNumberErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchAvailablePhoneNumbersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SearchAvailablePhoneNumbersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::SearchAvailablePhoneNumbersError> for Error {
    fn from(err: crate::error::SearchAvailablePhoneNumbersError) -> Self {
        match err.kind {
            crate::error::SearchAvailablePhoneNumbersErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::SearchAvailablePhoneNumbersErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::SearchAvailablePhoneNumbersErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::SearchAvailablePhoneNumbersErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::SearchAvailablePhoneNumbersErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::SearchAvailablePhoneNumbersErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::SearchAvailablePhoneNumbersErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::SearchAvailablePhoneNumbersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGlobalSettingsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateGlobalSettingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateGlobalSettingsError> for Error {
    fn from(err: crate::error::UpdateGlobalSettingsError) -> Self {
        match err.kind {
            crate::error::UpdateGlobalSettingsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdateGlobalSettingsErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::UpdateGlobalSettingsErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::UpdateGlobalSettingsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::UpdateGlobalSettingsErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::UpdateGlobalSettingsErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::UpdateGlobalSettingsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdatePhoneNumberError> for Error {
    fn from(err: crate::error::UpdatePhoneNumberError) -> Self {
        match err.kind {
            crate::error::UpdatePhoneNumberErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdatePhoneNumberErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::UpdatePhoneNumberErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::UpdatePhoneNumberErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::UpdatePhoneNumberErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::UpdatePhoneNumberErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::UpdatePhoneNumberErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::UpdatePhoneNumberErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::UpdatePhoneNumberErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberSettingsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberSettingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdatePhoneNumberSettingsError> for Error {
    fn from(err: crate::error::UpdatePhoneNumberSettingsError) -> Self {
        match err.kind {
            crate::error::UpdatePhoneNumberSettingsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdatePhoneNumberSettingsErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::UpdatePhoneNumberSettingsErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::UpdatePhoneNumberSettingsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::UpdatePhoneNumberSettingsErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::UpdatePhoneNumberSettingsErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::UpdatePhoneNumberSettingsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateProxySessionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateProxySessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateProxySessionError> for Error {
    fn from(err: crate::error::UpdateProxySessionError) -> Self {
        match err.kind {
            crate::error::UpdateProxySessionErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdateProxySessionErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::UpdateProxySessionErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::UpdateProxySessionErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::UpdateProxySessionErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::UpdateProxySessionErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::UpdateProxySessionErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::UpdateProxySessionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSipMediaApplicationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateSipMediaApplicationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateSipMediaApplicationError> for Error {
    fn from(err: crate::error::UpdateSipMediaApplicationError) -> Self {
        match err.kind {
            crate::error::UpdateSipMediaApplicationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdateSipMediaApplicationErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::UpdateSipMediaApplicationErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::UpdateSipMediaApplicationErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::UpdateSipMediaApplicationErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::UpdateSipMediaApplicationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::UpdateSipMediaApplicationErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::UpdateSipMediaApplicationErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::UpdateSipMediaApplicationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSipMediaApplicationCallError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateSipMediaApplicationCallError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateSipMediaApplicationCallError> for Error {
    fn from(err: crate::error::UpdateSipMediaApplicationCallError) -> Self {
        match err.kind {
            crate::error::UpdateSipMediaApplicationCallErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdateSipMediaApplicationCallErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::UpdateSipMediaApplicationCallErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::UpdateSipMediaApplicationCallErrorKind::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::UpdateSipMediaApplicationCallErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::UpdateSipMediaApplicationCallErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::UpdateSipMediaApplicationCallErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::UpdateSipMediaApplicationCallErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::UpdateSipMediaApplicationCallErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSipRuleError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateSipRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateSipRuleError> for Error {
    fn from(err: crate::error::UpdateSipRuleError) -> Self {
        match err.kind {
            crate::error::UpdateSipRuleErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdateSipRuleErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::UpdateSipRuleErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::UpdateSipRuleErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::UpdateSipRuleErrorKind::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::UpdateSipRuleErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::UpdateSipRuleErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::UpdateSipRuleErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::UpdateSipRuleErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::UpdateSipRuleErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVoiceConnectorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateVoiceConnectorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateVoiceConnectorError> for Error {
    fn from(err: crate::error::UpdateVoiceConnectorError) -> Self {
        match err.kind {
            crate::error::UpdateVoiceConnectorErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdateVoiceConnectorErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::UpdateVoiceConnectorErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::UpdateVoiceConnectorErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::UpdateVoiceConnectorErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::UpdateVoiceConnectorErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::UpdateVoiceConnectorErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::UpdateVoiceConnectorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVoiceConnectorGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateVoiceConnectorGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::UpdateVoiceConnectorGroupError) -> Self {
        match err.kind {
            crate::error::UpdateVoiceConnectorGroupErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdateVoiceConnectorGroupErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::UpdateVoiceConnectorGroupErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::UpdateVoiceConnectorGroupErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::UpdateVoiceConnectorGroupErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::UpdateVoiceConnectorGroupErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::UpdateVoiceConnectorGroupErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::UpdateVoiceConnectorGroupErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::UpdateVoiceConnectorGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ValidateE911AddressError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ValidateE911AddressError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ValidateE911AddressError> for Error {
    fn from(err: crate::error::ValidateE911AddressError) -> Self {
        match err.kind {
            crate::error::ValidateE911AddressErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ValidateE911AddressErrorKind::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ValidateE911AddressErrorKind::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::ValidateE911AddressErrorKind::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ValidateE911AddressErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ValidateE911AddressErrorKind::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ValidateE911AddressErrorKind::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ValidateE911AddressErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl std::error::Error for Error {}

