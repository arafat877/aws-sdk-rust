// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_start_app_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartAppInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("ClientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.domain {
        object.key("Domain").string(var_3.as_str());
    }
    if let Some(var_4) = &input.launch_overrides {
        #[allow(unused_mut)]
        let mut object_5 = object.key("LaunchOverrides").start_object();
        crate::json_ser::serialize_structure_crate_model_launch_overrides(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.name {
        object.key("Name").string(var_6.as_str());
    }
    if let Some(var_7) = &input.simulation {
        object.key("Simulation").string(var_7.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_clock_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartClockInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_8) = &input.simulation {
        object.key("Simulation").string(var_8.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_simulation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartSimulationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_9) = &input.client_token {
        object.key("ClientToken").string(var_9.as_str());
    }
    if let Some(var_10) = &input.description {
        object.key("Description").string(var_10.as_str());
    }
    if let Some(var_11) = &input.maximum_duration {
        object.key("MaximumDuration").string(var_11.as_str());
    }
    if let Some(var_12) = &input.name {
        object.key("Name").string(var_12.as_str());
    }
    if let Some(var_13) = &input.role_arn {
        object.key("RoleArn").string(var_13.as_str());
    }
    if let Some(var_14) = &input.schema_s3_location {
        #[allow(unused_mut)]
        let mut object_15 = object.key("SchemaS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.tags {
        #[allow(unused_mut)]
        let mut object_17 = object.key("Tags").start_object();
        for (key_18, value_19) in var_16 {
             {
                object_17.key(key_18.as_str()).string(value_19.as_str());
            }
        }
        object_17.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_app_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopAppInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_20) = &input.app {
        object.key("App").string(var_20.as_str());
    }
    if let Some(var_21) = &input.domain {
        object.key("Domain").string(var_21.as_str());
    }
    if let Some(var_22) = &input.simulation {
        object.key("Simulation").string(var_22.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_clock_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopClockInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_23) = &input.simulation {
        object.key("Simulation").string(var_23.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_simulation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopSimulationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_24) = &input.simulation {
        object.key("Simulation").string(var_24.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_25) = &input.tags {
        #[allow(unused_mut)]
        let mut object_26 = object.key("Tags").start_object();
        for (key_27, value_28) in var_25 {
             {
                object_26.key(key_27.as_str()).string(value_28.as_str());
            }
        }
        object_26.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_launch_overrides(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LaunchOverrides) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_29) = &input.launch_commands {
        let mut array_30 = object.key("LaunchCommands").start_array();
        for item_31 in var_29 {
             {
                array_30.value().string(item_31.as_str());
            }
        }
        array_30.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_location(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3Location) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_32) = &input.bucket_name {
        object.key("BucketName").string(var_32.as_str());
    }
    if let Some(var_33) = &input.object_key {
        object.key("ObjectKey").string(var_33.as_str());
    }
    Ok(())
}

