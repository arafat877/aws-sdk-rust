// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p></p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p></p>
    ConflictException(crate::error::ConflictException),
    /// <p></p>
    InternalServerException(crate::error::InternalServerException),
    /// <p></p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p></p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p></p>
    TooManyTagsException(crate::error::TooManyTagsException),
    /// <p></p>
    ValidationException(crate::error::ValidationException),
    /// 
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    /// 
    /// When logging an error from the SDK, it is recommended that you either wrap the error in
    /// [`DisplayErrorContext`](crate::types::DisplayErrorContext), use another
    /// error reporter library that visits the error's cause/source chain, or call
    /// [`Error::source`](std::error::Error::source) for more details about the underlying cause.
    /// 
    Unhandled(crate::error::Unhandled)
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f)
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAppError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteAppError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteAppError> for Error {
    fn from(err: crate::error::DeleteAppError) -> Self {
        match err.kind {
            crate::error::DeleteAppErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteAppErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteAppErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteAppErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteAppErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteAppErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSimulationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSimulationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteSimulationError> for Error {
    fn from(err: crate::error::DeleteSimulationError) -> Self {
        match err.kind {
            crate::error::DeleteSimulationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteSimulationErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteSimulationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteSimulationErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteSimulationErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteSimulationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAppError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeAppError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeAppError> for Error {
    fn from(err: crate::error::DescribeAppError) -> Self {
        match err.kind {
            crate::error::DescribeAppErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribeAppErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeAppErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeAppErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeAppErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSimulationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeSimulationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeSimulationError> for Error {
    fn from(err: crate::error::DescribeSimulationError) -> Self {
        match err.kind {
            crate::error::DescribeSimulationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribeSimulationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeSimulationErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeSimulationErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeSimulationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAppsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAppsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListAppsError> for Error {
    fn from(err: crate::error::ListAppsError) -> Self {
        match err.kind {
            crate::error::ListAppsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListAppsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListAppsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListAppsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListAppsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSimulationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSimulationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListSimulationsError> for Error {
    fn from(err: crate::error::ListSimulationsError) -> Self {
        match err.kind {
            crate::error::ListSimulationsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListSimulationsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListSimulationsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListSimulationsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err.kind {
            crate::error::ListTagsForResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListTagsForResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartAppError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartAppError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StartAppError> for Error {
    fn from(err: crate::error::StartAppError) -> Self {
        match err.kind {
            crate::error::StartAppErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StartAppErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::StartAppErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StartAppErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::StartAppErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StartAppErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartClockError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartClockError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StartClockError> for Error {
    fn from(err: crate::error::StartClockError) -> Self {
        match err.kind {
            crate::error::StartClockErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StartClockErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::StartClockErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StartClockErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StartClockErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StartClockErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartSimulationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartSimulationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StartSimulationError> for Error {
    fn from(err: crate::error::StartSimulationError) -> Self {
        match err.kind {
            crate::error::StartSimulationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StartSimulationErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::StartSimulationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StartSimulationErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::StartSimulationErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StartSimulationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopAppError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopAppError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StopAppError> for Error {
    fn from(err: crate::error::StopAppError) -> Self {
        match err.kind {
            crate::error::StopAppErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StopAppErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::StopAppErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StopAppErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StopAppErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StopAppErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopClockError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopClockError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StopClockError> for Error {
    fn from(err: crate::error::StopClockError) -> Self {
        match err.kind {
            crate::error::StopClockErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StopClockErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::StopClockErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StopClockErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StopClockErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StopClockErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopSimulationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopSimulationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StopSimulationError> for Error {
    fn from(err: crate::error::StopSimulationError) -> Self {
        match err.kind {
            crate::error::StopSimulationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StopSimulationErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::StopSimulationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StopSimulationErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StopSimulationErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StopSimulationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err.kind {
            crate::error::TagResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::TagResourceErrorKind::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::error::TagResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err.kind {
            crate::error::UntagResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UntagResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl std::error::Error for Error {}

