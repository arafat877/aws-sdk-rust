// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_accept_portfolio_share_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AcceptPortfolioShareInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.accept_language {
        object.key("AcceptLanguage").string(var_1.as_str());
    }
    if let Some(var_2) = &input.portfolio_id {
        object.key("PortfolioId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.portfolio_share_type {
        object.key("PortfolioShareType").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_budget_with_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateBudgetWithResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_4) = &input.budget_name {
        object.key("BudgetName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.resource_id {
        object.key("ResourceId").string(var_5.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_principal_with_portfolio_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociatePrincipalWithPortfolioInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_6) = &input.accept_language {
        object.key("AcceptLanguage").string(var_6.as_str());
    }
    if let Some(var_7) = &input.portfolio_id {
        object.key("PortfolioId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.principal_arn {
        object.key("PrincipalARN").string(var_8.as_str());
    }
    if let Some(var_9) = &input.principal_type {
        object.key("PrincipalType").string(var_9.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_product_with_portfolio_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateProductWithPortfolioInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_10) = &input.accept_language {
        object.key("AcceptLanguage").string(var_10.as_str());
    }
    if let Some(var_11) = &input.product_id {
        object.key("ProductId").string(var_11.as_str());
    }
    if let Some(var_12) = &input.portfolio_id {
        object.key("PortfolioId").string(var_12.as_str());
    }
    if let Some(var_13) = &input.source_portfolio_id {
        object.key("SourcePortfolioId").string(var_13.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_service_action_with_provisioning_artifact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateServiceActionWithProvisioningArtifactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_14) = &input.product_id {
        object.key("ProductId").string(var_14.as_str());
    }
    if let Some(var_15) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_15.as_str());
    }
    if let Some(var_16) = &input.service_action_id {
        object.key("ServiceActionId").string(var_16.as_str());
    }
    if let Some(var_17) = &input.accept_language {
        object.key("AcceptLanguage").string(var_17.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_tag_option_with_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateTagOptionWithResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_18) = &input.resource_id {
        object.key("ResourceId").string(var_18.as_str());
    }
    if let Some(var_19) = &input.tag_option_id {
        object.key("TagOptionId").string(var_19.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_associate_service_action_with_provisioning_artifact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchAssociateServiceActionWithProvisioningArtifactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_20) = &input.service_action_associations {
        let mut array_21 = object.key("ServiceActionAssociations").start_array();
        for item_22 in var_20 {
             {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_service_action_association(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.accept_language {
        object.key("AcceptLanguage").string(var_24.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_disassociate_service_action_from_provisioning_artifact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchDisassociateServiceActionFromProvisioningArtifactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_25) = &input.service_action_associations {
        let mut array_26 = object.key("ServiceActionAssociations").start_array();
        for item_27 in var_25 {
             {
                #[allow(unused_mut)]
                let mut object_28 = array_26.value().start_object();
                crate::json_ser::serialize_structure_crate_model_service_action_association(&mut object_28, item_27)?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    if let Some(var_29) = &input.accept_language {
        object.key("AcceptLanguage").string(var_29.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_copy_product_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CopyProductInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_30) = &input.accept_language {
        object.key("AcceptLanguage").string(var_30.as_str());
    }
    if let Some(var_31) = &input.source_product_arn {
        object.key("SourceProductArn").string(var_31.as_str());
    }
    if let Some(var_32) = &input.target_product_id {
        object.key("TargetProductId").string(var_32.as_str());
    }
    if let Some(var_33) = &input.target_product_name {
        object.key("TargetProductName").string(var_33.as_str());
    }
    if let Some(var_34) = &input.source_provisioning_artifact_identifiers {
        let mut array_35 = object.key("SourceProvisioningArtifactIdentifiers").start_array();
        for item_36 in var_34 {
             {
                #[allow(unused_mut)]
                let mut object_37 = array_35.value().start_object();
                for (key_38, value_39) in item_36 {
                     {
                        object_37.key(key_38.as_str()).string(value_39.as_str());
                    }
                }
                object_37.finish();
            }
        }
        array_35.finish();
    }
    if let Some(var_40) = &input.copy_options {
        let mut array_41 = object.key("CopyOptions").start_array();
        for item_42 in var_40 {
             {
                array_41.value().string(item_42.as_str());
            }
        }
        array_41.finish();
    }
    if let Some(var_43) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_43.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_constraint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateConstraintInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_44) = &input.accept_language {
        object.key("AcceptLanguage").string(var_44.as_str());
    }
    if let Some(var_45) = &input.portfolio_id {
        object.key("PortfolioId").string(var_45.as_str());
    }
    if let Some(var_46) = &input.product_id {
        object.key("ProductId").string(var_46.as_str());
    }
    if let Some(var_47) = &input.parameters {
        object.key("Parameters").string(var_47.as_str());
    }
    if let Some(var_48) = &input.r#type {
        object.key("Type").string(var_48.as_str());
    }
    if let Some(var_49) = &input.description {
        object.key("Description").string(var_49.as_str());
    }
    if let Some(var_50) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_50.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_portfolio_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreatePortfolioInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_51) = &input.accept_language {
        object.key("AcceptLanguage").string(var_51.as_str());
    }
    if let Some(var_52) = &input.display_name {
        object.key("DisplayName").string(var_52.as_str());
    }
    if let Some(var_53) = &input.description {
        object.key("Description").string(var_53.as_str());
    }
    if let Some(var_54) = &input.provider_name {
        object.key("ProviderName").string(var_54.as_str());
    }
    if let Some(var_55) = &input.tags {
        let mut array_56 = object.key("Tags").start_array();
        for item_57 in var_55 {
             {
                #[allow(unused_mut)]
                let mut object_58 = array_56.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_58, item_57)?;
                object_58.finish();
            }
        }
        array_56.finish();
    }
    if let Some(var_59) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_59.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_portfolio_share_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreatePortfolioShareInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_60) = &input.accept_language {
        object.key("AcceptLanguage").string(var_60.as_str());
    }
    if let Some(var_61) = &input.portfolio_id {
        object.key("PortfolioId").string(var_61.as_str());
    }
    if let Some(var_62) = &input.account_id {
        object.key("AccountId").string(var_62.as_str());
    }
    if let Some(var_63) = &input.organization_node {
        #[allow(unused_mut)]
        let mut object_64 = object.key("OrganizationNode").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_node(&mut object_64, var_63)?;
        object_64.finish();
    }
    if input.share_tag_options {
        object.key("ShareTagOptions").boolean(input.share_tag_options);
    }
    if input.share_principals {
        object.key("SharePrincipals").boolean(input.share_principals);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_product_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateProductInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_65) = &input.accept_language {
        object.key("AcceptLanguage").string(var_65.as_str());
    }
    if let Some(var_66) = &input.name {
        object.key("Name").string(var_66.as_str());
    }
    if let Some(var_67) = &input.owner {
        object.key("Owner").string(var_67.as_str());
    }
    if let Some(var_68) = &input.description {
        object.key("Description").string(var_68.as_str());
    }
    if let Some(var_69) = &input.distributor {
        object.key("Distributor").string(var_69.as_str());
    }
    if let Some(var_70) = &input.support_description {
        object.key("SupportDescription").string(var_70.as_str());
    }
    if let Some(var_71) = &input.support_email {
        object.key("SupportEmail").string(var_71.as_str());
    }
    if let Some(var_72) = &input.support_url {
        object.key("SupportUrl").string(var_72.as_str());
    }
    if let Some(var_73) = &input.product_type {
        object.key("ProductType").string(var_73.as_str());
    }
    if let Some(var_74) = &input.tags {
        let mut array_75 = object.key("Tags").start_array();
        for item_76 in var_74 {
             {
                #[allow(unused_mut)]
                let mut object_77 = array_75.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_77, item_76)?;
                object_77.finish();
            }
        }
        array_75.finish();
    }
    if let Some(var_78) = &input.provisioning_artifact_parameters {
        #[allow(unused_mut)]
        let mut object_79 = object.key("ProvisioningArtifactParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioning_artifact_properties(&mut object_79, var_78)?;
        object_79.finish();
    }
    if let Some(var_80) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_80.as_str());
    }
    if let Some(var_81) = &input.source_connection {
        #[allow(unused_mut)]
        let mut object_82 = object.key("SourceConnection").start_object();
        crate::json_ser::serialize_structure_crate_model_source_connection(&mut object_82, var_81)?;
        object_82.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_provisioned_product_plan_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateProvisionedProductPlanInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_83) = &input.accept_language {
        object.key("AcceptLanguage").string(var_83.as_str());
    }
    if let Some(var_84) = &input.plan_name {
        object.key("PlanName").string(var_84.as_str());
    }
    if let Some(var_85) = &input.plan_type {
        object.key("PlanType").string(var_85.as_str());
    }
    if let Some(var_86) = &input.notification_arns {
        let mut array_87 = object.key("NotificationArns").start_array();
        for item_88 in var_86 {
             {
                array_87.value().string(item_88.as_str());
            }
        }
        array_87.finish();
    }
    if let Some(var_89) = &input.path_id {
        object.key("PathId").string(var_89.as_str());
    }
    if let Some(var_90) = &input.product_id {
        object.key("ProductId").string(var_90.as_str());
    }
    if let Some(var_91) = &input.provisioned_product_name {
        object.key("ProvisionedProductName").string(var_91.as_str());
    }
    if let Some(var_92) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_92.as_str());
    }
    if let Some(var_93) = &input.provisioning_parameters {
        let mut array_94 = object.key("ProvisioningParameters").start_array();
        for item_95 in var_93 {
             {
                #[allow(unused_mut)]
                let mut object_96 = array_94.value().start_object();
                crate::json_ser::serialize_structure_crate_model_update_provisioning_parameter(&mut object_96, item_95)?;
                object_96.finish();
            }
        }
        array_94.finish();
    }
    if let Some(var_97) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_97.as_str());
    }
    if let Some(var_98) = &input.tags {
        let mut array_99 = object.key("Tags").start_array();
        for item_100 in var_98 {
             {
                #[allow(unused_mut)]
                let mut object_101 = array_99.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_101, item_100)?;
                object_101.finish();
            }
        }
        array_99.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_provisioning_artifact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateProvisioningArtifactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_102) = &input.accept_language {
        object.key("AcceptLanguage").string(var_102.as_str());
    }
    if let Some(var_103) = &input.product_id {
        object.key("ProductId").string(var_103.as_str());
    }
    if let Some(var_104) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_105 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioning_artifact_properties(&mut object_105, var_104)?;
        object_105.finish();
    }
    if let Some(var_106) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_106.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_service_action_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateServiceActionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_107) = &input.name {
        object.key("Name").string(var_107.as_str());
    }
    if let Some(var_108) = &input.definition_type {
        object.key("DefinitionType").string(var_108.as_str());
    }
    if let Some(var_109) = &input.definition {
        #[allow(unused_mut)]
        let mut object_110 = object.key("Definition").start_object();
        for (key_111, value_112) in var_109 {
             {
                object_110.key(key_111.as_str()).string(value_112.as_str());
            }
        }
        object_110.finish();
    }
    if let Some(var_113) = &input.description {
        object.key("Description").string(var_113.as_str());
    }
    if let Some(var_114) = &input.accept_language {
        object.key("AcceptLanguage").string(var_114.as_str());
    }
    if let Some(var_115) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_115.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_tag_option_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateTagOptionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_116) = &input.key {
        object.key("Key").string(var_116.as_str());
    }
    if let Some(var_117) = &input.value {
        object.key("Value").string(var_117.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_constraint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteConstraintInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_118) = &input.accept_language {
        object.key("AcceptLanguage").string(var_118.as_str());
    }
    if let Some(var_119) = &input.id {
        object.key("Id").string(var_119.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_portfolio_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeletePortfolioInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_120) = &input.accept_language {
        object.key("AcceptLanguage").string(var_120.as_str());
    }
    if let Some(var_121) = &input.id {
        object.key("Id").string(var_121.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_portfolio_share_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeletePortfolioShareInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_122) = &input.accept_language {
        object.key("AcceptLanguage").string(var_122.as_str());
    }
    if let Some(var_123) = &input.portfolio_id {
        object.key("PortfolioId").string(var_123.as_str());
    }
    if let Some(var_124) = &input.account_id {
        object.key("AccountId").string(var_124.as_str());
    }
    if let Some(var_125) = &input.organization_node {
        #[allow(unused_mut)]
        let mut object_126 = object.key("OrganizationNode").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_node(&mut object_126, var_125)?;
        object_126.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_product_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteProductInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_127) = &input.accept_language {
        object.key("AcceptLanguage").string(var_127.as_str());
    }
    if let Some(var_128) = &input.id {
        object.key("Id").string(var_128.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_provisioned_product_plan_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteProvisionedProductPlanInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_129) = &input.accept_language {
        object.key("AcceptLanguage").string(var_129.as_str());
    }
    if let Some(var_130) = &input.plan_id {
        object.key("PlanId").string(var_130.as_str());
    }
    if input.ignore_errors {
        object.key("IgnoreErrors").boolean(input.ignore_errors);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_provisioning_artifact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteProvisioningArtifactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_131) = &input.accept_language {
        object.key("AcceptLanguage").string(var_131.as_str());
    }
    if let Some(var_132) = &input.product_id {
        object.key("ProductId").string(var_132.as_str());
    }
    if let Some(var_133) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_133.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_service_action_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteServiceActionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_134) = &input.id {
        object.key("Id").string(var_134.as_str());
    }
    if let Some(var_135) = &input.accept_language {
        object.key("AcceptLanguage").string(var_135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_tag_option_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteTagOptionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_136) = &input.id {
        object.key("Id").string(var_136.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_constraint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeConstraintInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_137) = &input.accept_language {
        object.key("AcceptLanguage").string(var_137.as_str());
    }
    if let Some(var_138) = &input.id {
        object.key("Id").string(var_138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_copy_product_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeCopyProductStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_139) = &input.accept_language {
        object.key("AcceptLanguage").string(var_139.as_str());
    }
    if let Some(var_140) = &input.copy_product_token {
        object.key("CopyProductToken").string(var_140.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_portfolio_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribePortfolioInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_141) = &input.accept_language {
        object.key("AcceptLanguage").string(var_141.as_str());
    }
    if let Some(var_142) = &input.id {
        object.key("Id").string(var_142.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_portfolio_shares_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribePortfolioSharesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_143) = &input.portfolio_id {
        object.key("PortfolioId").string(var_143.as_str());
    }
    if let Some(var_144) = &input.r#type {
        object.key("Type").string(var_144.as_str());
    }
    if let Some(var_145) = &input.page_token {
        object.key("PageToken").string(var_145.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_portfolio_share_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribePortfolioShareStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_146) = &input.portfolio_share_token {
        object.key("PortfolioShareToken").string(var_146.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_product_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeProductInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_147) = &input.accept_language {
        object.key("AcceptLanguage").string(var_147.as_str());
    }
    if let Some(var_148) = &input.id {
        object.key("Id").string(var_148.as_str());
    }
    if let Some(var_149) = &input.name {
        object.key("Name").string(var_149.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_product_as_admin_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeProductAsAdminInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_150) = &input.accept_language {
        object.key("AcceptLanguage").string(var_150.as_str());
    }
    if let Some(var_151) = &input.id {
        object.key("Id").string(var_151.as_str());
    }
    if let Some(var_152) = &input.name {
        object.key("Name").string(var_152.as_str());
    }
    if let Some(var_153) = &input.source_portfolio_id {
        object.key("SourcePortfolioId").string(var_153.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_product_view_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeProductViewInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_154) = &input.accept_language {
        object.key("AcceptLanguage").string(var_154.as_str());
    }
    if let Some(var_155) = &input.id {
        object.key("Id").string(var_155.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_provisioned_product_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeProvisionedProductInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_156) = &input.accept_language {
        object.key("AcceptLanguage").string(var_156.as_str());
    }
    if let Some(var_157) = &input.id {
        object.key("Id").string(var_157.as_str());
    }
    if let Some(var_158) = &input.name {
        object.key("Name").string(var_158.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_provisioned_product_plan_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeProvisionedProductPlanInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_159) = &input.accept_language {
        object.key("AcceptLanguage").string(var_159.as_str());
    }
    if let Some(var_160) = &input.plan_id {
        object.key("PlanId").string(var_160.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_161) = &input.page_token {
        object.key("PageToken").string(var_161.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_provisioning_artifact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeProvisioningArtifactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_162) = &input.accept_language {
        object.key("AcceptLanguage").string(var_162.as_str());
    }
    if let Some(var_163) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_163.as_str());
    }
    if let Some(var_164) = &input.product_id {
        object.key("ProductId").string(var_164.as_str());
    }
    if let Some(var_165) = &input.provisioning_artifact_name {
        object.key("ProvisioningArtifactName").string(var_165.as_str());
    }
    if let Some(var_166) = &input.product_name {
        object.key("ProductName").string(var_166.as_str());
    }
    if input.verbose {
        object.key("Verbose").boolean(input.verbose);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_provisioning_parameters_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeProvisioningParametersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_167) = &input.accept_language {
        object.key("AcceptLanguage").string(var_167.as_str());
    }
    if let Some(var_168) = &input.product_id {
        object.key("ProductId").string(var_168.as_str());
    }
    if let Some(var_169) = &input.product_name {
        object.key("ProductName").string(var_169.as_str());
    }
    if let Some(var_170) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_170.as_str());
    }
    if let Some(var_171) = &input.provisioning_artifact_name {
        object.key("ProvisioningArtifactName").string(var_171.as_str());
    }
    if let Some(var_172) = &input.path_id {
        object.key("PathId").string(var_172.as_str());
    }
    if let Some(var_173) = &input.path_name {
        object.key("PathName").string(var_173.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_record_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeRecordInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_174) = &input.accept_language {
        object.key("AcceptLanguage").string(var_174.as_str());
    }
    if let Some(var_175) = &input.id {
        object.key("Id").string(var_175.as_str());
    }
    if let Some(var_176) = &input.page_token {
        object.key("PageToken").string(var_176.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_service_action_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeServiceActionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_177) = &input.id {
        object.key("Id").string(var_177.as_str());
    }
    if let Some(var_178) = &input.accept_language {
        object.key("AcceptLanguage").string(var_178.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_service_action_execution_parameters_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeServiceActionExecutionParametersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_179) = &input.provisioned_product_id {
        object.key("ProvisionedProductId").string(var_179.as_str());
    }
    if let Some(var_180) = &input.service_action_id {
        object.key("ServiceActionId").string(var_180.as_str());
    }
    if let Some(var_181) = &input.accept_language {
        object.key("AcceptLanguage").string(var_181.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_tag_option_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeTagOptionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_182) = &input.id {
        object.key("Id").string(var_182.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_budget_from_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateBudgetFromResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_183) = &input.budget_name {
        object.key("BudgetName").string(var_183.as_str());
    }
    if let Some(var_184) = &input.resource_id {
        object.key("ResourceId").string(var_184.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_principal_from_portfolio_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociatePrincipalFromPortfolioInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_185) = &input.accept_language {
        object.key("AcceptLanguage").string(var_185.as_str());
    }
    if let Some(var_186) = &input.portfolio_id {
        object.key("PortfolioId").string(var_186.as_str());
    }
    if let Some(var_187) = &input.principal_arn {
        object.key("PrincipalARN").string(var_187.as_str());
    }
    if let Some(var_188) = &input.principal_type {
        object.key("PrincipalType").string(var_188.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_product_from_portfolio_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateProductFromPortfolioInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_189) = &input.accept_language {
        object.key("AcceptLanguage").string(var_189.as_str());
    }
    if let Some(var_190) = &input.product_id {
        object.key("ProductId").string(var_190.as_str());
    }
    if let Some(var_191) = &input.portfolio_id {
        object.key("PortfolioId").string(var_191.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_service_action_from_provisioning_artifact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateServiceActionFromProvisioningArtifactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_192) = &input.product_id {
        object.key("ProductId").string(var_192.as_str());
    }
    if let Some(var_193) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_193.as_str());
    }
    if let Some(var_194) = &input.service_action_id {
        object.key("ServiceActionId").string(var_194.as_str());
    }
    if let Some(var_195) = &input.accept_language {
        object.key("AcceptLanguage").string(var_195.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_tag_option_from_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateTagOptionFromResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_196) = &input.resource_id {
        object.key("ResourceId").string(var_196.as_str());
    }
    if let Some(var_197) = &input.tag_option_id {
        object.key("TagOptionId").string(var_197.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_execute_provisioned_product_plan_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ExecuteProvisionedProductPlanInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_198) = &input.accept_language {
        object.key("AcceptLanguage").string(var_198.as_str());
    }
    if let Some(var_199) = &input.plan_id {
        object.key("PlanId").string(var_199.as_str());
    }
    if let Some(var_200) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_200.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_execute_provisioned_product_service_action_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ExecuteProvisionedProductServiceActionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_201) = &input.provisioned_product_id {
        object.key("ProvisionedProductId").string(var_201.as_str());
    }
    if let Some(var_202) = &input.service_action_id {
        object.key("ServiceActionId").string(var_202.as_str());
    }
    if let Some(var_203) = &input.execute_token {
        object.key("ExecuteToken").string(var_203.as_str());
    }
    if let Some(var_204) = &input.accept_language {
        object.key("AcceptLanguage").string(var_204.as_str());
    }
    if let Some(var_205) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_206 = object.key("Parameters").start_object();
        for (key_207, value_208) in var_205 {
             {
                let mut array_209 = object_206.key(key_207.as_str()).start_array();
                for item_210 in value_208 {
                     {
                        array_209.value().string(item_210.as_str());
                    }
                }
                array_209.finish();
            }
        }
        object_206.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_provisioned_product_outputs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetProvisionedProductOutputsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_211) = &input.accept_language {
        object.key("AcceptLanguage").string(var_211.as_str());
    }
    if let Some(var_212) = &input.provisioned_product_id {
        object.key("ProvisionedProductId").string(var_212.as_str());
    }
    if let Some(var_213) = &input.provisioned_product_name {
        object.key("ProvisionedProductName").string(var_213.as_str());
    }
    if let Some(var_214) = &input.output_keys {
        let mut array_215 = object.key("OutputKeys").start_array();
        for item_216 in var_214 {
             {
                array_215.value().string(item_216.as_str());
            }
        }
        array_215.finish();
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_217) = &input.page_token {
        object.key("PageToken").string(var_217.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_as_provisioned_product_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ImportAsProvisionedProductInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_218) = &input.accept_language {
        object.key("AcceptLanguage").string(var_218.as_str());
    }
    if let Some(var_219) = &input.product_id {
        object.key("ProductId").string(var_219.as_str());
    }
    if let Some(var_220) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_220.as_str());
    }
    if let Some(var_221) = &input.provisioned_product_name {
        object.key("ProvisionedProductName").string(var_221.as_str());
    }
    if let Some(var_222) = &input.physical_id {
        object.key("PhysicalId").string(var_222.as_str());
    }
    if let Some(var_223) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_223.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_accepted_portfolio_shares_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListAcceptedPortfolioSharesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_224) = &input.accept_language {
        object.key("AcceptLanguage").string(var_224.as_str());
    }
    if let Some(var_225) = &input.page_token {
        object.key("PageToken").string(var_225.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_226) = &input.portfolio_share_type {
        object.key("PortfolioShareType").string(var_226.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_budgets_for_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListBudgetsForResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_227) = &input.accept_language {
        object.key("AcceptLanguage").string(var_227.as_str());
    }
    if let Some(var_228) = &input.resource_id {
        object.key("ResourceId").string(var_228.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_229) = &input.page_token {
        object.key("PageToken").string(var_229.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_constraints_for_portfolio_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListConstraintsForPortfolioInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_230) = &input.accept_language {
        object.key("AcceptLanguage").string(var_230.as_str());
    }
    if let Some(var_231) = &input.portfolio_id {
        object.key("PortfolioId").string(var_231.as_str());
    }
    if let Some(var_232) = &input.product_id {
        object.key("ProductId").string(var_232.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_233) = &input.page_token {
        object.key("PageToken").string(var_233.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_launch_paths_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListLaunchPathsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_234) = &input.accept_language {
        object.key("AcceptLanguage").string(var_234.as_str());
    }
    if let Some(var_235) = &input.product_id {
        object.key("ProductId").string(var_235.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_236) = &input.page_token {
        object.key("PageToken").string(var_236.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_organization_portfolio_access_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListOrganizationPortfolioAccessInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_237) = &input.accept_language {
        object.key("AcceptLanguage").string(var_237.as_str());
    }
    if let Some(var_238) = &input.portfolio_id {
        object.key("PortfolioId").string(var_238.as_str());
    }
    if let Some(var_239) = &input.organization_node_type {
        object.key("OrganizationNodeType").string(var_239.as_str());
    }
    if let Some(var_240) = &input.page_token {
        object.key("PageToken").string(var_240.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_portfolio_access_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListPortfolioAccessInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_241) = &input.accept_language {
        object.key("AcceptLanguage").string(var_241.as_str());
    }
    if let Some(var_242) = &input.portfolio_id {
        object.key("PortfolioId").string(var_242.as_str());
    }
    if let Some(var_243) = &input.organization_parent_id {
        object.key("OrganizationParentId").string(var_243.as_str());
    }
    if let Some(var_244) = &input.page_token {
        object.key("PageToken").string(var_244.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_portfolios_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListPortfoliosInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_245) = &input.accept_language {
        object.key("AcceptLanguage").string(var_245.as_str());
    }
    if let Some(var_246) = &input.page_token {
        object.key("PageToken").string(var_246.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_portfolios_for_product_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListPortfoliosForProductInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_247) = &input.accept_language {
        object.key("AcceptLanguage").string(var_247.as_str());
    }
    if let Some(var_248) = &input.product_id {
        object.key("ProductId").string(var_248.as_str());
    }
    if let Some(var_249) = &input.page_token {
        object.key("PageToken").string(var_249.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_principals_for_portfolio_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListPrincipalsForPortfolioInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_250) = &input.accept_language {
        object.key("AcceptLanguage").string(var_250.as_str());
    }
    if let Some(var_251) = &input.portfolio_id {
        object.key("PortfolioId").string(var_251.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_252) = &input.page_token {
        object.key("PageToken").string(var_252.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_provisioned_product_plans_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListProvisionedProductPlansInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_253) = &input.accept_language {
        object.key("AcceptLanguage").string(var_253.as_str());
    }
    if let Some(var_254) = &input.provision_product_id {
        object.key("ProvisionProductId").string(var_254.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_255) = &input.page_token {
        object.key("PageToken").string(var_255.as_str());
    }
    if let Some(var_256) = &input.access_level_filter {
        #[allow(unused_mut)]
        let mut object_257 = object.key("AccessLevelFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_access_level_filter(&mut object_257, var_256)?;
        object_257.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_provisioning_artifacts_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListProvisioningArtifactsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_258) = &input.accept_language {
        object.key("AcceptLanguage").string(var_258.as_str());
    }
    if let Some(var_259) = &input.product_id {
        object.key("ProductId").string(var_259.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_provisioning_artifacts_for_service_action_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListProvisioningArtifactsForServiceActionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_260) = &input.service_action_id {
        object.key("ServiceActionId").string(var_260.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_261) = &input.page_token {
        object.key("PageToken").string(var_261.as_str());
    }
    if let Some(var_262) = &input.accept_language {
        object.key("AcceptLanguage").string(var_262.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_record_history_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListRecordHistoryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_263) = &input.accept_language {
        object.key("AcceptLanguage").string(var_263.as_str());
    }
    if let Some(var_264) = &input.access_level_filter {
        #[allow(unused_mut)]
        let mut object_265 = object.key("AccessLevelFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_access_level_filter(&mut object_265, var_264)?;
        object_265.finish();
    }
    if let Some(var_266) = &input.search_filter {
        #[allow(unused_mut)]
        let mut object_267 = object.key("SearchFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_list_record_history_search_filter(&mut object_267, var_266)?;
        object_267.finish();
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_268) = &input.page_token {
        object.key("PageToken").string(var_268.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resources_for_tag_option_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListResourcesForTagOptionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_269) = &input.tag_option_id {
        object.key("TagOptionId").string(var_269.as_str());
    }
    if let Some(var_270) = &input.resource_type {
        object.key("ResourceType").string(var_270.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_271) = &input.page_token {
        object.key("PageToken").string(var_271.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_service_actions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListServiceActionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_272) = &input.accept_language {
        object.key("AcceptLanguage").string(var_272.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_273) = &input.page_token {
        object.key("PageToken").string(var_273.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_service_actions_for_provisioning_artifact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListServiceActionsForProvisioningArtifactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_274) = &input.product_id {
        object.key("ProductId").string(var_274.as_str());
    }
    if let Some(var_275) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_275.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_276) = &input.page_token {
        object.key("PageToken").string(var_276.as_str());
    }
    if let Some(var_277) = &input.accept_language {
        object.key("AcceptLanguage").string(var_277.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_stack_instances_for_provisioned_product_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListStackInstancesForProvisionedProductInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_278) = &input.accept_language {
        object.key("AcceptLanguage").string(var_278.as_str());
    }
    if let Some(var_279) = &input.provisioned_product_id {
        object.key("ProvisionedProductId").string(var_279.as_str());
    }
    if let Some(var_280) = &input.page_token {
        object.key("PageToken").string(var_280.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tag_options_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTagOptionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_281) = &input.filters {
        #[allow(unused_mut)]
        let mut object_282 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_list_tag_options_filters(&mut object_282, var_281)?;
        object_282.finish();
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_283) = &input.page_token {
        object.key("PageToken").string(var_283.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_provision_product_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ProvisionProductInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_284) = &input.accept_language {
        object.key("AcceptLanguage").string(var_284.as_str());
    }
    if let Some(var_285) = &input.product_id {
        object.key("ProductId").string(var_285.as_str());
    }
    if let Some(var_286) = &input.product_name {
        object.key("ProductName").string(var_286.as_str());
    }
    if let Some(var_287) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_287.as_str());
    }
    if let Some(var_288) = &input.provisioning_artifact_name {
        object.key("ProvisioningArtifactName").string(var_288.as_str());
    }
    if let Some(var_289) = &input.path_id {
        object.key("PathId").string(var_289.as_str());
    }
    if let Some(var_290) = &input.path_name {
        object.key("PathName").string(var_290.as_str());
    }
    if let Some(var_291) = &input.provisioned_product_name {
        object.key("ProvisionedProductName").string(var_291.as_str());
    }
    if let Some(var_292) = &input.provisioning_parameters {
        let mut array_293 = object.key("ProvisioningParameters").start_array();
        for item_294 in var_292 {
             {
                #[allow(unused_mut)]
                let mut object_295 = array_293.value().start_object();
                crate::json_ser::serialize_structure_crate_model_provisioning_parameter(&mut object_295, item_294)?;
                object_295.finish();
            }
        }
        array_293.finish();
    }
    if let Some(var_296) = &input.provisioning_preferences {
        #[allow(unused_mut)]
        let mut object_297 = object.key("ProvisioningPreferences").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioning_preferences(&mut object_297, var_296)?;
        object_297.finish();
    }
    if let Some(var_298) = &input.tags {
        let mut array_299 = object.key("Tags").start_array();
        for item_300 in var_298 {
             {
                #[allow(unused_mut)]
                let mut object_301 = array_299.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_301, item_300)?;
                object_301.finish();
            }
        }
        array_299.finish();
    }
    if let Some(var_302) = &input.notification_arns {
        let mut array_303 = object.key("NotificationArns").start_array();
        for item_304 in var_302 {
             {
                array_303.value().string(item_304.as_str());
            }
        }
        array_303.finish();
    }
    if let Some(var_305) = &input.provision_token {
        object.key("ProvisionToken").string(var_305.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reject_portfolio_share_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RejectPortfolioShareInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_306) = &input.accept_language {
        object.key("AcceptLanguage").string(var_306.as_str());
    }
    if let Some(var_307) = &input.portfolio_id {
        object.key("PortfolioId").string(var_307.as_str());
    }
    if let Some(var_308) = &input.portfolio_share_type {
        object.key("PortfolioShareType").string(var_308.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_scan_provisioned_products_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ScanProvisionedProductsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_309) = &input.accept_language {
        object.key("AcceptLanguage").string(var_309.as_str());
    }
    if let Some(var_310) = &input.access_level_filter {
        #[allow(unused_mut)]
        let mut object_311 = object.key("AccessLevelFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_access_level_filter(&mut object_311, var_310)?;
        object_311.finish();
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_312) = &input.page_token {
        object.key("PageToken").string(var_312.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_products_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchProductsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_313) = &input.accept_language {
        object.key("AcceptLanguage").string(var_313.as_str());
    }
    if let Some(var_314) = &input.filters {
        #[allow(unused_mut)]
        let mut object_315 = object.key("Filters").start_object();
        for (key_316, value_317) in var_314 {
             {
                let mut array_318 = object_315.key(key_316.as_str()).start_array();
                for item_319 in value_317 {
                     {
                        array_318.value().string(item_319.as_str());
                    }
                }
                array_318.finish();
            }
        }
        object_315.finish();
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_320) = &input.sort_by {
        object.key("SortBy").string(var_320.as_str());
    }
    if let Some(var_321) = &input.sort_order {
        object.key("SortOrder").string(var_321.as_str());
    }
    if let Some(var_322) = &input.page_token {
        object.key("PageToken").string(var_322.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_products_as_admin_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchProductsAsAdminInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_323) = &input.accept_language {
        object.key("AcceptLanguage").string(var_323.as_str());
    }
    if let Some(var_324) = &input.portfolio_id {
        object.key("PortfolioId").string(var_324.as_str());
    }
    if let Some(var_325) = &input.filters {
        #[allow(unused_mut)]
        let mut object_326 = object.key("Filters").start_object();
        for (key_327, value_328) in var_325 {
             {
                let mut array_329 = object_326.key(key_327.as_str()).start_array();
                for item_330 in value_328 {
                     {
                        array_329.value().string(item_330.as_str());
                    }
                }
                array_329.finish();
            }
        }
        object_326.finish();
    }
    if let Some(var_331) = &input.sort_by {
        object.key("SortBy").string(var_331.as_str());
    }
    if let Some(var_332) = &input.sort_order {
        object.key("SortOrder").string(var_332.as_str());
    }
    if let Some(var_333) = &input.page_token {
        object.key("PageToken").string(var_333.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_334) = &input.product_source {
        object.key("ProductSource").string(var_334.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_provisioned_products_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchProvisionedProductsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_335) = &input.accept_language {
        object.key("AcceptLanguage").string(var_335.as_str());
    }
    if let Some(var_336) = &input.access_level_filter {
        #[allow(unused_mut)]
        let mut object_337 = object.key("AccessLevelFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_access_level_filter(&mut object_337, var_336)?;
        object_337.finish();
    }
    if let Some(var_338) = &input.filters {
        #[allow(unused_mut)]
        let mut object_339 = object.key("Filters").start_object();
        for (key_340, value_341) in var_338 {
             {
                let mut array_342 = object_339.key(key_340.as_str()).start_array();
                for item_343 in value_341 {
                     {
                        array_342.value().string(item_343.as_str());
                    }
                }
                array_342.finish();
            }
        }
        object_339.finish();
    }
    if let Some(var_344) = &input.sort_by {
        object.key("SortBy").string(var_344.as_str());
    }
    if let Some(var_345) = &input.sort_order {
        object.key("SortOrder").string(var_345.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.page_size).into()));
    }
    if let Some(var_346) = &input.page_token {
        object.key("PageToken").string(var_346.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_terminate_provisioned_product_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TerminateProvisionedProductInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_347) = &input.provisioned_product_name {
        object.key("ProvisionedProductName").string(var_347.as_str());
    }
    if let Some(var_348) = &input.provisioned_product_id {
        object.key("ProvisionedProductId").string(var_348.as_str());
    }
    if let Some(var_349) = &input.terminate_token {
        object.key("TerminateToken").string(var_349.as_str());
    }
    if input.ignore_errors {
        object.key("IgnoreErrors").boolean(input.ignore_errors);
    }
    if let Some(var_350) = &input.accept_language {
        object.key("AcceptLanguage").string(var_350.as_str());
    }
    if input.retain_physical_resources {
        object.key("RetainPhysicalResources").boolean(input.retain_physical_resources);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_constraint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateConstraintInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_351) = &input.accept_language {
        object.key("AcceptLanguage").string(var_351.as_str());
    }
    if let Some(var_352) = &input.id {
        object.key("Id").string(var_352.as_str());
    }
    if let Some(var_353) = &input.description {
        object.key("Description").string(var_353.as_str());
    }
    if let Some(var_354) = &input.parameters {
        object.key("Parameters").string(var_354.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_portfolio_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdatePortfolioInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_355) = &input.accept_language {
        object.key("AcceptLanguage").string(var_355.as_str());
    }
    if let Some(var_356) = &input.id {
        object.key("Id").string(var_356.as_str());
    }
    if let Some(var_357) = &input.display_name {
        object.key("DisplayName").string(var_357.as_str());
    }
    if let Some(var_358) = &input.description {
        object.key("Description").string(var_358.as_str());
    }
    if let Some(var_359) = &input.provider_name {
        object.key("ProviderName").string(var_359.as_str());
    }
    if let Some(var_360) = &input.add_tags {
        let mut array_361 = object.key("AddTags").start_array();
        for item_362 in var_360 {
             {
                #[allow(unused_mut)]
                let mut object_363 = array_361.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_363, item_362)?;
                object_363.finish();
            }
        }
        array_361.finish();
    }
    if let Some(var_364) = &input.remove_tags {
        let mut array_365 = object.key("RemoveTags").start_array();
        for item_366 in var_364 {
             {
                array_365.value().string(item_366.as_str());
            }
        }
        array_365.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_portfolio_share_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdatePortfolioShareInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_367) = &input.accept_language {
        object.key("AcceptLanguage").string(var_367.as_str());
    }
    if let Some(var_368) = &input.portfolio_id {
        object.key("PortfolioId").string(var_368.as_str());
    }
    if let Some(var_369) = &input.account_id {
        object.key("AccountId").string(var_369.as_str());
    }
    if let Some(var_370) = &input.organization_node {
        #[allow(unused_mut)]
        let mut object_371 = object.key("OrganizationNode").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_node(&mut object_371, var_370)?;
        object_371.finish();
    }
    if let Some(var_372) = &input.share_tag_options {
        object.key("ShareTagOptions").boolean(*var_372);
    }
    if let Some(var_373) = &input.share_principals {
        object.key("SharePrincipals").boolean(*var_373);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_product_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateProductInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_374) = &input.accept_language {
        object.key("AcceptLanguage").string(var_374.as_str());
    }
    if let Some(var_375) = &input.id {
        object.key("Id").string(var_375.as_str());
    }
    if let Some(var_376) = &input.name {
        object.key("Name").string(var_376.as_str());
    }
    if let Some(var_377) = &input.owner {
        object.key("Owner").string(var_377.as_str());
    }
    if let Some(var_378) = &input.description {
        object.key("Description").string(var_378.as_str());
    }
    if let Some(var_379) = &input.distributor {
        object.key("Distributor").string(var_379.as_str());
    }
    if let Some(var_380) = &input.support_description {
        object.key("SupportDescription").string(var_380.as_str());
    }
    if let Some(var_381) = &input.support_email {
        object.key("SupportEmail").string(var_381.as_str());
    }
    if let Some(var_382) = &input.support_url {
        object.key("SupportUrl").string(var_382.as_str());
    }
    if let Some(var_383) = &input.add_tags {
        let mut array_384 = object.key("AddTags").start_array();
        for item_385 in var_383 {
             {
                #[allow(unused_mut)]
                let mut object_386 = array_384.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_386, item_385)?;
                object_386.finish();
            }
        }
        array_384.finish();
    }
    if let Some(var_387) = &input.remove_tags {
        let mut array_388 = object.key("RemoveTags").start_array();
        for item_389 in var_387 {
             {
                array_388.value().string(item_389.as_str());
            }
        }
        array_388.finish();
    }
    if let Some(var_390) = &input.source_connection {
        #[allow(unused_mut)]
        let mut object_391 = object.key("SourceConnection").start_object();
        crate::json_ser::serialize_structure_crate_model_source_connection(&mut object_391, var_390)?;
        object_391.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_provisioned_product_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateProvisionedProductInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_392) = &input.accept_language {
        object.key("AcceptLanguage").string(var_392.as_str());
    }
    if let Some(var_393) = &input.provisioned_product_name {
        object.key("ProvisionedProductName").string(var_393.as_str());
    }
    if let Some(var_394) = &input.provisioned_product_id {
        object.key("ProvisionedProductId").string(var_394.as_str());
    }
    if let Some(var_395) = &input.product_id {
        object.key("ProductId").string(var_395.as_str());
    }
    if let Some(var_396) = &input.product_name {
        object.key("ProductName").string(var_396.as_str());
    }
    if let Some(var_397) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_397.as_str());
    }
    if let Some(var_398) = &input.provisioning_artifact_name {
        object.key("ProvisioningArtifactName").string(var_398.as_str());
    }
    if let Some(var_399) = &input.path_id {
        object.key("PathId").string(var_399.as_str());
    }
    if let Some(var_400) = &input.path_name {
        object.key("PathName").string(var_400.as_str());
    }
    if let Some(var_401) = &input.provisioning_parameters {
        let mut array_402 = object.key("ProvisioningParameters").start_array();
        for item_403 in var_401 {
             {
                #[allow(unused_mut)]
                let mut object_404 = array_402.value().start_object();
                crate::json_ser::serialize_structure_crate_model_update_provisioning_parameter(&mut object_404, item_403)?;
                object_404.finish();
            }
        }
        array_402.finish();
    }
    if let Some(var_405) = &input.provisioning_preferences {
        #[allow(unused_mut)]
        let mut object_406 = object.key("ProvisioningPreferences").start_object();
        crate::json_ser::serialize_structure_crate_model_update_provisioning_preferences(&mut object_406, var_405)?;
        object_406.finish();
    }
    if let Some(var_407) = &input.tags {
        let mut array_408 = object.key("Tags").start_array();
        for item_409 in var_407 {
             {
                #[allow(unused_mut)]
                let mut object_410 = array_408.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_410, item_409)?;
                object_410.finish();
            }
        }
        array_408.finish();
    }
    if let Some(var_411) = &input.update_token {
        object.key("UpdateToken").string(var_411.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_provisioned_product_properties_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateProvisionedProductPropertiesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_412) = &input.accept_language {
        object.key("AcceptLanguage").string(var_412.as_str());
    }
    if let Some(var_413) = &input.provisioned_product_id {
        object.key("ProvisionedProductId").string(var_413.as_str());
    }
    if let Some(var_414) = &input.provisioned_product_properties {
        #[allow(unused_mut)]
        let mut object_415 = object.key("ProvisionedProductProperties").start_object();
        for (key_416, value_417) in var_414 {
             {
                object_415.key(key_416.as_str()).string(value_417.as_str());
            }
        }
        object_415.finish();
    }
    if let Some(var_418) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_418.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_provisioning_artifact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateProvisioningArtifactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_419) = &input.accept_language {
        object.key("AcceptLanguage").string(var_419.as_str());
    }
    if let Some(var_420) = &input.product_id {
        object.key("ProductId").string(var_420.as_str());
    }
    if let Some(var_421) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_421.as_str());
    }
    if let Some(var_422) = &input.name {
        object.key("Name").string(var_422.as_str());
    }
    if let Some(var_423) = &input.description {
        object.key("Description").string(var_423.as_str());
    }
    if let Some(var_424) = &input.active {
        object.key("Active").boolean(*var_424);
    }
    if let Some(var_425) = &input.guidance {
        object.key("Guidance").string(var_425.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_service_action_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateServiceActionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_426) = &input.id {
        object.key("Id").string(var_426.as_str());
    }
    if let Some(var_427) = &input.name {
        object.key("Name").string(var_427.as_str());
    }
    if let Some(var_428) = &input.definition {
        #[allow(unused_mut)]
        let mut object_429 = object.key("Definition").start_object();
        for (key_430, value_431) in var_428 {
             {
                object_429.key(key_430.as_str()).string(value_431.as_str());
            }
        }
        object_429.finish();
    }
    if let Some(var_432) = &input.description {
        object.key("Description").string(var_432.as_str());
    }
    if let Some(var_433) = &input.accept_language {
        object.key("AcceptLanguage").string(var_433.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_tag_option_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateTagOptionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_434) = &input.id {
        object.key("Id").string(var_434.as_str());
    }
    if let Some(var_435) = &input.value {
        object.key("Value").string(var_435.as_str());
    }
    if let Some(var_436) = &input.active {
        object.key("Active").boolean(*var_436);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_action_association(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ServiceActionAssociation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_437) = &input.service_action_id {
        object.key("ServiceActionId").string(var_437.as_str());
    }
    if let Some(var_438) = &input.product_id {
        object.key("ProductId").string(var_438.as_str());
    }
    if let Some(var_439) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_439.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Tag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_440) = &input.key {
        object.key("Key").string(var_440.as_str());
    }
    if let Some(var_441) = &input.value {
        object.key("Value").string(var_441.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_organization_node(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OrganizationNode) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_442) = &input.r#type {
        object.key("Type").string(var_442.as_str());
    }
    if let Some(var_443) = &input.value {
        object.key("Value").string(var_443.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_provisioning_artifact_properties(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProvisioningArtifactProperties) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_444) = &input.name {
        object.key("Name").string(var_444.as_str());
    }
    if let Some(var_445) = &input.description {
        object.key("Description").string(var_445.as_str());
    }
    if let Some(var_446) = &input.info {
        #[allow(unused_mut)]
        let mut object_447 = object.key("Info").start_object();
        for (key_448, value_449) in var_446 {
             {
                object_447.key(key_448.as_str()).string(value_449.as_str());
            }
        }
        object_447.finish();
    }
    if let Some(var_450) = &input.r#type {
        object.key("Type").string(var_450.as_str());
    }
    if input.disable_template_validation {
        object.key("DisableTemplateValidation").boolean(input.disable_template_validation);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_connection(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SourceConnection) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_451) = &input.r#type {
        object.key("Type").string(var_451.as_str());
    }
    if let Some(var_452) = &input.connection_parameters {
        #[allow(unused_mut)]
        let mut object_453 = object.key("ConnectionParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_source_connection_parameters(&mut object_453, var_452)?;
        object_453.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_provisioning_parameter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateProvisioningParameter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_454) = &input.key {
        object.key("Key").string(var_454.as_str());
    }
    if let Some(var_455) = &input.value {
        object.key("Value").string(var_455.as_str());
    }
    if input.use_previous_value {
        object.key("UsePreviousValue").boolean(input.use_previous_value);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_access_level_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AccessLevelFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_456) = &input.key {
        object.key("Key").string(var_456.as_str());
    }
    if let Some(var_457) = &input.value {
        object.key("Value").string(var_457.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_record_history_search_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ListRecordHistorySearchFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_458) = &input.key {
        object.key("Key").string(var_458.as_str());
    }
    if let Some(var_459) = &input.value {
        object.key("Value").string(var_459.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_tag_options_filters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ListTagOptionsFilters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_460) = &input.key {
        object.key("Key").string(var_460.as_str());
    }
    if let Some(var_461) = &input.value {
        object.key("Value").string(var_461.as_str());
    }
    if let Some(var_462) = &input.active {
        object.key("Active").boolean(*var_462);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_provisioning_parameter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProvisioningParameter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_463) = &input.key {
        object.key("Key").string(var_463.as_str());
    }
    if let Some(var_464) = &input.value {
        object.key("Value").string(var_464.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_provisioning_preferences(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProvisioningPreferences) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_465) = &input.stack_set_accounts {
        let mut array_466 = object.key("StackSetAccounts").start_array();
        for item_467 in var_465 {
             {
                array_466.value().string(item_467.as_str());
            }
        }
        array_466.finish();
    }
    if let Some(var_468) = &input.stack_set_regions {
        let mut array_469 = object.key("StackSetRegions").start_array();
        for item_470 in var_468 {
             {
                array_469.value().string(item_470.as_str());
            }
        }
        array_469.finish();
    }
    if let Some(var_471) = &input.stack_set_failure_tolerance_count {
        object.key("StackSetFailureToleranceCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_471).into()));
    }
    if let Some(var_472) = &input.stack_set_failure_tolerance_percentage {
        object.key("StackSetFailureTolerancePercentage").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_472).into()));
    }
    if let Some(var_473) = &input.stack_set_max_concurrency_count {
        object.key("StackSetMaxConcurrencyCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_473).into()));
    }
    if let Some(var_474) = &input.stack_set_max_concurrency_percentage {
        object.key("StackSetMaxConcurrencyPercentage").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_474).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_provisioning_preferences(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateProvisioningPreferences) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_475) = &input.stack_set_accounts {
        let mut array_476 = object.key("StackSetAccounts").start_array();
        for item_477 in var_475 {
             {
                array_476.value().string(item_477.as_str());
            }
        }
        array_476.finish();
    }
    if let Some(var_478) = &input.stack_set_regions {
        let mut array_479 = object.key("StackSetRegions").start_array();
        for item_480 in var_478 {
             {
                array_479.value().string(item_480.as_str());
            }
        }
        array_479.finish();
    }
    if let Some(var_481) = &input.stack_set_failure_tolerance_count {
        object.key("StackSetFailureToleranceCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_481).into()));
    }
    if let Some(var_482) = &input.stack_set_failure_tolerance_percentage {
        object.key("StackSetFailureTolerancePercentage").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_482).into()));
    }
    if let Some(var_483) = &input.stack_set_max_concurrency_count {
        object.key("StackSetMaxConcurrencyCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_483).into()));
    }
    if let Some(var_484) = &input.stack_set_max_concurrency_percentage {
        object.key("StackSetMaxConcurrencyPercentage").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_484).into()));
    }
    if let Some(var_485) = &input.stack_set_operation_type {
        object.key("StackSetOperationType").string(var_485.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_connection_parameters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SourceConnectionParameters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_486) = &input.code_star {
        #[allow(unused_mut)]
        let mut object_487 = object.key("CodeStar").start_object();
        crate::json_ser::serialize_structure_crate_model_code_star_parameters(&mut object_487, var_486)?;
        object_487.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_star_parameters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CodeStarParameters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_488) = &input.connection_arn {
        object.key("ConnectionArn").string(var_488.as_str());
    }
    if let Some(var_489) = &input.repository {
        object.key("Repository").string(var_489.as_str());
    }
    if let Some(var_490) = &input.branch {
        object.key("Branch").string(var_490.as_str());
    }
    if let Some(var_491) = &input.artifact_path {
        object.key("ArtifactPath").string(var_491.as_str());
    }
    Ok(())
}

