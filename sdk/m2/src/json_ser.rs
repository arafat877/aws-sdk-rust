// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_application_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateApplicationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.definition {
        #[allow(unused_mut)]
        let mut object_3 = object.key("definition").start_object();
        crate::json_ser::serialize_union_crate_model_definition(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.description {
        object.key("description").string(var_4.as_str());
    }
    if let Some(var_5) = &input.engine_type {
        object.key("engineType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.name {
        object.key("name").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        #[allow(unused_mut)]
        let mut object_9 = object.key("tags").start_object();
        for (key_10, value_11) in var_8 {
             {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_set_import_task_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateDataSetImportTaskInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_12) = &input.client_token {
        object.key("clientToken").string(var_12.as_str());
    }
    if let Some(var_13) = &input.import_config {
        #[allow(unused_mut)]
        let mut object_14 = object.key("importConfig").start_object();
        crate::json_ser::serialize_union_crate_model_data_set_import_config(&mut object_14, var_13)?;
        object_14.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_deployment_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateDeploymentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_15) = &input.application_version {
        object.key("applicationVersion").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_15).into()));
    }
    if let Some(var_16) = &input.client_token {
        object.key("clientToken").string(var_16.as_str());
    }
    if let Some(var_17) = &input.environment_id {
        object.key("environmentId").string(var_17.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_environment_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateEnvironmentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_18) = &input.client_token {
        object.key("clientToken").string(var_18.as_str());
    }
    if let Some(var_19) = &input.description {
        object.key("description").string(var_19.as_str());
    }
    if let Some(var_20) = &input.engine_type {
        object.key("engineType").string(var_20.as_str());
    }
    if let Some(var_21) = &input.engine_version {
        object.key("engineVersion").string(var_21.as_str());
    }
    if let Some(var_22) = &input.high_availability_config {
        #[allow(unused_mut)]
        let mut object_23 = object.key("highAvailabilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_high_availability_config(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.instance_type {
        object.key("instanceType").string(var_24.as_str());
    }
    if let Some(var_25) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_25.as_str());
    }
    if let Some(var_26) = &input.name {
        object.key("name").string(var_26.as_str());
    }
    if let Some(var_27) = &input.preferred_maintenance_window {
        object.key("preferredMaintenanceWindow").string(var_27.as_str());
    }
    if input.publicly_accessible {
        object.key("publiclyAccessible").boolean(input.publicly_accessible);
    }
    if let Some(var_28) = &input.security_group_ids {
        let mut array_29 = object.key("securityGroupIds").start_array();
        for item_30 in var_28 {
             {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    if let Some(var_31) = &input.storage_configurations {
        let mut array_32 = object.key("storageConfigurations").start_array();
        for item_33 in var_31 {
             {
                #[allow(unused_mut)]
                let mut object_34 = array_32.value().start_object();
                crate::json_ser::serialize_union_crate_model_storage_configuration(&mut object_34, item_33)?;
                object_34.finish();
            }
        }
        array_32.finish();
    }
    if let Some(var_35) = &input.subnet_ids {
        let mut array_36 = object.key("subnetIds").start_array();
        for item_37 in var_35 {
             {
                array_36.value().string(item_37.as_str());
            }
        }
        array_36.finish();
    }
    if let Some(var_38) = &input.tags {
        #[allow(unused_mut)]
        let mut object_39 = object.key("tags").start_object();
        for (key_40, value_41) in var_38 {
             {
                object_39.key(key_40.as_str()).string(value_41.as_str());
            }
        }
        object_39.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_batch_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartBatchJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_42) = &input.batch_job_identifier {
        #[allow(unused_mut)]
        let mut object_43 = object.key("batchJobIdentifier").start_object();
        crate::json_ser::serialize_union_crate_model_batch_job_identifier(&mut object_43, var_42)?;
        object_43.finish();
    }
    if let Some(var_44) = &input.job_params {
        #[allow(unused_mut)]
        let mut object_45 = object.key("jobParams").start_object();
        for (key_46, value_47) in var_44 {
             {
                object_45.key(key_46.as_str()).string(value_47.as_str());
            }
        }
        object_45.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_application_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopApplicationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.force_stop {
        object.key("forceStop").boolean(input.force_stop);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_48) = &input.tags {
        #[allow(unused_mut)]
        let mut object_49 = object.key("tags").start_object();
        for (key_50, value_51) in var_48 {
             {
                object_49.key(key_50.as_str()).string(value_51.as_str());
            }
        }
        object_49.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_application_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateApplicationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_52) = &input.current_application_version {
        object.key("currentApplicationVersion").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_52).into()));
    }
    if let Some(var_53) = &input.definition {
        #[allow(unused_mut)]
        let mut object_54 = object.key("definition").start_object();
        crate::json_ser::serialize_union_crate_model_definition(&mut object_54, var_53)?;
        object_54.finish();
    }
    if let Some(var_55) = &input.description {
        object.key("description").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_environment_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateEnvironmentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.apply_during_maintenance_window {
        object.key("applyDuringMaintenanceWindow").boolean(input.apply_during_maintenance_window);
    }
    if let Some(var_56) = &input.desired_capacity {
        object.key("desiredCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_56).into()));
    }
    if let Some(var_57) = &input.engine_version {
        object.key("engineVersion").string(var_57.as_str());
    }
    if let Some(var_58) = &input.instance_type {
        object.key("instanceType").string(var_58.as_str());
    }
    if let Some(var_59) = &input.preferred_maintenance_window {
        object.key("preferredMaintenanceWindow").string(var_59.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_definition(object_3: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Definition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::Definition::S3Location(inner) => {
             {
                object_3.key("s3Location").string(inner.as_str());
            }
        },
        crate::model::Definition::Content(inner) => {
             {
                object_3.key("content").string(inner.as_str());
            }
        },
        crate::model::Definition::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("Definition"))
    }
    Ok(())
}

pub fn serialize_union_crate_model_data_set_import_config(object_14: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataSetImportConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::DataSetImportConfig::S3Location(inner) => {
             {
                object_14.key("s3Location").string(inner.as_str());
            }
        },
        crate::model::DataSetImportConfig::DataSets(inner) => {
             {
                let mut array_60 = object_14.key("dataSets").start_array();
                for item_61 in inner {
                     {
                        #[allow(unused_mut)]
                        let mut object_62 = array_60.value().start_object();
                        crate::json_ser::serialize_structure_crate_model_data_set_import_item(&mut object_62, item_61)?;
                        object_62.finish();
                    }
                }
                array_60.finish();
            }
        },
        crate::model::DataSetImportConfig::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("DataSetImportConfig"))
    }
    Ok(())
}

pub fn serialize_structure_crate_model_high_availability_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HighAvailabilityConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_63) = &input.desired_capacity {
        object.key("desiredCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_63).into()));
    }
    Ok(())
}

pub fn serialize_union_crate_model_storage_configuration(object_34: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StorageConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::StorageConfiguration::Efs(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_64 = object_34.key("efs").start_object();
                crate::json_ser::serialize_structure_crate_model_efs_storage_configuration(&mut object_64, inner)?;
                object_64.finish();
            }
        },
        crate::model::StorageConfiguration::Fsx(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_65 = object_34.key("fsx").start_object();
                crate::json_ser::serialize_structure_crate_model_fsx_storage_configuration(&mut object_65, inner)?;
                object_65.finish();
            }
        },
        crate::model::StorageConfiguration::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("StorageConfiguration"))
    }
    Ok(())
}

pub fn serialize_union_crate_model_batch_job_identifier(object_43: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::BatchJobIdentifier) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::BatchJobIdentifier::FileBatchJobIdentifier(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_66 = object_43.key("fileBatchJobIdentifier").start_object();
                crate::json_ser::serialize_structure_crate_model_file_batch_job_identifier(&mut object_66, inner)?;
                object_66.finish();
            }
        },
        crate::model::BatchJobIdentifier::ScriptBatchJobIdentifier(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_67 = object_43.key("scriptBatchJobIdentifier").start_object();
                crate::json_ser::serialize_structure_crate_model_script_batch_job_identifier(&mut object_67, inner)?;
                object_67.finish();
            }
        },
        crate::model::BatchJobIdentifier::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("BatchJobIdentifier"))
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_set_import_item(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataSetImportItem) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_68) = &input.data_set {
        #[allow(unused_mut)]
        let mut object_69 = object.key("dataSet").start_object();
        crate::json_ser::serialize_structure_crate_model_data_set(&mut object_69, var_68)?;
        object_69.finish();
    }
    if let Some(var_70) = &input.external_location {
        #[allow(unused_mut)]
        let mut object_71 = object.key("externalLocation").start_object();
        crate::json_ser::serialize_union_crate_model_external_location(&mut object_71, var_70)?;
        object_71.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_efs_storage_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EfsStorageConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_72) = &input.file_system_id {
        object.key("file-system-id").string(var_72.as_str());
    }
    if let Some(var_73) = &input.mount_point {
        object.key("mount-point").string(var_73.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fsx_storage_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FsxStorageConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_74) = &input.file_system_id {
        object.key("file-system-id").string(var_74.as_str());
    }
    if let Some(var_75) = &input.mount_point {
        object.key("mount-point").string(var_75.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_batch_job_identifier(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FileBatchJobIdentifier) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_76) = &input.file_name {
        object.key("fileName").string(var_76.as_str());
    }
    if let Some(var_77) = &input.folder_path {
        object.key("folderPath").string(var_77.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_script_batch_job_identifier(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ScriptBatchJobIdentifier) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_78) = &input.script_name {
        object.key("scriptName").string(var_78.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_set(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataSet) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_79) = &input.storage_type {
        object.key("storageType").string(var_79.as_str());
    }
    if let Some(var_80) = &input.dataset_name {
        object.key("datasetName").string(var_80.as_str());
    }
    if let Some(var_81) = &input.dataset_org {
        #[allow(unused_mut)]
        let mut object_82 = object.key("datasetOrg").start_object();
        crate::json_ser::serialize_union_crate_model_dataset_org_attributes(&mut object_82, var_81)?;
        object_82.finish();
    }
    if let Some(var_83) = &input.relative_path {
        object.key("relativePath").string(var_83.as_str());
    }
    if let Some(var_84) = &input.record_length {
        #[allow(unused_mut)]
        let mut object_85 = object.key("recordLength").start_object();
        crate::json_ser::serialize_structure_crate_model_record_length(&mut object_85, var_84)?;
        object_85.finish();
    }
    Ok(())
}

pub fn serialize_union_crate_model_external_location(object_71: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ExternalLocation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::ExternalLocation::S3Location(inner) => {
             {
                object_71.key("s3Location").string(inner.as_str());
            }
        },
        crate::model::ExternalLocation::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("ExternalLocation"))
    }
    Ok(())
}

pub fn serialize_union_crate_model_dataset_org_attributes(object_82: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DatasetOrgAttributes) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::DatasetOrgAttributes::Vsam(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_86 = object_82.key("vsam").start_object();
                crate::json_ser::serialize_structure_crate_model_vsam_attributes(&mut object_86, inner)?;
                object_86.finish();
            }
        },
        crate::model::DatasetOrgAttributes::Gdg(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_87 = object_82.key("gdg").start_object();
                crate::json_ser::serialize_structure_crate_model_gdg_attributes(&mut object_87, inner)?;
                object_87.finish();
            }
        },
        crate::model::DatasetOrgAttributes::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("DatasetOrgAttributes"))
    }
    Ok(())
}

pub fn serialize_structure_crate_model_record_length(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RecordLength) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("min").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.min).into()));
    }
     {
        object.key("max").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vsam_attributes(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::VsamAttributes) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_88) = &input.format {
        object.key("format").string(var_88.as_str());
    }
    if let Some(var_89) = &input.encoding {
        object.key("encoding").string(var_89.as_str());
    }
    if input.compressed {
        object.key("compressed").boolean(input.compressed);
    }
    if let Some(var_90) = &input.primary_key {
        #[allow(unused_mut)]
        let mut object_91 = object.key("primaryKey").start_object();
        crate::json_ser::serialize_structure_crate_model_primary_key(&mut object_91, var_90)?;
        object_91.finish();
    }
    if let Some(var_92) = &input.alternate_keys {
        let mut array_93 = object.key("alternateKeys").start_array();
        for item_94 in var_92 {
             {
                #[allow(unused_mut)]
                let mut object_95 = array_93.value().start_object();
                crate::json_ser::serialize_structure_crate_model_alternate_key(&mut object_95, item_94)?;
                object_95.finish();
            }
        }
        array_93.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_gdg_attributes(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::GdgAttributes) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.limit != 0 {
        object.key("limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.limit).into()));
    }
    if let Some(var_96) = &input.roll_disposition {
        object.key("rollDisposition").string(var_96.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_primary_key(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PrimaryKey) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_97) = &input.name {
        object.key("name").string(var_97.as_str());
    }
     {
        object.key("offset").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.offset).into()));
    }
     {
        object.key("length").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.length).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_alternate_key(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AlternateKey) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_98) = &input.name {
        object.key("name").string(var_98.as_str());
    }
     {
        object.key("offset").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.offset).into()));
    }
     {
        object.key("length").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.length).into()));
    }
    if input.allow_duplicates {
        object.key("allowDuplicates").boolean(input.allow_duplicates);
    }
    Ok(())
}

