// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// User does not have sufficient access to perform this action.
    AccessDeniedException(crate::error::AccessDeniedException),
    /// Exception thrown if a resource in a create request already exists.
    ConflictException(crate::error::ConflictException),
    /// Exception thrown if something goes wrong within the service.
    InternalServerException(crate::error::InternalServerException),
    /// Exception thrown if a resource referenced in the request doesn't exist.
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// Exception thrown if the user's AWS account has reached a service limit and the operation cannot proceed.
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// Exception thrown if the api has been called too quickly be the client.
    ThrottlingException(crate::error::ThrottlingException),
    /// Exception thrown if an invalid parameter is provided to an API.
    ValidationException(crate::error::ValidationException),
    /// 
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    /// 
    /// When logging an error from the SDK, it is recommended that you either wrap the error in
    /// [`DisplayErrorContext`](crate::types::DisplayErrorContext), use another
    /// error reporter library that visits the error's cause/source chain, or call
    /// [`Error::source`](std::error::Error::source) for more details about the underlying cause.
    /// 
    Unhandled(crate::error::Unhandled)
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f)
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDestinationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDestinationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateDestinationError> for Error {
    fn from(err: crate::error::CreateDestinationError) -> Self {
        match err.kind {
            crate::error::CreateDestinationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateDestinationErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateDestinationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateDestinationErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateDestinationErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateDestinationErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateDestinationErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateDestinationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSiteError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSiteError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateSiteError> for Error {
    fn from(err: crate::error::CreateSiteError) -> Self {
        match err.kind {
            crate::error::CreateSiteErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateSiteErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateSiteErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateSiteErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateSiteErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateSiteErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateSiteErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateWorkerError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateWorkerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateWorkerError> for Error {
    fn from(err: crate::error::CreateWorkerError) -> Self {
        match err.kind {
            crate::error::CreateWorkerErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateWorkerErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateWorkerErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateWorkerErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateWorkerErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateWorkerErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateWorkerErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateWorkerErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateWorkerFleetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateWorkerFleetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateWorkerFleetError> for Error {
    fn from(err: crate::error::CreateWorkerFleetError) -> Self {
        match err.kind {
            crate::error::CreateWorkerFleetErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateWorkerFleetErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateWorkerFleetErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateWorkerFleetErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateWorkerFleetErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateWorkerFleetErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateWorkerFleetErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateWorkerFleetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDestinationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDestinationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteDestinationError> for Error {
    fn from(err: crate::error::DeleteDestinationError) -> Self {
        match err.kind {
            crate::error::DeleteDestinationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteDestinationErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteDestinationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteDestinationErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteDestinationErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteDestinationErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteDestinationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSiteError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSiteError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteSiteError> for Error {
    fn from(err: crate::error::DeleteSiteError) -> Self {
        match err.kind {
            crate::error::DeleteSiteErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteSiteErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteSiteErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteSiteErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteSiteErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteSiteErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteSiteErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteWorkerError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteWorkerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteWorkerError> for Error {
    fn from(err: crate::error::DeleteWorkerError) -> Self {
        match err.kind {
            crate::error::DeleteWorkerErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteWorkerErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteWorkerErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteWorkerErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteWorkerErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteWorkerErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteWorkerErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteWorkerFleetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteWorkerFleetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteWorkerFleetError> for Error {
    fn from(err: crate::error::DeleteWorkerFleetError) -> Self {
        match err.kind {
            crate::error::DeleteWorkerFleetErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteWorkerFleetErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteWorkerFleetErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteWorkerFleetErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteWorkerFleetErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteWorkerFleetErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteWorkerFleetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDestinationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDestinationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetDestinationError> for Error {
    fn from(err: crate::error::GetDestinationError) -> Self {
        match err.kind {
            crate::error::GetDestinationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetDestinationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetDestinationErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetDestinationErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetDestinationErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetDestinationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSiteError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSiteError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetSiteError> for Error {
    fn from(err: crate::error::GetSiteError) -> Self {
        match err.kind {
            crate::error::GetSiteErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetSiteErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetSiteErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetSiteErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetSiteErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetSiteErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetWorkerError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetWorkerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetWorkerError> for Error {
    fn from(err: crate::error::GetWorkerError) -> Self {
        match err.kind {
            crate::error::GetWorkerErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetWorkerErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetWorkerErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetWorkerErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetWorkerErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetWorkerErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetWorkerFleetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetWorkerFleetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetWorkerFleetError> for Error {
    fn from(err: crate::error::GetWorkerFleetError) -> Self {
        match err.kind {
            crate::error::GetWorkerFleetErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetWorkerFleetErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetWorkerFleetErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetWorkerFleetErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetWorkerFleetErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetWorkerFleetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDestinationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDestinationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListDestinationsError> for Error {
    fn from(err: crate::error::ListDestinationsError) -> Self {
        match err.kind {
            crate::error::ListDestinationsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListDestinationsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListDestinationsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListDestinationsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListDestinationsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListDestinationsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSitesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSitesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListSitesError> for Error {
    fn from(err: crate::error::ListSitesError) -> Self {
        match err.kind {
            crate::error::ListSitesErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListSitesErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListSitesErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListSitesErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListSitesErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWorkerFleetsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListWorkerFleetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListWorkerFleetsError> for Error {
    fn from(err: crate::error::ListWorkerFleetsError) -> Self {
        match err.kind {
            crate::error::ListWorkerFleetsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListWorkerFleetsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListWorkerFleetsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListWorkerFleetsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListWorkerFleetsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListWorkerFleetsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWorkersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListWorkersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListWorkersError> for Error {
    fn from(err: crate::error::ListWorkersError) -> Self {
        match err.kind {
            crate::error::ListWorkersErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListWorkersErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListWorkersErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListWorkersErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListWorkersErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListWorkersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDestinationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateDestinationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateDestinationError> for Error {
    fn from(err: crate::error::UpdateDestinationError) -> Self {
        match err.kind {
            crate::error::UpdateDestinationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateDestinationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateDestinationErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateDestinationErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateDestinationErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateDestinationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSiteError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateSiteError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateSiteError> for Error {
    fn from(err: crate::error::UpdateSiteError) -> Self {
        match err.kind {
            crate::error::UpdateSiteErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateSiteErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateSiteErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateSiteErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateSiteErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateSiteErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateWorkerError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateWorkerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateWorkerError> for Error {
    fn from(err: crate::error::UpdateWorkerError) -> Self {
        match err.kind {
            crate::error::UpdateWorkerErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateWorkerErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateWorkerErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateWorkerErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateWorkerErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateWorkerErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateWorkerFleetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateWorkerFleetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateWorkerFleetError> for Error {
    fn from(err: crate::error::UpdateWorkerFleetError) -> Self {
        match err.kind {
            crate::error::UpdateWorkerFleetErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateWorkerFleetErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateWorkerFleetErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateWorkerFleetErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateWorkerFleetErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateWorkerFleetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl std::error::Error for Error {}

