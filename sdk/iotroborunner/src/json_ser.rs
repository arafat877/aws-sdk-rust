// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_destination_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateDestinationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.additional_fixed_properties {
        object.key("additionalFixedProperties").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_token {
        object.key("clientToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.name {
        object.key("name").string(var_3.as_str());
    }
    if let Some(var_4) = &input.site {
        object.key("site").string(var_4.as_str());
    }
    if let Some(var_5) = &input.state {
        object.key("state").string(var_5.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_site_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateSiteInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_6) = &input.client_token {
        object.key("clientToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.country_code {
        object.key("countryCode").string(var_7.as_str());
    }
    if let Some(var_8) = &input.description {
        object.key("description").string(var_8.as_str());
    }
    if let Some(var_9) = &input.name {
        object.key("name").string(var_9.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_worker_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateWorkerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_10) = &input.additional_fixed_properties {
        object.key("additionalFixedProperties").string(var_10.as_str());
    }
    if let Some(var_11) = &input.additional_transient_properties {
        object.key("additionalTransientProperties").string(var_11.as_str());
    }
    if let Some(var_12) = &input.client_token {
        object.key("clientToken").string(var_12.as_str());
    }
    if let Some(var_13) = &input.fleet {
        object.key("fleet").string(var_13.as_str());
    }
    if let Some(var_14) = &input.name {
        object.key("name").string(var_14.as_str());
    }
    if let Some(var_15) = &input.orientation {
        #[allow(unused_mut)]
        let mut object_16 = object.key("orientation").start_object();
        crate::json_ser::serialize_union_crate_model_orientation(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.position {
        #[allow(unused_mut)]
        let mut object_18 = object.key("position").start_object();
        crate::json_ser::serialize_union_crate_model_position_coordinates(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.vendor_properties {
        #[allow(unused_mut)]
        let mut object_20 = object.key("vendorProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_vendor_properties(&mut object_20, var_19)?;
        object_20.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_worker_fleet_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateWorkerFleetInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_21) = &input.additional_fixed_properties {
        object.key("additionalFixedProperties").string(var_21.as_str());
    }
    if let Some(var_22) = &input.client_token {
        object.key("clientToken").string(var_22.as_str());
    }
    if let Some(var_23) = &input.name {
        object.key("name").string(var_23.as_str());
    }
    if let Some(var_24) = &input.site {
        object.key("site").string(var_24.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_destination_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteDestinationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_25) = &input.id {
        object.key("id").string(var_25.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_site_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteSiteInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_26) = &input.id {
        object.key("id").string(var_26.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_worker_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteWorkerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_27) = &input.id {
        object.key("id").string(var_27.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_worker_fleet_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteWorkerFleetInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_28) = &input.id {
        object.key("id").string(var_28.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_destination_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDestinationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_29) = &input.additional_fixed_properties {
        object.key("additionalFixedProperties").string(var_29.as_str());
    }
    if let Some(var_30) = &input.id {
        object.key("id").string(var_30.as_str());
    }
    if let Some(var_31) = &input.name {
        object.key("name").string(var_31.as_str());
    }
    if let Some(var_32) = &input.state {
        object.key("state").string(var_32.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_site_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateSiteInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_33) = &input.country_code {
        object.key("countryCode").string(var_33.as_str());
    }
    if let Some(var_34) = &input.description {
        object.key("description").string(var_34.as_str());
    }
    if let Some(var_35) = &input.id {
        object.key("id").string(var_35.as_str());
    }
    if let Some(var_36) = &input.name {
        object.key("name").string(var_36.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_worker_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateWorkerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_37) = &input.additional_fixed_properties {
        object.key("additionalFixedProperties").string(var_37.as_str());
    }
    if let Some(var_38) = &input.additional_transient_properties {
        object.key("additionalTransientProperties").string(var_38.as_str());
    }
    if let Some(var_39) = &input.id {
        object.key("id").string(var_39.as_str());
    }
    if let Some(var_40) = &input.name {
        object.key("name").string(var_40.as_str());
    }
    if let Some(var_41) = &input.orientation {
        #[allow(unused_mut)]
        let mut object_42 = object.key("orientation").start_object();
        crate::json_ser::serialize_union_crate_model_orientation(&mut object_42, var_41)?;
        object_42.finish();
    }
    if let Some(var_43) = &input.position {
        #[allow(unused_mut)]
        let mut object_44 = object.key("position").start_object();
        crate::json_ser::serialize_union_crate_model_position_coordinates(&mut object_44, var_43)?;
        object_44.finish();
    }
    if let Some(var_45) = &input.vendor_properties {
        #[allow(unused_mut)]
        let mut object_46 = object.key("vendorProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_vendor_properties(&mut object_46, var_45)?;
        object_46.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_worker_fleet_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateWorkerFleetInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_47) = &input.additional_fixed_properties {
        object.key("additionalFixedProperties").string(var_47.as_str());
    }
    if let Some(var_48) = &input.id {
        object.key("id").string(var_48.as_str());
    }
    if let Some(var_49) = &input.name {
        object.key("name").string(var_49.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_orientation(object_16: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Orientation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::Orientation::Degrees(inner) => {
             {
                object_16.key("degrees").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*inner).into()));
            }
        },
        crate::model::Orientation::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("Orientation"))
    }
    Ok(())
}

pub fn serialize_union_crate_model_position_coordinates(object_18: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PositionCoordinates) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::PositionCoordinates::CartesianCoordinates(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_50 = object_18.key("cartesianCoordinates").start_object();
                crate::json_ser::serialize_structure_crate_model_cartesian_coordinates(&mut object_50, inner)?;
                object_50.finish();
            }
        },
        crate::model::PositionCoordinates::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("PositionCoordinates"))
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vendor_properties(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::VendorProperties) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_51) = &input.vendor_worker_id {
        object.key("vendorWorkerId").string(var_51.as_str());
    }
    if let Some(var_52) = &input.vendor_worker_ip_address {
        object.key("vendorWorkerIpAddress").string(var_52.as_str());
    }
    if let Some(var_53) = &input.vendor_additional_transient_properties {
        object.key("vendorAdditionalTransientProperties").string(var_53.as_str());
    }
    if let Some(var_54) = &input.vendor_additional_fixed_properties {
        object.key("vendorAdditionalFixedProperties").string(var_54.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cartesian_coordinates(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CartesianCoordinates) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_55) = &input.x {
        object.key("x").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_55).into()));
    }
    if let Some(var_56) = &input.y {
        object.key("y").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_56).into()));
    }
    if let Some(var_57) = &input.z {
        object.key("z").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_57).into()));
    }
    Ok(())
}

