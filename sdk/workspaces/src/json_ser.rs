// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_connection_alias_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateConnectionAliasInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.alias_id {
        object.key("AliasId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.resource_id {
        object.key("ResourceId").string(var_2.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_ip_groups_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateIpGroupsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_3) = &input.directory_id {
        object.key("DirectoryId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.group_ids {
        let mut array_5 = object.key("GroupIds").start_array();
        for item_6 in var_4 {
             {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_authorize_ip_rules_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AuthorizeIpRulesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_7) = &input.group_id {
        object.key("GroupId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.user_rules {
        let mut array_9 = object.key("UserRules").start_array();
        for item_10 in var_8 {
             {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_rule_item(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_copy_workspace_image_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CopyWorkspaceImageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_12) = &input.name {
        object.key("Name").string(var_12.as_str());
    }
    if let Some(var_13) = &input.description {
        object.key("Description").string(var_13.as_str());
    }
    if let Some(var_14) = &input.source_image_id {
        object.key("SourceImageId").string(var_14.as_str());
    }
    if let Some(var_15) = &input.source_region {
        object.key("SourceRegion").string(var_15.as_str());
    }
    if let Some(var_16) = &input.tags {
        let mut array_17 = object.key("Tags").start_array();
        for item_18 in var_16 {
             {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_connect_client_add_in_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateConnectClientAddInInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_20) = &input.resource_id {
        object.key("ResourceId").string(var_20.as_str());
    }
    if let Some(var_21) = &input.name {
        object.key("Name").string(var_21.as_str());
    }
    if let Some(var_22) = &input.url {
        object.key("URL").string(var_22.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_connection_alias_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateConnectionAliasInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_23) = &input.connection_string {
        object.key("ConnectionString").string(var_23.as_str());
    }
    if let Some(var_24) = &input.tags {
        let mut array_25 = object.key("Tags").start_array();
        for item_26 in var_24 {
             {
                #[allow(unused_mut)]
                let mut object_27 = array_25.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_27, item_26)?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ip_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateIpGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_28) = &input.group_name {
        object.key("GroupName").string(var_28.as_str());
    }
    if let Some(var_29) = &input.group_desc {
        object.key("GroupDesc").string(var_29.as_str());
    }
    if let Some(var_30) = &input.user_rules {
        let mut array_31 = object.key("UserRules").start_array();
        for item_32 in var_30 {
             {
                #[allow(unused_mut)]
                let mut object_33 = array_31.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_rule_item(&mut object_33, item_32)?;
                object_33.finish();
            }
        }
        array_31.finish();
    }
    if let Some(var_34) = &input.tags {
        let mut array_35 = object.key("Tags").start_array();
        for item_36 in var_34 {
             {
                #[allow(unused_mut)]
                let mut object_37 = array_35.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_37, item_36)?;
                object_37.finish();
            }
        }
        array_35.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_standby_workspaces_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateStandbyWorkspacesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_38) = &input.primary_region {
        object.key("PrimaryRegion").string(var_38.as_str());
    }
    if let Some(var_39) = &input.standby_workspaces {
        let mut array_40 = object.key("StandbyWorkspaces").start_array();
        for item_41 in var_39 {
             {
                #[allow(unused_mut)]
                let mut object_42 = array_40.value().start_object();
                crate::json_ser::serialize_structure_crate_model_standby_workspace(&mut object_42, item_41)?;
                object_42.finish();
            }
        }
        array_40.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_tags_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateTagsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_43) = &input.resource_id {
        object.key("ResourceId").string(var_43.as_str());
    }
    if let Some(var_44) = &input.tags {
        let mut array_45 = object.key("Tags").start_array();
        for item_46 in var_44 {
             {
                #[allow(unused_mut)]
                let mut object_47 = array_45.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_47, item_46)?;
                object_47.finish();
            }
        }
        array_45.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_updated_workspace_image_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateUpdatedWorkspaceImageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_48) = &input.name {
        object.key("Name").string(var_48.as_str());
    }
    if let Some(var_49) = &input.description {
        object.key("Description").string(var_49.as_str());
    }
    if let Some(var_50) = &input.source_image_id {
        object.key("SourceImageId").string(var_50.as_str());
    }
    if let Some(var_51) = &input.tags {
        let mut array_52 = object.key("Tags").start_array();
        for item_53 in var_51 {
             {
                #[allow(unused_mut)]
                let mut object_54 = array_52.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_54, item_53)?;
                object_54.finish();
            }
        }
        array_52.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workspace_bundle_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateWorkspaceBundleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_55) = &input.bundle_name {
        object.key("BundleName").string(var_55.as_str());
    }
    if let Some(var_56) = &input.bundle_description {
        object.key("BundleDescription").string(var_56.as_str());
    }
    if let Some(var_57) = &input.image_id {
        object.key("ImageId").string(var_57.as_str());
    }
    if let Some(var_58) = &input.compute_type {
        #[allow(unused_mut)]
        let mut object_59 = object.key("ComputeType").start_object();
        crate::json_ser::serialize_structure_crate_model_compute_type(&mut object_59, var_58)?;
        object_59.finish();
    }
    if let Some(var_60) = &input.user_storage {
        #[allow(unused_mut)]
        let mut object_61 = object.key("UserStorage").start_object();
        crate::json_ser::serialize_structure_crate_model_user_storage(&mut object_61, var_60)?;
        object_61.finish();
    }
    if let Some(var_62) = &input.root_storage {
        #[allow(unused_mut)]
        let mut object_63 = object.key("RootStorage").start_object();
        crate::json_ser::serialize_structure_crate_model_root_storage(&mut object_63, var_62)?;
        object_63.finish();
    }
    if let Some(var_64) = &input.tags {
        let mut array_65 = object.key("Tags").start_array();
        for item_66 in var_64 {
             {
                #[allow(unused_mut)]
                let mut object_67 = array_65.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_67, item_66)?;
                object_67.finish();
            }
        }
        array_65.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workspace_image_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateWorkspaceImageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_68) = &input.name {
        object.key("Name").string(var_68.as_str());
    }
    if let Some(var_69) = &input.description {
        object.key("Description").string(var_69.as_str());
    }
    if let Some(var_70) = &input.workspace_id {
        object.key("WorkspaceId").string(var_70.as_str());
    }
    if let Some(var_71) = &input.tags {
        let mut array_72 = object.key("Tags").start_array();
        for item_73 in var_71 {
             {
                #[allow(unused_mut)]
                let mut object_74 = array_72.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_74, item_73)?;
                object_74.finish();
            }
        }
        array_72.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workspaces_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateWorkspacesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_75) = &input.workspaces {
        let mut array_76 = object.key("Workspaces").start_array();
        for item_77 in var_75 {
             {
                #[allow(unused_mut)]
                let mut object_78 = array_76.value().start_object();
                crate::json_ser::serialize_structure_crate_model_workspace_request(&mut object_78, item_77)?;
                object_78.finish();
            }
        }
        array_76.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_client_branding_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteClientBrandingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_79) = &input.resource_id {
        object.key("ResourceId").string(var_79.as_str());
    }
    if let Some(var_80) = &input.platforms {
        let mut array_81 = object.key("Platforms").start_array();
        for item_82 in var_80 {
             {
                array_81.value().string(item_82.as_str());
            }
        }
        array_81.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_connect_client_add_in_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteConnectClientAddInInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_83) = &input.add_in_id {
        object.key("AddInId").string(var_83.as_str());
    }
    if let Some(var_84) = &input.resource_id {
        object.key("ResourceId").string(var_84.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_connection_alias_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteConnectionAliasInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_85) = &input.alias_id {
        object.key("AliasId").string(var_85.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ip_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteIpGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_86) = &input.group_id {
        object.key("GroupId").string(var_86.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_tags_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteTagsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_87) = &input.resource_id {
        object.key("ResourceId").string(var_87.as_str());
    }
    if let Some(var_88) = &input.tag_keys {
        let mut array_89 = object.key("TagKeys").start_array();
        for item_90 in var_88 {
             {
                array_89.value().string(item_90.as_str());
            }
        }
        array_89.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workspace_bundle_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteWorkspaceBundleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_91) = &input.bundle_id {
        object.key("BundleId").string(var_91.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workspace_image_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteWorkspaceImageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_92) = &input.image_id {
        object.key("ImageId").string(var_92.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_workspace_directory_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeregisterWorkspaceDirectoryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_93) = &input.directory_id {
        object.key("DirectoryId").string(var_93.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_account_modifications_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeAccountModificationsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_94) = &input.next_token {
        object.key("NextToken").string(var_94.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_client_branding_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeClientBrandingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_95) = &input.resource_id {
        object.key("ResourceId").string(var_95.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_client_properties_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeClientPropertiesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_96) = &input.resource_ids {
        let mut array_97 = object.key("ResourceIds").start_array();
        for item_98 in var_96 {
             {
                array_97.value().string(item_98.as_str());
            }
        }
        array_97.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_connect_client_add_ins_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeConnectClientAddInsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_99) = &input.resource_id {
        object.key("ResourceId").string(var_99.as_str());
    }
    if let Some(var_100) = &input.next_token {
        object.key("NextToken").string(var_100.as_str());
    }
    if let Some(var_101) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_101).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_connection_aliases_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeConnectionAliasesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_102) = &input.alias_ids {
        let mut array_103 = object.key("AliasIds").start_array();
        for item_104 in var_102 {
             {
                array_103.value().string(item_104.as_str());
            }
        }
        array_103.finish();
    }
    if let Some(var_105) = &input.resource_id {
        object.key("ResourceId").string(var_105.as_str());
    }
    if let Some(var_106) = &input.limit {
        object.key("Limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_106).into()));
    }
    if let Some(var_107) = &input.next_token {
        object.key("NextToken").string(var_107.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_connection_alias_permissions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeConnectionAliasPermissionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_108) = &input.alias_id {
        object.key("AliasId").string(var_108.as_str());
    }
    if let Some(var_109) = &input.next_token {
        object.key("NextToken").string(var_109.as_str());
    }
    if let Some(var_110) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_110).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_ip_groups_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeIpGroupsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_111) = &input.group_ids {
        let mut array_112 = object.key("GroupIds").start_array();
        for item_113 in var_111 {
             {
                array_112.value().string(item_113.as_str());
            }
        }
        array_112.finish();
    }
    if let Some(var_114) = &input.next_token {
        object.key("NextToken").string(var_114.as_str());
    }
    if let Some(var_115) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_115).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_tags_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeTagsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_116) = &input.resource_id {
        object.key("ResourceId").string(var_116.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workspace_bundles_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeWorkspaceBundlesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_117) = &input.bundle_ids {
        let mut array_118 = object.key("BundleIds").start_array();
        for item_119 in var_117 {
             {
                array_118.value().string(item_119.as_str());
            }
        }
        array_118.finish();
    }
    if let Some(var_120) = &input.owner {
        object.key("Owner").string(var_120.as_str());
    }
    if let Some(var_121) = &input.next_token {
        object.key("NextToken").string(var_121.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workspace_directories_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeWorkspaceDirectoriesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_122) = &input.directory_ids {
        let mut array_123 = object.key("DirectoryIds").start_array();
        for item_124 in var_122 {
             {
                array_123.value().string(item_124.as_str());
            }
        }
        array_123.finish();
    }
    if let Some(var_125) = &input.limit {
        object.key("Limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_125).into()));
    }
    if let Some(var_126) = &input.next_token {
        object.key("NextToken").string(var_126.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workspace_image_permissions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeWorkspaceImagePermissionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_127) = &input.image_id {
        object.key("ImageId").string(var_127.as_str());
    }
    if let Some(var_128) = &input.next_token {
        object.key("NextToken").string(var_128.as_str());
    }
    if let Some(var_129) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_129).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workspace_images_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeWorkspaceImagesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_130) = &input.image_ids {
        let mut array_131 = object.key("ImageIds").start_array();
        for item_132 in var_130 {
             {
                array_131.value().string(item_132.as_str());
            }
        }
        array_131.finish();
    }
    if let Some(var_133) = &input.image_type {
        object.key("ImageType").string(var_133.as_str());
    }
    if let Some(var_134) = &input.next_token {
        object.key("NextToken").string(var_134.as_str());
    }
    if let Some(var_135) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_135).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workspaces_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeWorkspacesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_136) = &input.workspace_ids {
        let mut array_137 = object.key("WorkspaceIds").start_array();
        for item_138 in var_136 {
             {
                array_137.value().string(item_138.as_str());
            }
        }
        array_137.finish();
    }
    if let Some(var_139) = &input.directory_id {
        object.key("DirectoryId").string(var_139.as_str());
    }
    if let Some(var_140) = &input.user_name {
        object.key("UserName").string(var_140.as_str());
    }
    if let Some(var_141) = &input.bundle_id {
        object.key("BundleId").string(var_141.as_str());
    }
    if let Some(var_142) = &input.limit {
        object.key("Limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_142).into()));
    }
    if let Some(var_143) = &input.next_token {
        object.key("NextToken").string(var_143.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workspaces_connection_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeWorkspacesConnectionStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_144) = &input.workspace_ids {
        let mut array_145 = object.key("WorkspaceIds").start_array();
        for item_146 in var_144 {
             {
                array_145.value().string(item_146.as_str());
            }
        }
        array_145.finish();
    }
    if let Some(var_147) = &input.next_token {
        object.key("NextToken").string(var_147.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workspace_snapshots_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeWorkspaceSnapshotsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_148) = &input.workspace_id {
        object.key("WorkspaceId").string(var_148.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_connection_alias_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateConnectionAliasInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_149) = &input.alias_id {
        object.key("AliasId").string(var_149.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_ip_groups_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateIpGroupsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_150) = &input.directory_id {
        object.key("DirectoryId").string(var_150.as_str());
    }
    if let Some(var_151) = &input.group_ids {
        let mut array_152 = object.key("GroupIds").start_array();
        for item_153 in var_151 {
             {
                array_152.value().string(item_153.as_str());
            }
        }
        array_152.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_client_branding_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ImportClientBrandingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_154) = &input.resource_id {
        object.key("ResourceId").string(var_154.as_str());
    }
    if let Some(var_155) = &input.device_type_windows {
        #[allow(unused_mut)]
        let mut object_156 = object.key("DeviceTypeWindows").start_object();
        crate::json_ser::serialize_structure_crate_model_default_import_client_branding_attributes(&mut object_156, var_155)?;
        object_156.finish();
    }
    if let Some(var_157) = &input.device_type_osx {
        #[allow(unused_mut)]
        let mut object_158 = object.key("DeviceTypeOsx").start_object();
        crate::json_ser::serialize_structure_crate_model_default_import_client_branding_attributes(&mut object_158, var_157)?;
        object_158.finish();
    }
    if let Some(var_159) = &input.device_type_android {
        #[allow(unused_mut)]
        let mut object_160 = object.key("DeviceTypeAndroid").start_object();
        crate::json_ser::serialize_structure_crate_model_default_import_client_branding_attributes(&mut object_160, var_159)?;
        object_160.finish();
    }
    if let Some(var_161) = &input.device_type_ios {
        #[allow(unused_mut)]
        let mut object_162 = object.key("DeviceTypeIos").start_object();
        crate::json_ser::serialize_structure_crate_model_ios_import_client_branding_attributes(&mut object_162, var_161)?;
        object_162.finish();
    }
    if let Some(var_163) = &input.device_type_linux {
        #[allow(unused_mut)]
        let mut object_164 = object.key("DeviceTypeLinux").start_object();
        crate::json_ser::serialize_structure_crate_model_default_import_client_branding_attributes(&mut object_164, var_163)?;
        object_164.finish();
    }
    if let Some(var_165) = &input.device_type_web {
        #[allow(unused_mut)]
        let mut object_166 = object.key("DeviceTypeWeb").start_object();
        crate::json_ser::serialize_structure_crate_model_default_import_client_branding_attributes(&mut object_166, var_165)?;
        object_166.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_workspace_image_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ImportWorkspaceImageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_167) = &input.ec2_image_id {
        object.key("Ec2ImageId").string(var_167.as_str());
    }
    if let Some(var_168) = &input.ingestion_process {
        object.key("IngestionProcess").string(var_168.as_str());
    }
    if let Some(var_169) = &input.image_name {
        object.key("ImageName").string(var_169.as_str());
    }
    if let Some(var_170) = &input.image_description {
        object.key("ImageDescription").string(var_170.as_str());
    }
    if let Some(var_171) = &input.tags {
        let mut array_172 = object.key("Tags").start_array();
        for item_173 in var_171 {
             {
                #[allow(unused_mut)]
                let mut object_174 = array_172.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_174, item_173)?;
                object_174.finish();
            }
        }
        array_172.finish();
    }
    if let Some(var_175) = &input.applications {
        let mut array_176 = object.key("Applications").start_array();
        for item_177 in var_175 {
             {
                array_176.value().string(item_177.as_str());
            }
        }
        array_176.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_available_management_cidr_ranges_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListAvailableManagementCidrRangesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_178) = &input.management_cidr_range_constraint {
        object.key("ManagementCidrRangeConstraint").string(var_178.as_str());
    }
    if let Some(var_179) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_179).into()));
    }
    if let Some(var_180) = &input.next_token {
        object.key("NextToken").string(var_180.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_migrate_workspace_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::MigrateWorkspaceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_181) = &input.source_workspace_id {
        object.key("SourceWorkspaceId").string(var_181.as_str());
    }
    if let Some(var_182) = &input.bundle_id {
        object.key("BundleId").string(var_182.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_account_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ModifyAccountInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_183) = &input.dedicated_tenancy_support {
        object.key("DedicatedTenancySupport").string(var_183.as_str());
    }
    if let Some(var_184) = &input.dedicated_tenancy_management_cidr_range {
        object.key("DedicatedTenancyManagementCidrRange").string(var_184.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_certificate_based_auth_properties_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ModifyCertificateBasedAuthPropertiesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_185) = &input.resource_id {
        object.key("ResourceId").string(var_185.as_str());
    }
    if let Some(var_186) = &input.certificate_based_auth_properties {
        #[allow(unused_mut)]
        let mut object_187 = object.key("CertificateBasedAuthProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_certificate_based_auth_properties(&mut object_187, var_186)?;
        object_187.finish();
    }
    if let Some(var_188) = &input.properties_to_delete {
        let mut array_189 = object.key("PropertiesToDelete").start_array();
        for item_190 in var_188 {
             {
                array_189.value().string(item_190.as_str());
            }
        }
        array_189.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_client_properties_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ModifyClientPropertiesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_191) = &input.resource_id {
        object.key("ResourceId").string(var_191.as_str());
    }
    if let Some(var_192) = &input.client_properties {
        #[allow(unused_mut)]
        let mut object_193 = object.key("ClientProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_client_properties(&mut object_193, var_192)?;
        object_193.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_saml_properties_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ModifySamlPropertiesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_194) = &input.resource_id {
        object.key("ResourceId").string(var_194.as_str());
    }
    if let Some(var_195) = &input.saml_properties {
        #[allow(unused_mut)]
        let mut object_196 = object.key("SamlProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_saml_properties(&mut object_196, var_195)?;
        object_196.finish();
    }
    if let Some(var_197) = &input.properties_to_delete {
        let mut array_198 = object.key("PropertiesToDelete").start_array();
        for item_199 in var_197 {
             {
                array_198.value().string(item_199.as_str());
            }
        }
        array_198.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_selfservice_permissions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ModifySelfservicePermissionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_200) = &input.resource_id {
        object.key("ResourceId").string(var_200.as_str());
    }
    if let Some(var_201) = &input.selfservice_permissions {
        #[allow(unused_mut)]
        let mut object_202 = object.key("SelfservicePermissions").start_object();
        crate::json_ser::serialize_structure_crate_model_selfservice_permissions(&mut object_202, var_201)?;
        object_202.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_workspace_access_properties_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ModifyWorkspaceAccessPropertiesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_203) = &input.resource_id {
        object.key("ResourceId").string(var_203.as_str());
    }
    if let Some(var_204) = &input.workspace_access_properties {
        #[allow(unused_mut)]
        let mut object_205 = object.key("WorkspaceAccessProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_workspace_access_properties(&mut object_205, var_204)?;
        object_205.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_workspace_creation_properties_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ModifyWorkspaceCreationPropertiesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_206) = &input.resource_id {
        object.key("ResourceId").string(var_206.as_str());
    }
    if let Some(var_207) = &input.workspace_creation_properties {
        #[allow(unused_mut)]
        let mut object_208 = object.key("WorkspaceCreationProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_workspace_creation_properties(&mut object_208, var_207)?;
        object_208.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_workspace_properties_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ModifyWorkspacePropertiesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_209) = &input.workspace_id {
        object.key("WorkspaceId").string(var_209.as_str());
    }
    if let Some(var_210) = &input.workspace_properties {
        #[allow(unused_mut)]
        let mut object_211 = object.key("WorkspaceProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_workspace_properties(&mut object_211, var_210)?;
        object_211.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_workspace_state_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ModifyWorkspaceStateInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_212) = &input.workspace_id {
        object.key("WorkspaceId").string(var_212.as_str());
    }
    if let Some(var_213) = &input.workspace_state {
        object.key("WorkspaceState").string(var_213.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reboot_workspaces_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RebootWorkspacesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_214) = &input.reboot_workspace_requests {
        let mut array_215 = object.key("RebootWorkspaceRequests").start_array();
        for item_216 in var_214 {
             {
                #[allow(unused_mut)]
                let mut object_217 = array_215.value().start_object();
                crate::json_ser::serialize_structure_crate_model_reboot_request(&mut object_217, item_216)?;
                object_217.finish();
            }
        }
        array_215.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_rebuild_workspaces_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RebuildWorkspacesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_218) = &input.rebuild_workspace_requests {
        let mut array_219 = object.key("RebuildWorkspaceRequests").start_array();
        for item_220 in var_218 {
             {
                #[allow(unused_mut)]
                let mut object_221 = array_219.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rebuild_request(&mut object_221, item_220)?;
                object_221.finish();
            }
        }
        array_219.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_workspace_directory_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RegisterWorkspaceDirectoryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_222) = &input.directory_id {
        object.key("DirectoryId").string(var_222.as_str());
    }
    if let Some(var_223) = &input.subnet_ids {
        let mut array_224 = object.key("SubnetIds").start_array();
        for item_225 in var_223 {
             {
                array_224.value().string(item_225.as_str());
            }
        }
        array_224.finish();
    }
    if let Some(var_226) = &input.enable_work_docs {
        object.key("EnableWorkDocs").boolean(*var_226);
    }
    if let Some(var_227) = &input.enable_self_service {
        object.key("EnableSelfService").boolean(*var_227);
    }
    if let Some(var_228) = &input.tenancy {
        object.key("Tenancy").string(var_228.as_str());
    }
    if let Some(var_229) = &input.tags {
        let mut array_230 = object.key("Tags").start_array();
        for item_231 in var_229 {
             {
                #[allow(unused_mut)]
                let mut object_232 = array_230.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_232, item_231)?;
                object_232.finish();
            }
        }
        array_230.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_restore_workspace_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RestoreWorkspaceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_233) = &input.workspace_id {
        object.key("WorkspaceId").string(var_233.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_revoke_ip_rules_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RevokeIpRulesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_234) = &input.group_id {
        object.key("GroupId").string(var_234.as_str());
    }
    if let Some(var_235) = &input.user_rules {
        let mut array_236 = object.key("UserRules").start_array();
        for item_237 in var_235 {
             {
                array_236.value().string(item_237.as_str());
            }
        }
        array_236.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_workspaces_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartWorkspacesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_238) = &input.start_workspace_requests {
        let mut array_239 = object.key("StartWorkspaceRequests").start_array();
        for item_240 in var_238 {
             {
                #[allow(unused_mut)]
                let mut object_241 = array_239.value().start_object();
                crate::json_ser::serialize_structure_crate_model_start_request(&mut object_241, item_240)?;
                object_241.finish();
            }
        }
        array_239.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_workspaces_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopWorkspacesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_242) = &input.stop_workspace_requests {
        let mut array_243 = object.key("StopWorkspaceRequests").start_array();
        for item_244 in var_242 {
             {
                #[allow(unused_mut)]
                let mut object_245 = array_243.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stop_request(&mut object_245, item_244)?;
                object_245.finish();
            }
        }
        array_243.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_terminate_workspaces_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TerminateWorkspacesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_246) = &input.terminate_workspace_requests {
        let mut array_247 = object.key("TerminateWorkspaceRequests").start_array();
        for item_248 in var_246 {
             {
                #[allow(unused_mut)]
                let mut object_249 = array_247.value().start_object();
                crate::json_ser::serialize_structure_crate_model_terminate_request(&mut object_249, item_248)?;
                object_249.finish();
            }
        }
        array_247.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_connect_client_add_in_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateConnectClientAddInInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_250) = &input.add_in_id {
        object.key("AddInId").string(var_250.as_str());
    }
    if let Some(var_251) = &input.resource_id {
        object.key("ResourceId").string(var_251.as_str());
    }
    if let Some(var_252) = &input.name {
        object.key("Name").string(var_252.as_str());
    }
    if let Some(var_253) = &input.url {
        object.key("URL").string(var_253.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_connection_alias_permission_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateConnectionAliasPermissionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_254) = &input.alias_id {
        object.key("AliasId").string(var_254.as_str());
    }
    if let Some(var_255) = &input.connection_alias_permission {
        #[allow(unused_mut)]
        let mut object_256 = object.key("ConnectionAliasPermission").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_alias_permission(&mut object_256, var_255)?;
        object_256.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_rules_of_ip_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRulesOfIpGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_257) = &input.group_id {
        object.key("GroupId").string(var_257.as_str());
    }
    if let Some(var_258) = &input.user_rules {
        let mut array_259 = object.key("UserRules").start_array();
        for item_260 in var_258 {
             {
                #[allow(unused_mut)]
                let mut object_261 = array_259.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_rule_item(&mut object_261, item_260)?;
                object_261.finish();
            }
        }
        array_259.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workspace_bundle_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateWorkspaceBundleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_262) = &input.bundle_id {
        object.key("BundleId").string(var_262.as_str());
    }
    if let Some(var_263) = &input.image_id {
        object.key("ImageId").string(var_263.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workspace_image_permission_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateWorkspaceImagePermissionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_264) = &input.image_id {
        object.key("ImageId").string(var_264.as_str());
    }
    if let Some(var_265) = &input.allow_copy_image {
        object.key("AllowCopyImage").boolean(*var_265);
    }
    if let Some(var_266) = &input.shared_account_id {
        object.key("SharedAccountId").string(var_266.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ip_rule_item(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::IpRuleItem) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_267) = &input.ip_rule {
        object.key("ipRule").string(var_267.as_str());
    }
    if let Some(var_268) = &input.rule_desc {
        object.key("ruleDesc").string(var_268.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Tag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_269) = &input.key {
        object.key("Key").string(var_269.as_str());
    }
    if let Some(var_270) = &input.value {
        object.key("Value").string(var_270.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_standby_workspace(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StandbyWorkspace) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_271) = &input.primary_workspace_id {
        object.key("PrimaryWorkspaceId").string(var_271.as_str());
    }
    if let Some(var_272) = &input.volume_encryption_key {
        object.key("VolumeEncryptionKey").string(var_272.as_str());
    }
    if let Some(var_273) = &input.directory_id {
        object.key("DirectoryId").string(var_273.as_str());
    }
    if let Some(var_274) = &input.tags {
        let mut array_275 = object.key("Tags").start_array();
        for item_276 in var_274 {
             {
                #[allow(unused_mut)]
                let mut object_277 = array_275.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_277, item_276)?;
                object_277.finish();
            }
        }
        array_275.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compute_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ComputeType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_278) = &input.name {
        object.key("Name").string(var_278.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_storage(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserStorage) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_279) = &input.capacity {
        object.key("Capacity").string(var_279.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_root_storage(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RootStorage) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_280) = &input.capacity {
        object.key("Capacity").string(var_280.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workspace_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::WorkspaceRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_281) = &input.directory_id {
        object.key("DirectoryId").string(var_281.as_str());
    }
    if let Some(var_282) = &input.user_name {
        object.key("UserName").string(var_282.as_str());
    }
    if let Some(var_283) = &input.bundle_id {
        object.key("BundleId").string(var_283.as_str());
    }
    if let Some(var_284) = &input.volume_encryption_key {
        object.key("VolumeEncryptionKey").string(var_284.as_str());
    }
    if let Some(var_285) = &input.user_volume_encryption_enabled {
        object.key("UserVolumeEncryptionEnabled").boolean(*var_285);
    }
    if let Some(var_286) = &input.root_volume_encryption_enabled {
        object.key("RootVolumeEncryptionEnabled").boolean(*var_286);
    }
    if let Some(var_287) = &input.workspace_properties {
        #[allow(unused_mut)]
        let mut object_288 = object.key("WorkspaceProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_workspace_properties(&mut object_288, var_287)?;
        object_288.finish();
    }
    if let Some(var_289) = &input.tags {
        let mut array_290 = object.key("Tags").start_array();
        for item_291 in var_289 {
             {
                #[allow(unused_mut)]
                let mut object_292 = array_290.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_292, item_291)?;
                object_292.finish();
            }
        }
        array_290.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_default_import_client_branding_attributes(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DefaultImportClientBrandingAttributes) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_293) = &input.logo {
        object.key("Logo").string_unchecked(&aws_smithy_types::base64::encode(var_293));
    }
    if let Some(var_294) = &input.support_email {
        object.key("SupportEmail").string(var_294.as_str());
    }
    if let Some(var_295) = &input.support_link {
        object.key("SupportLink").string(var_295.as_str());
    }
    if let Some(var_296) = &input.forgot_password_link {
        object.key("ForgotPasswordLink").string(var_296.as_str());
    }
    if let Some(var_297) = &input.login_message {
        #[allow(unused_mut)]
        let mut object_298 = object.key("LoginMessage").start_object();
        for (key_299, value_300) in var_297 {
             {
                object_298.key(key_299.as_str()).string(value_300.as_str());
            }
        }
        object_298.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ios_import_client_branding_attributes(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::IosImportClientBrandingAttributes) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_301) = &input.logo {
        object.key("Logo").string_unchecked(&aws_smithy_types::base64::encode(var_301));
    }
    if let Some(var_302) = &input.logo2x {
        object.key("Logo2x").string_unchecked(&aws_smithy_types::base64::encode(var_302));
    }
    if let Some(var_303) = &input.logo3x {
        object.key("Logo3x").string_unchecked(&aws_smithy_types::base64::encode(var_303));
    }
    if let Some(var_304) = &input.support_email {
        object.key("SupportEmail").string(var_304.as_str());
    }
    if let Some(var_305) = &input.support_link {
        object.key("SupportLink").string(var_305.as_str());
    }
    if let Some(var_306) = &input.forgot_password_link {
        object.key("ForgotPasswordLink").string(var_306.as_str());
    }
    if let Some(var_307) = &input.login_message {
        #[allow(unused_mut)]
        let mut object_308 = object.key("LoginMessage").start_object();
        for (key_309, value_310) in var_307 {
             {
                object_308.key(key_309.as_str()).string(value_310.as_str());
            }
        }
        object_308.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_certificate_based_auth_properties(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CertificateBasedAuthProperties) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_311) = &input.status {
        object.key("Status").string(var_311.as_str());
    }
    if let Some(var_312) = &input.certificate_authority_arn {
        object.key("CertificateAuthorityArn").string(var_312.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_client_properties(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ClientProperties) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_313) = &input.reconnect_enabled {
        object.key("ReconnectEnabled").string(var_313.as_str());
    }
    if let Some(var_314) = &input.log_upload_enabled {
        object.key("LogUploadEnabled").string(var_314.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_saml_properties(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SamlProperties) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_315) = &input.status {
        object.key("Status").string(var_315.as_str());
    }
    if let Some(var_316) = &input.user_access_url {
        object.key("UserAccessUrl").string(var_316.as_str());
    }
    if let Some(var_317) = &input.relay_state_parameter_name {
        object.key("RelayStateParameterName").string(var_317.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_selfservice_permissions(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SelfservicePermissions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_318) = &input.restart_workspace {
        object.key("RestartWorkspace").string(var_318.as_str());
    }
    if let Some(var_319) = &input.increase_volume_size {
        object.key("IncreaseVolumeSize").string(var_319.as_str());
    }
    if let Some(var_320) = &input.change_compute_type {
        object.key("ChangeComputeType").string(var_320.as_str());
    }
    if let Some(var_321) = &input.switch_running_mode {
        object.key("SwitchRunningMode").string(var_321.as_str());
    }
    if let Some(var_322) = &input.rebuild_workspace {
        object.key("RebuildWorkspace").string(var_322.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workspace_access_properties(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::WorkspaceAccessProperties) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_323) = &input.device_type_windows {
        object.key("DeviceTypeWindows").string(var_323.as_str());
    }
    if let Some(var_324) = &input.device_type_osx {
        object.key("DeviceTypeOsx").string(var_324.as_str());
    }
    if let Some(var_325) = &input.device_type_web {
        object.key("DeviceTypeWeb").string(var_325.as_str());
    }
    if let Some(var_326) = &input.device_type_ios {
        object.key("DeviceTypeIos").string(var_326.as_str());
    }
    if let Some(var_327) = &input.device_type_android {
        object.key("DeviceTypeAndroid").string(var_327.as_str());
    }
    if let Some(var_328) = &input.device_type_chrome_os {
        object.key("DeviceTypeChromeOs").string(var_328.as_str());
    }
    if let Some(var_329) = &input.device_type_zero_client {
        object.key("DeviceTypeZeroClient").string(var_329.as_str());
    }
    if let Some(var_330) = &input.device_type_linux {
        object.key("DeviceTypeLinux").string(var_330.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workspace_creation_properties(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::WorkspaceCreationProperties) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_331) = &input.enable_work_docs {
        object.key("EnableWorkDocs").boolean(*var_331);
    }
    if let Some(var_332) = &input.enable_internet_access {
        object.key("EnableInternetAccess").boolean(*var_332);
    }
    if let Some(var_333) = &input.default_ou {
        object.key("DefaultOu").string(var_333.as_str());
    }
    if let Some(var_334) = &input.custom_security_group_id {
        object.key("CustomSecurityGroupId").string(var_334.as_str());
    }
    if let Some(var_335) = &input.user_enabled_as_local_administrator {
        object.key("UserEnabledAsLocalAdministrator").boolean(*var_335);
    }
    if let Some(var_336) = &input.enable_maintenance_mode {
        object.key("EnableMaintenanceMode").boolean(*var_336);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workspace_properties(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::WorkspaceProperties) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_337) = &input.running_mode {
        object.key("RunningMode").string(var_337.as_str());
    }
    if let Some(var_338) = &input.running_mode_auto_stop_timeout_in_minutes {
        object.key("RunningModeAutoStopTimeoutInMinutes").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_338).into()));
    }
    if let Some(var_339) = &input.root_volume_size_gib {
        object.key("RootVolumeSizeGib").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_339).into()));
    }
    if let Some(var_340) = &input.user_volume_size_gib {
        object.key("UserVolumeSizeGib").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_340).into()));
    }
    if let Some(var_341) = &input.compute_type_name {
        object.key("ComputeTypeName").string(var_341.as_str());
    }
    if let Some(var_342) = &input.protocols {
        let mut array_343 = object.key("Protocols").start_array();
        for item_344 in var_342 {
             {
                array_343.value().string(item_344.as_str());
            }
        }
        array_343.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_reboot_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RebootRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_345) = &input.workspace_id {
        object.key("WorkspaceId").string(var_345.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rebuild_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RebuildRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_346) = &input.workspace_id {
        object.key("WorkspaceId").string(var_346.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_start_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StartRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_347) = &input.workspace_id {
        object.key("WorkspaceId").string(var_347.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stop_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StopRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_348) = &input.workspace_id {
        object.key("WorkspaceId").string(var_348.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_terminate_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TerminateRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_349) = &input.workspace_id {
        object.key("WorkspaceId").string(var_349.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_alias_permission(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ConnectionAliasPermission) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_350) = &input.shared_account_id {
        object.key("SharedAccountId").string(var_350.as_str());
    }
    if let Some(var_351) = &input.allow_association {
        object.key("AllowAssociation").boolean(*var_351);
    }
    Ok(())
}

