// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_list_application_components_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListApplicationComponentsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.application_component_criteria {
        object.key("applicationComponentCriteria").string(var_1.as_str());
    }
    if let Some(var_2) = &input.filter_value {
        object.key("filterValue").string(var_2.as_str());
    }
    if let Some(var_3) = &input.group_id_filter {
        let mut array_4 = object.key("groupIdFilter").start_array();
        for item_5 in var_3 {
             {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_group(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_7).into()));
    }
    if let Some(var_8) = &input.next_token {
        object.key("nextToken").string(var_8.as_str());
    }
    if let Some(var_9) = &input.sort {
        object.key("sort").string(var_9.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_servers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListServersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_10) = &input.filter_value {
        object.key("filterValue").string(var_10.as_str());
    }
    if let Some(var_11) = &input.group_id_filter {
        let mut array_12 = object.key("groupIdFilter").start_array();
        for item_13 in var_11 {
             {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::json_ser::serialize_structure_crate_model_group(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_15).into()));
    }
    if let Some(var_16) = &input.next_token {
        object.key("nextToken").string(var_16.as_str());
    }
    if let Some(var_17) = &input.server_criteria {
        object.key("serverCriteria").string(var_17.as_str());
    }
    if let Some(var_18) = &input.sort {
        object.key("sort").string(var_18.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_portfolio_preferences_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutPortfolioPreferencesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_19) = &input.application_mode {
        object.key("applicationMode").string(var_19.as_str());
    }
    if let Some(var_20) = &input.application_preferences {
        #[allow(unused_mut)]
        let mut object_21 = object.key("applicationPreferences").start_object();
        crate::json_ser::serialize_structure_crate_model_application_preferences(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.database_preferences {
        #[allow(unused_mut)]
        let mut object_23 = object.key("databasePreferences").start_object();
        crate::json_ser::serialize_structure_crate_model_database_preferences(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.prioritize_business_goals {
        #[allow(unused_mut)]
        let mut object_25 = object.key("prioritizeBusinessGoals").start_object();
        crate::json_ser::serialize_structure_crate_model_prioritize_business_goals(&mut object_25, var_24)?;
        object_25.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_assessment_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartAssessmentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_26) = &input.assessment_targets {
        let mut array_27 = object.key("assessmentTargets").start_array();
        for item_28 in var_26 {
             {
                #[allow(unused_mut)]
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_assessment_target(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.s3bucket_for_analysis_data {
        object.key("s3bucketForAnalysisData").string(var_30.as_str());
    }
    if let Some(var_31) = &input.s3bucket_for_report_data {
        object.key("s3bucketForReportData").string(var_31.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_import_file_task_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartImportFileTaskInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_32) = &input.s3_bucket {
        object.key("S3Bucket").string(var_32.as_str());
    }
    if let Some(var_33) = &input.data_source_type {
        object.key("dataSourceType").string(var_33.as_str());
    }
    if let Some(var_34) = &input.group_id {
        let mut array_35 = object.key("groupId").start_array();
        for item_36 in var_34 {
             {
                #[allow(unused_mut)]
                let mut object_37 = array_35.value().start_object();
                crate::json_ser::serialize_structure_crate_model_group(&mut object_37, item_36)?;
                object_37.finish();
            }
        }
        array_35.finish();
    }
    if let Some(var_38) = &input.name {
        object.key("name").string(var_38.as_str());
    }
    if let Some(var_39) = &input.s3bucket_for_report_data {
        object.key("s3bucketForReportData").string(var_39.as_str());
    }
    if let Some(var_40) = &input.s3key {
        object.key("s3key").string(var_40.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_recommendation_report_generation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartRecommendationReportGenerationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_41) = &input.group_id_filter {
        let mut array_42 = object.key("groupIdFilter").start_array();
        for item_43 in var_41 {
             {
                #[allow(unused_mut)]
                let mut object_44 = array_42.value().start_object();
                crate::json_ser::serialize_structure_crate_model_group(&mut object_44, item_43)?;
                object_44.finish();
            }
        }
        array_42.finish();
    }
    if let Some(var_45) = &input.output_format {
        object.key("outputFormat").string(var_45.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_assessment_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopAssessmentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_46) = &input.assessment_id {
        object.key("assessmentId").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_application_component_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateApplicationComponentConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_47) = &input.app_type {
        object.key("appType").string(var_47.as_str());
    }
    if let Some(var_48) = &input.application_component_id {
        object.key("applicationComponentId").string(var_48.as_str());
    }
    if let Some(var_49) = &input.configure_only {
        object.key("configureOnly").boolean(*var_49);
    }
    if let Some(var_50) = &input.inclusion_status {
        object.key("inclusionStatus").string(var_50.as_str());
    }
    if let Some(var_51) = &input.secrets_manager_key {
        object.key("secretsManagerKey").string(var_51.as_str());
    }
    if let Some(var_52) = &input.source_code_list {
        let mut array_53 = object.key("sourceCodeList").start_array();
        for item_54 in var_52 {
             {
                #[allow(unused_mut)]
                let mut object_55 = array_53.value().start_object();
                crate::json_ser::serialize_structure_crate_model_source_code(&mut object_55, item_54)?;
                object_55.finish();
            }
        }
        array_53.finish();
    }
    if let Some(var_56) = &input.strategy_option {
        #[allow(unused_mut)]
        let mut object_57 = object.key("strategyOption").start_object();
        crate::json_ser::serialize_structure_crate_model_strategy_option(&mut object_57, var_56)?;
        object_57.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_server_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateServerConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_58) = &input.server_id {
        object.key("serverId").string(var_58.as_str());
    }
    if let Some(var_59) = &input.strategy_option {
        #[allow(unused_mut)]
        let mut object_60 = object.key("strategyOption").start_object();
        crate::json_ser::serialize_structure_crate_model_strategy_option(&mut object_60, var_59)?;
        object_60.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_group(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Group) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_61) = &input.name {
        object.key("name").string(var_61.as_str());
    }
    if let Some(var_62) = &input.value {
        object.key("value").string(var_62.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_application_preferences(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ApplicationPreferences) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_63) = &input.management_preference {
        #[allow(unused_mut)]
        let mut object_64 = object.key("managementPreference").start_object();
        crate::json_ser::serialize_union_crate_model_management_preference(&mut object_64, var_63)?;
        object_64.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_preferences(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DatabasePreferences) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_65) = &input.database_management_preference {
        object.key("databaseManagementPreference").string(var_65.as_str());
    }
    if let Some(var_66) = &input.database_migration_preference {
        #[allow(unused_mut)]
        let mut object_67 = object.key("databaseMigrationPreference").start_object();
        crate::json_ser::serialize_union_crate_model_database_migration_preference(&mut object_67, var_66)?;
        object_67.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_prioritize_business_goals(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PrioritizeBusinessGoals) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_68) = &input.business_goals {
        #[allow(unused_mut)]
        let mut object_69 = object.key("businessGoals").start_object();
        crate::json_ser::serialize_structure_crate_model_business_goals(&mut object_69, var_68)?;
        object_69.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_assessment_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AssessmentTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_70) = &input.condition {
        object.key("condition").string(var_70.as_str());
    }
    if let Some(var_71) = &input.name {
        object.key("name").string(var_71.as_str());
    }
    if let Some(var_72) = &input.values {
        let mut array_73 = object.key("values").start_array();
        for item_74 in var_72 {
             {
                array_73.value().string(item_74.as_str());
            }
        }
        array_73.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_code(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SourceCode) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_75) = &input.version_control {
        object.key("versionControl").string(var_75.as_str());
    }
    if let Some(var_76) = &input.source_version {
        object.key("sourceVersion").string(var_76.as_str());
    }
    if let Some(var_77) = &input.location {
        object.key("location").string(var_77.as_str());
    }
    if let Some(var_78) = &input.project_name {
        object.key("projectName").string(var_78.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_strategy_option(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StrategyOption) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_79) = &input.strategy {
        object.key("strategy").string(var_79.as_str());
    }
    if let Some(var_80) = &input.tool_name {
        object.key("toolName").string(var_80.as_str());
    }
    if let Some(var_81) = &input.target_destination {
        object.key("targetDestination").string(var_81.as_str());
    }
    if let Some(var_82) = &input.is_preferred {
        object.key("isPreferred").boolean(*var_82);
    }
    Ok(())
}

pub fn serialize_union_crate_model_management_preference(object_64: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ManagementPreference) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::ManagementPreference::AwsManagedResources(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_83 = object_64.key("awsManagedResources").start_object();
                crate::json_ser::serialize_structure_crate_model_aws_managed_resources(&mut object_83, inner)?;
                object_83.finish();
            }
        },
        crate::model::ManagementPreference::SelfManageResources(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_84 = object_64.key("selfManageResources").start_object();
                crate::json_ser::serialize_structure_crate_model_self_manage_resources(&mut object_84, inner)?;
                object_84.finish();
            }
        },
        crate::model::ManagementPreference::NoPreference(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_85 = object_64.key("noPreference").start_object();
                crate::json_ser::serialize_structure_crate_model_no_management_preference(&mut object_85, inner)?;
                object_85.finish();
            }
        },
        crate::model::ManagementPreference::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("ManagementPreference"))
    }
    Ok(())
}

pub fn serialize_union_crate_model_database_migration_preference(object_67: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DatabaseMigrationPreference) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::DatabaseMigrationPreference::Heterogeneous(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_86 = object_67.key("heterogeneous").start_object();
                crate::json_ser::serialize_structure_crate_model_heterogeneous(&mut object_86, inner)?;
                object_86.finish();
            }
        },
        crate::model::DatabaseMigrationPreference::Homogeneous(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_87 = object_67.key("homogeneous").start_object();
                crate::json_ser::serialize_structure_crate_model_homogeneous(&mut object_87, inner)?;
                object_87.finish();
            }
        },
        crate::model::DatabaseMigrationPreference::NoPreference(inner) => {
             {
                #[allow(unused_mut)]
                let mut object_88 = object_67.key("noPreference").start_object();
                crate::json_ser::serialize_structure_crate_model_no_database_migration_preference(&mut object_88, inner)?;
                object_88.finish();
            }
        },
        crate::model::DatabaseMigrationPreference::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("DatabaseMigrationPreference"))
    }
    Ok(())
}

pub fn serialize_structure_crate_model_business_goals(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::BusinessGoals) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_89) = &input.speed_of_migration {
        object.key("speedOfMigration").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_89).into()));
    }
    if let Some(var_90) = &input.reduce_operational_overhead_with_managed_services {
        object.key("reduceOperationalOverheadWithManagedServices").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_90).into()));
    }
    if let Some(var_91) = &input.modernize_infrastructure_with_cloud_native_technologies {
        object.key("modernizeInfrastructureWithCloudNativeTechnologies").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_91).into()));
    }
    if let Some(var_92) = &input.license_cost_reduction {
        object.key("licenseCostReduction").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_92).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_managed_resources(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AwsManagedResources) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_93) = &input.target_destination {
        let mut array_94 = object.key("targetDestination").start_array();
        for item_95 in var_93 {
             {
                array_94.value().string(item_95.as_str());
            }
        }
        array_94.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_self_manage_resources(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SelfManageResources) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_96) = &input.target_destination {
        let mut array_97 = object.key("targetDestination").start_array();
        for item_98 in var_96 {
             {
                array_97.value().string(item_98.as_str());
            }
        }
        array_97.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_no_management_preference(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NoManagementPreference) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_99) = &input.target_destination {
        let mut array_100 = object.key("targetDestination").start_array();
        for item_101 in var_99 {
             {
                array_100.value().string(item_101.as_str());
            }
        }
        array_100.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_heterogeneous(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Heterogeneous) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_102) = &input.target_database_engine {
        let mut array_103 = object.key("targetDatabaseEngine").start_array();
        for item_104 in var_102 {
             {
                array_103.value().string(item_104.as_str());
            }
        }
        array_103.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_homogeneous(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Homogeneous) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_105) = &input.target_database_engine {
        let mut array_106 = object.key("targetDatabaseEngine").start_array();
        for item_107 in var_105 {
             {
                array_106.value().string(item_107.as_str());
            }
        }
        array_106.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_no_database_migration_preference(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NoDatabaseMigrationPreference) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_108) = &input.target_database_engine {
        let mut array_109 = object.key("targetDatabaseEngine").start_array();
        for item_110 in var_108 {
             {
                array_109.value().string(item_110.as_str());
            }
        }
        array_109.finish();
    }
    Ok(())
}

