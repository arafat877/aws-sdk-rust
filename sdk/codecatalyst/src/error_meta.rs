// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The request was denied because you don't have sufficient access to perform this action. Verify that you are a member of a role that allows this action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>The request was denied because the requested operation would cause a conflict with the current state of a service resource associated with the request. Another user might have updated the resource. Reload, make sure you have the latest data, and then try again.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The request was denied because the specified resource was not found. Verify that the spelling is correct and that you have access to the resource.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The request was denied because one or more resources has reached its limits for the tier the space belongs to. Either reduce the number of resources, or change the tier if applicable.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The request was denied because an input failed to satisfy the constraints specified by the service. Check the spelling and input requirements, and then try again.</p>
    ValidationException(crate::error::ValidationException),
    /// 
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    /// 
    /// When logging an error from the SDK, it is recommended that you either wrap the error in
    /// [`DisplayErrorContext`](crate::types::DisplayErrorContext), use another
    /// error reporter library that visits the error's cause/source chain, or call
    /// [`Error::source`](std::error::Error::source) for more details about the underlying cause.
    /// 
    Unhandled(crate::error::Unhandled)
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f)
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAccessTokenError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateAccessTokenError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateAccessTokenError> for Error {
    fn from(err: crate::error::CreateAccessTokenError) -> Self {
        match err.kind {
            crate::error::CreateAccessTokenErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateAccessTokenErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateAccessTokenErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateAccessTokenErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateAccessTokenErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateAccessTokenErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateAccessTokenErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDevEnvironmentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDevEnvironmentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateDevEnvironmentError> for Error {
    fn from(err: crate::error::CreateDevEnvironmentError) -> Self {
        match err.kind {
            crate::error::CreateDevEnvironmentErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateDevEnvironmentErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateDevEnvironmentErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateDevEnvironmentErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateDevEnvironmentErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateDevEnvironmentErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateDevEnvironmentErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateProjectError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateProjectError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateProjectError> for Error {
    fn from(err: crate::error::CreateProjectError) -> Self {
        match err.kind {
            crate::error::CreateProjectErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateProjectErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateProjectErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateProjectErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateProjectErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateProjectErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateProjectErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSourceRepositoryBranchError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSourceRepositoryBranchError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateSourceRepositoryBranchError> for Error {
    fn from(err: crate::error::CreateSourceRepositoryBranchError) -> Self {
        match err.kind {
            crate::error::CreateSourceRepositoryBranchErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateSourceRepositoryBranchErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateSourceRepositoryBranchErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateSourceRepositoryBranchErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateSourceRepositoryBranchErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateSourceRepositoryBranchErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateSourceRepositoryBranchErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAccessTokenError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteAccessTokenError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteAccessTokenError> for Error {
    fn from(err: crate::error::DeleteAccessTokenError) -> Self {
        match err.kind {
            crate::error::DeleteAccessTokenErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteAccessTokenErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteAccessTokenErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteAccessTokenErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::DeleteAccessTokenErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteAccessTokenErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteAccessTokenErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDevEnvironmentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDevEnvironmentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteDevEnvironmentError> for Error {
    fn from(err: crate::error::DeleteDevEnvironmentError) -> Self {
        match err.kind {
            crate::error::DeleteDevEnvironmentErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteDevEnvironmentErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteDevEnvironmentErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteDevEnvironmentErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::DeleteDevEnvironmentErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteDevEnvironmentErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteDevEnvironmentErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDevEnvironmentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDevEnvironmentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetDevEnvironmentError> for Error {
    fn from(err: crate::error::GetDevEnvironmentError) -> Self {
        match err.kind {
            crate::error::GetDevEnvironmentErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetDevEnvironmentErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::GetDevEnvironmentErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetDevEnvironmentErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::GetDevEnvironmentErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetDevEnvironmentErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetDevEnvironmentErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetProjectError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetProjectError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetProjectError> for Error {
    fn from(err: crate::error::GetProjectError) -> Self {
        match err.kind {
            crate::error::GetProjectErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetProjectErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::GetProjectErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetProjectErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::GetProjectErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetProjectErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetProjectErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSourceRepositoryCloneUrlsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSourceRepositoryCloneUrlsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetSourceRepositoryCloneUrlsError> for Error {
    fn from(err: crate::error::GetSourceRepositoryCloneUrlsError) -> Self {
        match err.kind {
            crate::error::GetSourceRepositoryCloneUrlsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetSourceRepositoryCloneUrlsErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::GetSourceRepositoryCloneUrlsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetSourceRepositoryCloneUrlsErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::GetSourceRepositoryCloneUrlsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetSourceRepositoryCloneUrlsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetSourceRepositoryCloneUrlsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSpaceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSpaceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetSpaceError> for Error {
    fn from(err: crate::error::GetSpaceError) -> Self {
        match err.kind {
            crate::error::GetSpaceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetSpaceErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::GetSpaceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetSpaceErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::GetSpaceErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetSpaceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetSpaceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSubscriptionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSubscriptionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetSubscriptionError> for Error {
    fn from(err: crate::error::GetSubscriptionError) -> Self {
        match err.kind {
            crate::error::GetSubscriptionErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetSubscriptionErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::GetSubscriptionErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetSubscriptionErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::GetSubscriptionErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetSubscriptionErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetSubscriptionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUserDetailsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetUserDetailsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetUserDetailsError> for Error {
    fn from(err: crate::error::GetUserDetailsError) -> Self {
        match err.kind {
            crate::error::GetUserDetailsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetUserDetailsErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::GetUserDetailsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetUserDetailsErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::GetUserDetailsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetUserDetailsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetUserDetailsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAccessTokensError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAccessTokensError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListAccessTokensError> for Error {
    fn from(err: crate::error::ListAccessTokensError) -> Self {
        match err.kind {
            crate::error::ListAccessTokensErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListAccessTokensErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::ListAccessTokensErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListAccessTokensErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::ListAccessTokensErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListAccessTokensErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListAccessTokensErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDevEnvironmentsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDevEnvironmentsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListDevEnvironmentsError> for Error {
    fn from(err: crate::error::ListDevEnvironmentsError) -> Self {
        match err.kind {
            crate::error::ListDevEnvironmentsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListDevEnvironmentsErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::ListDevEnvironmentsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListDevEnvironmentsErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::ListDevEnvironmentsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListDevEnvironmentsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListDevEnvironmentsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEventLogsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListEventLogsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListEventLogsError> for Error {
    fn from(err: crate::error::ListEventLogsError) -> Self {
        match err.kind {
            crate::error::ListEventLogsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListEventLogsErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::ListEventLogsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListEventLogsErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::ListEventLogsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListEventLogsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListEventLogsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListProjectsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListProjectsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListProjectsError> for Error {
    fn from(err: crate::error::ListProjectsError) -> Self {
        match err.kind {
            crate::error::ListProjectsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListProjectsErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::ListProjectsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListProjectsErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::ListProjectsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListProjectsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListProjectsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSourceRepositoriesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSourceRepositoriesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListSourceRepositoriesError> for Error {
    fn from(err: crate::error::ListSourceRepositoriesError) -> Self {
        match err.kind {
            crate::error::ListSourceRepositoriesErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListSourceRepositoriesErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::ListSourceRepositoriesErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListSourceRepositoriesErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::ListSourceRepositoriesErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListSourceRepositoriesErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListSourceRepositoriesErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSourceRepositoryBranchesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSourceRepositoryBranchesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListSourceRepositoryBranchesError> for Error {
    fn from(err: crate::error::ListSourceRepositoryBranchesError) -> Self {
        match err.kind {
            crate::error::ListSourceRepositoryBranchesErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListSourceRepositoryBranchesErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::ListSourceRepositoryBranchesErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListSourceRepositoryBranchesErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::ListSourceRepositoryBranchesErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListSourceRepositoryBranchesErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListSourceRepositoryBranchesErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSpacesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSpacesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListSpacesError> for Error {
    fn from(err: crate::error::ListSpacesError) -> Self {
        match err.kind {
            crate::error::ListSpacesErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListSpacesErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::ListSpacesErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListSpacesErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::ListSpacesErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListSpacesErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListSpacesErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartDevEnvironmentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartDevEnvironmentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StartDevEnvironmentError> for Error {
    fn from(err: crate::error::StartDevEnvironmentError) -> Self {
        match err.kind {
            crate::error::StartDevEnvironmentErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StartDevEnvironmentErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::StartDevEnvironmentErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StartDevEnvironmentErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::StartDevEnvironmentErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::StartDevEnvironmentErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StartDevEnvironmentErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartDevEnvironmentSessionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartDevEnvironmentSessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StartDevEnvironmentSessionError> for Error {
    fn from(err: crate::error::StartDevEnvironmentSessionError) -> Self {
        match err.kind {
            crate::error::StartDevEnvironmentSessionErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StartDevEnvironmentSessionErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::StartDevEnvironmentSessionErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StartDevEnvironmentSessionErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::StartDevEnvironmentSessionErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::StartDevEnvironmentSessionErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StartDevEnvironmentSessionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopDevEnvironmentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopDevEnvironmentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StopDevEnvironmentError> for Error {
    fn from(err: crate::error::StopDevEnvironmentError) -> Self {
        match err.kind {
            crate::error::StopDevEnvironmentErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StopDevEnvironmentErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::StopDevEnvironmentErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StopDevEnvironmentErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::StopDevEnvironmentErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::StopDevEnvironmentErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StopDevEnvironmentErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDevEnvironmentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateDevEnvironmentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateDevEnvironmentError> for Error {
    fn from(err: crate::error::UpdateDevEnvironmentError) -> Self {
        match err.kind {
            crate::error::UpdateDevEnvironmentErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateDevEnvironmentErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::UpdateDevEnvironmentErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateDevEnvironmentErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::UpdateDevEnvironmentErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateDevEnvironmentErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateDevEnvironmentErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::VerifySessionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::VerifySessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::VerifySessionError> for Error {
    fn from(err: crate::error::VerifySessionError) -> Self {
        match err.kind {
            crate::error::VerifySessionErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::VerifySessionErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::VerifySessionErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::VerifySessionErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::VerifySessionErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::VerifySessionErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::VerifySessionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl std::error::Error for Error {}

