// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_access_token_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateAccessTokenInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.expires_time {
        object.key("expiresTime").date_time(var_1, aws_smithy_types::date_time::Format::DateTime)?;
    }
    if let Some(var_2) = &input.name {
        object.key("name").string(var_2.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dev_environment_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateDevEnvironmentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_3) = &input.alias {
        object.key("alias").string(var_3.as_str());
    }
    if let Some(var_4) = &input.client_token {
        object.key("clientToken").string(var_4.as_str());
    }
    if let Some(var_5) = &input.ides {
        let mut array_6 = object.key("ides").start_array();
        for item_7 in var_5 {
             {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ide_configuration(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if input.inactivity_timeout_minutes != 0 {
        object.key("inactivityTimeoutMinutes").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.inactivity_timeout_minutes).into()));
    }
    if let Some(var_9) = &input.instance_type {
        object.key("instanceType").string(var_9.as_str());
    }
    if let Some(var_10) = &input.persistent_storage {
        #[allow(unused_mut)]
        let mut object_11 = object.key("persistentStorage").start_object();
        crate::json_ser::serialize_structure_crate_model_persistent_storage_configuration(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.repositories {
        let mut array_13 = object.key("repositories").start_array();
        for item_14 in var_12 {
             {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_crate_model_repository_input(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_project_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateProjectInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_16) = &input.description {
        object.key("description").string(var_16.as_str());
    }
    if let Some(var_17) = &input.display_name {
        object.key("displayName").string(var_17.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_source_repository_branch_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateSourceRepositoryBranchInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_18) = &input.head_commit_id {
        object.key("headCommitId").string(var_18.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_access_tokens_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListAccessTokensInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_19) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_19).into()));
    }
    if let Some(var_20) = &input.next_token {
        object.key("nextToken").string(var_20.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_dev_environments_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDevEnvironmentsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_21) = &input.filters {
        let mut array_22 = object.key("filters").start_array();
        for item_23 in var_21 {
             {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_25).into()));
    }
    if let Some(var_26) = &input.next_token {
        object.key("nextToken").string(var_26.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_event_logs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListEventLogsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_27) = &input.end_time {
        object.key("endTime").date_time(var_27, aws_smithy_types::date_time::Format::DateTime)?;
    }
    if let Some(var_28) = &input.event_name {
        object.key("eventName").string(var_28.as_str());
    }
    if let Some(var_29) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_29).into()));
    }
    if let Some(var_30) = &input.next_token {
        object.key("nextToken").string(var_30.as_str());
    }
    if let Some(var_31) = &input.start_time {
        object.key("startTime").date_time(var_31, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_projects_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListProjectsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_32) = &input.filters {
        let mut array_33 = object.key("filters").start_array();
        for item_34 in var_32 {
             {
                #[allow(unused_mut)]
                let mut object_35 = array_33.value().start_object();
                crate::json_ser::serialize_structure_crate_model_project_list_filter(&mut object_35, item_34)?;
                object_35.finish();
            }
        }
        array_33.finish();
    }
    if let Some(var_36) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_36).into()));
    }
    if let Some(var_37) = &input.next_token {
        object.key("nextToken").string(var_37.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_source_repositories_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListSourceRepositoriesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_38) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_38).into()));
    }
    if let Some(var_39) = &input.next_token {
        object.key("nextToken").string(var_39.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_source_repository_branches_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListSourceRepositoryBranchesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_40) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_40).into()));
    }
    if let Some(var_41) = &input.next_token {
        object.key("nextToken").string(var_41.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_spaces_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListSpacesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_42) = &input.next_token {
        object.key("nextToken").string(var_42.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_dev_environment_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartDevEnvironmentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_43) = &input.ides {
        let mut array_44 = object.key("ides").start_array();
        for item_45 in var_43 {
             {
                #[allow(unused_mut)]
                let mut object_46 = array_44.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ide_configuration(&mut object_46, item_45)?;
                object_46.finish();
            }
        }
        array_44.finish();
    }
    if input.inactivity_timeout_minutes != 0 {
        object.key("inactivityTimeoutMinutes").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.inactivity_timeout_minutes).into()));
    }
    if let Some(var_47) = &input.instance_type {
        object.key("instanceType").string(var_47.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_dev_environment_session_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartDevEnvironmentSessionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_48) = &input.session_configuration {
        #[allow(unused_mut)]
        let mut object_49 = object.key("sessionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_dev_environment_session_configuration(&mut object_49, var_48)?;
        object_49.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dev_environment_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDevEnvironmentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_50) = &input.alias {
        object.key("alias").string(var_50.as_str());
    }
    if let Some(var_51) = &input.client_token {
        object.key("clientToken").string(var_51.as_str());
    }
    if let Some(var_52) = &input.ides {
        let mut array_53 = object.key("ides").start_array();
        for item_54 in var_52 {
             {
                #[allow(unused_mut)]
                let mut object_55 = array_53.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ide_configuration(&mut object_55, item_54)?;
                object_55.finish();
            }
        }
        array_53.finish();
    }
    if input.inactivity_timeout_minutes != 0 {
        object.key("inactivityTimeoutMinutes").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.inactivity_timeout_minutes).into()));
    }
    if let Some(var_56) = &input.instance_type {
        object.key("instanceType").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ide_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::IdeConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_57) = &input.runtime {
        object.key("runtime").string(var_57.as_str());
    }
    if let Some(var_58) = &input.name {
        object.key("name").string(var_58.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_persistent_storage_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PersistentStorageConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_59) = &input.size_in_gi_b {
        object.key("sizeInGiB").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_59).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_repository_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RepositoryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_60) = &input.repository_name {
        object.key("repositoryName").string(var_60.as_str());
    }
    if let Some(var_61) = &input.branch_name {
        object.key("branchName").string(var_61.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Filter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_62) = &input.key {
        object.key("key").string(var_62.as_str());
    }
    if let Some(var_63) = &input.values {
        let mut array_64 = object.key("values").start_array();
        for item_65 in var_63 {
             {
                array_64.value().string(item_65.as_str());
            }
        }
        array_64.finish();
    }
    if let Some(var_66) = &input.comparison_operator {
        object.key("comparisonOperator").string(var_66.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_project_list_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProjectListFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_67) = &input.key {
        object.key("key").string(var_67.as_str());
    }
    if let Some(var_68) = &input.values {
        let mut array_69 = object.key("values").start_array();
        for item_70 in var_68 {
             {
                array_69.value().string(item_70.as_str());
            }
        }
        array_69.finish();
    }
    if let Some(var_71) = &input.comparison_operator {
        object.key("comparisonOperator").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dev_environment_session_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DevEnvironmentSessionConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_72) = &input.session_type {
        object.key("sessionType").string(var_72.as_str());
    }
    if let Some(var_73) = &input.execute_command_session_configuration {
        #[allow(unused_mut)]
        let mut object_74 = object.key("executeCommandSessionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_execute_command_session_configuration(&mut object_74, var_73)?;
        object_74.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_execute_command_session_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ExecuteCommandSessionConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_75) = &input.command {
        object.key("command").string(var_75.as_str());
    }
    if let Some(var_76) = &input.arguments {
        let mut array_77 = object.key("arguments").start_array();
        for item_78 in var_76 {
             {
                array_77.value().string(item_78.as_str());
            }
        }
        array_77.finish();
    }
    Ok(())
}

