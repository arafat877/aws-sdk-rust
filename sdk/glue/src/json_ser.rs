// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_create_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchCreatePartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.catalog_id {
        object.key("CatalogId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.database_name {
        object.key("DatabaseName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.table_name {
        object.key("TableName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.partition_input_list {
        let mut array_5 = object.key("PartitionInputList").start_array();
        for item_6 in var_4 {
             {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_connection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchDeleteConnectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_8) = &input.catalog_id {
        object.key("CatalogId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.connection_name_list {
        let mut array_10 = object.key("ConnectionNameList").start_array();
        for item_11 in var_9 {
             {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchDeletePartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_12) = &input.catalog_id {
        object.key("CatalogId").string(var_12.as_str());
    }
    if let Some(var_13) = &input.database_name {
        object.key("DatabaseName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.table_name {
        object.key("TableName").string(var_14.as_str());
    }
    if let Some(var_15) = &input.partitions_to_delete {
        let mut array_16 = object.key("PartitionsToDelete").start_array();
        for item_17 in var_15 {
             {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchDeleteTableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_19) = &input.catalog_id {
        object.key("CatalogId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.database_name {
        object.key("DatabaseName").string(var_20.as_str());
    }
    if let Some(var_21) = &input.tables_to_delete {
        let mut array_22 = object.key("TablesToDelete").start_array();
        for item_23 in var_21 {
             {
                array_22.value().string(item_23.as_str());
            }
        }
        array_22.finish();
    }
    if let Some(var_24) = &input.transaction_id {
        object.key("TransactionId").string(var_24.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchDeleteTableVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_25) = &input.catalog_id {
        object.key("CatalogId").string(var_25.as_str());
    }
    if let Some(var_26) = &input.database_name {
        object.key("DatabaseName").string(var_26.as_str());
    }
    if let Some(var_27) = &input.table_name {
        object.key("TableName").string(var_27.as_str());
    }
    if let Some(var_28) = &input.version_ids {
        let mut array_29 = object.key("VersionIds").start_array();
        for item_30 in var_28 {
             {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_blueprints_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetBlueprintsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_31) = &input.names {
        let mut array_32 = object.key("Names").start_array();
        for item_33 in var_31 {
             {
                array_32.value().string(item_33.as_str());
            }
        }
        array_32.finish();
    }
    if let Some(var_34) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_34);
    }
    if let Some(var_35) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_35);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_crawlers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetCrawlersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_36) = &input.crawler_names {
        let mut array_37 = object.key("CrawlerNames").start_array();
        for item_38 in var_36 {
             {
                array_37.value().string(item_38.as_str());
            }
        }
        array_37.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_custom_entity_types_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetCustomEntityTypesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_39) = &input.names {
        let mut array_40 = object.key("Names").start_array();
        for item_41 in var_39 {
             {
                array_40.value().string(item_41.as_str());
            }
        }
        array_40.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_data_quality_result_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetDataQualityResultInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_42) = &input.result_ids {
        let mut array_43 = object.key("ResultIds").start_array();
        for item_44 in var_42 {
             {
                array_43.value().string(item_44.as_str());
            }
        }
        array_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_dev_endpoints_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetDevEndpointsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_45) = &input.dev_endpoint_names {
        let mut array_46 = object.key("DevEndpointNames").start_array();
        for item_47 in var_45 {
             {
                array_46.value().string(item_47.as_str());
            }
        }
        array_46.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_48) = &input.job_names {
        let mut array_49 = object.key("JobNames").start_array();
        for item_50 in var_48 {
             {
                array_49.value().string(item_50.as_str());
            }
        }
        array_49.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetPartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_51) = &input.catalog_id {
        object.key("CatalogId").string(var_51.as_str());
    }
    if let Some(var_52) = &input.database_name {
        object.key("DatabaseName").string(var_52.as_str());
    }
    if let Some(var_53) = &input.table_name {
        object.key("TableName").string(var_53.as_str());
    }
    if let Some(var_54) = &input.partitions_to_get {
        let mut array_55 = object.key("PartitionsToGet").start_array();
        for item_56 in var_54 {
             {
                #[allow(unused_mut)]
                let mut object_57 = array_55.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(&mut object_57, item_56)?;
                object_57.finish();
            }
        }
        array_55.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_triggers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetTriggersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_58) = &input.trigger_names {
        let mut array_59 = object.key("TriggerNames").start_array();
        for item_60 in var_58 {
             {
                array_59.value().string(item_60.as_str());
            }
        }
        array_59.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_workflows_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetWorkflowsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_61) = &input.names {
        let mut array_62 = object.key("Names").start_array();
        for item_63 in var_61 {
             {
                array_62.value().string(item_63.as_str());
            }
        }
        array_62.finish();
    }
    if let Some(var_64) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_64);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_stop_job_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchStopJobRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_65) = &input.job_name {
        object.key("JobName").string(var_65.as_str());
    }
    if let Some(var_66) = &input.job_run_ids {
        let mut array_67 = object.key("JobRunIds").start_array();
        for item_68 in var_66 {
             {
                array_67.value().string(item_68.as_str());
            }
        }
        array_67.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_update_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchUpdatePartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_69) = &input.catalog_id {
        object.key("CatalogId").string(var_69.as_str());
    }
    if let Some(var_70) = &input.database_name {
        object.key("DatabaseName").string(var_70.as_str());
    }
    if let Some(var_71) = &input.table_name {
        object.key("TableName").string(var_71.as_str());
    }
    if let Some(var_72) = &input.entries {
        let mut array_73 = object.key("Entries").start_array();
        for item_74 in var_72 {
             {
                #[allow(unused_mut)]
                let mut object_75 = array_73.value().start_object();
                crate::json_ser::serialize_structure_crate_model_batch_update_partition_request_entry(&mut object_75, item_74)?;
                object_75.finish();
            }
        }
        array_73.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_data_quality_rule_recommendation_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CancelDataQualityRuleRecommendationRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_76) = &input.run_id {
        object.key("RunId").string(var_76.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_data_quality_ruleset_evaluation_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CancelDataQualityRulesetEvaluationRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_77) = &input.run_id {
        object.key("RunId").string(var_77.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_ml_task_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CancelMlTaskRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_78) = &input.transform_id {
        object.key("TransformId").string(var_78.as_str());
    }
    if let Some(var_79) = &input.task_run_id {
        object.key("TaskRunId").string(var_79.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_statement_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CancelStatementInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_80) = &input.session_id {
        object.key("SessionId").string(var_80.as_str());
    }
     {
        object.key("Id").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.id).into()));
    }
    if let Some(var_81) = &input.request_origin {
        object.key("RequestOrigin").string(var_81.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_check_schema_version_validity_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CheckSchemaVersionValidityInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_82) = &input.data_format {
        object.key("DataFormat").string(var_82.as_str());
    }
    if let Some(var_83) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_83.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_blueprint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateBlueprintInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_84) = &input.name {
        object.key("Name").string(var_84.as_str());
    }
    if let Some(var_85) = &input.description {
        object.key("Description").string(var_85.as_str());
    }
    if let Some(var_86) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_86.as_str());
    }
    if let Some(var_87) = &input.tags {
        #[allow(unused_mut)]
        let mut object_88 = object.key("Tags").start_object();
        for (key_89, value_90) in var_87 {
             {
                object_88.key(key_89.as_str()).string(value_90.as_str());
            }
        }
        object_88.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_classifier_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateClassifierInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_91) = &input.grok_classifier {
        #[allow(unused_mut)]
        let mut object_92 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_grok_classifier_request(&mut object_92, var_91)?;
        object_92.finish();
    }
    if let Some(var_93) = &input.xml_classifier {
        #[allow(unused_mut)]
        let mut object_94 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_xml_classifier_request(&mut object_94, var_93)?;
        object_94.finish();
    }
    if let Some(var_95) = &input.json_classifier {
        #[allow(unused_mut)]
        let mut object_96 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_json_classifier_request(&mut object_96, var_95)?;
        object_96.finish();
    }
    if let Some(var_97) = &input.csv_classifier {
        #[allow(unused_mut)]
        let mut object_98 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_csv_classifier_request(&mut object_98, var_97)?;
        object_98.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_connection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateConnectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_99) = &input.catalog_id {
        object.key("CatalogId").string(var_99.as_str());
    }
    if let Some(var_100) = &input.connection_input {
        #[allow(unused_mut)]
        let mut object_101 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(&mut object_101, var_100)?;
        object_101.finish();
    }
    if let Some(var_102) = &input.tags {
        #[allow(unused_mut)]
        let mut object_103 = object.key("Tags").start_object();
        for (key_104, value_105) in var_102 {
             {
                object_103.key(key_104.as_str()).string(value_105.as_str());
            }
        }
        object_103.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_crawler_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateCrawlerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_106) = &input.name {
        object.key("Name").string(var_106.as_str());
    }
    if let Some(var_107) = &input.role {
        object.key("Role").string(var_107.as_str());
    }
    if let Some(var_108) = &input.database_name {
        object.key("DatabaseName").string(var_108.as_str());
    }
    if let Some(var_109) = &input.description {
        object.key("Description").string(var_109.as_str());
    }
    if let Some(var_110) = &input.targets {
        #[allow(unused_mut)]
        let mut object_111 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_111, var_110)?;
        object_111.finish();
    }
    if let Some(var_112) = &input.schedule {
        object.key("Schedule").string(var_112.as_str());
    }
    if let Some(var_113) = &input.classifiers {
        let mut array_114 = object.key("Classifiers").start_array();
        for item_115 in var_113 {
             {
                array_114.value().string(item_115.as_str());
            }
        }
        array_114.finish();
    }
    if let Some(var_116) = &input.table_prefix {
        object.key("TablePrefix").string(var_116.as_str());
    }
    if let Some(var_117) = &input.schema_change_policy {
        #[allow(unused_mut)]
        let mut object_118 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(&mut object_118, var_117)?;
        object_118.finish();
    }
    if let Some(var_119) = &input.recrawl_policy {
        #[allow(unused_mut)]
        let mut object_120 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_120, var_119)?;
        object_120.finish();
    }
    if let Some(var_121) = &input.lineage_configuration {
        #[allow(unused_mut)]
        let mut object_122 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(&mut object_122, var_121)?;
        object_122.finish();
    }
    if let Some(var_123) = &input.lake_formation_configuration {
        #[allow(unused_mut)]
        let mut object_124 = object.key("LakeFormationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lake_formation_configuration(&mut object_124, var_123)?;
        object_124.finish();
    }
    if let Some(var_125) = &input.configuration {
        object.key("Configuration").string(var_125.as_str());
    }
    if let Some(var_126) = &input.crawler_security_configuration {
        object.key("CrawlerSecurityConfiguration").string(var_126.as_str());
    }
    if let Some(var_127) = &input.tags {
        #[allow(unused_mut)]
        let mut object_128 = object.key("Tags").start_object();
        for (key_129, value_130) in var_127 {
             {
                object_128.key(key_129.as_str()).string(value_130.as_str());
            }
        }
        object_128.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_custom_entity_type_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateCustomEntityTypeInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_131) = &input.name {
        object.key("Name").string(var_131.as_str());
    }
    if let Some(var_132) = &input.regex_string {
        object.key("RegexString").string(var_132.as_str());
    }
    if let Some(var_133) = &input.context_words {
        let mut array_134 = object.key("ContextWords").start_array();
        for item_135 in var_133 {
             {
                array_134.value().string(item_135.as_str());
            }
        }
        array_134.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_database_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateDatabaseInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_136) = &input.catalog_id {
        object.key("CatalogId").string(var_136.as_str());
    }
    if let Some(var_137) = &input.database_input {
        #[allow(unused_mut)]
        let mut object_138 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_138, var_137)?;
        object_138.finish();
    }
    if let Some(var_139) = &input.tags {
        #[allow(unused_mut)]
        let mut object_140 = object.key("Tags").start_object();
        for (key_141, value_142) in var_139 {
             {
                object_140.key(key_141.as_str()).string(value_142.as_str());
            }
        }
        object_140.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_quality_ruleset_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateDataQualityRulesetInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_143) = &input.name {
        object.key("Name").string(var_143.as_str());
    }
    if let Some(var_144) = &input.description {
        object.key("Description").string(var_144.as_str());
    }
    if let Some(var_145) = &input.ruleset {
        object.key("Ruleset").string(var_145.as_str());
    }
    if let Some(var_146) = &input.tags {
        #[allow(unused_mut)]
        let mut object_147 = object.key("Tags").start_object();
        for (key_148, value_149) in var_146 {
             {
                object_147.key(key_148.as_str()).string(value_149.as_str());
            }
        }
        object_147.finish();
    }
    if let Some(var_150) = &input.target_table {
        #[allow(unused_mut)]
        let mut object_151 = object.key("TargetTable").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_target_table(&mut object_151, var_150)?;
        object_151.finish();
    }
    if let Some(var_152) = &input.client_token {
        object.key("ClientToken").string(var_152.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dev_endpoint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateDevEndpointInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_153) = &input.endpoint_name {
        object.key("EndpointName").string(var_153.as_str());
    }
    if let Some(var_154) = &input.role_arn {
        object.key("RoleArn").string(var_154.as_str());
    }
    if let Some(var_155) = &input.security_group_ids {
        let mut array_156 = object.key("SecurityGroupIds").start_array();
        for item_157 in var_155 {
             {
                array_156.value().string(item_157.as_str());
            }
        }
        array_156.finish();
    }
    if let Some(var_158) = &input.subnet_id {
        object.key("SubnetId").string(var_158.as_str());
    }
    if let Some(var_159) = &input.public_key {
        object.key("PublicKey").string(var_159.as_str());
    }
    if let Some(var_160) = &input.public_keys {
        let mut array_161 = object.key("PublicKeys").start_array();
        for item_162 in var_160 {
             {
                array_161.value().string(item_162.as_str());
            }
        }
        array_161.finish();
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_nodes).into()));
    }
    if let Some(var_163) = &input.worker_type {
        object.key("WorkerType").string(var_163.as_str());
    }
    if let Some(var_164) = &input.glue_version {
        object.key("GlueVersion").string(var_164.as_str());
    }
    if let Some(var_165) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_165).into()));
    }
    if let Some(var_166) = &input.extra_python_libs_s3_path {
        object.key("ExtraPythonLibsS3Path").string(var_166.as_str());
    }
    if let Some(var_167) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_167.as_str());
    }
    if let Some(var_168) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_168.as_str());
    }
    if let Some(var_169) = &input.tags {
        #[allow(unused_mut)]
        let mut object_170 = object.key("Tags").start_object();
        for (key_171, value_172) in var_169 {
             {
                object_170.key(key_171.as_str()).string(value_172.as_str());
            }
        }
        object_170.finish();
    }
    if let Some(var_173) = &input.arguments {
        #[allow(unused_mut)]
        let mut object_174 = object.key("Arguments").start_object();
        for (key_175, value_176) in var_173 {
             {
                object_174.key(key_175.as_str()).string(value_176.as_str());
            }
        }
        object_174.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_177) = &input.name {
        object.key("Name").string(var_177.as_str());
    }
    if let Some(var_178) = &input.description {
        object.key("Description").string(var_178.as_str());
    }
    if let Some(var_179) = &input.log_uri {
        object.key("LogUri").string(var_179.as_str());
    }
    if let Some(var_180) = &input.role {
        object.key("Role").string(var_180.as_str());
    }
    if let Some(var_181) = &input.execution_property {
        #[allow(unused_mut)]
        let mut object_182 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(&mut object_182, var_181)?;
        object_182.finish();
    }
    if let Some(var_183) = &input.command {
        #[allow(unused_mut)]
        let mut object_184 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_184, var_183)?;
        object_184.finish();
    }
    if let Some(var_185) = &input.default_arguments {
        #[allow(unused_mut)]
        let mut object_186 = object.key("DefaultArguments").start_object();
        for (key_187, value_188) in var_185 {
             {
                object_186.key(key_187.as_str()).string(value_188.as_str());
            }
        }
        object_186.finish();
    }
    if let Some(var_189) = &input.non_overridable_arguments {
        #[allow(unused_mut)]
        let mut object_190 = object.key("NonOverridableArguments").start_object();
        for (key_191, value_192) in var_189 {
             {
                object_190.key(key_191.as_str()).string(value_192.as_str());
            }
        }
        object_190.finish();
    }
    if let Some(var_193) = &input.connections {
        #[allow(unused_mut)]
        let mut object_194 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(&mut object_194, var_193)?;
        object_194.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_retries).into()));
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.allocated_capacity).into()));
    }
    if let Some(var_195) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_195).into()));
    }
    if let Some(var_196) = &input.max_capacity {
        object.key("MaxCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_196).into()));
    }
    if let Some(var_197) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_197.as_str());
    }
    if let Some(var_198) = &input.tags {
        #[allow(unused_mut)]
        let mut object_199 = object.key("Tags").start_object();
        for (key_200, value_201) in var_198 {
             {
                object_199.key(key_200.as_str()).string(value_201.as_str());
            }
        }
        object_199.finish();
    }
    if let Some(var_202) = &input.notification_property {
        #[allow(unused_mut)]
        let mut object_203 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(&mut object_203, var_202)?;
        object_203.finish();
    }
    if let Some(var_204) = &input.glue_version {
        object.key("GlueVersion").string(var_204.as_str());
    }
    if let Some(var_205) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_205).into()));
    }
    if let Some(var_206) = &input.worker_type {
        object.key("WorkerType").string(var_206.as_str());
    }
    if let Some(var_207) = &input.code_gen_configuration_nodes {
        #[allow(unused_mut)]
        let mut object_208 = object.key("CodeGenConfigurationNodes").start_object();
        for (key_209, value_210) in var_207 {
             {
                #[allow(unused_mut)]
                let mut object_211 = object_208.key(key_209.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_configuration_node(&mut object_211, value_210)?;
                object_211.finish();
            }
        }
        object_208.finish();
    }
    if let Some(var_212) = &input.execution_class {
        object.key("ExecutionClass").string(var_212.as_str());
    }
    if let Some(var_213) = &input.source_control_details {
        #[allow(unused_mut)]
        let mut object_214 = object.key("SourceControlDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_source_control_details(&mut object_214, var_213)?;
        object_214.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ml_transform_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateMlTransformInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_215) = &input.name {
        object.key("Name").string(var_215.as_str());
    }
    if let Some(var_216) = &input.description {
        object.key("Description").string(var_216.as_str());
    }
    if let Some(var_217) = &input.input_record_tables {
        let mut array_218 = object.key("InputRecordTables").start_array();
        for item_219 in var_217 {
             {
                #[allow(unused_mut)]
                let mut object_220 = array_218.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_table(&mut object_220, item_219)?;
                object_220.finish();
            }
        }
        array_218.finish();
    }
    if let Some(var_221) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_222 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(&mut object_222, var_221)?;
        object_222.finish();
    }
    if let Some(var_223) = &input.role {
        object.key("Role").string(var_223.as_str());
    }
    if let Some(var_224) = &input.glue_version {
        object.key("GlueVersion").string(var_224.as_str());
    }
    if let Some(var_225) = &input.max_capacity {
        object.key("MaxCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_225).into()));
    }
    if let Some(var_226) = &input.worker_type {
        object.key("WorkerType").string(var_226.as_str());
    }
    if let Some(var_227) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_227).into()));
    }
    if let Some(var_228) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_228).into()));
    }
    if let Some(var_229) = &input.max_retries {
        object.key("MaxRetries").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_229).into()));
    }
    if let Some(var_230) = &input.tags {
        #[allow(unused_mut)]
        let mut object_231 = object.key("Tags").start_object();
        for (key_232, value_233) in var_230 {
             {
                object_231.key(key_232.as_str()).string(value_233.as_str());
            }
        }
        object_231.finish();
    }
    if let Some(var_234) = &input.transform_encryption {
        #[allow(unused_mut)]
        let mut object_235 = object.key("TransformEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_encryption(&mut object_235, var_234)?;
        object_235.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreatePartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_236) = &input.catalog_id {
        object.key("CatalogId").string(var_236.as_str());
    }
    if let Some(var_237) = &input.database_name {
        object.key("DatabaseName").string(var_237.as_str());
    }
    if let Some(var_238) = &input.table_name {
        object.key("TableName").string(var_238.as_str());
    }
    if let Some(var_239) = &input.partition_input {
        #[allow(unused_mut)]
        let mut object_240 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_240, var_239)?;
        object_240.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_index_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreatePartitionIndexInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_241) = &input.catalog_id {
        object.key("CatalogId").string(var_241.as_str());
    }
    if let Some(var_242) = &input.database_name {
        object.key("DatabaseName").string(var_242.as_str());
    }
    if let Some(var_243) = &input.table_name {
        object.key("TableName").string(var_243.as_str());
    }
    if let Some(var_244) = &input.partition_index {
        #[allow(unused_mut)]
        let mut object_245 = object.key("PartitionIndex").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_index(&mut object_245, var_244)?;
        object_245.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_registry_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateRegistryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_246) = &input.registry_name {
        object.key("RegistryName").string(var_246.as_str());
    }
    if let Some(var_247) = &input.description {
        object.key("Description").string(var_247.as_str());
    }
    if let Some(var_248) = &input.tags {
        #[allow(unused_mut)]
        let mut object_249 = object.key("Tags").start_object();
        for (key_250, value_251) in var_248 {
             {
                object_249.key(key_250.as_str()).string(value_251.as_str());
            }
        }
        object_249.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_schema_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateSchemaInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_252) = &input.registry_id {
        #[allow(unused_mut)]
        let mut object_253 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_253, var_252)?;
        object_253.finish();
    }
    if let Some(var_254) = &input.schema_name {
        object.key("SchemaName").string(var_254.as_str());
    }
    if let Some(var_255) = &input.data_format {
        object.key("DataFormat").string(var_255.as_str());
    }
    if let Some(var_256) = &input.compatibility {
        object.key("Compatibility").string(var_256.as_str());
    }
    if let Some(var_257) = &input.description {
        object.key("Description").string(var_257.as_str());
    }
    if let Some(var_258) = &input.tags {
        #[allow(unused_mut)]
        let mut object_259 = object.key("Tags").start_object();
        for (key_260, value_261) in var_258 {
             {
                object_259.key(key_260.as_str()).string(value_261.as_str());
            }
        }
        object_259.finish();
    }
    if let Some(var_262) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_262.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_script_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateScriptInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_263) = &input.dag_nodes {
        let mut array_264 = object.key("DagNodes").start_array();
        for item_265 in var_263 {
             {
                #[allow(unused_mut)]
                let mut object_266 = array_264.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node(&mut object_266, item_265)?;
                object_266.finish();
            }
        }
        array_264.finish();
    }
    if let Some(var_267) = &input.dag_edges {
        let mut array_268 = object.key("DagEdges").start_array();
        for item_269 in var_267 {
             {
                #[allow(unused_mut)]
                let mut object_270 = array_268.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_edge(&mut object_270, item_269)?;
                object_270.finish();
            }
        }
        array_268.finish();
    }
    if let Some(var_271) = &input.language {
        object.key("Language").string(var_271.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateSecurityConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_272) = &input.name {
        object.key("Name").string(var_272.as_str());
    }
    if let Some(var_273) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_274 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(&mut object_274, var_273)?;
        object_274.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_session_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateSessionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_275) = &input.id {
        object.key("Id").string(var_275.as_str());
    }
    if let Some(var_276) = &input.description {
        object.key("Description").string(var_276.as_str());
    }
    if let Some(var_277) = &input.role {
        object.key("Role").string(var_277.as_str());
    }
    if let Some(var_278) = &input.command {
        #[allow(unused_mut)]
        let mut object_279 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_session_command(&mut object_279, var_278)?;
        object_279.finish();
    }
    if let Some(var_280) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_280).into()));
    }
    if let Some(var_281) = &input.idle_timeout {
        object.key("IdleTimeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_281).into()));
    }
    if let Some(var_282) = &input.default_arguments {
        #[allow(unused_mut)]
        let mut object_283 = object.key("DefaultArguments").start_object();
        for (key_284, value_285) in var_282 {
             {
                object_283.key(key_284.as_str()).string(value_285.as_str());
            }
        }
        object_283.finish();
    }
    if let Some(var_286) = &input.connections {
        #[allow(unused_mut)]
        let mut object_287 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(&mut object_287, var_286)?;
        object_287.finish();
    }
    if let Some(var_288) = &input.max_capacity {
        object.key("MaxCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_288).into()));
    }
    if let Some(var_289) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_289).into()));
    }
    if let Some(var_290) = &input.worker_type {
        object.key("WorkerType").string(var_290.as_str());
    }
    if let Some(var_291) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_291.as_str());
    }
    if let Some(var_292) = &input.glue_version {
        object.key("GlueVersion").string(var_292.as_str());
    }
    if let Some(var_293) = &input.tags {
        #[allow(unused_mut)]
        let mut object_294 = object.key("Tags").start_object();
        for (key_295, value_296) in var_293 {
             {
                object_294.key(key_295.as_str()).string(value_296.as_str());
            }
        }
        object_294.finish();
    }
    if let Some(var_297) = &input.request_origin {
        object.key("RequestOrigin").string(var_297.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateTableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_298) = &input.catalog_id {
        object.key("CatalogId").string(var_298.as_str());
    }
    if let Some(var_299) = &input.database_name {
        object.key("DatabaseName").string(var_299.as_str());
    }
    if let Some(var_300) = &input.table_input {
        #[allow(unused_mut)]
        let mut object_301 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_301, var_300)?;
        object_301.finish();
    }
    if let Some(var_302) = &input.partition_indexes {
        let mut array_303 = object.key("PartitionIndexes").start_array();
        for item_304 in var_302 {
             {
                #[allow(unused_mut)]
                let mut object_305 = array_303.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_index(&mut object_305, item_304)?;
                object_305.finish();
            }
        }
        array_303.finish();
    }
    if let Some(var_306) = &input.transaction_id {
        object.key("TransactionId").string(var_306.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trigger_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateTriggerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_307) = &input.name {
        object.key("Name").string(var_307.as_str());
    }
    if let Some(var_308) = &input.workflow_name {
        object.key("WorkflowName").string(var_308.as_str());
    }
    if let Some(var_309) = &input.r#type {
        object.key("Type").string(var_309.as_str());
    }
    if let Some(var_310) = &input.schedule {
        object.key("Schedule").string(var_310.as_str());
    }
    if let Some(var_311) = &input.predicate {
        #[allow(unused_mut)]
        let mut object_312 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_312, var_311)?;
        object_312.finish();
    }
    if let Some(var_313) = &input.actions {
        let mut array_314 = object.key("Actions").start_array();
        for item_315 in var_313 {
             {
                #[allow(unused_mut)]
                let mut object_316 = array_314.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(&mut object_316, item_315)?;
                object_316.finish();
            }
        }
        array_314.finish();
    }
    if let Some(var_317) = &input.description {
        object.key("Description").string(var_317.as_str());
    }
    if input.start_on_creation {
        object.key("StartOnCreation").boolean(input.start_on_creation);
    }
    if let Some(var_318) = &input.tags {
        #[allow(unused_mut)]
        let mut object_319 = object.key("Tags").start_object();
        for (key_320, value_321) in var_318 {
             {
                object_319.key(key_320.as_str()).string(value_321.as_str());
            }
        }
        object_319.finish();
    }
    if let Some(var_322) = &input.event_batching_condition {
        #[allow(unused_mut)]
        let mut object_323 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(&mut object_323, var_322)?;
        object_323.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_defined_function_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateUserDefinedFunctionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_324) = &input.catalog_id {
        object.key("CatalogId").string(var_324.as_str());
    }
    if let Some(var_325) = &input.database_name {
        object.key("DatabaseName").string(var_325.as_str());
    }
    if let Some(var_326) = &input.function_input {
        #[allow(unused_mut)]
        let mut object_327 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(&mut object_327, var_326)?;
        object_327.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workflow_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateWorkflowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_328) = &input.name {
        object.key("Name").string(var_328.as_str());
    }
    if let Some(var_329) = &input.description {
        object.key("Description").string(var_329.as_str());
    }
    if let Some(var_330) = &input.default_run_properties {
        #[allow(unused_mut)]
        let mut object_331 = object.key("DefaultRunProperties").start_object();
        for (key_332, value_333) in var_330 {
             {
                object_331.key(key_332.as_str()).string(value_333.as_str());
            }
        }
        object_331.finish();
    }
    if let Some(var_334) = &input.tags {
        #[allow(unused_mut)]
        let mut object_335 = object.key("Tags").start_object();
        for (key_336, value_337) in var_334 {
             {
                object_335.key(key_336.as_str()).string(value_337.as_str());
            }
        }
        object_335.finish();
    }
    if let Some(var_338) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_338).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_blueprint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteBlueprintInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_339) = &input.name {
        object.key("Name").string(var_339.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_classifier_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteClassifierInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_340) = &input.name {
        object.key("Name").string(var_340.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteColumnStatisticsForPartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_341) = &input.catalog_id {
        object.key("CatalogId").string(var_341.as_str());
    }
    if let Some(var_342) = &input.database_name {
        object.key("DatabaseName").string(var_342.as_str());
    }
    if let Some(var_343) = &input.table_name {
        object.key("TableName").string(var_343.as_str());
    }
    if let Some(var_344) = &input.partition_values {
        let mut array_345 = object.key("PartitionValues").start_array();
        for item_346 in var_344 {
             {
                array_345.value().string(item_346.as_str());
            }
        }
        array_345.finish();
    }
    if let Some(var_347) = &input.column_name {
        object.key("ColumnName").string(var_347.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteColumnStatisticsForTableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_348) = &input.catalog_id {
        object.key("CatalogId").string(var_348.as_str());
    }
    if let Some(var_349) = &input.database_name {
        object.key("DatabaseName").string(var_349.as_str());
    }
    if let Some(var_350) = &input.table_name {
        object.key("TableName").string(var_350.as_str());
    }
    if let Some(var_351) = &input.column_name {
        object.key("ColumnName").string(var_351.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_connection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteConnectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_352) = &input.catalog_id {
        object.key("CatalogId").string(var_352.as_str());
    }
    if let Some(var_353) = &input.connection_name {
        object.key("ConnectionName").string(var_353.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_crawler_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteCrawlerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_354) = &input.name {
        object.key("Name").string(var_354.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_custom_entity_type_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteCustomEntityTypeInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_355) = &input.name {
        object.key("Name").string(var_355.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_database_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteDatabaseInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_356) = &input.catalog_id {
        object.key("CatalogId").string(var_356.as_str());
    }
    if let Some(var_357) = &input.name {
        object.key("Name").string(var_357.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_data_quality_ruleset_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteDataQualityRulesetInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_358) = &input.name {
        object.key("Name").string(var_358.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_dev_endpoint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteDevEndpointInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_359) = &input.endpoint_name {
        object.key("EndpointName").string(var_359.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_360) = &input.job_name {
        object.key("JobName").string(var_360.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ml_transform_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteMlTransformInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_361) = &input.transform_id {
        object.key("TransformId").string(var_361.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeletePartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_362) = &input.catalog_id {
        object.key("CatalogId").string(var_362.as_str());
    }
    if let Some(var_363) = &input.database_name {
        object.key("DatabaseName").string(var_363.as_str());
    }
    if let Some(var_364) = &input.table_name {
        object.key("TableName").string(var_364.as_str());
    }
    if let Some(var_365) = &input.partition_values {
        let mut array_366 = object.key("PartitionValues").start_array();
        for item_367 in var_365 {
             {
                array_366.value().string(item_367.as_str());
            }
        }
        array_366.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_index_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeletePartitionIndexInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_368) = &input.catalog_id {
        object.key("CatalogId").string(var_368.as_str());
    }
    if let Some(var_369) = &input.database_name {
        object.key("DatabaseName").string(var_369.as_str());
    }
    if let Some(var_370) = &input.table_name {
        object.key("TableName").string(var_370.as_str());
    }
    if let Some(var_371) = &input.index_name {
        object.key("IndexName").string(var_371.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_registry_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteRegistryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_372) = &input.registry_id {
        #[allow(unused_mut)]
        let mut object_373 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_373, var_372)?;
        object_373.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_374) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_374.as_str());
    }
    if let Some(var_375) = &input.resource_arn {
        object.key("ResourceArn").string(var_375.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteSchemaInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_376) = &input.schema_id {
        #[allow(unused_mut)]
        let mut object_377 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_377, var_376)?;
        object_377.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_versions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteSchemaVersionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_378) = &input.schema_id {
        #[allow(unused_mut)]
        let mut object_379 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_379, var_378)?;
        object_379.finish();
    }
    if let Some(var_380) = &input.versions {
        object.key("Versions").string(var_380.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_security_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteSecurityConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_381) = &input.name {
        object.key("Name").string(var_381.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_session_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteSessionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_382) = &input.id {
        object.key("Id").string(var_382.as_str());
    }
    if let Some(var_383) = &input.request_origin {
        object.key("RequestOrigin").string(var_383.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteTableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_384) = &input.catalog_id {
        object.key("CatalogId").string(var_384.as_str());
    }
    if let Some(var_385) = &input.database_name {
        object.key("DatabaseName").string(var_385.as_str());
    }
    if let Some(var_386) = &input.name {
        object.key("Name").string(var_386.as_str());
    }
    if let Some(var_387) = &input.transaction_id {
        object.key("TransactionId").string(var_387.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteTableVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_388) = &input.catalog_id {
        object.key("CatalogId").string(var_388.as_str());
    }
    if let Some(var_389) = &input.database_name {
        object.key("DatabaseName").string(var_389.as_str());
    }
    if let Some(var_390) = &input.table_name {
        object.key("TableName").string(var_390.as_str());
    }
    if let Some(var_391) = &input.version_id {
        object.key("VersionId").string(var_391.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_trigger_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteTriggerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_392) = &input.name {
        object.key("Name").string(var_392.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_defined_function_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteUserDefinedFunctionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_393) = &input.catalog_id {
        object.key("CatalogId").string(var_393.as_str());
    }
    if let Some(var_394) = &input.database_name {
        object.key("DatabaseName").string(var_394.as_str());
    }
    if let Some(var_395) = &input.function_name {
        object.key("FunctionName").string(var_395.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workflow_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteWorkflowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_396) = &input.name {
        object.key("Name").string(var_396.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetBlueprintInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_397) = &input.name {
        object.key("Name").string(var_397.as_str());
    }
    if let Some(var_398) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_398);
    }
    if let Some(var_399) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_399);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetBlueprintRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_400) = &input.blueprint_name {
        object.key("BlueprintName").string(var_400.as_str());
    }
    if let Some(var_401) = &input.run_id {
        object.key("RunId").string(var_401.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_runs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetBlueprintRunsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_402) = &input.blueprint_name {
        object.key("BlueprintName").string(var_402.as_str());
    }
    if let Some(var_403) = &input.next_token {
        object.key("NextToken").string(var_403.as_str());
    }
    if let Some(var_404) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_404).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_catalog_import_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCatalogImportStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_405) = &input.catalog_id {
        object.key("CatalogId").string(var_405.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifier_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetClassifierInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_406) = &input.name {
        object.key("Name").string(var_406.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifiers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetClassifiersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_407) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_407).into()));
    }
    if let Some(var_408) = &input.next_token {
        object.key("NextToken").string(var_408.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetColumnStatisticsForPartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_409) = &input.catalog_id {
        object.key("CatalogId").string(var_409.as_str());
    }
    if let Some(var_410) = &input.database_name {
        object.key("DatabaseName").string(var_410.as_str());
    }
    if let Some(var_411) = &input.table_name {
        object.key("TableName").string(var_411.as_str());
    }
    if let Some(var_412) = &input.partition_values {
        let mut array_413 = object.key("PartitionValues").start_array();
        for item_414 in var_412 {
             {
                array_413.value().string(item_414.as_str());
            }
        }
        array_413.finish();
    }
    if let Some(var_415) = &input.column_names {
        let mut array_416 = object.key("ColumnNames").start_array();
        for item_417 in var_415 {
             {
                array_416.value().string(item_417.as_str());
            }
        }
        array_416.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetColumnStatisticsForTableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_418) = &input.catalog_id {
        object.key("CatalogId").string(var_418.as_str());
    }
    if let Some(var_419) = &input.database_name {
        object.key("DatabaseName").string(var_419.as_str());
    }
    if let Some(var_420) = &input.table_name {
        object.key("TableName").string(var_420.as_str());
    }
    if let Some(var_421) = &input.column_names {
        let mut array_422 = object.key("ColumnNames").start_array();
        for item_423 in var_421 {
             {
                array_422.value().string(item_423.as_str());
            }
        }
        array_422.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetConnectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_424) = &input.catalog_id {
        object.key("CatalogId").string(var_424.as_str());
    }
    if let Some(var_425) = &input.name {
        object.key("Name").string(var_425.as_str());
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connections_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetConnectionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_426) = &input.catalog_id {
        object.key("CatalogId").string(var_426.as_str());
    }
    if let Some(var_427) = &input.filter {
        #[allow(unused_mut)]
        let mut object_428 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_get_connections_filter(&mut object_428, var_427)?;
        object_428.finish();
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    if let Some(var_429) = &input.next_token {
        object.key("NextToken").string(var_429.as_str());
    }
    if let Some(var_430) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_430).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCrawlerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_431) = &input.name {
        object.key("Name").string(var_431.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_metrics_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCrawlerMetricsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_432) = &input.crawler_name_list {
        let mut array_433 = object.key("CrawlerNameList").start_array();
        for item_434 in var_432 {
             {
                array_433.value().string(item_434.as_str());
            }
        }
        array_433.finish();
    }
    if let Some(var_435) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_435).into()));
    }
    if let Some(var_436) = &input.next_token {
        object.key("NextToken").string(var_436.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawlers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCrawlersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_437) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_437).into()));
    }
    if let Some(var_438) = &input.next_token {
        object.key("NextToken").string(var_438.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_custom_entity_type_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCustomEntityTypeInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_439) = &input.name {
        object.key("Name").string(var_439.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_database_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDatabaseInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_440) = &input.catalog_id {
        object.key("CatalogId").string(var_440.as_str());
    }
    if let Some(var_441) = &input.name {
        object.key("Name").string(var_441.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_databases_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDatabasesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_442) = &input.catalog_id {
        object.key("CatalogId").string(var_442.as_str());
    }
    if let Some(var_443) = &input.next_token {
        object.key("NextToken").string(var_443.as_str());
    }
    if let Some(var_444) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_444).into()));
    }
    if let Some(var_445) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_445.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_data_catalog_encryption_settings_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDataCatalogEncryptionSettingsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_446) = &input.catalog_id {
        object.key("CatalogId").string(var_446.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dataflow_graph_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDataflowGraphInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_447) = &input.python_script {
        object.key("PythonScript").string(var_447.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_data_quality_result_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDataQualityResultInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_448) = &input.result_id {
        object.key("ResultId").string(var_448.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_data_quality_rule_recommendation_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDataQualityRuleRecommendationRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_449) = &input.run_id {
        object.key("RunId").string(var_449.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_data_quality_ruleset_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDataQualityRulesetInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_450) = &input.name {
        object.key("Name").string(var_450.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_data_quality_ruleset_evaluation_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDataQualityRulesetEvaluationRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_451) = &input.run_id {
        object.key("RunId").string(var_451.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDevEndpointInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_452) = &input.endpoint_name {
        object.key("EndpointName").string(var_452.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoints_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDevEndpointsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_453) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_453).into()));
    }
    if let Some(var_454) = &input.next_token {
        object.key("NextToken").string(var_454.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_455) = &input.job_name {
        object.key("JobName").string(var_455.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_bookmark_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetJobBookmarkInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_456) = &input.job_name {
        object.key("JobName").string(var_456.as_str());
    }
    if let Some(var_457) = &input.run_id {
        object.key("RunId").string(var_457.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetJobRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_458) = &input.job_name {
        object.key("JobName").string(var_458.as_str());
    }
    if let Some(var_459) = &input.run_id {
        object.key("RunId").string(var_459.as_str());
    }
    if input.predecessors_included {
        object.key("PredecessorsIncluded").boolean(input.predecessors_included);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_runs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetJobRunsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_460) = &input.job_name {
        object.key("JobName").string(var_460.as_str());
    }
    if let Some(var_461) = &input.next_token {
        object.key("NextToken").string(var_461.as_str());
    }
    if let Some(var_462) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_462).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_463) = &input.next_token {
        object.key("NextToken").string(var_463.as_str());
    }
    if let Some(var_464) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_464).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mapping_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMappingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_465) = &input.source {
        #[allow(unused_mut)]
        let mut object_466 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_466, var_465)?;
        object_466.finish();
    }
    if let Some(var_467) = &input.sinks {
        let mut array_468 = object.key("Sinks").start_array();
        for item_469 in var_467 {
             {
                #[allow(unused_mut)]
                let mut object_470 = array_468.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_470, item_469)?;
                object_470.finish();
            }
        }
        array_468.finish();
    }
    if let Some(var_471) = &input.location {
        #[allow(unused_mut)]
        let mut object_472 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_472, var_471)?;
        object_472.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMlTaskRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_473) = &input.transform_id {
        object.key("TransformId").string(var_473.as_str());
    }
    if let Some(var_474) = &input.task_run_id {
        object.key("TaskRunId").string(var_474.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_runs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMlTaskRunsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_475) = &input.transform_id {
        object.key("TransformId").string(var_475.as_str());
    }
    if let Some(var_476) = &input.next_token {
        object.key("NextToken").string(var_476.as_str());
    }
    if let Some(var_477) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_477).into()));
    }
    if let Some(var_478) = &input.filter {
        #[allow(unused_mut)]
        let mut object_479 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_filter_criteria(&mut object_479, var_478)?;
        object_479.finish();
    }
    if let Some(var_480) = &input.sort {
        #[allow(unused_mut)]
        let mut object_481 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_sort_criteria(&mut object_481, var_480)?;
        object_481.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transform_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMlTransformInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_482) = &input.transform_id {
        object.key("TransformId").string(var_482.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transforms_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMlTransformsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_483) = &input.next_token {
        object.key("NextToken").string(var_483.as_str());
    }
    if let Some(var_484) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_484).into()));
    }
    if let Some(var_485) = &input.filter {
        #[allow(unused_mut)]
        let mut object_486 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(&mut object_486, var_485)?;
        object_486.finish();
    }
    if let Some(var_487) = &input.sort {
        #[allow(unused_mut)]
        let mut object_488 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(&mut object_488, var_487)?;
        object_488.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetPartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_489) = &input.catalog_id {
        object.key("CatalogId").string(var_489.as_str());
    }
    if let Some(var_490) = &input.database_name {
        object.key("DatabaseName").string(var_490.as_str());
    }
    if let Some(var_491) = &input.table_name {
        object.key("TableName").string(var_491.as_str());
    }
    if let Some(var_492) = &input.partition_values {
        let mut array_493 = object.key("PartitionValues").start_array();
        for item_494 in var_492 {
             {
                array_493.value().string(item_494.as_str());
            }
        }
        array_493.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_indexes_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetPartitionIndexesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_495) = &input.catalog_id {
        object.key("CatalogId").string(var_495.as_str());
    }
    if let Some(var_496) = &input.database_name {
        object.key("DatabaseName").string(var_496.as_str());
    }
    if let Some(var_497) = &input.table_name {
        object.key("TableName").string(var_497.as_str());
    }
    if let Some(var_498) = &input.next_token {
        object.key("NextToken").string(var_498.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partitions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetPartitionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_499) = &input.catalog_id {
        object.key("CatalogId").string(var_499.as_str());
    }
    if let Some(var_500) = &input.database_name {
        object.key("DatabaseName").string(var_500.as_str());
    }
    if let Some(var_501) = &input.table_name {
        object.key("TableName").string(var_501.as_str());
    }
    if let Some(var_502) = &input.expression {
        object.key("Expression").string(var_502.as_str());
    }
    if let Some(var_503) = &input.next_token {
        object.key("NextToken").string(var_503.as_str());
    }
    if let Some(var_504) = &input.segment {
        #[allow(unused_mut)]
        let mut object_505 = object.key("Segment").start_object();
        crate::json_ser::serialize_structure_crate_model_segment(&mut object_505, var_504)?;
        object_505.finish();
    }
    if let Some(var_506) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_506).into()));
    }
    if let Some(var_507) = &input.exclude_column_schema {
        object.key("ExcludeColumnSchema").boolean(*var_507);
    }
    if let Some(var_508) = &input.transaction_id {
        object.key("TransactionId").string(var_508.as_str());
    }
    if let Some(var_509) = &input.query_as_of_time {
        object.key("QueryAsOfTime").date_time(var_509, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_plan_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetPlanInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_510) = &input.mapping {
        let mut array_511 = object.key("Mapping").start_array();
        for item_512 in var_510 {
             {
                #[allow(unused_mut)]
                let mut object_513 = array_511.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mapping_entry(&mut object_513, item_512)?;
                object_513.finish();
            }
        }
        array_511.finish();
    }
    if let Some(var_514) = &input.source {
        #[allow(unused_mut)]
        let mut object_515 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_515, var_514)?;
        object_515.finish();
    }
    if let Some(var_516) = &input.sinks {
        let mut array_517 = object.key("Sinks").start_array();
        for item_518 in var_516 {
             {
                #[allow(unused_mut)]
                let mut object_519 = array_517.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_519, item_518)?;
                object_519.finish();
            }
        }
        array_517.finish();
    }
    if let Some(var_520) = &input.location {
        #[allow(unused_mut)]
        let mut object_521 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_521, var_520)?;
        object_521.finish();
    }
    if let Some(var_522) = &input.language {
        object.key("Language").string(var_522.as_str());
    }
    if let Some(var_523) = &input.additional_plan_options_map {
        #[allow(unused_mut)]
        let mut object_524 = object.key("AdditionalPlanOptionsMap").start_object();
        for (key_525, value_526) in var_523 {
             {
                object_524.key(key_525.as_str()).string(value_526.as_str());
            }
        }
        object_524.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_registry_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetRegistryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_527) = &input.registry_id {
        #[allow(unused_mut)]
        let mut object_528 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_528, var_527)?;
        object_528.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policies_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetResourcePoliciesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_529) = &input.next_token {
        object.key("NextToken").string(var_529.as_str());
    }
    if let Some(var_530) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_530).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_531) = &input.resource_arn {
        object.key("ResourceArn").string(var_531.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSchemaInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_532) = &input.schema_id {
        #[allow(unused_mut)]
        let mut object_533 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_533, var_532)?;
        object_533.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_by_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSchemaByDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_534) = &input.schema_id {
        #[allow(unused_mut)]
        let mut object_535 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_535, var_534)?;
        object_535.finish();
    }
    if let Some(var_536) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_536.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSchemaVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_537) = &input.schema_id {
        #[allow(unused_mut)]
        let mut object_538 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_538, var_537)?;
        object_538.finish();
    }
    if let Some(var_539) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_539.as_str());
    }
    if let Some(var_540) = &input.schema_version_number {
        #[allow(unused_mut)]
        let mut object_541 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(&mut object_541, var_540)?;
        object_541.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_versions_diff_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSchemaVersionsDiffInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_542) = &input.schema_id {
        #[allow(unused_mut)]
        let mut object_543 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_543, var_542)?;
        object_543.finish();
    }
    if let Some(var_544) = &input.first_schema_version_number {
        #[allow(unused_mut)]
        let mut object_545 = object.key("FirstSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(&mut object_545, var_544)?;
        object_545.finish();
    }
    if let Some(var_546) = &input.second_schema_version_number {
        #[allow(unused_mut)]
        let mut object_547 = object.key("SecondSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(&mut object_547, var_546)?;
        object_547.finish();
    }
    if let Some(var_548) = &input.schema_diff_type {
        object.key("SchemaDiffType").string(var_548.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSecurityConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_549) = &input.name {
        object.key("Name").string(var_549.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configurations_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSecurityConfigurationsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_550) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_550).into()));
    }
    if let Some(var_551) = &input.next_token {
        object.key("NextToken").string(var_551.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_session_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSessionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_552) = &input.id {
        object.key("Id").string(var_552.as_str());
    }
    if let Some(var_553) = &input.request_origin {
        object.key("RequestOrigin").string(var_553.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_statement_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetStatementInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_554) = &input.session_id {
        object.key("SessionId").string(var_554.as_str());
    }
     {
        object.key("Id").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.id).into()));
    }
    if let Some(var_555) = &input.request_origin {
        object.key("RequestOrigin").string(var_555.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_556) = &input.catalog_id {
        object.key("CatalogId").string(var_556.as_str());
    }
    if let Some(var_557) = &input.database_name {
        object.key("DatabaseName").string(var_557.as_str());
    }
    if let Some(var_558) = &input.name {
        object.key("Name").string(var_558.as_str());
    }
    if let Some(var_559) = &input.transaction_id {
        object.key("TransactionId").string(var_559.as_str());
    }
    if let Some(var_560) = &input.query_as_of_time {
        object.key("QueryAsOfTime").date_time(var_560, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tables_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTablesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_561) = &input.catalog_id {
        object.key("CatalogId").string(var_561.as_str());
    }
    if let Some(var_562) = &input.database_name {
        object.key("DatabaseName").string(var_562.as_str());
    }
    if let Some(var_563) = &input.expression {
        object.key("Expression").string(var_563.as_str());
    }
    if let Some(var_564) = &input.next_token {
        object.key("NextToken").string(var_564.as_str());
    }
    if let Some(var_565) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_565).into()));
    }
    if let Some(var_566) = &input.transaction_id {
        object.key("TransactionId").string(var_566.as_str());
    }
    if let Some(var_567) = &input.query_as_of_time {
        object.key("QueryAsOfTime").date_time(var_567, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTableVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_568) = &input.catalog_id {
        object.key("CatalogId").string(var_568.as_str());
    }
    if let Some(var_569) = &input.database_name {
        object.key("DatabaseName").string(var_569.as_str());
    }
    if let Some(var_570) = &input.table_name {
        object.key("TableName").string(var_570.as_str());
    }
    if let Some(var_571) = &input.version_id {
        object.key("VersionId").string(var_571.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_versions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTableVersionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_572) = &input.catalog_id {
        object.key("CatalogId").string(var_572.as_str());
    }
    if let Some(var_573) = &input.database_name {
        object.key("DatabaseName").string(var_573.as_str());
    }
    if let Some(var_574) = &input.table_name {
        object.key("TableName").string(var_574.as_str());
    }
    if let Some(var_575) = &input.next_token {
        object.key("NextToken").string(var_575.as_str());
    }
    if let Some(var_576) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_576).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tags_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTagsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_577) = &input.resource_arn {
        object.key("ResourceArn").string(var_577.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_trigger_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTriggerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_578) = &input.name {
        object.key("Name").string(var_578.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_triggers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTriggersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_579) = &input.next_token {
        object.key("NextToken").string(var_579.as_str());
    }
    if let Some(var_580) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_580.as_str());
    }
    if let Some(var_581) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_581).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_partition_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetUnfilteredPartitionMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_582) = &input.catalog_id {
        object.key("CatalogId").string(var_582.as_str());
    }
    if let Some(var_583) = &input.database_name {
        object.key("DatabaseName").string(var_583.as_str());
    }
    if let Some(var_584) = &input.table_name {
        object.key("TableName").string(var_584.as_str());
    }
    if let Some(var_585) = &input.partition_values {
        let mut array_586 = object.key("PartitionValues").start_array();
        for item_587 in var_585 {
             {
                array_586.value().string(item_587.as_str());
            }
        }
        array_586.finish();
    }
    if let Some(var_588) = &input.audit_context {
        #[allow(unused_mut)]
        let mut object_589 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_589, var_588)?;
        object_589.finish();
    }
    if let Some(var_590) = &input.supported_permission_types {
        let mut array_591 = object.key("SupportedPermissionTypes").start_array();
        for item_592 in var_590 {
             {
                array_591.value().string(item_592.as_str());
            }
        }
        array_591.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_partitions_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetUnfilteredPartitionsMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_593) = &input.catalog_id {
        object.key("CatalogId").string(var_593.as_str());
    }
    if let Some(var_594) = &input.database_name {
        object.key("DatabaseName").string(var_594.as_str());
    }
    if let Some(var_595) = &input.table_name {
        object.key("TableName").string(var_595.as_str());
    }
    if let Some(var_596) = &input.expression {
        object.key("Expression").string(var_596.as_str());
    }
    if let Some(var_597) = &input.audit_context {
        #[allow(unused_mut)]
        let mut object_598 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_598, var_597)?;
        object_598.finish();
    }
    if let Some(var_599) = &input.supported_permission_types {
        let mut array_600 = object.key("SupportedPermissionTypes").start_array();
        for item_601 in var_599 {
             {
                array_600.value().string(item_601.as_str());
            }
        }
        array_600.finish();
    }
    if let Some(var_602) = &input.next_token {
        object.key("NextToken").string(var_602.as_str());
    }
    if let Some(var_603) = &input.segment {
        #[allow(unused_mut)]
        let mut object_604 = object.key("Segment").start_object();
        crate::json_ser::serialize_structure_crate_model_segment(&mut object_604, var_603)?;
        object_604.finish();
    }
    if let Some(var_605) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_605).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_table_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetUnfilteredTableMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_606) = &input.catalog_id {
        object.key("CatalogId").string(var_606.as_str());
    }
    if let Some(var_607) = &input.database_name {
        object.key("DatabaseName").string(var_607.as_str());
    }
    if let Some(var_608) = &input.name {
        object.key("Name").string(var_608.as_str());
    }
    if let Some(var_609) = &input.audit_context {
        #[allow(unused_mut)]
        let mut object_610 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_610, var_609)?;
        object_610.finish();
    }
    if let Some(var_611) = &input.supported_permission_types {
        let mut array_612 = object.key("SupportedPermissionTypes").start_array();
        for item_613 in var_611 {
             {
                array_612.value().string(item_613.as_str());
            }
        }
        array_612.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_function_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetUserDefinedFunctionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_614) = &input.catalog_id {
        object.key("CatalogId").string(var_614.as_str());
    }
    if let Some(var_615) = &input.database_name {
        object.key("DatabaseName").string(var_615.as_str());
    }
    if let Some(var_616) = &input.function_name {
        object.key("FunctionName").string(var_616.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_functions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetUserDefinedFunctionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_617) = &input.catalog_id {
        object.key("CatalogId").string(var_617.as_str());
    }
    if let Some(var_618) = &input.database_name {
        object.key("DatabaseName").string(var_618.as_str());
    }
    if let Some(var_619) = &input.pattern {
        object.key("Pattern").string(var_619.as_str());
    }
    if let Some(var_620) = &input.next_token {
        object.key("NextToken").string(var_620.as_str());
    }
    if let Some(var_621) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_621).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetWorkflowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_622) = &input.name {
        object.key("Name").string(var_622.as_str());
    }
    if let Some(var_623) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_623);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetWorkflowRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_624) = &input.name {
        object.key("Name").string(var_624.as_str());
    }
    if let Some(var_625) = &input.run_id {
        object.key("RunId").string(var_625.as_str());
    }
    if let Some(var_626) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_626);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_properties_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetWorkflowRunPropertiesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_627) = &input.name {
        object.key("Name").string(var_627.as_str());
    }
    if let Some(var_628) = &input.run_id {
        object.key("RunId").string(var_628.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_runs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetWorkflowRunsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_629) = &input.name {
        object.key("Name").string(var_629.as_str());
    }
    if let Some(var_630) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_630);
    }
    if let Some(var_631) = &input.next_token {
        object.key("NextToken").string(var_631.as_str());
    }
    if let Some(var_632) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_632).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_catalog_to_glue_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ImportCatalogToGlueInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_633) = &input.catalog_id {
        object.key("CatalogId").string(var_633.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_blueprints_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListBlueprintsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_634) = &input.next_token {
        object.key("NextToken").string(var_634.as_str());
    }
    if let Some(var_635) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_635).into()));
    }
    if let Some(var_636) = &input.tags {
        #[allow(unused_mut)]
        let mut object_637 = object.key("Tags").start_object();
        for (key_638, value_639) in var_636 {
             {
                object_637.key(key_638.as_str()).string(value_639.as_str());
            }
        }
        object_637.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_crawlers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCrawlersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_640) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_640).into()));
    }
    if let Some(var_641) = &input.next_token {
        object.key("NextToken").string(var_641.as_str());
    }
    if let Some(var_642) = &input.tags {
        #[allow(unused_mut)]
        let mut object_643 = object.key("Tags").start_object();
        for (key_644, value_645) in var_642 {
             {
                object_643.key(key_644.as_str()).string(value_645.as_str());
            }
        }
        object_643.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_crawls_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCrawlsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_646) = &input.crawler_name {
        object.key("CrawlerName").string(var_646.as_str());
    }
    if let Some(var_647) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_647).into()));
    }
    if let Some(var_648) = &input.filters {
        let mut array_649 = object.key("Filters").start_array();
        for item_650 in var_648 {
             {
                #[allow(unused_mut)]
                let mut object_651 = array_649.value().start_object();
                crate::json_ser::serialize_structure_crate_model_crawls_filter(&mut object_651, item_650)?;
                object_651.finish();
            }
        }
        array_649.finish();
    }
    if let Some(var_652) = &input.next_token {
        object.key("NextToken").string(var_652.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_custom_entity_types_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCustomEntityTypesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_653) = &input.next_token {
        object.key("NextToken").string(var_653.as_str());
    }
    if let Some(var_654) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_654).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_quality_results_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDataQualityResultsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_655) = &input.filter {
        #[allow(unused_mut)]
        let mut object_656 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_result_filter_criteria(&mut object_656, var_655)?;
        object_656.finish();
    }
    if let Some(var_657) = &input.next_token {
        object.key("NextToken").string(var_657.as_str());
    }
    if let Some(var_658) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_658).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_quality_rule_recommendation_runs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDataQualityRuleRecommendationRunsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_659) = &input.filter {
        #[allow(unused_mut)]
        let mut object_660 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_rule_recommendation_run_filter(&mut object_660, var_659)?;
        object_660.finish();
    }
    if let Some(var_661) = &input.next_token {
        object.key("NextToken").string(var_661.as_str());
    }
    if let Some(var_662) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_662).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_quality_ruleset_evaluation_runs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDataQualityRulesetEvaluationRunsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_663) = &input.filter {
        #[allow(unused_mut)]
        let mut object_664 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_ruleset_evaluation_run_filter(&mut object_664, var_663)?;
        object_664.finish();
    }
    if let Some(var_665) = &input.next_token {
        object.key("NextToken").string(var_665.as_str());
    }
    if let Some(var_666) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_666).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_quality_rulesets_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDataQualityRulesetsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_667) = &input.next_token {
        object.key("NextToken").string(var_667.as_str());
    }
    if let Some(var_668) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_668).into()));
    }
    if let Some(var_669) = &input.filter {
        #[allow(unused_mut)]
        let mut object_670 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_ruleset_filter_criteria(&mut object_670, var_669)?;
        object_670.finish();
    }
    if let Some(var_671) = &input.tags {
        #[allow(unused_mut)]
        let mut object_672 = object.key("Tags").start_object();
        for (key_673, value_674) in var_671 {
             {
                object_672.key(key_673.as_str()).string(value_674.as_str());
            }
        }
        object_672.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_dev_endpoints_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDevEndpointsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_675) = &input.next_token {
        object.key("NextToken").string(var_675.as_str());
    }
    if let Some(var_676) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_676).into()));
    }
    if let Some(var_677) = &input.tags {
        #[allow(unused_mut)]
        let mut object_678 = object.key("Tags").start_object();
        for (key_679, value_680) in var_677 {
             {
                object_678.key(key_679.as_str()).string(value_680.as_str());
            }
        }
        object_678.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_681) = &input.next_token {
        object.key("NextToken").string(var_681.as_str());
    }
    if let Some(var_682) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_682).into()));
    }
    if let Some(var_683) = &input.tags {
        #[allow(unused_mut)]
        let mut object_684 = object.key("Tags").start_object();
        for (key_685, value_686) in var_683 {
             {
                object_684.key(key_685.as_str()).string(value_686.as_str());
            }
        }
        object_684.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ml_transforms_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListMlTransformsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_687) = &input.next_token {
        object.key("NextToken").string(var_687.as_str());
    }
    if let Some(var_688) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_688).into()));
    }
    if let Some(var_689) = &input.filter {
        #[allow(unused_mut)]
        let mut object_690 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(&mut object_690, var_689)?;
        object_690.finish();
    }
    if let Some(var_691) = &input.sort {
        #[allow(unused_mut)]
        let mut object_692 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(&mut object_692, var_691)?;
        object_692.finish();
    }
    if let Some(var_693) = &input.tags {
        #[allow(unused_mut)]
        let mut object_694 = object.key("Tags").start_object();
        for (key_695, value_696) in var_693 {
             {
                object_694.key(key_695.as_str()).string(value_696.as_str());
            }
        }
        object_694.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_registries_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListRegistriesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_697) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_697).into()));
    }
    if let Some(var_698) = &input.next_token {
        object.key("NextToken").string(var_698.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schemas_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListSchemasInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_699) = &input.registry_id {
        #[allow(unused_mut)]
        let mut object_700 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_700, var_699)?;
        object_700.finish();
    }
    if let Some(var_701) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_701).into()));
    }
    if let Some(var_702) = &input.next_token {
        object.key("NextToken").string(var_702.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schema_versions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListSchemaVersionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_703) = &input.schema_id {
        #[allow(unused_mut)]
        let mut object_704 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_704, var_703)?;
        object_704.finish();
    }
    if let Some(var_705) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_705).into()));
    }
    if let Some(var_706) = &input.next_token {
        object.key("NextToken").string(var_706.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_sessions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListSessionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_707) = &input.next_token {
        object.key("NextToken").string(var_707.as_str());
    }
    if let Some(var_708) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_708).into()));
    }
    if let Some(var_709) = &input.tags {
        #[allow(unused_mut)]
        let mut object_710 = object.key("Tags").start_object();
        for (key_711, value_712) in var_709 {
             {
                object_710.key(key_711.as_str()).string(value_712.as_str());
            }
        }
        object_710.finish();
    }
    if let Some(var_713) = &input.request_origin {
        object.key("RequestOrigin").string(var_713.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_statements_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListStatementsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_714) = &input.session_id {
        object.key("SessionId").string(var_714.as_str());
    }
    if let Some(var_715) = &input.request_origin {
        object.key("RequestOrigin").string(var_715.as_str());
    }
    if let Some(var_716) = &input.next_token {
        object.key("NextToken").string(var_716.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_triggers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTriggersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_717) = &input.next_token {
        object.key("NextToken").string(var_717.as_str());
    }
    if let Some(var_718) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_718.as_str());
    }
    if let Some(var_719) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_719).into()));
    }
    if let Some(var_720) = &input.tags {
        #[allow(unused_mut)]
        let mut object_721 = object.key("Tags").start_object();
        for (key_722, value_723) in var_720 {
             {
                object_721.key(key_722.as_str()).string(value_723.as_str());
            }
        }
        object_721.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workflows_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListWorkflowsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_724) = &input.next_token {
        object.key("NextToken").string(var_724.as_str());
    }
    if let Some(var_725) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_725).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_data_catalog_encryption_settings_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutDataCatalogEncryptionSettingsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_726) = &input.catalog_id {
        object.key("CatalogId").string(var_726.as_str());
    }
    if let Some(var_727) = &input.data_catalog_encryption_settings {
        #[allow(unused_mut)]
        let mut object_728 = object.key("DataCatalogEncryptionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_data_catalog_encryption_settings(&mut object_728, var_727)?;
        object_728.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_729) = &input.policy_in_json {
        object.key("PolicyInJson").string(var_729.as_str());
    }
    if let Some(var_730) = &input.resource_arn {
        object.key("ResourceArn").string(var_730.as_str());
    }
    if let Some(var_731) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_731.as_str());
    }
    if let Some(var_732) = &input.policy_exists_condition {
        object.key("PolicyExistsCondition").string(var_732.as_str());
    }
    if let Some(var_733) = &input.enable_hybrid {
        object.key("EnableHybrid").string(var_733.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_schema_version_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutSchemaVersionMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_734) = &input.schema_id {
        #[allow(unused_mut)]
        let mut object_735 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_735, var_734)?;
        object_735.finish();
    }
    if let Some(var_736) = &input.schema_version_number {
        #[allow(unused_mut)]
        let mut object_737 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(&mut object_737, var_736)?;
        object_737.finish();
    }
    if let Some(var_738) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_738.as_str());
    }
    if let Some(var_739) = &input.metadata_key_value {
        #[allow(unused_mut)]
        let mut object_740 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(&mut object_740, var_739)?;
        object_740.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_workflow_run_properties_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutWorkflowRunPropertiesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_741) = &input.name {
        object.key("Name").string(var_741.as_str());
    }
    if let Some(var_742) = &input.run_id {
        object.key("RunId").string(var_742.as_str());
    }
    if let Some(var_743) = &input.run_properties {
        #[allow(unused_mut)]
        let mut object_744 = object.key("RunProperties").start_object();
        for (key_745, value_746) in var_743 {
             {
                object_744.key(key_745.as_str()).string(value_746.as_str());
            }
        }
        object_744.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_schema_version_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::QuerySchemaVersionMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_747) = &input.schema_id {
        #[allow(unused_mut)]
        let mut object_748 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_748, var_747)?;
        object_748.finish();
    }
    if let Some(var_749) = &input.schema_version_number {
        #[allow(unused_mut)]
        let mut object_750 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(&mut object_750, var_749)?;
        object_750.finish();
    }
    if let Some(var_751) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_751.as_str());
    }
    if let Some(var_752) = &input.metadata_list {
        let mut array_753 = object.key("MetadataList").start_array();
        for item_754 in var_752 {
             {
                #[allow(unused_mut)]
                let mut object_755 = array_753.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(&mut object_755, item_754)?;
                object_755.finish();
            }
        }
        array_753.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_756) = &input.next_token {
        object.key("NextToken").string(var_756.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_schema_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RegisterSchemaVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_757) = &input.schema_id {
        #[allow(unused_mut)]
        let mut object_758 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_758, var_757)?;
        object_758.finish();
    }
    if let Some(var_759) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_759.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_schema_version_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RemoveSchemaVersionMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_760) = &input.schema_id {
        #[allow(unused_mut)]
        let mut object_761 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_761, var_760)?;
        object_761.finish();
    }
    if let Some(var_762) = &input.schema_version_number {
        #[allow(unused_mut)]
        let mut object_763 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(&mut object_763, var_762)?;
        object_763.finish();
    }
    if let Some(var_764) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_764.as_str());
    }
    if let Some(var_765) = &input.metadata_key_value {
        #[allow(unused_mut)]
        let mut object_766 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(&mut object_766, var_765)?;
        object_766.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reset_job_bookmark_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ResetJobBookmarkInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_767) = &input.job_name {
        object.key("JobName").string(var_767.as_str());
    }
    if let Some(var_768) = &input.run_id {
        object.key("RunId").string(var_768.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_workflow_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ResumeWorkflowRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_769) = &input.name {
        object.key("Name").string(var_769.as_str());
    }
    if let Some(var_770) = &input.run_id {
        object.key("RunId").string(var_770.as_str());
    }
    if let Some(var_771) = &input.node_ids {
        let mut array_772 = object.key("NodeIds").start_array();
        for item_773 in var_771 {
             {
                array_772.value().string(item_773.as_str());
            }
        }
        array_772.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_run_statement_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RunStatementInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_774) = &input.session_id {
        object.key("SessionId").string(var_774.as_str());
    }
    if let Some(var_775) = &input.code {
        object.key("Code").string(var_775.as_str());
    }
    if let Some(var_776) = &input.request_origin {
        object.key("RequestOrigin").string(var_776.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_tables_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchTablesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_777) = &input.catalog_id {
        object.key("CatalogId").string(var_777.as_str());
    }
    if let Some(var_778) = &input.next_token {
        object.key("NextToken").string(var_778.as_str());
    }
    if let Some(var_779) = &input.filters {
        let mut array_780 = object.key("Filters").start_array();
        for item_781 in var_779 {
             {
                #[allow(unused_mut)]
                let mut object_782 = array_780.value().start_object();
                crate::json_ser::serialize_structure_crate_model_property_predicate(&mut object_782, item_781)?;
                object_782.finish();
            }
        }
        array_780.finish();
    }
    if let Some(var_783) = &input.search_text {
        object.key("SearchText").string(var_783.as_str());
    }
    if let Some(var_784) = &input.sort_criteria {
        let mut array_785 = object.key("SortCriteria").start_array();
        for item_786 in var_784 {
             {
                #[allow(unused_mut)]
                let mut object_787 = array_785.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sort_criterion(&mut object_787, item_786)?;
                object_787.finish();
            }
        }
        array_785.finish();
    }
    if let Some(var_788) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_788).into()));
    }
    if let Some(var_789) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_789.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_blueprint_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartBlueprintRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_790) = &input.blueprint_name {
        object.key("BlueprintName").string(var_790.as_str());
    }
    if let Some(var_791) = &input.parameters {
        object.key("Parameters").string(var_791.as_str());
    }
    if let Some(var_792) = &input.role_arn {
        object.key("RoleArn").string(var_792.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartCrawlerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_793) = &input.name {
        object.key("Name").string(var_793.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_schedule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartCrawlerScheduleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_794) = &input.crawler_name {
        object.key("CrawlerName").string(var_794.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_data_quality_rule_recommendation_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartDataQualityRuleRecommendationRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_795) = &input.data_source {
        #[allow(unused_mut)]
        let mut object_796 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source(&mut object_796, var_795)?;
        object_796.finish();
    }
    if let Some(var_797) = &input.role {
        object.key("Role").string(var_797.as_str());
    }
    if let Some(var_798) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_798).into()));
    }
    if let Some(var_799) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_799).into()));
    }
    if let Some(var_800) = &input.created_ruleset_name {
        object.key("CreatedRulesetName").string(var_800.as_str());
    }
    if let Some(var_801) = &input.client_token {
        object.key("ClientToken").string(var_801.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_data_quality_ruleset_evaluation_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartDataQualityRulesetEvaluationRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_802) = &input.data_source {
        #[allow(unused_mut)]
        let mut object_803 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source(&mut object_803, var_802)?;
        object_803.finish();
    }
    if let Some(var_804) = &input.role {
        object.key("Role").string(var_804.as_str());
    }
    if let Some(var_805) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_805).into()));
    }
    if let Some(var_806) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_806).into()));
    }
    if let Some(var_807) = &input.client_token {
        object.key("ClientToken").string(var_807.as_str());
    }
    if let Some(var_808) = &input.additional_run_options {
        #[allow(unused_mut)]
        let mut object_809 = object.key("AdditionalRunOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_evaluation_run_additional_run_options(&mut object_809, var_808)?;
        object_809.finish();
    }
    if let Some(var_810) = &input.ruleset_names {
        let mut array_811 = object.key("RulesetNames").start_array();
        for item_812 in var_810 {
             {
                array_811.value().string(item_812.as_str());
            }
        }
        array_811.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_export_labels_task_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartExportLabelsTaskRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_813) = &input.transform_id {
        object.key("TransformId").string(var_813.as_str());
    }
    if let Some(var_814) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_814.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_import_labels_task_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartImportLabelsTaskRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_815) = &input.transform_id {
        object.key("TransformId").string(var_815.as_str());
    }
    if let Some(var_816) = &input.input_s3_path {
        object.key("InputS3Path").string(var_816.as_str());
    }
    if input.replace_all_labels {
        object.key("ReplaceAllLabels").boolean(input.replace_all_labels);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_job_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartJobRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_817) = &input.job_name {
        object.key("JobName").string(var_817.as_str());
    }
    if let Some(var_818) = &input.job_run_id {
        object.key("JobRunId").string(var_818.as_str());
    }
    if let Some(var_819) = &input.arguments {
        #[allow(unused_mut)]
        let mut object_820 = object.key("Arguments").start_object();
        for (key_821, value_822) in var_819 {
             {
                object_820.key(key_821.as_str()).string(value_822.as_str());
            }
        }
        object_820.finish();
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.allocated_capacity).into()));
    }
    if let Some(var_823) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_823).into()));
    }
    if let Some(var_824) = &input.max_capacity {
        object.key("MaxCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_824).into()));
    }
    if let Some(var_825) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_825.as_str());
    }
    if let Some(var_826) = &input.notification_property {
        #[allow(unused_mut)]
        let mut object_827 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(&mut object_827, var_826)?;
        object_827.finish();
    }
    if let Some(var_828) = &input.worker_type {
        object.key("WorkerType").string(var_828.as_str());
    }
    if let Some(var_829) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_829).into()));
    }
    if let Some(var_830) = &input.execution_class {
        object.key("ExecutionClass").string(var_830.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_evaluation_task_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartMlEvaluationTaskRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_831) = &input.transform_id {
        object.key("TransformId").string(var_831.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_labeling_set_generation_task_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartMlLabelingSetGenerationTaskRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_832) = &input.transform_id {
        object.key("TransformId").string(var_832.as_str());
    }
    if let Some(var_833) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_833.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_trigger_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartTriggerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_834) = &input.name {
        object.key("Name").string(var_834.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_workflow_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartWorkflowRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_835) = &input.name {
        object.key("Name").string(var_835.as_str());
    }
    if let Some(var_836) = &input.run_properties {
        #[allow(unused_mut)]
        let mut object_837 = object.key("RunProperties").start_object();
        for (key_838, value_839) in var_836 {
             {
                object_837.key(key_838.as_str()).string(value_839.as_str());
            }
        }
        object_837.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopCrawlerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_840) = &input.name {
        object.key("Name").string(var_840.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_schedule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopCrawlerScheduleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_841) = &input.crawler_name {
        object.key("CrawlerName").string(var_841.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_session_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopSessionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_842) = &input.id {
        object.key("Id").string(var_842.as_str());
    }
    if let Some(var_843) = &input.request_origin {
        object.key("RequestOrigin").string(var_843.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_trigger_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopTriggerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_844) = &input.name {
        object.key("Name").string(var_844.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_workflow_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopWorkflowRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_845) = &input.name {
        object.key("Name").string(var_845.as_str());
    }
    if let Some(var_846) = &input.run_id {
        object.key("RunId").string(var_846.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_847) = &input.resource_arn {
        object.key("ResourceArn").string(var_847.as_str());
    }
    if let Some(var_848) = &input.tags_to_add {
        #[allow(unused_mut)]
        let mut object_849 = object.key("TagsToAdd").start_object();
        for (key_850, value_851) in var_848 {
             {
                object_849.key(key_850.as_str()).string(value_851.as_str());
            }
        }
        object_849.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UntagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_852) = &input.resource_arn {
        object.key("ResourceArn").string(var_852.as_str());
    }
    if let Some(var_853) = &input.tags_to_remove {
        let mut array_854 = object.key("TagsToRemove").start_array();
        for item_855 in var_853 {
             {
                array_854.value().string(item_855.as_str());
            }
        }
        array_854.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_blueprint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateBlueprintInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_856) = &input.name {
        object.key("Name").string(var_856.as_str());
    }
    if let Some(var_857) = &input.description {
        object.key("Description").string(var_857.as_str());
    }
    if let Some(var_858) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_858.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_classifier_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateClassifierInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_859) = &input.grok_classifier {
        #[allow(unused_mut)]
        let mut object_860 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_grok_classifier_request(&mut object_860, var_859)?;
        object_860.finish();
    }
    if let Some(var_861) = &input.xml_classifier {
        #[allow(unused_mut)]
        let mut object_862 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_xml_classifier_request(&mut object_862, var_861)?;
        object_862.finish();
    }
    if let Some(var_863) = &input.json_classifier {
        #[allow(unused_mut)]
        let mut object_864 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_json_classifier_request(&mut object_864, var_863)?;
        object_864.finish();
    }
    if let Some(var_865) = &input.csv_classifier {
        #[allow(unused_mut)]
        let mut object_866 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_csv_classifier_request(&mut object_866, var_865)?;
        object_866.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateColumnStatisticsForPartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_867) = &input.catalog_id {
        object.key("CatalogId").string(var_867.as_str());
    }
    if let Some(var_868) = &input.database_name {
        object.key("DatabaseName").string(var_868.as_str());
    }
    if let Some(var_869) = &input.table_name {
        object.key("TableName").string(var_869.as_str());
    }
    if let Some(var_870) = &input.partition_values {
        let mut array_871 = object.key("PartitionValues").start_array();
        for item_872 in var_870 {
             {
                array_871.value().string(item_872.as_str());
            }
        }
        array_871.finish();
    }
    if let Some(var_873) = &input.column_statistics_list {
        let mut array_874 = object.key("ColumnStatisticsList").start_array();
        for item_875 in var_873 {
             {
                #[allow(unused_mut)]
                let mut object_876 = array_874.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(&mut object_876, item_875)?;
                object_876.finish();
            }
        }
        array_874.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateColumnStatisticsForTableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_877) = &input.catalog_id {
        object.key("CatalogId").string(var_877.as_str());
    }
    if let Some(var_878) = &input.database_name {
        object.key("DatabaseName").string(var_878.as_str());
    }
    if let Some(var_879) = &input.table_name {
        object.key("TableName").string(var_879.as_str());
    }
    if let Some(var_880) = &input.column_statistics_list {
        let mut array_881 = object.key("ColumnStatisticsList").start_array();
        for item_882 in var_880 {
             {
                #[allow(unused_mut)]
                let mut object_883 = array_881.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(&mut object_883, item_882)?;
                object_883.finish();
            }
        }
        array_881.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_connection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateConnectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_884) = &input.catalog_id {
        object.key("CatalogId").string(var_884.as_str());
    }
    if let Some(var_885) = &input.name {
        object.key("Name").string(var_885.as_str());
    }
    if let Some(var_886) = &input.connection_input {
        #[allow(unused_mut)]
        let mut object_887 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(&mut object_887, var_886)?;
        object_887.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateCrawlerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_888) = &input.name {
        object.key("Name").string(var_888.as_str());
    }
    if let Some(var_889) = &input.role {
        object.key("Role").string(var_889.as_str());
    }
    if let Some(var_890) = &input.database_name {
        object.key("DatabaseName").string(var_890.as_str());
    }
    if let Some(var_891) = &input.description {
        object.key("Description").string(var_891.as_str());
    }
    if let Some(var_892) = &input.targets {
        #[allow(unused_mut)]
        let mut object_893 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_893, var_892)?;
        object_893.finish();
    }
    if let Some(var_894) = &input.schedule {
        object.key("Schedule").string(var_894.as_str());
    }
    if let Some(var_895) = &input.classifiers {
        let mut array_896 = object.key("Classifiers").start_array();
        for item_897 in var_895 {
             {
                array_896.value().string(item_897.as_str());
            }
        }
        array_896.finish();
    }
    if let Some(var_898) = &input.table_prefix {
        object.key("TablePrefix").string(var_898.as_str());
    }
    if let Some(var_899) = &input.schema_change_policy {
        #[allow(unused_mut)]
        let mut object_900 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(&mut object_900, var_899)?;
        object_900.finish();
    }
    if let Some(var_901) = &input.recrawl_policy {
        #[allow(unused_mut)]
        let mut object_902 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_902, var_901)?;
        object_902.finish();
    }
    if let Some(var_903) = &input.lineage_configuration {
        #[allow(unused_mut)]
        let mut object_904 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(&mut object_904, var_903)?;
        object_904.finish();
    }
    if let Some(var_905) = &input.lake_formation_configuration {
        #[allow(unused_mut)]
        let mut object_906 = object.key("LakeFormationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lake_formation_configuration(&mut object_906, var_905)?;
        object_906.finish();
    }
    if let Some(var_907) = &input.configuration {
        object.key("Configuration").string(var_907.as_str());
    }
    if let Some(var_908) = &input.crawler_security_configuration {
        object.key("CrawlerSecurityConfiguration").string(var_908.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_schedule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateCrawlerScheduleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_909) = &input.crawler_name {
        object.key("CrawlerName").string(var_909.as_str());
    }
    if let Some(var_910) = &input.schedule {
        object.key("Schedule").string(var_910.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_database_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDatabaseInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_911) = &input.catalog_id {
        object.key("CatalogId").string(var_911.as_str());
    }
    if let Some(var_912) = &input.name {
        object.key("Name").string(var_912.as_str());
    }
    if let Some(var_913) = &input.database_input {
        #[allow(unused_mut)]
        let mut object_914 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_914, var_913)?;
        object_914.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_quality_ruleset_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDataQualityRulesetInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_915) = &input.name {
        object.key("Name").string(var_915.as_str());
    }
    if let Some(var_916) = &input.updated_name {
        object.key("UpdatedName").string(var_916.as_str());
    }
    if let Some(var_917) = &input.description {
        object.key("Description").string(var_917.as_str());
    }
    if let Some(var_918) = &input.ruleset {
        object.key("Ruleset").string(var_918.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dev_endpoint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDevEndpointInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_919) = &input.endpoint_name {
        object.key("EndpointName").string(var_919.as_str());
    }
    if let Some(var_920) = &input.public_key {
        object.key("PublicKey").string(var_920.as_str());
    }
    if let Some(var_921) = &input.add_public_keys {
        let mut array_922 = object.key("AddPublicKeys").start_array();
        for item_923 in var_921 {
             {
                array_922.value().string(item_923.as_str());
            }
        }
        array_922.finish();
    }
    if let Some(var_924) = &input.delete_public_keys {
        let mut array_925 = object.key("DeletePublicKeys").start_array();
        for item_926 in var_924 {
             {
                array_925.value().string(item_926.as_str());
            }
        }
        array_925.finish();
    }
    if let Some(var_927) = &input.custom_libraries {
        #[allow(unused_mut)]
        let mut object_928 = object.key("CustomLibraries").start_object();
        crate::json_ser::serialize_structure_crate_model_dev_endpoint_custom_libraries(&mut object_928, var_927)?;
        object_928.finish();
    }
    if input.update_etl_libraries {
        object.key("UpdateEtlLibraries").boolean(input.update_etl_libraries);
    }
    if let Some(var_929) = &input.delete_arguments {
        let mut array_930 = object.key("DeleteArguments").start_array();
        for item_931 in var_929 {
             {
                array_930.value().string(item_931.as_str());
            }
        }
        array_930.finish();
    }
    if let Some(var_932) = &input.add_arguments {
        #[allow(unused_mut)]
        let mut object_933 = object.key("AddArguments").start_object();
        for (key_934, value_935) in var_932 {
             {
                object_933.key(key_934.as_str()).string(value_935.as_str());
            }
        }
        object_933.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_936) = &input.job_name {
        object.key("JobName").string(var_936.as_str());
    }
    if let Some(var_937) = &input.job_update {
        #[allow(unused_mut)]
        let mut object_938 = object.key("JobUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_job_update(&mut object_938, var_937)?;
        object_938.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_job_from_source_control_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateJobFromSourceControlInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_939) = &input.job_name {
        object.key("JobName").string(var_939.as_str());
    }
    if let Some(var_940) = &input.provider {
        object.key("Provider").string(var_940.as_str());
    }
    if let Some(var_941) = &input.repository_name {
        object.key("RepositoryName").string(var_941.as_str());
    }
    if let Some(var_942) = &input.repository_owner {
        object.key("RepositoryOwner").string(var_942.as_str());
    }
    if let Some(var_943) = &input.branch_name {
        object.key("BranchName").string(var_943.as_str());
    }
    if let Some(var_944) = &input.folder {
        object.key("Folder").string(var_944.as_str());
    }
    if let Some(var_945) = &input.commit_id {
        object.key("CommitId").string(var_945.as_str());
    }
    if let Some(var_946) = &input.auth_strategy {
        object.key("AuthStrategy").string(var_946.as_str());
    }
    if let Some(var_947) = &input.auth_token {
        object.key("AuthToken").string(var_947.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ml_transform_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateMlTransformInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_948) = &input.transform_id {
        object.key("TransformId").string(var_948.as_str());
    }
    if let Some(var_949) = &input.name {
        object.key("Name").string(var_949.as_str());
    }
    if let Some(var_950) = &input.description {
        object.key("Description").string(var_950.as_str());
    }
    if let Some(var_951) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_952 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(&mut object_952, var_951)?;
        object_952.finish();
    }
    if let Some(var_953) = &input.role {
        object.key("Role").string(var_953.as_str());
    }
    if let Some(var_954) = &input.glue_version {
        object.key("GlueVersion").string(var_954.as_str());
    }
    if let Some(var_955) = &input.max_capacity {
        object.key("MaxCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_955).into()));
    }
    if let Some(var_956) = &input.worker_type {
        object.key("WorkerType").string(var_956.as_str());
    }
    if let Some(var_957) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_957).into()));
    }
    if let Some(var_958) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_958).into()));
    }
    if let Some(var_959) = &input.max_retries {
        object.key("MaxRetries").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_959).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdatePartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_960) = &input.catalog_id {
        object.key("CatalogId").string(var_960.as_str());
    }
    if let Some(var_961) = &input.database_name {
        object.key("DatabaseName").string(var_961.as_str());
    }
    if let Some(var_962) = &input.table_name {
        object.key("TableName").string(var_962.as_str());
    }
    if let Some(var_963) = &input.partition_value_list {
        let mut array_964 = object.key("PartitionValueList").start_array();
        for item_965 in var_963 {
             {
                array_964.value().string(item_965.as_str());
            }
        }
        array_964.finish();
    }
    if let Some(var_966) = &input.partition_input {
        #[allow(unused_mut)]
        let mut object_967 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_967, var_966)?;
        object_967.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_registry_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRegistryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_968) = &input.registry_id {
        #[allow(unused_mut)]
        let mut object_969 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_969, var_968)?;
        object_969.finish();
    }
    if let Some(var_970) = &input.description {
        object.key("Description").string(var_970.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_schema_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateSchemaInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_971) = &input.schema_id {
        #[allow(unused_mut)]
        let mut object_972 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_972, var_971)?;
        object_972.finish();
    }
    if let Some(var_973) = &input.schema_version_number {
        #[allow(unused_mut)]
        let mut object_974 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(&mut object_974, var_973)?;
        object_974.finish();
    }
    if let Some(var_975) = &input.compatibility {
        object.key("Compatibility").string(var_975.as_str());
    }
    if let Some(var_976) = &input.description {
        object.key("Description").string(var_976.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_source_control_from_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateSourceControlFromJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_977) = &input.job_name {
        object.key("JobName").string(var_977.as_str());
    }
    if let Some(var_978) = &input.provider {
        object.key("Provider").string(var_978.as_str());
    }
    if let Some(var_979) = &input.repository_name {
        object.key("RepositoryName").string(var_979.as_str());
    }
    if let Some(var_980) = &input.repository_owner {
        object.key("RepositoryOwner").string(var_980.as_str());
    }
    if let Some(var_981) = &input.branch_name {
        object.key("BranchName").string(var_981.as_str());
    }
    if let Some(var_982) = &input.folder {
        object.key("Folder").string(var_982.as_str());
    }
    if let Some(var_983) = &input.commit_id {
        object.key("CommitId").string(var_983.as_str());
    }
    if let Some(var_984) = &input.auth_strategy {
        object.key("AuthStrategy").string(var_984.as_str());
    }
    if let Some(var_985) = &input.auth_token {
        object.key("AuthToken").string(var_985.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateTableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_986) = &input.catalog_id {
        object.key("CatalogId").string(var_986.as_str());
    }
    if let Some(var_987) = &input.database_name {
        object.key("DatabaseName").string(var_987.as_str());
    }
    if let Some(var_988) = &input.table_input {
        #[allow(unused_mut)]
        let mut object_989 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_989, var_988)?;
        object_989.finish();
    }
    if let Some(var_990) = &input.skip_archive {
        object.key("SkipArchive").boolean(*var_990);
    }
    if let Some(var_991) = &input.transaction_id {
        object.key("TransactionId").string(var_991.as_str());
    }
    if let Some(var_992) = &input.version_id {
        object.key("VersionId").string(var_992.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trigger_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateTriggerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_993) = &input.name {
        object.key("Name").string(var_993.as_str());
    }
    if let Some(var_994) = &input.trigger_update {
        #[allow(unused_mut)]
        let mut object_995 = object.key("TriggerUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_trigger_update(&mut object_995, var_994)?;
        object_995.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_defined_function_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserDefinedFunctionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_996) = &input.catalog_id {
        object.key("CatalogId").string(var_996.as_str());
    }
    if let Some(var_997) = &input.database_name {
        object.key("DatabaseName").string(var_997.as_str());
    }
    if let Some(var_998) = &input.function_name {
        object.key("FunctionName").string(var_998.as_str());
    }
    if let Some(var_999) = &input.function_input {
        #[allow(unused_mut)]
        let mut object_1000 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(&mut object_1000, var_999)?;
        object_1000.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workflow_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateWorkflowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1001) = &input.name {
        object.key("Name").string(var_1001.as_str());
    }
    if let Some(var_1002) = &input.description {
        object.key("Description").string(var_1002.as_str());
    }
    if let Some(var_1003) = &input.default_run_properties {
        #[allow(unused_mut)]
        let mut object_1004 = object.key("DefaultRunProperties").start_object();
        for (key_1005, value_1006) in var_1003 {
             {
                object_1004.key(key_1005.as_str()).string(value_1006.as_str());
            }
        }
        object_1004.finish();
    }
    if let Some(var_1007) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1007).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1008) = &input.values {
        let mut array_1009 = object.key("Values").start_array();
        for item_1010 in var_1008 {
             {
                array_1009.value().string(item_1010.as_str());
            }
        }
        array_1009.finish();
    }
    if let Some(var_1011) = &input.last_access_time {
        object.key("LastAccessTime").date_time(var_1011, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1012) = &input.storage_descriptor {
        #[allow(unused_mut)]
        let mut object_1013 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(&mut object_1013, var_1012)?;
        object_1013.finish();
    }
    if let Some(var_1014) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_1015 = object.key("Parameters").start_object();
        for (key_1016, value_1017) in var_1014 {
             {
                object_1015.key(key_1016.as_str()).string(value_1017.as_str());
            }
        }
        object_1015.finish();
    }
    if let Some(var_1018) = &input.last_analyzed_time {
        object.key("LastAnalyzedTime").date_time(var_1018, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_value_list(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PartitionValueList) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1019) = &input.values {
        let mut array_1020 = object.key("Values").start_array();
        for item_1021 in var_1019 {
             {
                array_1020.value().string(item_1021.as_str());
            }
        }
        array_1020.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_update_partition_request_entry(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::BatchUpdatePartitionRequestEntry) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1022) = &input.partition_value_list {
        let mut array_1023 = object.key("PartitionValueList").start_array();
        for item_1024 in var_1022 {
             {
                array_1023.value().string(item_1024.as_str());
            }
        }
        array_1023.finish();
    }
    if let Some(var_1025) = &input.partition_input {
        #[allow(unused_mut)]
        let mut object_1026 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_1026, var_1025)?;
        object_1026.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_grok_classifier_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CreateGrokClassifierRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1027) = &input.classification {
        object.key("Classification").string(var_1027.as_str());
    }
    if let Some(var_1028) = &input.name {
        object.key("Name").string(var_1028.as_str());
    }
    if let Some(var_1029) = &input.grok_pattern {
        object.key("GrokPattern").string(var_1029.as_str());
    }
    if let Some(var_1030) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_1030.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_xml_classifier_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CreateXmlClassifierRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1031) = &input.classification {
        object.key("Classification").string(var_1031.as_str());
    }
    if let Some(var_1032) = &input.name {
        object.key("Name").string(var_1032.as_str());
    }
    if let Some(var_1033) = &input.row_tag {
        object.key("RowTag").string(var_1033.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_json_classifier_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CreateJsonClassifierRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1034) = &input.name {
        object.key("Name").string(var_1034.as_str());
    }
    if let Some(var_1035) = &input.json_path {
        object.key("JsonPath").string(var_1035.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_csv_classifier_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CreateCsvClassifierRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1036) = &input.name {
        object.key("Name").string(var_1036.as_str());
    }
    if let Some(var_1037) = &input.delimiter {
        object.key("Delimiter").string(var_1037.as_str());
    }
    if let Some(var_1038) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_1038.as_str());
    }
    if let Some(var_1039) = &input.contains_header {
        object.key("ContainsHeader").string(var_1039.as_str());
    }
    if let Some(var_1040) = &input.header {
        let mut array_1041 = object.key("Header").start_array();
        for item_1042 in var_1040 {
             {
                array_1041.value().string(item_1042.as_str());
            }
        }
        array_1041.finish();
    }
    if let Some(var_1043) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_1043);
    }
    if let Some(var_1044) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_1044);
    }
    if let Some(var_1045) = &input.custom_datatype_configured {
        object.key("CustomDatatypeConfigured").boolean(*var_1045);
    }
    if let Some(var_1046) = &input.custom_datatypes {
        let mut array_1047 = object.key("CustomDatatypes").start_array();
        for item_1048 in var_1046 {
             {
                array_1047.value().string(item_1048.as_str());
            }
        }
        array_1047.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ConnectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1049) = &input.name {
        object.key("Name").string(var_1049.as_str());
    }
    if let Some(var_1050) = &input.description {
        object.key("Description").string(var_1050.as_str());
    }
    if let Some(var_1051) = &input.connection_type {
        object.key("ConnectionType").string(var_1051.as_str());
    }
    if let Some(var_1052) = &input.match_criteria {
        let mut array_1053 = object.key("MatchCriteria").start_array();
        for item_1054 in var_1052 {
             {
                array_1053.value().string(item_1054.as_str());
            }
        }
        array_1053.finish();
    }
    if let Some(var_1055) = &input.connection_properties {
        #[allow(unused_mut)]
        let mut object_1056 = object.key("ConnectionProperties").start_object();
        for (key_1057, value_1058) in var_1055 {
             {
                object_1056.key(key_1057.as_str()).string(value_1058.as_str());
            }
        }
        object_1056.finish();
    }
    if let Some(var_1059) = &input.physical_connection_requirements {
        #[allow(unused_mut)]
        let mut object_1060 = object.key("PhysicalConnectionRequirements").start_object();
        crate::json_ser::serialize_structure_crate_model_physical_connection_requirements(&mut object_1060, var_1059)?;
        object_1060.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_crawler_targets(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CrawlerTargets) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1061) = &input.s3_targets {
        let mut array_1062 = object.key("S3Targets").start_array();
        for item_1063 in var_1061 {
             {
                #[allow(unused_mut)]
                let mut object_1064 = array_1062.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_target(&mut object_1064, item_1063)?;
                object_1064.finish();
            }
        }
        array_1062.finish();
    }
    if let Some(var_1065) = &input.jdbc_targets {
        let mut array_1066 = object.key("JdbcTargets").start_array();
        for item_1067 in var_1065 {
             {
                #[allow(unused_mut)]
                let mut object_1068 = array_1066.value().start_object();
                crate::json_ser::serialize_structure_crate_model_jdbc_target(&mut object_1068, item_1067)?;
                object_1068.finish();
            }
        }
        array_1066.finish();
    }
    if let Some(var_1069) = &input.mongo_db_targets {
        let mut array_1070 = object.key("MongoDBTargets").start_array();
        for item_1071 in var_1069 {
             {
                #[allow(unused_mut)]
                let mut object_1072 = array_1070.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mongo_db_target(&mut object_1072, item_1071)?;
                object_1072.finish();
            }
        }
        array_1070.finish();
    }
    if let Some(var_1073) = &input.dynamo_db_targets {
        let mut array_1074 = object.key("DynamoDBTargets").start_array();
        for item_1075 in var_1073 {
             {
                #[allow(unused_mut)]
                let mut object_1076 = array_1074.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dynamo_db_target(&mut object_1076, item_1075)?;
                object_1076.finish();
            }
        }
        array_1074.finish();
    }
    if let Some(var_1077) = &input.catalog_targets {
        let mut array_1078 = object.key("CatalogTargets").start_array();
        for item_1079 in var_1077 {
             {
                #[allow(unused_mut)]
                let mut object_1080 = array_1078.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_target(&mut object_1080, item_1079)?;
                object_1080.finish();
            }
        }
        array_1078.finish();
    }
    if let Some(var_1081) = &input.delta_targets {
        let mut array_1082 = object.key("DeltaTargets").start_array();
        for item_1083 in var_1081 {
             {
                #[allow(unused_mut)]
                let mut object_1084 = array_1082.value().start_object();
                crate::json_ser::serialize_structure_crate_model_delta_target(&mut object_1084, item_1083)?;
                object_1084.finish();
            }
        }
        array_1082.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_change_policy(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SchemaChangePolicy) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1085) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_1085.as_str());
    }
    if let Some(var_1086) = &input.delete_behavior {
        object.key("DeleteBehavior").string(var_1086.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recrawl_policy(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RecrawlPolicy) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1087) = &input.recrawl_behavior {
        object.key("RecrawlBehavior").string(var_1087.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lineage_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LineageConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1088) = &input.crawler_lineage_settings {
        object.key("CrawlerLineageSettings").string(var_1088.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lake_formation_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LakeFormationConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1089) = &input.use_lake_formation_credentials {
        object.key("UseLakeFormationCredentials").boolean(*var_1089);
    }
    if let Some(var_1090) = &input.account_id {
        object.key("AccountId").string(var_1090.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DatabaseInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1091) = &input.name {
        object.key("Name").string(var_1091.as_str());
    }
    if let Some(var_1092) = &input.description {
        object.key("Description").string(var_1092.as_str());
    }
    if let Some(var_1093) = &input.location_uri {
        object.key("LocationUri").string(var_1093.as_str());
    }
    if let Some(var_1094) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_1095 = object.key("Parameters").start_object();
        for (key_1096, value_1097) in var_1094 {
             {
                object_1095.key(key_1096.as_str()).string(value_1097.as_str());
            }
        }
        object_1095.finish();
    }
    if let Some(var_1098) = &input.create_table_default_permissions {
        let mut array_1099 = object.key("CreateTableDefaultPermissions").start_array();
        for item_1100 in var_1098 {
             {
                #[allow(unused_mut)]
                let mut object_1101 = array_1099.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal_permissions(&mut object_1101, item_1100)?;
                object_1101.finish();
            }
        }
        array_1099.finish();
    }
    if let Some(var_1102) = &input.target_database {
        #[allow(unused_mut)]
        let mut object_1103 = object.key("TargetDatabase").start_object();
        crate::json_ser::serialize_structure_crate_model_database_identifier(&mut object_1103, var_1102)?;
        object_1103.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_target_table(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataQualityTargetTable) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1104) = &input.table_name {
        object.key("TableName").string(var_1104.as_str());
    }
    if let Some(var_1105) = &input.database_name {
        object.key("DatabaseName").string(var_1105.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_execution_property(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ExecutionProperty) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.max_concurrent_runs != 0 {
        object.key("MaxConcurrentRuns").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_concurrent_runs).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_command(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JobCommand) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1106) = &input.name {
        object.key("Name").string(var_1106.as_str());
    }
    if let Some(var_1107) = &input.script_location {
        object.key("ScriptLocation").string(var_1107.as_str());
    }
    if let Some(var_1108) = &input.python_version {
        object.key("PythonVersion").string(var_1108.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connections_list(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ConnectionsList) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1109) = &input.connections {
        let mut array_1110 = object.key("Connections").start_array();
        for item_1111 in var_1109 {
             {
                array_1110.value().string(item_1111.as_str());
            }
        }
        array_1110.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_property(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NotificationProperty) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1112) = &input.notify_delay_after {
        object.key("NotifyDelayAfter").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1112).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_configuration_node(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CodeGenConfigurationNode) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1113) = &input.athena_connector_source {
        #[allow(unused_mut)]
        let mut object_1114 = object.key("AthenaConnectorSource").start_object();
        crate::json_ser::serialize_structure_crate_model_athena_connector_source(&mut object_1114, var_1113)?;
        object_1114.finish();
    }
    if let Some(var_1115) = &input.jdbc_connector_source {
        #[allow(unused_mut)]
        let mut object_1116 = object.key("JDBCConnectorSource").start_object();
        crate::json_ser::serialize_structure_crate_model_jdbc_connector_source(&mut object_1116, var_1115)?;
        object_1116.finish();
    }
    if let Some(var_1117) = &input.spark_connector_source {
        #[allow(unused_mut)]
        let mut object_1118 = object.key("SparkConnectorSource").start_object();
        crate::json_ser::serialize_structure_crate_model_spark_connector_source(&mut object_1118, var_1117)?;
        object_1118.finish();
    }
    if let Some(var_1119) = &input.catalog_source {
        #[allow(unused_mut)]
        let mut object_1120 = object.key("CatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_source(&mut object_1120, var_1119)?;
        object_1120.finish();
    }
    if let Some(var_1121) = &input.redshift_source {
        #[allow(unused_mut)]
        let mut object_1122 = object.key("RedshiftSource").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_source(&mut object_1122, var_1121)?;
        object_1122.finish();
    }
    if let Some(var_1123) = &input.s3_catalog_source {
        #[allow(unused_mut)]
        let mut object_1124 = object.key("S3CatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_catalog_source(&mut object_1124, var_1123)?;
        object_1124.finish();
    }
    if let Some(var_1125) = &input.s3_csv_source {
        #[allow(unused_mut)]
        let mut object_1126 = object.key("S3CsvSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_csv_source(&mut object_1126, var_1125)?;
        object_1126.finish();
    }
    if let Some(var_1127) = &input.s3_json_source {
        #[allow(unused_mut)]
        let mut object_1128 = object.key("S3JsonSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_json_source(&mut object_1128, var_1127)?;
        object_1128.finish();
    }
    if let Some(var_1129) = &input.s3_parquet_source {
        #[allow(unused_mut)]
        let mut object_1130 = object.key("S3ParquetSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_parquet_source(&mut object_1130, var_1129)?;
        object_1130.finish();
    }
    if let Some(var_1131) = &input.relational_catalog_source {
        #[allow(unused_mut)]
        let mut object_1132 = object.key("RelationalCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_relational_catalog_source(&mut object_1132, var_1131)?;
        object_1132.finish();
    }
    if let Some(var_1133) = &input.dynamo_db_catalog_source {
        #[allow(unused_mut)]
        let mut object_1134 = object.key("DynamoDBCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_dynamo_db_catalog_source(&mut object_1134, var_1133)?;
        object_1134.finish();
    }
    if let Some(var_1135) = &input.jdbc_connector_target {
        #[allow(unused_mut)]
        let mut object_1136 = object.key("JDBCConnectorTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_jdbc_connector_target(&mut object_1136, var_1135)?;
        object_1136.finish();
    }
    if let Some(var_1137) = &input.spark_connector_target {
        #[allow(unused_mut)]
        let mut object_1138 = object.key("SparkConnectorTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_spark_connector_target(&mut object_1138, var_1137)?;
        object_1138.finish();
    }
    if let Some(var_1139) = &input.catalog_target {
        #[allow(unused_mut)]
        let mut object_1140 = object.key("CatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_basic_catalog_target(&mut object_1140, var_1139)?;
        object_1140.finish();
    }
    if let Some(var_1141) = &input.redshift_target {
        #[allow(unused_mut)]
        let mut object_1142 = object.key("RedshiftTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_target(&mut object_1142, var_1141)?;
        object_1142.finish();
    }
    if let Some(var_1143) = &input.s3_catalog_target {
        #[allow(unused_mut)]
        let mut object_1144 = object.key("S3CatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_catalog_target(&mut object_1144, var_1143)?;
        object_1144.finish();
    }
    if let Some(var_1145) = &input.s3_glue_parquet_target {
        #[allow(unused_mut)]
        let mut object_1146 = object.key("S3GlueParquetTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_glue_parquet_target(&mut object_1146, var_1145)?;
        object_1146.finish();
    }
    if let Some(var_1147) = &input.s3_direct_target {
        #[allow(unused_mut)]
        let mut object_1148 = object.key("S3DirectTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_direct_target(&mut object_1148, var_1147)?;
        object_1148.finish();
    }
    if let Some(var_1149) = &input.apply_mapping {
        #[allow(unused_mut)]
        let mut object_1150 = object.key("ApplyMapping").start_object();
        crate::json_ser::serialize_structure_crate_model_apply_mapping(&mut object_1150, var_1149)?;
        object_1150.finish();
    }
    if let Some(var_1151) = &input.select_fields {
        #[allow(unused_mut)]
        let mut object_1152 = object.key("SelectFields").start_object();
        crate::json_ser::serialize_structure_crate_model_select_fields(&mut object_1152, var_1151)?;
        object_1152.finish();
    }
    if let Some(var_1153) = &input.drop_fields {
        #[allow(unused_mut)]
        let mut object_1154 = object.key("DropFields").start_object();
        crate::json_ser::serialize_structure_crate_model_drop_fields(&mut object_1154, var_1153)?;
        object_1154.finish();
    }
    if let Some(var_1155) = &input.rename_field {
        #[allow(unused_mut)]
        let mut object_1156 = object.key("RenameField").start_object();
        crate::json_ser::serialize_structure_crate_model_rename_field(&mut object_1156, var_1155)?;
        object_1156.finish();
    }
    if let Some(var_1157) = &input.spigot {
        #[allow(unused_mut)]
        let mut object_1158 = object.key("Spigot").start_object();
        crate::json_ser::serialize_structure_crate_model_spigot(&mut object_1158, var_1157)?;
        object_1158.finish();
    }
    if let Some(var_1159) = &input.join {
        #[allow(unused_mut)]
        let mut object_1160 = object.key("Join").start_object();
        crate::json_ser::serialize_structure_crate_model_join(&mut object_1160, var_1159)?;
        object_1160.finish();
    }
    if let Some(var_1161) = &input.split_fields {
        #[allow(unused_mut)]
        let mut object_1162 = object.key("SplitFields").start_object();
        crate::json_ser::serialize_structure_crate_model_split_fields(&mut object_1162, var_1161)?;
        object_1162.finish();
    }
    if let Some(var_1163) = &input.select_from_collection {
        #[allow(unused_mut)]
        let mut object_1164 = object.key("SelectFromCollection").start_object();
        crate::json_ser::serialize_structure_crate_model_select_from_collection(&mut object_1164, var_1163)?;
        object_1164.finish();
    }
    if let Some(var_1165) = &input.fill_missing_values {
        #[allow(unused_mut)]
        let mut object_1166 = object.key("FillMissingValues").start_object();
        crate::json_ser::serialize_structure_crate_model_fill_missing_values(&mut object_1166, var_1165)?;
        object_1166.finish();
    }
    if let Some(var_1167) = &input.filter {
        #[allow(unused_mut)]
        let mut object_1168 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_filter(&mut object_1168, var_1167)?;
        object_1168.finish();
    }
    if let Some(var_1169) = &input.custom_code {
        #[allow(unused_mut)]
        let mut object_1170 = object.key("CustomCode").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_code(&mut object_1170, var_1169)?;
        object_1170.finish();
    }
    if let Some(var_1171) = &input.spark_sql {
        #[allow(unused_mut)]
        let mut object_1172 = object.key("SparkSQL").start_object();
        crate::json_ser::serialize_structure_crate_model_spark_sql(&mut object_1172, var_1171)?;
        object_1172.finish();
    }
    if let Some(var_1173) = &input.direct_kinesis_source {
        #[allow(unused_mut)]
        let mut object_1174 = object.key("DirectKinesisSource").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_kinesis_source(&mut object_1174, var_1173)?;
        object_1174.finish();
    }
    if let Some(var_1175) = &input.direct_kafka_source {
        #[allow(unused_mut)]
        let mut object_1176 = object.key("DirectKafkaSource").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_kafka_source(&mut object_1176, var_1175)?;
        object_1176.finish();
    }
    if let Some(var_1177) = &input.catalog_kinesis_source {
        #[allow(unused_mut)]
        let mut object_1178 = object.key("CatalogKinesisSource").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_kinesis_source(&mut object_1178, var_1177)?;
        object_1178.finish();
    }
    if let Some(var_1179) = &input.catalog_kafka_source {
        #[allow(unused_mut)]
        let mut object_1180 = object.key("CatalogKafkaSource").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_kafka_source(&mut object_1180, var_1179)?;
        object_1180.finish();
    }
    if let Some(var_1181) = &input.drop_null_fields {
        #[allow(unused_mut)]
        let mut object_1182 = object.key("DropNullFields").start_object();
        crate::json_ser::serialize_structure_crate_model_drop_null_fields(&mut object_1182, var_1181)?;
        object_1182.finish();
    }
    if let Some(var_1183) = &input.merge {
        #[allow(unused_mut)]
        let mut object_1184 = object.key("Merge").start_object();
        crate::json_ser::serialize_structure_crate_model_merge(&mut object_1184, var_1183)?;
        object_1184.finish();
    }
    if let Some(var_1185) = &input.union {
        #[allow(unused_mut)]
        let mut object_1186 = object.key("Union").start_object();
        crate::json_ser::serialize_structure_crate_model_union(&mut object_1186, var_1185)?;
        object_1186.finish();
    }
    if let Some(var_1187) = &input.pii_detection {
        #[allow(unused_mut)]
        let mut object_1188 = object.key("PIIDetection").start_object();
        crate::json_ser::serialize_structure_crate_model_pii_detection(&mut object_1188, var_1187)?;
        object_1188.finish();
    }
    if let Some(var_1189) = &input.aggregate {
        #[allow(unused_mut)]
        let mut object_1190 = object.key("Aggregate").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregate(&mut object_1190, var_1189)?;
        object_1190.finish();
    }
    if let Some(var_1191) = &input.drop_duplicates {
        #[allow(unused_mut)]
        let mut object_1192 = object.key("DropDuplicates").start_object();
        crate::json_ser::serialize_structure_crate_model_drop_duplicates(&mut object_1192, var_1191)?;
        object_1192.finish();
    }
    if let Some(var_1193) = &input.governed_catalog_target {
        #[allow(unused_mut)]
        let mut object_1194 = object.key("GovernedCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_governed_catalog_target(&mut object_1194, var_1193)?;
        object_1194.finish();
    }
    if let Some(var_1195) = &input.governed_catalog_source {
        #[allow(unused_mut)]
        let mut object_1196 = object.key("GovernedCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_governed_catalog_source(&mut object_1196, var_1195)?;
        object_1196.finish();
    }
    if let Some(var_1197) = &input.microsoft_sql_server_catalog_source {
        #[allow(unused_mut)]
        let mut object_1198 = object.key("MicrosoftSQLServerCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_microsoft_sql_server_catalog_source(&mut object_1198, var_1197)?;
        object_1198.finish();
    }
    if let Some(var_1199) = &input.my_sql_catalog_source {
        #[allow(unused_mut)]
        let mut object_1200 = object.key("MySQLCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_my_sql_catalog_source(&mut object_1200, var_1199)?;
        object_1200.finish();
    }
    if let Some(var_1201) = &input.oracle_sql_catalog_source {
        #[allow(unused_mut)]
        let mut object_1202 = object.key("OracleSQLCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_oracle_sql_catalog_source(&mut object_1202, var_1201)?;
        object_1202.finish();
    }
    if let Some(var_1203) = &input.postgre_sql_catalog_source {
        #[allow(unused_mut)]
        let mut object_1204 = object.key("PostgreSQLCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_postgre_sql_catalog_source(&mut object_1204, var_1203)?;
        object_1204.finish();
    }
    if let Some(var_1205) = &input.microsoft_sql_server_catalog_target {
        #[allow(unused_mut)]
        let mut object_1206 = object.key("MicrosoftSQLServerCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_microsoft_sql_server_catalog_target(&mut object_1206, var_1205)?;
        object_1206.finish();
    }
    if let Some(var_1207) = &input.my_sql_catalog_target {
        #[allow(unused_mut)]
        let mut object_1208 = object.key("MySQLCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_my_sql_catalog_target(&mut object_1208, var_1207)?;
        object_1208.finish();
    }
    if let Some(var_1209) = &input.oracle_sql_catalog_target {
        #[allow(unused_mut)]
        let mut object_1210 = object.key("OracleSQLCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_oracle_sql_catalog_target(&mut object_1210, var_1209)?;
        object_1210.finish();
    }
    if let Some(var_1211) = &input.postgre_sql_catalog_target {
        #[allow(unused_mut)]
        let mut object_1212 = object.key("PostgreSQLCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_postgre_sql_catalog_target(&mut object_1212, var_1211)?;
        object_1212.finish();
    }
    if let Some(var_1213) = &input.dynamic_transform {
        #[allow(unused_mut)]
        let mut object_1214 = object.key("DynamicTransform").start_object();
        crate::json_ser::serialize_structure_crate_model_dynamic_transform(&mut object_1214, var_1213)?;
        object_1214.finish();
    }
    if let Some(var_1215) = &input.evaluate_data_quality {
        #[allow(unused_mut)]
        let mut object_1216 = object.key("EvaluateDataQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_evaluate_data_quality(&mut object_1216, var_1215)?;
        object_1216.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_control_details(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SourceControlDetails) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1217) = &input.provider {
        object.key("Provider").string(var_1217.as_str());
    }
    if let Some(var_1218) = &input.repository {
        object.key("Repository").string(var_1218.as_str());
    }
    if let Some(var_1219) = &input.owner {
        object.key("Owner").string(var_1219.as_str());
    }
    if let Some(var_1220) = &input.branch {
        object.key("Branch").string(var_1220.as_str());
    }
    if let Some(var_1221) = &input.folder {
        object.key("Folder").string(var_1221.as_str());
    }
    if let Some(var_1222) = &input.last_commit_id {
        object.key("LastCommitId").string(var_1222.as_str());
    }
    if let Some(var_1223) = &input.auth_strategy {
        object.key("AuthStrategy").string(var_1223.as_str());
    }
    if let Some(var_1224) = &input.auth_token {
        object.key("AuthToken").string(var_1224.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_glue_table(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::GlueTable) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1225) = &input.database_name {
        object.key("DatabaseName").string(var_1225.as_str());
    }
    if let Some(var_1226) = &input.table_name {
        object.key("TableName").string(var_1226.as_str());
    }
    if let Some(var_1227) = &input.catalog_id {
        object.key("CatalogId").string(var_1227.as_str());
    }
    if let Some(var_1228) = &input.connection_name {
        object.key("ConnectionName").string(var_1228.as_str());
    }
    if let Some(var_1229) = &input.additional_options {
        #[allow(unused_mut)]
        let mut object_1230 = object.key("AdditionalOptions").start_object();
        for (key_1231, value_1232) in var_1229 {
             {
                object_1230.key(key_1231.as_str()).string(value_1232.as_str());
            }
        }
        object_1230.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_parameters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TransformParameters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1233) = &input.transform_type {
        object.key("TransformType").string(var_1233.as_str());
    }
    if let Some(var_1234) = &input.find_matches_parameters {
        #[allow(unused_mut)]
        let mut object_1235 = object.key("FindMatchesParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_find_matches_parameters(&mut object_1235, var_1234)?;
        object_1235.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_encryption(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TransformEncryption) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1236) = &input.ml_user_data_encryption {
        #[allow(unused_mut)]
        let mut object_1237 = object.key("MlUserDataEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_ml_user_data_encryption(&mut object_1237, var_1236)?;
        object_1237.finish();
    }
    if let Some(var_1238) = &input.task_run_security_configuration_name {
        object.key("TaskRunSecurityConfigurationName").string(var_1238.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_index(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PartitionIndex) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1239) = &input.keys {
        let mut array_1240 = object.key("Keys").start_array();
        for item_1241 in var_1239 {
             {
                array_1240.value().string(item_1241.as_str());
            }
        }
        array_1240.finish();
    }
    if let Some(var_1242) = &input.index_name {
        object.key("IndexName").string(var_1242.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registry_id(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RegistryId) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1243) = &input.registry_name {
        object.key("RegistryName").string(var_1243.as_str());
    }
    if let Some(var_1244) = &input.registry_arn {
        object.key("RegistryArn").string(var_1244.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CodeGenNode) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1245) = &input.id {
        object.key("Id").string(var_1245.as_str());
    }
    if let Some(var_1246) = &input.node_type {
        object.key("NodeType").string(var_1246.as_str());
    }
    if let Some(var_1247) = &input.args {
        let mut array_1248 = object.key("Args").start_array();
        for item_1249 in var_1247 {
             {
                #[allow(unused_mut)]
                let mut object_1250 = array_1248.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(&mut object_1250, item_1249)?;
                object_1250.finish();
            }
        }
        array_1248.finish();
    }
    if input.line_number != 0 {
        object.key("LineNumber").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.line_number).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_edge(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CodeGenEdge) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1251) = &input.source {
        object.key("Source").string(var_1251.as_str());
    }
    if let Some(var_1252) = &input.target {
        object.key("Target").string(var_1252.as_str());
    }
    if let Some(var_1253) = &input.target_parameter {
        object.key("TargetParameter").string(var_1253.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EncryptionConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1254) = &input.s3_encryption {
        let mut array_1255 = object.key("S3Encryption").start_array();
        for item_1256 in var_1254 {
             {
                #[allow(unused_mut)]
                let mut object_1257 = array_1255.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_encryption(&mut object_1257, item_1256)?;
                object_1257.finish();
            }
        }
        array_1255.finish();
    }
    if let Some(var_1258) = &input.cloud_watch_encryption {
        #[allow(unused_mut)]
        let mut object_1259 = object.key("CloudWatchEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_encryption(&mut object_1259, var_1258)?;
        object_1259.finish();
    }
    if let Some(var_1260) = &input.job_bookmarks_encryption {
        #[allow(unused_mut)]
        let mut object_1261 = object.key("JobBookmarksEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_job_bookmarks_encryption(&mut object_1261, var_1260)?;
        object_1261.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_command(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SessionCommand) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1262) = &input.name {
        object.key("Name").string(var_1262.as_str());
    }
    if let Some(var_1263) = &input.python_version {
        object.key("PythonVersion").string(var_1263.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1264) = &input.name {
        object.key("Name").string(var_1264.as_str());
    }
    if let Some(var_1265) = &input.description {
        object.key("Description").string(var_1265.as_str());
    }
    if let Some(var_1266) = &input.owner {
        object.key("Owner").string(var_1266.as_str());
    }
    if let Some(var_1267) = &input.last_access_time {
        object.key("LastAccessTime").date_time(var_1267, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1268) = &input.last_analyzed_time {
        object.key("LastAnalyzedTime").date_time(var_1268, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if input.retention != 0 {
        object.key("Retention").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.retention).into()));
    }
    if let Some(var_1269) = &input.storage_descriptor {
        #[allow(unused_mut)]
        let mut object_1270 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(&mut object_1270, var_1269)?;
        object_1270.finish();
    }
    if let Some(var_1271) = &input.partition_keys {
        let mut array_1272 = object.key("PartitionKeys").start_array();
        for item_1273 in var_1271 {
             {
                #[allow(unused_mut)]
                let mut object_1274 = array_1272.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(&mut object_1274, item_1273)?;
                object_1274.finish();
            }
        }
        array_1272.finish();
    }
    if let Some(var_1275) = &input.view_original_text {
        object.key("ViewOriginalText").string(var_1275.as_str());
    }
    if let Some(var_1276) = &input.view_expanded_text {
        object.key("ViewExpandedText").string(var_1276.as_str());
    }
    if let Some(var_1277) = &input.table_type {
        object.key("TableType").string(var_1277.as_str());
    }
    if let Some(var_1278) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_1279 = object.key("Parameters").start_object();
        for (key_1280, value_1281) in var_1278 {
             {
                object_1279.key(key_1280.as_str()).string(value_1281.as_str());
            }
        }
        object_1279.finish();
    }
    if let Some(var_1282) = &input.target_table {
        #[allow(unused_mut)]
        let mut object_1283 = object.key("TargetTable").start_object();
        crate::json_ser::serialize_structure_crate_model_table_identifier(&mut object_1283, var_1282)?;
        object_1283.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_predicate(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Predicate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1284) = &input.logical {
        object.key("Logical").string(var_1284.as_str());
    }
    if let Some(var_1285) = &input.conditions {
        let mut array_1286 = object.key("Conditions").start_array();
        for item_1287 in var_1285 {
             {
                #[allow(unused_mut)]
                let mut object_1288 = array_1286.value().start_object();
                crate::json_ser::serialize_structure_crate_model_condition(&mut object_1288, item_1287)?;
                object_1288.finish();
            }
        }
        array_1286.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Action) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1289) = &input.job_name {
        object.key("JobName").string(var_1289.as_str());
    }
    if let Some(var_1290) = &input.arguments {
        #[allow(unused_mut)]
        let mut object_1291 = object.key("Arguments").start_object();
        for (key_1292, value_1293) in var_1290 {
             {
                object_1291.key(key_1292.as_str()).string(value_1293.as_str());
            }
        }
        object_1291.finish();
    }
    if let Some(var_1294) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1294).into()));
    }
    if let Some(var_1295) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_1295.as_str());
    }
    if let Some(var_1296) = &input.notification_property {
        #[allow(unused_mut)]
        let mut object_1297 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(&mut object_1297, var_1296)?;
        object_1297.finish();
    }
    if let Some(var_1298) = &input.crawler_name {
        object.key("CrawlerName").string(var_1298.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_event_batching_condition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EventBatchingCondition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("BatchSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.batch_size).into()));
    }
    if let Some(var_1299) = &input.batch_window {
        object.key("BatchWindow").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1299).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_defined_function_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserDefinedFunctionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1300) = &input.function_name {
        object.key("FunctionName").string(var_1300.as_str());
    }
    if let Some(var_1301) = &input.class_name {
        object.key("ClassName").string(var_1301.as_str());
    }
    if let Some(var_1302) = &input.owner_name {
        object.key("OwnerName").string(var_1302.as_str());
    }
    if let Some(var_1303) = &input.owner_type {
        object.key("OwnerType").string(var_1303.as_str());
    }
    if let Some(var_1304) = &input.resource_uris {
        let mut array_1305 = object.key("ResourceUris").start_array();
        for item_1306 in var_1304 {
             {
                #[allow(unused_mut)]
                let mut object_1307 = array_1305.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_uri(&mut object_1307, item_1306)?;
                object_1307.finish();
            }
        }
        array_1305.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_id(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SchemaId) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1308) = &input.schema_arn {
        object.key("SchemaArn").string(var_1308.as_str());
    }
    if let Some(var_1309) = &input.schema_name {
        object.key("SchemaName").string(var_1309.as_str());
    }
    if let Some(var_1310) = &input.registry_name {
        object.key("RegistryName").string(var_1310.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_get_connections_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::GetConnectionsFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1311) = &input.match_criteria {
        let mut array_1312 = object.key("MatchCriteria").start_array();
        for item_1313 in var_1311 {
             {
                array_1312.value().string(item_1313.as_str());
            }
        }
        array_1312.finish();
    }
    if let Some(var_1314) = &input.connection_type {
        object.key("ConnectionType").string(var_1314.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_entry(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CatalogEntry) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1315) = &input.database_name {
        object.key("DatabaseName").string(var_1315.as_str());
    }
    if let Some(var_1316) = &input.table_name {
        object.key("TableName").string(var_1316.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_location(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Location) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1317) = &input.jdbc {
        let mut array_1318 = object.key("Jdbc").start_array();
        for item_1319 in var_1317 {
             {
                #[allow(unused_mut)]
                let mut object_1320 = array_1318.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(&mut object_1320, item_1319)?;
                object_1320.finish();
            }
        }
        array_1318.finish();
    }
    if let Some(var_1321) = &input.s3 {
        let mut array_1322 = object.key("S3").start_array();
        for item_1323 in var_1321 {
             {
                #[allow(unused_mut)]
                let mut object_1324 = array_1322.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(&mut object_1324, item_1323)?;
                object_1324.finish();
            }
        }
        array_1322.finish();
    }
    if let Some(var_1325) = &input.dynamo_db {
        let mut array_1326 = object.key("DynamoDB").start_array();
        for item_1327 in var_1325 {
             {
                #[allow(unused_mut)]
                let mut object_1328 = array_1326.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(&mut object_1328, item_1327)?;
                object_1328.finish();
            }
        }
        array_1326.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_filter_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TaskRunFilterCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1329) = &input.task_run_type {
        object.key("TaskRunType").string(var_1329.as_str());
    }
    if let Some(var_1330) = &input.status {
        object.key("Status").string(var_1330.as_str());
    }
    if let Some(var_1331) = &input.started_before {
        object.key("StartedBefore").date_time(var_1331, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1332) = &input.started_after {
        object.key("StartedAfter").date_time(var_1332, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_sort_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TaskRunSortCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1333) = &input.column {
        object.key("Column").string(var_1333.as_str());
    }
    if let Some(var_1334) = &input.sort_direction {
        object.key("SortDirection").string(var_1334.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_filter_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TransformFilterCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1335) = &input.name {
        object.key("Name").string(var_1335.as_str());
    }
    if let Some(var_1336) = &input.transform_type {
        object.key("TransformType").string(var_1336.as_str());
    }
    if let Some(var_1337) = &input.status {
        object.key("Status").string(var_1337.as_str());
    }
    if let Some(var_1338) = &input.glue_version {
        object.key("GlueVersion").string(var_1338.as_str());
    }
    if let Some(var_1339) = &input.created_before {
        object.key("CreatedBefore").date_time(var_1339, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1340) = &input.created_after {
        object.key("CreatedAfter").date_time(var_1340, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1341) = &input.last_modified_before {
        object.key("LastModifiedBefore").date_time(var_1341, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1342) = &input.last_modified_after {
        object.key("LastModifiedAfter").date_time(var_1342, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1343) = &input.schema {
        let mut array_1344 = object.key("Schema").start_array();
        for item_1345 in var_1343 {
             {
                #[allow(unused_mut)]
                let mut object_1346 = array_1344.value().start_object();
                crate::json_ser::serialize_structure_crate_model_schema_column(&mut object_1346, item_1345)?;
                object_1346.finish();
            }
        }
        array_1344.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_sort_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TransformSortCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1347) = &input.column {
        object.key("Column").string(var_1347.as_str());
    }
    if let Some(var_1348) = &input.sort_direction {
        object.key("SortDirection").string(var_1348.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_segment(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Segment) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("SegmentNumber").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.segment_number).into()));
    }
     {
        object.key("TotalSegments").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.total_segments).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mapping_entry(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MappingEntry) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1349) = &input.source_table {
        object.key("SourceTable").string(var_1349.as_str());
    }
    if let Some(var_1350) = &input.source_path {
        object.key("SourcePath").string(var_1350.as_str());
    }
    if let Some(var_1351) = &input.source_type {
        object.key("SourceType").string(var_1351.as_str());
    }
    if let Some(var_1352) = &input.target_table {
        object.key("TargetTable").string(var_1352.as_str());
    }
    if let Some(var_1353) = &input.target_path {
        object.key("TargetPath").string(var_1353.as_str());
    }
    if let Some(var_1354) = &input.target_type {
        object.key("TargetType").string(var_1354.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_version_number(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SchemaVersionNumber) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.latest_version {
        object.key("LatestVersion").boolean(input.latest_version);
    }
    if input.version_number != 0 {
        object.key("VersionNumber").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.version_number).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audit_context(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AuditContext) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1355) = &input.additional_audit_context {
        object.key("AdditionalAuditContext").string(var_1355.as_str());
    }
    if let Some(var_1356) = &input.requested_columns {
        let mut array_1357 = object.key("RequestedColumns").start_array();
        for item_1358 in var_1356 {
             {
                array_1357.value().string(item_1358.as_str());
            }
        }
        array_1357.finish();
    }
    if let Some(var_1359) = &input.all_columns_requested {
        object.key("AllColumnsRequested").boolean(*var_1359);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_crawls_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CrawlsFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1360) = &input.field_name {
        object.key("FieldName").string(var_1360.as_str());
    }
    if let Some(var_1361) = &input.filter_operator {
        object.key("FilterOperator").string(var_1361.as_str());
    }
    if let Some(var_1362) = &input.field_value {
        object.key("FieldValue").string(var_1362.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_result_filter_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataQualityResultFilterCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1363) = &input.data_source {
        #[allow(unused_mut)]
        let mut object_1364 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source(&mut object_1364, var_1363)?;
        object_1364.finish();
    }
    if let Some(var_1365) = &input.job_name {
        object.key("JobName").string(var_1365.as_str());
    }
    if let Some(var_1366) = &input.job_run_id {
        object.key("JobRunId").string(var_1366.as_str());
    }
    if let Some(var_1367) = &input.started_after {
        object.key("StartedAfter").date_time(var_1367, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1368) = &input.started_before {
        object.key("StartedBefore").date_time(var_1368, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_rule_recommendation_run_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataQualityRuleRecommendationRunFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1369) = &input.data_source {
        #[allow(unused_mut)]
        let mut object_1370 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source(&mut object_1370, var_1369)?;
        object_1370.finish();
    }
    if let Some(var_1371) = &input.started_before {
        object.key("StartedBefore").date_time(var_1371, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1372) = &input.started_after {
        object.key("StartedAfter").date_time(var_1372, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_ruleset_evaluation_run_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataQualityRulesetEvaluationRunFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1373) = &input.data_source {
        #[allow(unused_mut)]
        let mut object_1374 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source(&mut object_1374, var_1373)?;
        object_1374.finish();
    }
    if let Some(var_1375) = &input.started_before {
        object.key("StartedBefore").date_time(var_1375, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1376) = &input.started_after {
        object.key("StartedAfter").date_time(var_1376, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_ruleset_filter_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataQualityRulesetFilterCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1377) = &input.name {
        object.key("Name").string(var_1377.as_str());
    }
    if let Some(var_1378) = &input.description {
        object.key("Description").string(var_1378.as_str());
    }
    if let Some(var_1379) = &input.created_before {
        object.key("CreatedBefore").date_time(var_1379, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1380) = &input.created_after {
        object.key("CreatedAfter").date_time(var_1380, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1381) = &input.last_modified_before {
        object.key("LastModifiedBefore").date_time(var_1381, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1382) = &input.last_modified_after {
        object.key("LastModifiedAfter").date_time(var_1382, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1383) = &input.target_table {
        #[allow(unused_mut)]
        let mut object_1384 = object.key("TargetTable").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_target_table(&mut object_1384, var_1383)?;
        object_1384.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_catalog_encryption_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataCatalogEncryptionSettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1385) = &input.encryption_at_rest {
        #[allow(unused_mut)]
        let mut object_1386 = object.key("EncryptionAtRest").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_at_rest(&mut object_1386, var_1385)?;
        object_1386.finish();
    }
    if let Some(var_1387) = &input.connection_password_encryption {
        #[allow(unused_mut)]
        let mut object_1388 = object.key("ConnectionPasswordEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_password_encryption(&mut object_1388, var_1387)?;
        object_1388.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_key_value_pair(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MetadataKeyValuePair) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1389) = &input.metadata_key {
        object.key("MetadataKey").string(var_1389.as_str());
    }
    if let Some(var_1390) = &input.metadata_value {
        object.key("MetadataValue").string(var_1390.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_predicate(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PropertyPredicate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1391) = &input.key {
        object.key("Key").string(var_1391.as_str());
    }
    if let Some(var_1392) = &input.value {
        object.key("Value").string(var_1392.as_str());
    }
    if let Some(var_1393) = &input.comparator {
        object.key("Comparator").string(var_1393.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criterion(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SortCriterion) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1394) = &input.field_name {
        object.key("FieldName").string(var_1394.as_str());
    }
    if let Some(var_1395) = &input.sort {
        object.key("Sort").string(var_1395.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1396) = &input.glue_table {
        #[allow(unused_mut)]
        let mut object_1397 = object.key("GlueTable").start_object();
        crate::json_ser::serialize_structure_crate_model_glue_table(&mut object_1397, var_1396)?;
        object_1397.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_evaluation_run_additional_run_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataQualityEvaluationRunAdditionalRunOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1398) = &input.cloud_watch_metrics_enabled {
        object.key("CloudWatchMetricsEnabled").boolean(*var_1398);
    }
    if let Some(var_1399) = &input.results_s3_prefix {
        object.key("ResultsS3Prefix").string(var_1399.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_grok_classifier_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateGrokClassifierRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1400) = &input.name {
        object.key("Name").string(var_1400.as_str());
    }
    if let Some(var_1401) = &input.classification {
        object.key("Classification").string(var_1401.as_str());
    }
    if let Some(var_1402) = &input.grok_pattern {
        object.key("GrokPattern").string(var_1402.as_str());
    }
    if let Some(var_1403) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_1403.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_xml_classifier_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateXmlClassifierRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1404) = &input.name {
        object.key("Name").string(var_1404.as_str());
    }
    if let Some(var_1405) = &input.classification {
        object.key("Classification").string(var_1405.as_str());
    }
    if let Some(var_1406) = &input.row_tag {
        object.key("RowTag").string(var_1406.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_json_classifier_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateJsonClassifierRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1407) = &input.name {
        object.key("Name").string(var_1407.as_str());
    }
    if let Some(var_1408) = &input.json_path {
        object.key("JsonPath").string(var_1408.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_csv_classifier_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateCsvClassifierRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1409) = &input.name {
        object.key("Name").string(var_1409.as_str());
    }
    if let Some(var_1410) = &input.delimiter {
        object.key("Delimiter").string(var_1410.as_str());
    }
    if let Some(var_1411) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_1411.as_str());
    }
    if let Some(var_1412) = &input.contains_header {
        object.key("ContainsHeader").string(var_1412.as_str());
    }
    if let Some(var_1413) = &input.header {
        let mut array_1414 = object.key("Header").start_array();
        for item_1415 in var_1413 {
             {
                array_1414.value().string(item_1415.as_str());
            }
        }
        array_1414.finish();
    }
    if let Some(var_1416) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_1416);
    }
    if let Some(var_1417) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_1417);
    }
    if let Some(var_1418) = &input.custom_datatype_configured {
        object.key("CustomDatatypeConfigured").boolean(*var_1418);
    }
    if let Some(var_1419) = &input.custom_datatypes {
        let mut array_1420 = object.key("CustomDatatypes").start_array();
        for item_1421 in var_1419 {
             {
                array_1420.value().string(item_1421.as_str());
            }
        }
        array_1420.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ColumnStatistics) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1422) = &input.column_name {
        object.key("ColumnName").string(var_1422.as_str());
    }
    if let Some(var_1423) = &input.column_type {
        object.key("ColumnType").string(var_1423.as_str());
    }
    if let Some(var_1424) = &input.analyzed_time {
        object.key("AnalyzedTime").date_time(var_1424, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1425) = &input.statistics_data {
        #[allow(unused_mut)]
        let mut object_1426 = object.key("StatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_column_statistics_data(&mut object_1426, var_1425)?;
        object_1426.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dev_endpoint_custom_libraries(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DevEndpointCustomLibraries) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1427) = &input.extra_python_libs_s3_path {
        object.key("ExtraPythonLibsS3Path").string(var_1427.as_str());
    }
    if let Some(var_1428) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_1428.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_update(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JobUpdate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1429) = &input.description {
        object.key("Description").string(var_1429.as_str());
    }
    if let Some(var_1430) = &input.log_uri {
        object.key("LogUri").string(var_1430.as_str());
    }
    if let Some(var_1431) = &input.role {
        object.key("Role").string(var_1431.as_str());
    }
    if let Some(var_1432) = &input.execution_property {
        #[allow(unused_mut)]
        let mut object_1433 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(&mut object_1433, var_1432)?;
        object_1433.finish();
    }
    if let Some(var_1434) = &input.command {
        #[allow(unused_mut)]
        let mut object_1435 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_1435, var_1434)?;
        object_1435.finish();
    }
    if let Some(var_1436) = &input.default_arguments {
        #[allow(unused_mut)]
        let mut object_1437 = object.key("DefaultArguments").start_object();
        for (key_1438, value_1439) in var_1436 {
             {
                object_1437.key(key_1438.as_str()).string(value_1439.as_str());
            }
        }
        object_1437.finish();
    }
    if let Some(var_1440) = &input.non_overridable_arguments {
        #[allow(unused_mut)]
        let mut object_1441 = object.key("NonOverridableArguments").start_object();
        for (key_1442, value_1443) in var_1440 {
             {
                object_1441.key(key_1442.as_str()).string(value_1443.as_str());
            }
        }
        object_1441.finish();
    }
    if let Some(var_1444) = &input.connections {
        #[allow(unused_mut)]
        let mut object_1445 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(&mut object_1445, var_1444)?;
        object_1445.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_retries).into()));
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.allocated_capacity).into()));
    }
    if let Some(var_1446) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1446).into()));
    }
    if let Some(var_1447) = &input.max_capacity {
        object.key("MaxCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1447).into()));
    }
    if let Some(var_1448) = &input.worker_type {
        object.key("WorkerType").string(var_1448.as_str());
    }
    if let Some(var_1449) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1449).into()));
    }
    if let Some(var_1450) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_1450.as_str());
    }
    if let Some(var_1451) = &input.notification_property {
        #[allow(unused_mut)]
        let mut object_1452 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(&mut object_1452, var_1451)?;
        object_1452.finish();
    }
    if let Some(var_1453) = &input.glue_version {
        object.key("GlueVersion").string(var_1453.as_str());
    }
    if let Some(var_1454) = &input.code_gen_configuration_nodes {
        #[allow(unused_mut)]
        let mut object_1455 = object.key("CodeGenConfigurationNodes").start_object();
        for (key_1456, value_1457) in var_1454 {
             {
                #[allow(unused_mut)]
                let mut object_1458 = object_1455.key(key_1456.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_configuration_node(&mut object_1458, value_1457)?;
                object_1458.finish();
            }
        }
        object_1455.finish();
    }
    if let Some(var_1459) = &input.execution_class {
        object.key("ExecutionClass").string(var_1459.as_str());
    }
    if let Some(var_1460) = &input.source_control_details {
        #[allow(unused_mut)]
        let mut object_1461 = object.key("SourceControlDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_source_control_details(&mut object_1461, var_1460)?;
        object_1461.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trigger_update(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TriggerUpdate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1462) = &input.name {
        object.key("Name").string(var_1462.as_str());
    }
    if let Some(var_1463) = &input.description {
        object.key("Description").string(var_1463.as_str());
    }
    if let Some(var_1464) = &input.schedule {
        object.key("Schedule").string(var_1464.as_str());
    }
    if let Some(var_1465) = &input.actions {
        let mut array_1466 = object.key("Actions").start_array();
        for item_1467 in var_1465 {
             {
                #[allow(unused_mut)]
                let mut object_1468 = array_1466.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(&mut object_1468, item_1467)?;
                object_1468.finish();
            }
        }
        array_1466.finish();
    }
    if let Some(var_1469) = &input.predicate {
        #[allow(unused_mut)]
        let mut object_1470 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_1470, var_1469)?;
        object_1470.finish();
    }
    if let Some(var_1471) = &input.event_batching_condition {
        #[allow(unused_mut)]
        let mut object_1472 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(&mut object_1472, var_1471)?;
        object_1472.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_descriptor(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StorageDescriptor) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1473) = &input.columns {
        let mut array_1474 = object.key("Columns").start_array();
        for item_1475 in var_1473 {
             {
                #[allow(unused_mut)]
                let mut object_1476 = array_1474.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(&mut object_1476, item_1475)?;
                object_1476.finish();
            }
        }
        array_1474.finish();
    }
    if let Some(var_1477) = &input.location {
        object.key("Location").string(var_1477.as_str());
    }
    if let Some(var_1478) = &input.additional_locations {
        let mut array_1479 = object.key("AdditionalLocations").start_array();
        for item_1480 in var_1478 {
             {
                array_1479.value().string(item_1480.as_str());
            }
        }
        array_1479.finish();
    }
    if let Some(var_1481) = &input.input_format {
        object.key("InputFormat").string(var_1481.as_str());
    }
    if let Some(var_1482) = &input.output_format {
        object.key("OutputFormat").string(var_1482.as_str());
    }
    if input.compressed {
        object.key("Compressed").boolean(input.compressed);
    }
    if input.number_of_buckets != 0 {
        object.key("NumberOfBuckets").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_buckets).into()));
    }
    if let Some(var_1483) = &input.serde_info {
        #[allow(unused_mut)]
        let mut object_1484 = object.key("SerdeInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_ser_de_info(&mut object_1484, var_1483)?;
        object_1484.finish();
    }
    if let Some(var_1485) = &input.bucket_columns {
        let mut array_1486 = object.key("BucketColumns").start_array();
        for item_1487 in var_1485 {
             {
                array_1486.value().string(item_1487.as_str());
            }
        }
        array_1486.finish();
    }
    if let Some(var_1488) = &input.sort_columns {
        let mut array_1489 = object.key("SortColumns").start_array();
        for item_1490 in var_1488 {
             {
                #[allow(unused_mut)]
                let mut object_1491 = array_1489.value().start_object();
                crate::json_ser::serialize_structure_crate_model_order(&mut object_1491, item_1490)?;
                object_1491.finish();
            }
        }
        array_1489.finish();
    }
    if let Some(var_1492) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_1493 = object.key("Parameters").start_object();
        for (key_1494, value_1495) in var_1492 {
             {
                object_1493.key(key_1494.as_str()).string(value_1495.as_str());
            }
        }
        object_1493.finish();
    }
    if let Some(var_1496) = &input.skewed_info {
        #[allow(unused_mut)]
        let mut object_1497 = object.key("SkewedInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_skewed_info(&mut object_1497, var_1496)?;
        object_1497.finish();
    }
    if input.stored_as_sub_directories {
        object.key("StoredAsSubDirectories").boolean(input.stored_as_sub_directories);
    }
    if let Some(var_1498) = &input.schema_reference {
        #[allow(unused_mut)]
        let mut object_1499 = object.key("SchemaReference").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_reference(&mut object_1499, var_1498)?;
        object_1499.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_physical_connection_requirements(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PhysicalConnectionRequirements) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1500) = &input.subnet_id {
        object.key("SubnetId").string(var_1500.as_str());
    }
    if let Some(var_1501) = &input.security_group_id_list {
        let mut array_1502 = object.key("SecurityGroupIdList").start_array();
        for item_1503 in var_1501 {
             {
                array_1502.value().string(item_1503.as_str());
            }
        }
        array_1502.finish();
    }
    if let Some(var_1504) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1504.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3Target) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1505) = &input.path {
        object.key("Path").string(var_1505.as_str());
    }
    if let Some(var_1506) = &input.exclusions {
        let mut array_1507 = object.key("Exclusions").start_array();
        for item_1508 in var_1506 {
             {
                array_1507.value().string(item_1508.as_str());
            }
        }
        array_1507.finish();
    }
    if let Some(var_1509) = &input.connection_name {
        object.key("ConnectionName").string(var_1509.as_str());
    }
    if let Some(var_1510) = &input.sample_size {
        object.key("SampleSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1510).into()));
    }
    if let Some(var_1511) = &input.event_queue_arn {
        object.key("EventQueueArn").string(var_1511.as_str());
    }
    if let Some(var_1512) = &input.dlq_event_queue_arn {
        object.key("DlqEventQueueArn").string(var_1512.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JdbcTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1513) = &input.connection_name {
        object.key("ConnectionName").string(var_1513.as_str());
    }
    if let Some(var_1514) = &input.path {
        object.key("Path").string(var_1514.as_str());
    }
    if let Some(var_1515) = &input.exclusions {
        let mut array_1516 = object.key("Exclusions").start_array();
        for item_1517 in var_1515 {
             {
                array_1516.value().string(item_1517.as_str());
            }
        }
        array_1516.finish();
    }
    if let Some(var_1518) = &input.enable_additional_metadata {
        let mut array_1519 = object.key("EnableAdditionalMetadata").start_array();
        for item_1520 in var_1518 {
             {
                array_1519.value().string(item_1520.as_str());
            }
        }
        array_1519.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mongo_db_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MongoDbTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1521) = &input.connection_name {
        object.key("ConnectionName").string(var_1521.as_str());
    }
    if let Some(var_1522) = &input.path {
        object.key("Path").string(var_1522.as_str());
    }
    if let Some(var_1523) = &input.scan_all {
        object.key("ScanAll").boolean(*var_1523);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_db_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DynamoDbTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1524) = &input.path {
        object.key("Path").string(var_1524.as_str());
    }
    if let Some(var_1525) = &input.scan_all {
        object.key("scanAll").boolean(*var_1525);
    }
    if let Some(var_1526) = &input.scan_rate {
        object.key("scanRate").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1526).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CatalogTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1527) = &input.database_name {
        object.key("DatabaseName").string(var_1527.as_str());
    }
    if let Some(var_1528) = &input.tables {
        let mut array_1529 = object.key("Tables").start_array();
        for item_1530 in var_1528 {
             {
                array_1529.value().string(item_1530.as_str());
            }
        }
        array_1529.finish();
    }
    if let Some(var_1531) = &input.connection_name {
        object.key("ConnectionName").string(var_1531.as_str());
    }
    if let Some(var_1532) = &input.event_queue_arn {
        object.key("EventQueueArn").string(var_1532.as_str());
    }
    if let Some(var_1533) = &input.dlq_event_queue_arn {
        object.key("DlqEventQueueArn").string(var_1533.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delta_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DeltaTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1534) = &input.delta_tables {
        let mut array_1535 = object.key("DeltaTables").start_array();
        for item_1536 in var_1534 {
             {
                array_1535.value().string(item_1536.as_str());
            }
        }
        array_1535.finish();
    }
    if let Some(var_1537) = &input.connection_name {
        object.key("ConnectionName").string(var_1537.as_str());
    }
    if let Some(var_1538) = &input.write_manifest {
        object.key("WriteManifest").boolean(*var_1538);
    }
    if let Some(var_1539) = &input.create_native_delta_table {
        object.key("CreateNativeDeltaTable").boolean(*var_1539);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal_permissions(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PrincipalPermissions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1540) = &input.principal {
        #[allow(unused_mut)]
        let mut object_1541 = object.key("Principal").start_object();
        crate::json_ser::serialize_structure_crate_model_data_lake_principal(&mut object_1541, var_1540)?;
        object_1541.finish();
    }
    if let Some(var_1542) = &input.permissions {
        let mut array_1543 = object.key("Permissions").start_array();
        for item_1544 in var_1542 {
             {
                array_1543.value().string(item_1544.as_str());
            }
        }
        array_1543.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_identifier(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DatabaseIdentifier) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1545) = &input.catalog_id {
        object.key("CatalogId").string(var_1545.as_str());
    }
    if let Some(var_1546) = &input.database_name {
        object.key("DatabaseName").string(var_1546.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_athena_connector_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AthenaConnectorSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1547) = &input.name {
        object.key("Name").string(var_1547.as_str());
    }
    if let Some(var_1548) = &input.connection_name {
        object.key("ConnectionName").string(var_1548.as_str());
    }
    if let Some(var_1549) = &input.connector_name {
        object.key("ConnectorName").string(var_1549.as_str());
    }
    if let Some(var_1550) = &input.connection_type {
        object.key("ConnectionType").string(var_1550.as_str());
    }
    if let Some(var_1551) = &input.connection_table {
        object.key("ConnectionTable").string(var_1551.as_str());
    }
    if let Some(var_1552) = &input.schema_name {
        object.key("SchemaName").string(var_1552.as_str());
    }
    if let Some(var_1553) = &input.output_schemas {
        let mut array_1554 = object.key("OutputSchemas").start_array();
        for item_1555 in var_1553 {
             {
                #[allow(unused_mut)]
                let mut object_1556 = array_1554.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1556, item_1555)?;
                object_1556.finish();
            }
        }
        array_1554.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_connector_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JdbcConnectorSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1557) = &input.name {
        object.key("Name").string(var_1557.as_str());
    }
    if let Some(var_1558) = &input.connection_name {
        object.key("ConnectionName").string(var_1558.as_str());
    }
    if let Some(var_1559) = &input.connector_name {
        object.key("ConnectorName").string(var_1559.as_str());
    }
    if let Some(var_1560) = &input.connection_type {
        object.key("ConnectionType").string(var_1560.as_str());
    }
    if let Some(var_1561) = &input.additional_options {
        #[allow(unused_mut)]
        let mut object_1562 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_jdbc_connector_options(&mut object_1562, var_1561)?;
        object_1562.finish();
    }
    if let Some(var_1563) = &input.connection_table {
        object.key("ConnectionTable").string(var_1563.as_str());
    }
    if let Some(var_1564) = &input.query {
        object.key("Query").string(var_1564.as_str());
    }
    if let Some(var_1565) = &input.output_schemas {
        let mut array_1566 = object.key("OutputSchemas").start_array();
        for item_1567 in var_1565 {
             {
                #[allow(unused_mut)]
                let mut object_1568 = array_1566.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1568, item_1567)?;
                object_1568.finish();
            }
        }
        array_1566.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spark_connector_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SparkConnectorSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1569) = &input.name {
        object.key("Name").string(var_1569.as_str());
    }
    if let Some(var_1570) = &input.connection_name {
        object.key("ConnectionName").string(var_1570.as_str());
    }
    if let Some(var_1571) = &input.connector_name {
        object.key("ConnectorName").string(var_1571.as_str());
    }
    if let Some(var_1572) = &input.connection_type {
        object.key("ConnectionType").string(var_1572.as_str());
    }
    if let Some(var_1573) = &input.additional_options {
        #[allow(unused_mut)]
        let mut object_1574 = object.key("AdditionalOptions").start_object();
        for (key_1575, value_1576) in var_1573 {
             {
                object_1574.key(key_1575.as_str()).string(value_1576.as_str());
            }
        }
        object_1574.finish();
    }
    if let Some(var_1577) = &input.output_schemas {
        let mut array_1578 = object.key("OutputSchemas").start_array();
        for item_1579 in var_1577 {
             {
                #[allow(unused_mut)]
                let mut object_1580 = array_1578.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1580, item_1579)?;
                object_1580.finish();
            }
        }
        array_1578.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1581) = &input.name {
        object.key("Name").string(var_1581.as_str());
    }
    if let Some(var_1582) = &input.database {
        object.key("Database").string(var_1582.as_str());
    }
    if let Some(var_1583) = &input.table {
        object.key("Table").string(var_1583.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RedshiftSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1584) = &input.name {
        object.key("Name").string(var_1584.as_str());
    }
    if let Some(var_1585) = &input.database {
        object.key("Database").string(var_1585.as_str());
    }
    if let Some(var_1586) = &input.table {
        object.key("Table").string(var_1586.as_str());
    }
    if let Some(var_1587) = &input.redshift_tmp_dir {
        object.key("RedshiftTmpDir").string(var_1587.as_str());
    }
    if let Some(var_1588) = &input.tmp_dir_iam_role {
        object.key("TmpDirIAMRole").string(var_1588.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3CatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1589) = &input.name {
        object.key("Name").string(var_1589.as_str());
    }
    if let Some(var_1590) = &input.database {
        object.key("Database").string(var_1590.as_str());
    }
    if let Some(var_1591) = &input.table {
        object.key("Table").string(var_1591.as_str());
    }
    if let Some(var_1592) = &input.partition_predicate {
        object.key("PartitionPredicate").string(var_1592.as_str());
    }
    if let Some(var_1593) = &input.additional_options {
        #[allow(unused_mut)]
        let mut object_1594 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_source_additional_options(&mut object_1594, var_1593)?;
        object_1594.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_csv_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3CsvSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1595) = &input.name {
        object.key("Name").string(var_1595.as_str());
    }
    if let Some(var_1596) = &input.paths {
        let mut array_1597 = object.key("Paths").start_array();
        for item_1598 in var_1596 {
             {
                array_1597.value().string(item_1598.as_str());
            }
        }
        array_1597.finish();
    }
    if let Some(var_1599) = &input.compression_type {
        object.key("CompressionType").string(var_1599.as_str());
    }
    if let Some(var_1600) = &input.exclusions {
        let mut array_1601 = object.key("Exclusions").start_array();
        for item_1602 in var_1600 {
             {
                array_1601.value().string(item_1602.as_str());
            }
        }
        array_1601.finish();
    }
    if let Some(var_1603) = &input.group_size {
        object.key("GroupSize").string(var_1603.as_str());
    }
    if let Some(var_1604) = &input.group_files {
        object.key("GroupFiles").string(var_1604.as_str());
    }
    if let Some(var_1605) = &input.recurse {
        object.key("Recurse").boolean(*var_1605);
    }
    if let Some(var_1606) = &input.max_band {
        object.key("MaxBand").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1606).into()));
    }
    if let Some(var_1607) = &input.max_files_in_band {
        object.key("MaxFilesInBand").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1607).into()));
    }
    if let Some(var_1608) = &input.additional_options {
        #[allow(unused_mut)]
        let mut object_1609 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_direct_source_additional_options(&mut object_1609, var_1608)?;
        object_1609.finish();
    }
    if let Some(var_1610) = &input.separator {
        object.key("Separator").string(var_1610.as_str());
    }
    if let Some(var_1611) = &input.escaper {
        object.key("Escaper").string(var_1611.as_str());
    }
    if let Some(var_1612) = &input.quote_char {
        object.key("QuoteChar").string(var_1612.as_str());
    }
    if let Some(var_1613) = &input.multiline {
        object.key("Multiline").boolean(*var_1613);
    }
    if let Some(var_1614) = &input.with_header {
        object.key("WithHeader").boolean(*var_1614);
    }
    if let Some(var_1615) = &input.write_header {
        object.key("WriteHeader").boolean(*var_1615);
    }
    if let Some(var_1616) = &input.skip_first {
        object.key("SkipFirst").boolean(*var_1616);
    }
    if input.optimize_performance {
        object.key("OptimizePerformance").boolean(input.optimize_performance);
    }
    if let Some(var_1617) = &input.output_schemas {
        let mut array_1618 = object.key("OutputSchemas").start_array();
        for item_1619 in var_1617 {
             {
                #[allow(unused_mut)]
                let mut object_1620 = array_1618.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1620, item_1619)?;
                object_1620.finish();
            }
        }
        array_1618.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_json_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3JsonSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1621) = &input.name {
        object.key("Name").string(var_1621.as_str());
    }
    if let Some(var_1622) = &input.paths {
        let mut array_1623 = object.key("Paths").start_array();
        for item_1624 in var_1622 {
             {
                array_1623.value().string(item_1624.as_str());
            }
        }
        array_1623.finish();
    }
    if let Some(var_1625) = &input.compression_type {
        object.key("CompressionType").string(var_1625.as_str());
    }
    if let Some(var_1626) = &input.exclusions {
        let mut array_1627 = object.key("Exclusions").start_array();
        for item_1628 in var_1626 {
             {
                array_1627.value().string(item_1628.as_str());
            }
        }
        array_1627.finish();
    }
    if let Some(var_1629) = &input.group_size {
        object.key("GroupSize").string(var_1629.as_str());
    }
    if let Some(var_1630) = &input.group_files {
        object.key("GroupFiles").string(var_1630.as_str());
    }
    if let Some(var_1631) = &input.recurse {
        object.key("Recurse").boolean(*var_1631);
    }
    if let Some(var_1632) = &input.max_band {
        object.key("MaxBand").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1632).into()));
    }
    if let Some(var_1633) = &input.max_files_in_band {
        object.key("MaxFilesInBand").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1633).into()));
    }
    if let Some(var_1634) = &input.additional_options {
        #[allow(unused_mut)]
        let mut object_1635 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_direct_source_additional_options(&mut object_1635, var_1634)?;
        object_1635.finish();
    }
    if let Some(var_1636) = &input.json_path {
        object.key("JsonPath").string(var_1636.as_str());
    }
    if let Some(var_1637) = &input.multiline {
        object.key("Multiline").boolean(*var_1637);
    }
    if let Some(var_1638) = &input.output_schemas {
        let mut array_1639 = object.key("OutputSchemas").start_array();
        for item_1640 in var_1638 {
             {
                #[allow(unused_mut)]
                let mut object_1641 = array_1639.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1641, item_1640)?;
                object_1641.finish();
            }
        }
        array_1639.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_parquet_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3ParquetSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1642) = &input.name {
        object.key("Name").string(var_1642.as_str());
    }
    if let Some(var_1643) = &input.paths {
        let mut array_1644 = object.key("Paths").start_array();
        for item_1645 in var_1643 {
             {
                array_1644.value().string(item_1645.as_str());
            }
        }
        array_1644.finish();
    }
    if let Some(var_1646) = &input.compression_type {
        object.key("CompressionType").string(var_1646.as_str());
    }
    if let Some(var_1647) = &input.exclusions {
        let mut array_1648 = object.key("Exclusions").start_array();
        for item_1649 in var_1647 {
             {
                array_1648.value().string(item_1649.as_str());
            }
        }
        array_1648.finish();
    }
    if let Some(var_1650) = &input.group_size {
        object.key("GroupSize").string(var_1650.as_str());
    }
    if let Some(var_1651) = &input.group_files {
        object.key("GroupFiles").string(var_1651.as_str());
    }
    if let Some(var_1652) = &input.recurse {
        object.key("Recurse").boolean(*var_1652);
    }
    if let Some(var_1653) = &input.max_band {
        object.key("MaxBand").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1653).into()));
    }
    if let Some(var_1654) = &input.max_files_in_band {
        object.key("MaxFilesInBand").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1654).into()));
    }
    if let Some(var_1655) = &input.additional_options {
        #[allow(unused_mut)]
        let mut object_1656 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_direct_source_additional_options(&mut object_1656, var_1655)?;
        object_1656.finish();
    }
    if let Some(var_1657) = &input.output_schemas {
        let mut array_1658 = object.key("OutputSchemas").start_array();
        for item_1659 in var_1657 {
             {
                #[allow(unused_mut)]
                let mut object_1660 = array_1658.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1660, item_1659)?;
                object_1660.finish();
            }
        }
        array_1658.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relational_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RelationalCatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1661) = &input.name {
        object.key("Name").string(var_1661.as_str());
    }
    if let Some(var_1662) = &input.database {
        object.key("Database").string(var_1662.as_str());
    }
    if let Some(var_1663) = &input.table {
        object.key("Table").string(var_1663.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_db_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DynamoDbCatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1664) = &input.name {
        object.key("Name").string(var_1664.as_str());
    }
    if let Some(var_1665) = &input.database {
        object.key("Database").string(var_1665.as_str());
    }
    if let Some(var_1666) = &input.table {
        object.key("Table").string(var_1666.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_connector_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JdbcConnectorTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1667) = &input.name {
        object.key("Name").string(var_1667.as_str());
    }
    if let Some(var_1668) = &input.inputs {
        let mut array_1669 = object.key("Inputs").start_array();
        for item_1670 in var_1668 {
             {
                array_1669.value().string(item_1670.as_str());
            }
        }
        array_1669.finish();
    }
    if let Some(var_1671) = &input.connection_name {
        object.key("ConnectionName").string(var_1671.as_str());
    }
    if let Some(var_1672) = &input.connection_table {
        object.key("ConnectionTable").string(var_1672.as_str());
    }
    if let Some(var_1673) = &input.connector_name {
        object.key("ConnectorName").string(var_1673.as_str());
    }
    if let Some(var_1674) = &input.connection_type {
        object.key("ConnectionType").string(var_1674.as_str());
    }
    if let Some(var_1675) = &input.additional_options {
        #[allow(unused_mut)]
        let mut object_1676 = object.key("AdditionalOptions").start_object();
        for (key_1677, value_1678) in var_1675 {
             {
                object_1676.key(key_1677.as_str()).string(value_1678.as_str());
            }
        }
        object_1676.finish();
    }
    if let Some(var_1679) = &input.output_schemas {
        let mut array_1680 = object.key("OutputSchemas").start_array();
        for item_1681 in var_1679 {
             {
                #[allow(unused_mut)]
                let mut object_1682 = array_1680.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1682, item_1681)?;
                object_1682.finish();
            }
        }
        array_1680.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spark_connector_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SparkConnectorTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1683) = &input.name {
        object.key("Name").string(var_1683.as_str());
    }
    if let Some(var_1684) = &input.inputs {
        let mut array_1685 = object.key("Inputs").start_array();
        for item_1686 in var_1684 {
             {
                array_1685.value().string(item_1686.as_str());
            }
        }
        array_1685.finish();
    }
    if let Some(var_1687) = &input.connection_name {
        object.key("ConnectionName").string(var_1687.as_str());
    }
    if let Some(var_1688) = &input.connector_name {
        object.key("ConnectorName").string(var_1688.as_str());
    }
    if let Some(var_1689) = &input.connection_type {
        object.key("ConnectionType").string(var_1689.as_str());
    }
    if let Some(var_1690) = &input.additional_options {
        #[allow(unused_mut)]
        let mut object_1691 = object.key("AdditionalOptions").start_object();
        for (key_1692, value_1693) in var_1690 {
             {
                object_1691.key(key_1692.as_str()).string(value_1693.as_str());
            }
        }
        object_1691.finish();
    }
    if let Some(var_1694) = &input.output_schemas {
        let mut array_1695 = object.key("OutputSchemas").start_array();
        for item_1696 in var_1694 {
             {
                #[allow(unused_mut)]
                let mut object_1697 = array_1695.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1697, item_1696)?;
                object_1697.finish();
            }
        }
        array_1695.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_basic_catalog_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::BasicCatalogTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1698) = &input.name {
        object.key("Name").string(var_1698.as_str());
    }
    if let Some(var_1699) = &input.inputs {
        let mut array_1700 = object.key("Inputs").start_array();
        for item_1701 in var_1699 {
             {
                array_1700.value().string(item_1701.as_str());
            }
        }
        array_1700.finish();
    }
    if let Some(var_1702) = &input.database {
        object.key("Database").string(var_1702.as_str());
    }
    if let Some(var_1703) = &input.table {
        object.key("Table").string(var_1703.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RedshiftTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1704) = &input.name {
        object.key("Name").string(var_1704.as_str());
    }
    if let Some(var_1705) = &input.inputs {
        let mut array_1706 = object.key("Inputs").start_array();
        for item_1707 in var_1705 {
             {
                array_1706.value().string(item_1707.as_str());
            }
        }
        array_1706.finish();
    }
    if let Some(var_1708) = &input.database {
        object.key("Database").string(var_1708.as_str());
    }
    if let Some(var_1709) = &input.table {
        object.key("Table").string(var_1709.as_str());
    }
    if let Some(var_1710) = &input.redshift_tmp_dir {
        object.key("RedshiftTmpDir").string(var_1710.as_str());
    }
    if let Some(var_1711) = &input.tmp_dir_iam_role {
        object.key("TmpDirIAMRole").string(var_1711.as_str());
    }
    if let Some(var_1712) = &input.upsert_redshift_options {
        #[allow(unused_mut)]
        let mut object_1713 = object.key("UpsertRedshiftOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_upsert_redshift_target_options(&mut object_1713, var_1712)?;
        object_1713.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_catalog_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3CatalogTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1714) = &input.name {
        object.key("Name").string(var_1714.as_str());
    }
    if let Some(var_1715) = &input.inputs {
        let mut array_1716 = object.key("Inputs").start_array();
        for item_1717 in var_1715 {
             {
                array_1716.value().string(item_1717.as_str());
            }
        }
        array_1716.finish();
    }
    if let Some(var_1718) = &input.partition_keys {
        let mut array_1719 = object.key("PartitionKeys").start_array();
        for item_1720 in var_1718 {
             {
                let mut array_1721 = array_1719.value().start_array();
                for item_1722 in item_1720 {
                     {
                        array_1721.value().string(item_1722.as_str());
                    }
                }
                array_1721.finish();
            }
        }
        array_1719.finish();
    }
    if let Some(var_1723) = &input.table {
        object.key("Table").string(var_1723.as_str());
    }
    if let Some(var_1724) = &input.database {
        object.key("Database").string(var_1724.as_str());
    }
    if let Some(var_1725) = &input.schema_change_policy {
        #[allow(unused_mut)]
        let mut object_1726 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_schema_change_policy(&mut object_1726, var_1725)?;
        object_1726.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_glue_parquet_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3GlueParquetTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1727) = &input.name {
        object.key("Name").string(var_1727.as_str());
    }
    if let Some(var_1728) = &input.inputs {
        let mut array_1729 = object.key("Inputs").start_array();
        for item_1730 in var_1728 {
             {
                array_1729.value().string(item_1730.as_str());
            }
        }
        array_1729.finish();
    }
    if let Some(var_1731) = &input.partition_keys {
        let mut array_1732 = object.key("PartitionKeys").start_array();
        for item_1733 in var_1731 {
             {
                let mut array_1734 = array_1732.value().start_array();
                for item_1735 in item_1733 {
                     {
                        array_1734.value().string(item_1735.as_str());
                    }
                }
                array_1734.finish();
            }
        }
        array_1732.finish();
    }
    if let Some(var_1736) = &input.path {
        object.key("Path").string(var_1736.as_str());
    }
    if let Some(var_1737) = &input.compression {
        object.key("Compression").string(var_1737.as_str());
    }
    if let Some(var_1738) = &input.schema_change_policy {
        #[allow(unused_mut)]
        let mut object_1739 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_schema_change_policy(&mut object_1739, var_1738)?;
        object_1739.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_direct_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3DirectTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1740) = &input.name {
        object.key("Name").string(var_1740.as_str());
    }
    if let Some(var_1741) = &input.inputs {
        let mut array_1742 = object.key("Inputs").start_array();
        for item_1743 in var_1741 {
             {
                array_1742.value().string(item_1743.as_str());
            }
        }
        array_1742.finish();
    }
    if let Some(var_1744) = &input.partition_keys {
        let mut array_1745 = object.key("PartitionKeys").start_array();
        for item_1746 in var_1744 {
             {
                let mut array_1747 = array_1745.value().start_array();
                for item_1748 in item_1746 {
                     {
                        array_1747.value().string(item_1748.as_str());
                    }
                }
                array_1747.finish();
            }
        }
        array_1745.finish();
    }
    if let Some(var_1749) = &input.path {
        object.key("Path").string(var_1749.as_str());
    }
    if let Some(var_1750) = &input.compression {
        object.key("Compression").string(var_1750.as_str());
    }
    if let Some(var_1751) = &input.format {
        object.key("Format").string(var_1751.as_str());
    }
    if let Some(var_1752) = &input.schema_change_policy {
        #[allow(unused_mut)]
        let mut object_1753 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_schema_change_policy(&mut object_1753, var_1752)?;
        object_1753.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_apply_mapping(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ApplyMapping) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1754) = &input.name {
        object.key("Name").string(var_1754.as_str());
    }
    if let Some(var_1755) = &input.inputs {
        let mut array_1756 = object.key("Inputs").start_array();
        for item_1757 in var_1755 {
             {
                array_1756.value().string(item_1757.as_str());
            }
        }
        array_1756.finish();
    }
    if let Some(var_1758) = &input.mapping {
        let mut array_1759 = object.key("Mapping").start_array();
        for item_1760 in var_1758 {
             {
                #[allow(unused_mut)]
                let mut object_1761 = array_1759.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mapping(&mut object_1761, item_1760)?;
                object_1761.finish();
            }
        }
        array_1759.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_select_fields(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SelectFields) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1762) = &input.name {
        object.key("Name").string(var_1762.as_str());
    }
    if let Some(var_1763) = &input.inputs {
        let mut array_1764 = object.key("Inputs").start_array();
        for item_1765 in var_1763 {
             {
                array_1764.value().string(item_1765.as_str());
            }
        }
        array_1764.finish();
    }
    if let Some(var_1766) = &input.paths {
        let mut array_1767 = object.key("Paths").start_array();
        for item_1768 in var_1766 {
             {
                let mut array_1769 = array_1767.value().start_array();
                for item_1770 in item_1768 {
                     {
                        array_1769.value().string(item_1770.as_str());
                    }
                }
                array_1769.finish();
            }
        }
        array_1767.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drop_fields(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DropFields) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1771) = &input.name {
        object.key("Name").string(var_1771.as_str());
    }
    if let Some(var_1772) = &input.inputs {
        let mut array_1773 = object.key("Inputs").start_array();
        for item_1774 in var_1772 {
             {
                array_1773.value().string(item_1774.as_str());
            }
        }
        array_1773.finish();
    }
    if let Some(var_1775) = &input.paths {
        let mut array_1776 = object.key("Paths").start_array();
        for item_1777 in var_1775 {
             {
                let mut array_1778 = array_1776.value().start_array();
                for item_1779 in item_1777 {
                     {
                        array_1778.value().string(item_1779.as_str());
                    }
                }
                array_1778.finish();
            }
        }
        array_1776.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rename_field(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RenameField) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1780) = &input.name {
        object.key("Name").string(var_1780.as_str());
    }
    if let Some(var_1781) = &input.inputs {
        let mut array_1782 = object.key("Inputs").start_array();
        for item_1783 in var_1781 {
             {
                array_1782.value().string(item_1783.as_str());
            }
        }
        array_1782.finish();
    }
    if let Some(var_1784) = &input.source_path {
        let mut array_1785 = object.key("SourcePath").start_array();
        for item_1786 in var_1784 {
             {
                array_1785.value().string(item_1786.as_str());
            }
        }
        array_1785.finish();
    }
    if let Some(var_1787) = &input.target_path {
        let mut array_1788 = object.key("TargetPath").start_array();
        for item_1789 in var_1787 {
             {
                array_1788.value().string(item_1789.as_str());
            }
        }
        array_1788.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spigot(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Spigot) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1790) = &input.name {
        object.key("Name").string(var_1790.as_str());
    }
    if let Some(var_1791) = &input.inputs {
        let mut array_1792 = object.key("Inputs").start_array();
        for item_1793 in var_1791 {
             {
                array_1792.value().string(item_1793.as_str());
            }
        }
        array_1792.finish();
    }
    if let Some(var_1794) = &input.path {
        object.key("Path").string(var_1794.as_str());
    }
    if let Some(var_1795) = &input.topk {
        object.key("Topk").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1795).into()));
    }
    if let Some(var_1796) = &input.prob {
        object.key("Prob").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1796).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_join(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Join) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1797) = &input.name {
        object.key("Name").string(var_1797.as_str());
    }
    if let Some(var_1798) = &input.inputs {
        let mut array_1799 = object.key("Inputs").start_array();
        for item_1800 in var_1798 {
             {
                array_1799.value().string(item_1800.as_str());
            }
        }
        array_1799.finish();
    }
    if let Some(var_1801) = &input.join_type {
        object.key("JoinType").string(var_1801.as_str());
    }
    if let Some(var_1802) = &input.columns {
        let mut array_1803 = object.key("Columns").start_array();
        for item_1804 in var_1802 {
             {
                #[allow(unused_mut)]
                let mut object_1805 = array_1803.value().start_object();
                crate::json_ser::serialize_structure_crate_model_join_column(&mut object_1805, item_1804)?;
                object_1805.finish();
            }
        }
        array_1803.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_split_fields(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SplitFields) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1806) = &input.name {
        object.key("Name").string(var_1806.as_str());
    }
    if let Some(var_1807) = &input.inputs {
        let mut array_1808 = object.key("Inputs").start_array();
        for item_1809 in var_1807 {
             {
                array_1808.value().string(item_1809.as_str());
            }
        }
        array_1808.finish();
    }
    if let Some(var_1810) = &input.paths {
        let mut array_1811 = object.key("Paths").start_array();
        for item_1812 in var_1810 {
             {
                let mut array_1813 = array_1811.value().start_array();
                for item_1814 in item_1812 {
                     {
                        array_1813.value().string(item_1814.as_str());
                    }
                }
                array_1813.finish();
            }
        }
        array_1811.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_select_from_collection(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SelectFromCollection) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1815) = &input.name {
        object.key("Name").string(var_1815.as_str());
    }
    if let Some(var_1816) = &input.inputs {
        let mut array_1817 = object.key("Inputs").start_array();
        for item_1818 in var_1816 {
             {
                array_1817.value().string(item_1818.as_str());
            }
        }
        array_1817.finish();
    }
     {
        object.key("Index").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.index).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fill_missing_values(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FillMissingValues) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1819) = &input.name {
        object.key("Name").string(var_1819.as_str());
    }
    if let Some(var_1820) = &input.inputs {
        let mut array_1821 = object.key("Inputs").start_array();
        for item_1822 in var_1820 {
             {
                array_1821.value().string(item_1822.as_str());
            }
        }
        array_1821.finish();
    }
    if let Some(var_1823) = &input.imputed_path {
        object.key("ImputedPath").string(var_1823.as_str());
    }
    if let Some(var_1824) = &input.filled_path {
        object.key("FilledPath").string(var_1824.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Filter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1825) = &input.name {
        object.key("Name").string(var_1825.as_str());
    }
    if let Some(var_1826) = &input.inputs {
        let mut array_1827 = object.key("Inputs").start_array();
        for item_1828 in var_1826 {
             {
                array_1827.value().string(item_1828.as_str());
            }
        }
        array_1827.finish();
    }
    if let Some(var_1829) = &input.logical_operator {
        object.key("LogicalOperator").string(var_1829.as_str());
    }
    if let Some(var_1830) = &input.filters {
        let mut array_1831 = object.key("Filters").start_array();
        for item_1832 in var_1830 {
             {
                #[allow(unused_mut)]
                let mut object_1833 = array_1831.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter_expression(&mut object_1833, item_1832)?;
                object_1833.finish();
            }
        }
        array_1831.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_code(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CustomCode) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1834) = &input.name {
        object.key("Name").string(var_1834.as_str());
    }
    if let Some(var_1835) = &input.inputs {
        let mut array_1836 = object.key("Inputs").start_array();
        for item_1837 in var_1835 {
             {
                array_1836.value().string(item_1837.as_str());
            }
        }
        array_1836.finish();
    }
    if let Some(var_1838) = &input.code {
        object.key("Code").string(var_1838.as_str());
    }
    if let Some(var_1839) = &input.class_name {
        object.key("ClassName").string(var_1839.as_str());
    }
    if let Some(var_1840) = &input.output_schemas {
        let mut array_1841 = object.key("OutputSchemas").start_array();
        for item_1842 in var_1840 {
             {
                #[allow(unused_mut)]
                let mut object_1843 = array_1841.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1843, item_1842)?;
                object_1843.finish();
            }
        }
        array_1841.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spark_sql(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SparkSql) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1844) = &input.name {
        object.key("Name").string(var_1844.as_str());
    }
    if let Some(var_1845) = &input.inputs {
        let mut array_1846 = object.key("Inputs").start_array();
        for item_1847 in var_1845 {
             {
                array_1846.value().string(item_1847.as_str());
            }
        }
        array_1846.finish();
    }
    if let Some(var_1848) = &input.sql_query {
        object.key("SqlQuery").string(var_1848.as_str());
    }
    if let Some(var_1849) = &input.sql_aliases {
        let mut array_1850 = object.key("SqlAliases").start_array();
        for item_1851 in var_1849 {
             {
                #[allow(unused_mut)]
                let mut object_1852 = array_1850.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sql_alias(&mut object_1852, item_1851)?;
                object_1852.finish();
            }
        }
        array_1850.finish();
    }
    if let Some(var_1853) = &input.output_schemas {
        let mut array_1854 = object.key("OutputSchemas").start_array();
        for item_1855 in var_1853 {
             {
                #[allow(unused_mut)]
                let mut object_1856 = array_1854.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1856, item_1855)?;
                object_1856.finish();
            }
        }
        array_1854.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_direct_kinesis_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DirectKinesisSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1857) = &input.name {
        object.key("Name").string(var_1857.as_str());
    }
    if let Some(var_1858) = &input.window_size {
        object.key("WindowSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1858).into()));
    }
    if let Some(var_1859) = &input.detect_schema {
        object.key("DetectSchema").boolean(*var_1859);
    }
    if let Some(var_1860) = &input.streaming_options {
        #[allow(unused_mut)]
        let mut object_1861 = object.key("StreamingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_streaming_source_options(&mut object_1861, var_1860)?;
        object_1861.finish();
    }
    if let Some(var_1862) = &input.data_preview_options {
        #[allow(unused_mut)]
        let mut object_1863 = object.key("DataPreviewOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_streaming_data_preview_options(&mut object_1863, var_1862)?;
        object_1863.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_direct_kafka_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DirectKafkaSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1864) = &input.name {
        object.key("Name").string(var_1864.as_str());
    }
    if let Some(var_1865) = &input.streaming_options {
        #[allow(unused_mut)]
        let mut object_1866 = object.key("StreamingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_kafka_streaming_source_options(&mut object_1866, var_1865)?;
        object_1866.finish();
    }
    if let Some(var_1867) = &input.window_size {
        object.key("WindowSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1867).into()));
    }
    if let Some(var_1868) = &input.detect_schema {
        object.key("DetectSchema").boolean(*var_1868);
    }
    if let Some(var_1869) = &input.data_preview_options {
        #[allow(unused_mut)]
        let mut object_1870 = object.key("DataPreviewOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_streaming_data_preview_options(&mut object_1870, var_1869)?;
        object_1870.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_kinesis_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CatalogKinesisSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1871) = &input.name {
        object.key("Name").string(var_1871.as_str());
    }
    if let Some(var_1872) = &input.window_size {
        object.key("WindowSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1872).into()));
    }
    if let Some(var_1873) = &input.detect_schema {
        object.key("DetectSchema").boolean(*var_1873);
    }
    if let Some(var_1874) = &input.table {
        object.key("Table").string(var_1874.as_str());
    }
    if let Some(var_1875) = &input.database {
        object.key("Database").string(var_1875.as_str());
    }
    if let Some(var_1876) = &input.streaming_options {
        #[allow(unused_mut)]
        let mut object_1877 = object.key("StreamingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_streaming_source_options(&mut object_1877, var_1876)?;
        object_1877.finish();
    }
    if let Some(var_1878) = &input.data_preview_options {
        #[allow(unused_mut)]
        let mut object_1879 = object.key("DataPreviewOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_streaming_data_preview_options(&mut object_1879, var_1878)?;
        object_1879.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_kafka_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CatalogKafkaSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1880) = &input.name {
        object.key("Name").string(var_1880.as_str());
    }
    if let Some(var_1881) = &input.window_size {
        object.key("WindowSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1881).into()));
    }
    if let Some(var_1882) = &input.detect_schema {
        object.key("DetectSchema").boolean(*var_1882);
    }
    if let Some(var_1883) = &input.table {
        object.key("Table").string(var_1883.as_str());
    }
    if let Some(var_1884) = &input.database {
        object.key("Database").string(var_1884.as_str());
    }
    if let Some(var_1885) = &input.streaming_options {
        #[allow(unused_mut)]
        let mut object_1886 = object.key("StreamingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_kafka_streaming_source_options(&mut object_1886, var_1885)?;
        object_1886.finish();
    }
    if let Some(var_1887) = &input.data_preview_options {
        #[allow(unused_mut)]
        let mut object_1888 = object.key("DataPreviewOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_streaming_data_preview_options(&mut object_1888, var_1887)?;
        object_1888.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drop_null_fields(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DropNullFields) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1889) = &input.name {
        object.key("Name").string(var_1889.as_str());
    }
    if let Some(var_1890) = &input.inputs {
        let mut array_1891 = object.key("Inputs").start_array();
        for item_1892 in var_1890 {
             {
                array_1891.value().string(item_1892.as_str());
            }
        }
        array_1891.finish();
    }
    if let Some(var_1893) = &input.null_check_box_list {
        #[allow(unused_mut)]
        let mut object_1894 = object.key("NullCheckBoxList").start_object();
        crate::json_ser::serialize_structure_crate_model_null_check_box_list(&mut object_1894, var_1893)?;
        object_1894.finish();
    }
    if let Some(var_1895) = &input.null_text_list {
        let mut array_1896 = object.key("NullTextList").start_array();
        for item_1897 in var_1895 {
             {
                #[allow(unused_mut)]
                let mut object_1898 = array_1896.value().start_object();
                crate::json_ser::serialize_structure_crate_model_null_value_field(&mut object_1898, item_1897)?;
                object_1898.finish();
            }
        }
        array_1896.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_merge(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Merge) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1899) = &input.name {
        object.key("Name").string(var_1899.as_str());
    }
    if let Some(var_1900) = &input.inputs {
        let mut array_1901 = object.key("Inputs").start_array();
        for item_1902 in var_1900 {
             {
                array_1901.value().string(item_1902.as_str());
            }
        }
        array_1901.finish();
    }
    if let Some(var_1903) = &input.source {
        object.key("Source").string(var_1903.as_str());
    }
    if let Some(var_1904) = &input.primary_keys {
        let mut array_1905 = object.key("PrimaryKeys").start_array();
        for item_1906 in var_1904 {
             {
                let mut array_1907 = array_1905.value().start_array();
                for item_1908 in item_1906 {
                     {
                        array_1907.value().string(item_1908.as_str());
                    }
                }
                array_1907.finish();
            }
        }
        array_1905.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_union(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Union) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1909) = &input.name {
        object.key("Name").string(var_1909.as_str());
    }
    if let Some(var_1910) = &input.inputs {
        let mut array_1911 = object.key("Inputs").start_array();
        for item_1912 in var_1910 {
             {
                array_1911.value().string(item_1912.as_str());
            }
        }
        array_1911.finish();
    }
    if let Some(var_1913) = &input.union_type {
        object.key("UnionType").string(var_1913.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_pii_detection(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PiiDetection) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1914) = &input.name {
        object.key("Name").string(var_1914.as_str());
    }
    if let Some(var_1915) = &input.inputs {
        let mut array_1916 = object.key("Inputs").start_array();
        for item_1917 in var_1915 {
             {
                array_1916.value().string(item_1917.as_str());
            }
        }
        array_1916.finish();
    }
    if let Some(var_1918) = &input.pii_type {
        object.key("PiiType").string(var_1918.as_str());
    }
    if let Some(var_1919) = &input.entity_types_to_detect {
        let mut array_1920 = object.key("EntityTypesToDetect").start_array();
        for item_1921 in var_1919 {
             {
                array_1920.value().string(item_1921.as_str());
            }
        }
        array_1920.finish();
    }
    if let Some(var_1922) = &input.output_column_name {
        object.key("OutputColumnName").string(var_1922.as_str());
    }
    if let Some(var_1923) = &input.sample_fraction {
        object.key("SampleFraction").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1923).into()));
    }
    if let Some(var_1924) = &input.threshold_fraction {
        object.key("ThresholdFraction").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1924).into()));
    }
    if let Some(var_1925) = &input.mask_value {
        object.key("MaskValue").string(var_1925.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregate(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Aggregate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1926) = &input.name {
        object.key("Name").string(var_1926.as_str());
    }
    if let Some(var_1927) = &input.inputs {
        let mut array_1928 = object.key("Inputs").start_array();
        for item_1929 in var_1927 {
             {
                array_1928.value().string(item_1929.as_str());
            }
        }
        array_1928.finish();
    }
    if let Some(var_1930) = &input.groups {
        let mut array_1931 = object.key("Groups").start_array();
        for item_1932 in var_1930 {
             {
                let mut array_1933 = array_1931.value().start_array();
                for item_1934 in item_1932 {
                     {
                        array_1933.value().string(item_1934.as_str());
                    }
                }
                array_1933.finish();
            }
        }
        array_1931.finish();
    }
    if let Some(var_1935) = &input.aggs {
        let mut array_1936 = object.key("Aggs").start_array();
        for item_1937 in var_1935 {
             {
                #[allow(unused_mut)]
                let mut object_1938 = array_1936.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aggregate_operation(&mut object_1938, item_1937)?;
                object_1938.finish();
            }
        }
        array_1936.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drop_duplicates(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DropDuplicates) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1939) = &input.name {
        object.key("Name").string(var_1939.as_str());
    }
    if let Some(var_1940) = &input.inputs {
        let mut array_1941 = object.key("Inputs").start_array();
        for item_1942 in var_1940 {
             {
                array_1941.value().string(item_1942.as_str());
            }
        }
        array_1941.finish();
    }
    if let Some(var_1943) = &input.columns {
        let mut array_1944 = object.key("Columns").start_array();
        for item_1945 in var_1943 {
             {
                let mut array_1946 = array_1944.value().start_array();
                for item_1947 in item_1945 {
                     {
                        array_1946.value().string(item_1947.as_str());
                    }
                }
                array_1946.finish();
            }
        }
        array_1944.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_governed_catalog_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::GovernedCatalogTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1948) = &input.name {
        object.key("Name").string(var_1948.as_str());
    }
    if let Some(var_1949) = &input.inputs {
        let mut array_1950 = object.key("Inputs").start_array();
        for item_1951 in var_1949 {
             {
                array_1950.value().string(item_1951.as_str());
            }
        }
        array_1950.finish();
    }
    if let Some(var_1952) = &input.partition_keys {
        let mut array_1953 = object.key("PartitionKeys").start_array();
        for item_1954 in var_1952 {
             {
                let mut array_1955 = array_1953.value().start_array();
                for item_1956 in item_1954 {
                     {
                        array_1955.value().string(item_1956.as_str());
                    }
                }
                array_1955.finish();
            }
        }
        array_1953.finish();
    }
    if let Some(var_1957) = &input.table {
        object.key("Table").string(var_1957.as_str());
    }
    if let Some(var_1958) = &input.database {
        object.key("Database").string(var_1958.as_str());
    }
    if let Some(var_1959) = &input.schema_change_policy {
        #[allow(unused_mut)]
        let mut object_1960 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_schema_change_policy(&mut object_1960, var_1959)?;
        object_1960.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_governed_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::GovernedCatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1961) = &input.name {
        object.key("Name").string(var_1961.as_str());
    }
    if let Some(var_1962) = &input.database {
        object.key("Database").string(var_1962.as_str());
    }
    if let Some(var_1963) = &input.table {
        object.key("Table").string(var_1963.as_str());
    }
    if let Some(var_1964) = &input.partition_predicate {
        object.key("PartitionPredicate").string(var_1964.as_str());
    }
    if let Some(var_1965) = &input.additional_options {
        #[allow(unused_mut)]
        let mut object_1966 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_source_additional_options(&mut object_1966, var_1965)?;
        object_1966.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_microsoft_sql_server_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MicrosoftSqlServerCatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1967) = &input.name {
        object.key("Name").string(var_1967.as_str());
    }
    if let Some(var_1968) = &input.database {
        object.key("Database").string(var_1968.as_str());
    }
    if let Some(var_1969) = &input.table {
        object.key("Table").string(var_1969.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_my_sql_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MySqlCatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1970) = &input.name {
        object.key("Name").string(var_1970.as_str());
    }
    if let Some(var_1971) = &input.database {
        object.key("Database").string(var_1971.as_str());
    }
    if let Some(var_1972) = &input.table {
        object.key("Table").string(var_1972.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oracle_sql_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OracleSqlCatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1973) = &input.name {
        object.key("Name").string(var_1973.as_str());
    }
    if let Some(var_1974) = &input.database {
        object.key("Database").string(var_1974.as_str());
    }
    if let Some(var_1975) = &input.table {
        object.key("Table").string(var_1975.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_postgre_sql_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PostgreSqlCatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1976) = &input.name {
        object.key("Name").string(var_1976.as_str());
    }
    if let Some(var_1977) = &input.database {
        object.key("Database").string(var_1977.as_str());
    }
    if let Some(var_1978) = &input.table {
        object.key("Table").string(var_1978.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_microsoft_sql_server_catalog_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MicrosoftSqlServerCatalogTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1979) = &input.name {
        object.key("Name").string(var_1979.as_str());
    }
    if let Some(var_1980) = &input.inputs {
        let mut array_1981 = object.key("Inputs").start_array();
        for item_1982 in var_1980 {
             {
                array_1981.value().string(item_1982.as_str());
            }
        }
        array_1981.finish();
    }
    if let Some(var_1983) = &input.database {
        object.key("Database").string(var_1983.as_str());
    }
    if let Some(var_1984) = &input.table {
        object.key("Table").string(var_1984.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_my_sql_catalog_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MySqlCatalogTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1985) = &input.name {
        object.key("Name").string(var_1985.as_str());
    }
    if let Some(var_1986) = &input.inputs {
        let mut array_1987 = object.key("Inputs").start_array();
        for item_1988 in var_1986 {
             {
                array_1987.value().string(item_1988.as_str());
            }
        }
        array_1987.finish();
    }
    if let Some(var_1989) = &input.database {
        object.key("Database").string(var_1989.as_str());
    }
    if let Some(var_1990) = &input.table {
        object.key("Table").string(var_1990.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oracle_sql_catalog_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OracleSqlCatalogTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1991) = &input.name {
        object.key("Name").string(var_1991.as_str());
    }
    if let Some(var_1992) = &input.inputs {
        let mut array_1993 = object.key("Inputs").start_array();
        for item_1994 in var_1992 {
             {
                array_1993.value().string(item_1994.as_str());
            }
        }
        array_1993.finish();
    }
    if let Some(var_1995) = &input.database {
        object.key("Database").string(var_1995.as_str());
    }
    if let Some(var_1996) = &input.table {
        object.key("Table").string(var_1996.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_postgre_sql_catalog_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PostgreSqlCatalogTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1997) = &input.name {
        object.key("Name").string(var_1997.as_str());
    }
    if let Some(var_1998) = &input.inputs {
        let mut array_1999 = object.key("Inputs").start_array();
        for item_2000 in var_1998 {
             {
                array_1999.value().string(item_2000.as_str());
            }
        }
        array_1999.finish();
    }
    if let Some(var_2001) = &input.database {
        object.key("Database").string(var_2001.as_str());
    }
    if let Some(var_2002) = &input.table {
        object.key("Table").string(var_2002.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamic_transform(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DynamicTransform) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2003) = &input.name {
        object.key("Name").string(var_2003.as_str());
    }
    if let Some(var_2004) = &input.transform_name {
        object.key("TransformName").string(var_2004.as_str());
    }
    if let Some(var_2005) = &input.inputs {
        let mut array_2006 = object.key("Inputs").start_array();
        for item_2007 in var_2005 {
             {
                array_2006.value().string(item_2007.as_str());
            }
        }
        array_2006.finish();
    }
    if let Some(var_2008) = &input.parameters {
        let mut array_2009 = object.key("Parameters").start_array();
        for item_2010 in var_2008 {
             {
                #[allow(unused_mut)]
                let mut object_2011 = array_2009.value().start_object();
                crate::json_ser::serialize_structure_crate_model_transform_config_parameter(&mut object_2011, item_2010)?;
                object_2011.finish();
            }
        }
        array_2009.finish();
    }
    if let Some(var_2012) = &input.function_name {
        object.key("FunctionName").string(var_2012.as_str());
    }
    if let Some(var_2013) = &input.path {
        object.key("Path").string(var_2013.as_str());
    }
    if let Some(var_2014) = &input.version {
        object.key("Version").string(var_2014.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_evaluate_data_quality(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EvaluateDataQuality) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2015) = &input.name {
        object.key("Name").string(var_2015.as_str());
    }
    if let Some(var_2016) = &input.inputs {
        let mut array_2017 = object.key("Inputs").start_array();
        for item_2018 in var_2016 {
             {
                array_2017.value().string(item_2018.as_str());
            }
        }
        array_2017.finish();
    }
    if let Some(var_2019) = &input.ruleset {
        object.key("Ruleset").string(var_2019.as_str());
    }
    if let Some(var_2020) = &input.output {
        object.key("Output").string(var_2020.as_str());
    }
    if let Some(var_2021) = &input.publishing_options {
        #[allow(unused_mut)]
        let mut object_2022 = object.key("PublishingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_dq_results_publishing_options(&mut object_2022, var_2021)?;
        object_2022.finish();
    }
    if let Some(var_2023) = &input.stop_job_on_failure_options {
        #[allow(unused_mut)]
        let mut object_2024 = object.key("StopJobOnFailureOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_dq_stop_job_on_failure_options(&mut object_2024, var_2023)?;
        object_2024.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_find_matches_parameters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FindMatchesParameters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2025) = &input.primary_key_column_name {
        object.key("PrimaryKeyColumnName").string(var_2025.as_str());
    }
    if let Some(var_2026) = &input.precision_recall_tradeoff {
        object.key("PrecisionRecallTradeoff").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_2026).into()));
    }
    if let Some(var_2027) = &input.accuracy_cost_tradeoff {
        object.key("AccuracyCostTradeoff").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_2027).into()));
    }
    if let Some(var_2028) = &input.enforce_provided_labels {
        object.key("EnforceProvidedLabels").boolean(*var_2028);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ml_user_data_encryption(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MlUserDataEncryption) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2029) = &input.ml_user_data_encryption_mode {
        object.key("MlUserDataEncryptionMode").string(var_2029.as_str());
    }
    if let Some(var_2030) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2030.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node_arg(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CodeGenNodeArg) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2031) = &input.name {
        object.key("Name").string(var_2031.as_str());
    }
    if let Some(var_2032) = &input.value {
        object.key("Value").string(var_2032.as_str());
    }
    if input.param {
        object.key("Param").boolean(input.param);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_encryption(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3Encryption) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2033) = &input.s3_encryption_mode {
        object.key("S3EncryptionMode").string(var_2033.as_str());
    }
    if let Some(var_2034) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_2034.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_encryption(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CloudWatchEncryption) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2035) = &input.cloud_watch_encryption_mode {
        object.key("CloudWatchEncryptionMode").string(var_2035.as_str());
    }
    if let Some(var_2036) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_2036.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_bookmarks_encryption(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JobBookmarksEncryption) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2037) = &input.job_bookmarks_encryption_mode {
        object.key("JobBookmarksEncryptionMode").string(var_2037.as_str());
    }
    if let Some(var_2038) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_2038.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Column) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2039) = &input.name {
        object.key("Name").string(var_2039.as_str());
    }
    if let Some(var_2040) = &input.r#type {
        object.key("Type").string(var_2040.as_str());
    }
    if let Some(var_2041) = &input.comment {
        object.key("Comment").string(var_2041.as_str());
    }
    if let Some(var_2042) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_2043 = object.key("Parameters").start_object();
        for (key_2044, value_2045) in var_2042 {
             {
                object_2043.key(key_2044.as_str()).string(value_2045.as_str());
            }
        }
        object_2043.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_identifier(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TableIdentifier) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2046) = &input.catalog_id {
        object.key("CatalogId").string(var_2046.as_str());
    }
    if let Some(var_2047) = &input.database_name {
        object.key("DatabaseName").string(var_2047.as_str());
    }
    if let Some(var_2048) = &input.name {
        object.key("Name").string(var_2048.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_condition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Condition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2049) = &input.logical_operator {
        object.key("LogicalOperator").string(var_2049.as_str());
    }
    if let Some(var_2050) = &input.job_name {
        object.key("JobName").string(var_2050.as_str());
    }
    if let Some(var_2051) = &input.state {
        object.key("State").string(var_2051.as_str());
    }
    if let Some(var_2052) = &input.crawler_name {
        object.key("CrawlerName").string(var_2052.as_str());
    }
    if let Some(var_2053) = &input.crawl_state {
        object.key("CrawlState").string(var_2053.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_uri(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ResourceUri) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2054) = &input.resource_type {
        object.key("ResourceType").string(var_2054.as_str());
    }
    if let Some(var_2055) = &input.uri {
        object.key("Uri").string(var_2055.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_column(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SchemaColumn) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2056) = &input.name {
        object.key("Name").string(var_2056.as_str());
    }
    if let Some(var_2057) = &input.data_type {
        object.key("DataType").string(var_2057.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_at_rest(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EncryptionAtRest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2058) = &input.catalog_encryption_mode {
        object.key("CatalogEncryptionMode").string(var_2058.as_str());
    }
    if let Some(var_2059) = &input.sse_aws_kms_key_id {
        object.key("SseAwsKmsKeyId").string(var_2059.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_password_encryption(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ConnectionPasswordEncryption) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("ReturnConnectionPasswordEncrypted").boolean(input.return_connection_password_encrypted);
    }
    if let Some(var_2060) = &input.aws_kms_key_id {
        object.key("AwsKmsKeyId").string(var_2060.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics_data(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ColumnStatisticsData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2061) = &input.r#type {
        object.key("Type").string(var_2061.as_str());
    }
    if let Some(var_2062) = &input.boolean_column_statistics_data {
        #[allow(unused_mut)]
        let mut object_2063 = object.key("BooleanColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_boolean_column_statistics_data(&mut object_2063, var_2062)?;
        object_2063.finish();
    }
    if let Some(var_2064) = &input.date_column_statistics_data {
        #[allow(unused_mut)]
        let mut object_2065 = object.key("DateColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_date_column_statistics_data(&mut object_2065, var_2064)?;
        object_2065.finish();
    }
    if let Some(var_2066) = &input.decimal_column_statistics_data {
        #[allow(unused_mut)]
        let mut object_2067 = object.key("DecimalColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_column_statistics_data(&mut object_2067, var_2066)?;
        object_2067.finish();
    }
    if let Some(var_2068) = &input.double_column_statistics_data {
        #[allow(unused_mut)]
        let mut object_2069 = object.key("DoubleColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_double_column_statistics_data(&mut object_2069, var_2068)?;
        object_2069.finish();
    }
    if let Some(var_2070) = &input.long_column_statistics_data {
        #[allow(unused_mut)]
        let mut object_2071 = object.key("LongColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_long_column_statistics_data(&mut object_2071, var_2070)?;
        object_2071.finish();
    }
    if let Some(var_2072) = &input.string_column_statistics_data {
        #[allow(unused_mut)]
        let mut object_2073 = object.key("StringColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_string_column_statistics_data(&mut object_2073, var_2072)?;
        object_2073.finish();
    }
    if let Some(var_2074) = &input.binary_column_statistics_data {
        #[allow(unused_mut)]
        let mut object_2075 = object.key("BinaryColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_binary_column_statistics_data(&mut object_2075, var_2074)?;
        object_2075.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ser_de_info(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SerDeInfo) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2076) = &input.name {
        object.key("Name").string(var_2076.as_str());
    }
    if let Some(var_2077) = &input.serialization_library {
        object.key("SerializationLibrary").string(var_2077.as_str());
    }
    if let Some(var_2078) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_2079 = object.key("Parameters").start_object();
        for (key_2080, value_2081) in var_2078 {
             {
                object_2079.key(key_2080.as_str()).string(value_2081.as_str());
            }
        }
        object_2079.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_order(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Order) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2082) = &input.column {
        object.key("Column").string(var_2082.as_str());
    }
     {
        object.key("SortOrder").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.sort_order).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_skewed_info(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SkewedInfo) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2083) = &input.skewed_column_names {
        let mut array_2084 = object.key("SkewedColumnNames").start_array();
        for item_2085 in var_2083 {
             {
                array_2084.value().string(item_2085.as_str());
            }
        }
        array_2084.finish();
    }
    if let Some(var_2086) = &input.skewed_column_values {
        let mut array_2087 = object.key("SkewedColumnValues").start_array();
        for item_2088 in var_2086 {
             {
                array_2087.value().string(item_2088.as_str());
            }
        }
        array_2087.finish();
    }
    if let Some(var_2089) = &input.skewed_column_value_location_maps {
        #[allow(unused_mut)]
        let mut object_2090 = object.key("SkewedColumnValueLocationMaps").start_object();
        for (key_2091, value_2092) in var_2089 {
             {
                object_2090.key(key_2091.as_str()).string(value_2092.as_str());
            }
        }
        object_2090.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_reference(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SchemaReference) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2093) = &input.schema_id {
        #[allow(unused_mut)]
        let mut object_2094 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_2094, var_2093)?;
        object_2094.finish();
    }
    if let Some(var_2095) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_2095.as_str());
    }
    if let Some(var_2096) = &input.schema_version_number {
        object.key("SchemaVersionNumber").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2096).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_lake_principal(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataLakePrincipal) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2097) = &input.data_lake_principal_identifier {
        object.key("DataLakePrincipalIdentifier").string(var_2097.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_glue_schema(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::GlueSchema) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2098) = &input.columns {
        let mut array_2099 = object.key("Columns").start_array();
        for item_2100 in var_2098 {
             {
                #[allow(unused_mut)]
                let mut object_2101 = array_2099.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_studio_schema_column(&mut object_2101, item_2100)?;
                object_2101.finish();
            }
        }
        array_2099.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_connector_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JdbcConnectorOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2102) = &input.filter_predicate {
        object.key("FilterPredicate").string(var_2102.as_str());
    }
    if let Some(var_2103) = &input.partition_column {
        object.key("PartitionColumn").string(var_2103.as_str());
    }
    if let Some(var_2104) = &input.lower_bound {
        object.key("LowerBound").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2104).into()));
    }
    if let Some(var_2105) = &input.upper_bound {
        object.key("UpperBound").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2105).into()));
    }
    if let Some(var_2106) = &input.num_partitions {
        object.key("NumPartitions").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2106).into()));
    }
    if let Some(var_2107) = &input.job_bookmark_keys {
        let mut array_2108 = object.key("JobBookmarkKeys").start_array();
        for item_2109 in var_2107 {
             {
                array_2108.value().string(item_2109.as_str());
            }
        }
        array_2108.finish();
    }
    if let Some(var_2110) = &input.job_bookmark_keys_sort_order {
        object.key("JobBookmarkKeysSortOrder").string(var_2110.as_str());
    }
    if let Some(var_2111) = &input.data_type_mapping {
        #[allow(unused_mut)]
        let mut object_2112 = object.key("DataTypeMapping").start_object();
        for (key_2113, value_2114) in var_2111 {
             {
                object_2112.key(key_2113.as_str()).string(value_2114.as_str());
            }
        }
        object_2112.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_source_additional_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3SourceAdditionalOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2115) = &input.bounded_size {
        object.key("BoundedSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2115).into()));
    }
    if let Some(var_2116) = &input.bounded_files {
        object.key("BoundedFiles").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2116).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_direct_source_additional_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3DirectSourceAdditionalOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2117) = &input.bounded_size {
        object.key("BoundedSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2117).into()));
    }
    if let Some(var_2118) = &input.bounded_files {
        object.key("BoundedFiles").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2118).into()));
    }
    if let Some(var_2119) = &input.enable_sample_path {
        object.key("EnableSamplePath").boolean(*var_2119);
    }
    if let Some(var_2120) = &input.sample_path {
        object.key("SamplePath").string(var_2120.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_upsert_redshift_target_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpsertRedshiftTargetOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2121) = &input.table_location {
        object.key("TableLocation").string(var_2121.as_str());
    }
    if let Some(var_2122) = &input.connection_name {
        object.key("ConnectionName").string(var_2122.as_str());
    }
    if let Some(var_2123) = &input.upsert_keys {
        let mut array_2124 = object.key("UpsertKeys").start_array();
        for item_2125 in var_2123 {
             {
                array_2124.value().string(item_2125.as_str());
            }
        }
        array_2124.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_schema_change_policy(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CatalogSchemaChangePolicy) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2126) = &input.enable_update_catalog {
        object.key("EnableUpdateCatalog").boolean(*var_2126);
    }
    if let Some(var_2127) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_2127.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_direct_schema_change_policy(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DirectSchemaChangePolicy) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2128) = &input.enable_update_catalog {
        object.key("EnableUpdateCatalog").boolean(*var_2128);
    }
    if let Some(var_2129) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_2129.as_str());
    }
    if let Some(var_2130) = &input.table {
        object.key("Table").string(var_2130.as_str());
    }
    if let Some(var_2131) = &input.database {
        object.key("Database").string(var_2131.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mapping(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Mapping) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2132) = &input.to_key {
        object.key("ToKey").string(var_2132.as_str());
    }
    if let Some(var_2133) = &input.from_path {
        let mut array_2134 = object.key("FromPath").start_array();
        for item_2135 in var_2133 {
             {
                array_2134.value().string(item_2135.as_str());
            }
        }
        array_2134.finish();
    }
    if let Some(var_2136) = &input.from_type {
        object.key("FromType").string(var_2136.as_str());
    }
    if let Some(var_2137) = &input.to_type {
        object.key("ToType").string(var_2137.as_str());
    }
    if let Some(var_2138) = &input.dropped {
        object.key("Dropped").boolean(*var_2138);
    }
    if let Some(var_2139) = &input.children {
        let mut array_2140 = object.key("Children").start_array();
        for item_2141 in var_2139 {
             {
                #[allow(unused_mut)]
                let mut object_2142 = array_2140.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mapping(&mut object_2142, item_2141)?;
                object_2142.finish();
            }
        }
        array_2140.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_join_column(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JoinColumn) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2143) = &input.from {
        object.key("From").string(var_2143.as_str());
    }
    if let Some(var_2144) = &input.keys {
        let mut array_2145 = object.key("Keys").start_array();
        for item_2146 in var_2144 {
             {
                let mut array_2147 = array_2145.value().start_array();
                for item_2148 in item_2146 {
                     {
                        array_2147.value().string(item_2148.as_str());
                    }
                }
                array_2147.finish();
            }
        }
        array_2145.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter_expression(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FilterExpression) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2149) = &input.operation {
        object.key("Operation").string(var_2149.as_str());
    }
    if let Some(var_2150) = &input.negated {
        object.key("Negated").boolean(*var_2150);
    }
    if let Some(var_2151) = &input.values {
        let mut array_2152 = object.key("Values").start_array();
        for item_2153 in var_2151 {
             {
                #[allow(unused_mut)]
                let mut object_2154 = array_2152.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter_value(&mut object_2154, item_2153)?;
                object_2154.finish();
            }
        }
        array_2152.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sql_alias(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SqlAlias) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2155) = &input.from {
        object.key("From").string(var_2155.as_str());
    }
    if let Some(var_2156) = &input.alias {
        object.key("Alias").string(var_2156.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_streaming_source_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::KinesisStreamingSourceOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2157) = &input.endpoint_url {
        object.key("EndpointUrl").string(var_2157.as_str());
    }
    if let Some(var_2158) = &input.stream_name {
        object.key("StreamName").string(var_2158.as_str());
    }
    if let Some(var_2159) = &input.classification {
        object.key("Classification").string(var_2159.as_str());
    }
    if let Some(var_2160) = &input.delimiter {
        object.key("Delimiter").string(var_2160.as_str());
    }
    if let Some(var_2161) = &input.starting_position {
        object.key("StartingPosition").string(var_2161.as_str());
    }
    if let Some(var_2162) = &input.max_fetch_time_in_ms {
        object.key("MaxFetchTimeInMs").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2162).into()));
    }
    if let Some(var_2163) = &input.max_fetch_records_per_shard {
        object.key("MaxFetchRecordsPerShard").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2163).into()));
    }
    if let Some(var_2164) = &input.max_record_per_read {
        object.key("MaxRecordPerRead").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2164).into()));
    }
    if let Some(var_2165) = &input.add_idle_time_between_reads {
        object.key("AddIdleTimeBetweenReads").boolean(*var_2165);
    }
    if let Some(var_2166) = &input.idle_time_between_reads_in_ms {
        object.key("IdleTimeBetweenReadsInMs").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2166).into()));
    }
    if let Some(var_2167) = &input.describe_shard_interval {
        object.key("DescribeShardInterval").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2167).into()));
    }
    if let Some(var_2168) = &input.num_retries {
        object.key("NumRetries").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2168).into()));
    }
    if let Some(var_2169) = &input.retry_interval_ms {
        object.key("RetryIntervalMs").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2169).into()));
    }
    if let Some(var_2170) = &input.max_retry_interval_ms {
        object.key("MaxRetryIntervalMs").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2170).into()));
    }
    if let Some(var_2171) = &input.avoid_empty_batches {
        object.key("AvoidEmptyBatches").boolean(*var_2171);
    }
    if let Some(var_2172) = &input.stream_arn {
        object.key("StreamArn").string(var_2172.as_str());
    }
    if let Some(var_2173) = &input.role_arn {
        object.key("RoleArn").string(var_2173.as_str());
    }
    if let Some(var_2174) = &input.role_session_name {
        object.key("RoleSessionName").string(var_2174.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_streaming_data_preview_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StreamingDataPreviewOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2175) = &input.polling_time {
        object.key("PollingTime").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2175).into()));
    }
    if let Some(var_2176) = &input.record_polling_limit {
        object.key("RecordPollingLimit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2176).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kafka_streaming_source_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::KafkaStreamingSourceOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2177) = &input.bootstrap_servers {
        object.key("BootstrapServers").string(var_2177.as_str());
    }
    if let Some(var_2178) = &input.security_protocol {
        object.key("SecurityProtocol").string(var_2178.as_str());
    }
    if let Some(var_2179) = &input.connection_name {
        object.key("ConnectionName").string(var_2179.as_str());
    }
    if let Some(var_2180) = &input.topic_name {
        object.key("TopicName").string(var_2180.as_str());
    }
    if let Some(var_2181) = &input.assign {
        object.key("Assign").string(var_2181.as_str());
    }
    if let Some(var_2182) = &input.subscribe_pattern {
        object.key("SubscribePattern").string(var_2182.as_str());
    }
    if let Some(var_2183) = &input.classification {
        object.key("Classification").string(var_2183.as_str());
    }
    if let Some(var_2184) = &input.delimiter {
        object.key("Delimiter").string(var_2184.as_str());
    }
    if let Some(var_2185) = &input.starting_offsets {
        object.key("StartingOffsets").string(var_2185.as_str());
    }
    if let Some(var_2186) = &input.ending_offsets {
        object.key("EndingOffsets").string(var_2186.as_str());
    }
    if let Some(var_2187) = &input.poll_timeout_ms {
        object.key("PollTimeoutMs").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2187).into()));
    }
    if let Some(var_2188) = &input.num_retries {
        object.key("NumRetries").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2188).into()));
    }
    if let Some(var_2189) = &input.retry_interval_ms {
        object.key("RetryIntervalMs").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2189).into()));
    }
    if let Some(var_2190) = &input.max_offsets_per_trigger {
        object.key("MaxOffsetsPerTrigger").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2190).into()));
    }
    if let Some(var_2191) = &input.min_partitions {
        object.key("MinPartitions").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2191).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_null_check_box_list(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NullCheckBoxList) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2192) = &input.is_empty {
        object.key("IsEmpty").boolean(*var_2192);
    }
    if let Some(var_2193) = &input.is_null_string {
        object.key("IsNullString").boolean(*var_2193);
    }
    if let Some(var_2194) = &input.is_neg_one {
        object.key("IsNegOne").boolean(*var_2194);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_null_value_field(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NullValueField) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2195) = &input.value {
        object.key("Value").string(var_2195.as_str());
    }
    if let Some(var_2196) = &input.datatype {
        #[allow(unused_mut)]
        let mut object_2197 = object.key("Datatype").start_object();
        crate::json_ser::serialize_structure_crate_model_datatype(&mut object_2197, var_2196)?;
        object_2197.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregate_operation(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AggregateOperation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2198) = &input.column {
        let mut array_2199 = object.key("Column").start_array();
        for item_2200 in var_2198 {
             {
                array_2199.value().string(item_2200.as_str());
            }
        }
        array_2199.finish();
    }
    if let Some(var_2201) = &input.agg_func {
        object.key("AggFunc").string(var_2201.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_config_parameter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TransformConfigParameter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2202) = &input.name {
        object.key("Name").string(var_2202.as_str());
    }
    if let Some(var_2203) = &input.r#type {
        object.key("Type").string(var_2203.as_str());
    }
    if let Some(var_2204) = &input.validation_rule {
        object.key("ValidationRule").string(var_2204.as_str());
    }
    if let Some(var_2205) = &input.validation_message {
        object.key("ValidationMessage").string(var_2205.as_str());
    }
    if let Some(var_2206) = &input.value {
        let mut array_2207 = object.key("Value").start_array();
        for item_2208 in var_2206 {
             {
                array_2207.value().string(item_2208.as_str());
            }
        }
        array_2207.finish();
    }
    if let Some(var_2209) = &input.list_type {
        object.key("ListType").string(var_2209.as_str());
    }
    if let Some(var_2210) = &input.is_optional {
        object.key("IsOptional").boolean(*var_2210);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dq_results_publishing_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DqResultsPublishingOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2211) = &input.evaluation_context {
        object.key("EvaluationContext").string(var_2211.as_str());
    }
    if let Some(var_2212) = &input.results_s3_prefix {
        object.key("ResultsS3Prefix").string(var_2212.as_str());
    }
    if let Some(var_2213) = &input.cloud_watch_metrics_enabled {
        object.key("CloudWatchMetricsEnabled").boolean(*var_2213);
    }
    if let Some(var_2214) = &input.results_publishing_enabled {
        object.key("ResultsPublishingEnabled").boolean(*var_2214);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dq_stop_job_on_failure_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DqStopJobOnFailureOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2215) = &input.stop_job_on_failure_timing {
        object.key("StopJobOnFailureTiming").string(var_2215.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_boolean_column_statistics_data(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::BooleanColumnStatisticsData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("NumberOfTrues").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_trues).into()));
    }
     {
        object.key("NumberOfFalses").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_falses).into()));
    }
     {
        object.key("NumberOfNulls").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_nulls).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_column_statistics_data(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DateColumnStatisticsData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2216) = &input.minimum_value {
        object.key("MinimumValue").date_time(var_2216, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2217) = &input.maximum_value {
        object.key("MaximumValue").date_time(var_2217, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
     {
        object.key("NumberOfNulls").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_nulls).into()));
    }
     {
        object.key("NumberOfDistinctValues").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_column_statistics_data(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DecimalColumnStatisticsData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2218) = &input.minimum_value {
        #[allow(unused_mut)]
        let mut object_2219 = object.key("MinimumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(&mut object_2219, var_2218)?;
        object_2219.finish();
    }
    if let Some(var_2220) = &input.maximum_value {
        #[allow(unused_mut)]
        let mut object_2221 = object.key("MaximumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(&mut object_2221, var_2220)?;
        object_2221.finish();
    }
     {
        object.key("NumberOfNulls").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_nulls).into()));
    }
     {
        object.key("NumberOfDistinctValues").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_double_column_statistics_data(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DoubleColumnStatisticsData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.minimum_value != 0.0 {
        object.key("MinimumValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((input.minimum_value).into()));
    }
    if input.maximum_value != 0.0 {
        object.key("MaximumValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((input.maximum_value).into()));
    }
     {
        object.key("NumberOfNulls").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_nulls).into()));
    }
     {
        object.key("NumberOfDistinctValues").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_long_column_statistics_data(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LongColumnStatisticsData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.minimum_value != 0 {
        object.key("MinimumValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.minimum_value).into()));
    }
    if input.maximum_value != 0 {
        object.key("MaximumValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.maximum_value).into()));
    }
     {
        object.key("NumberOfNulls").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_nulls).into()));
    }
     {
        object.key("NumberOfDistinctValues").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_column_statistics_data(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StringColumnStatisticsData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("MaximumLength").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.maximum_length).into()));
    }
     {
        object.key("AverageLength").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((input.average_length).into()));
    }
     {
        object.key("NumberOfNulls").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_nulls).into()));
    }
     {
        object.key("NumberOfDistinctValues").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_binary_column_statistics_data(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::BinaryColumnStatisticsData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("MaximumLength").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.maximum_length).into()));
    }
     {
        object.key("AverageLength").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((input.average_length).into()));
    }
     {
        object.key("NumberOfNulls").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_nulls).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_glue_studio_schema_column(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::GlueStudioSchemaColumn) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2222) = &input.name {
        object.key("Name").string(var_2222.as_str());
    }
    if let Some(var_2223) = &input.r#type {
        object.key("Type").string(var_2223.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter_value(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FilterValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2224) = &input.r#type {
        object.key("Type").string(var_2224.as_str());
    }
    if let Some(var_2225) = &input.value {
        let mut array_2226 = object.key("Value").start_array();
        for item_2227 in var_2225 {
             {
                array_2226.value().string(item_2227.as_str());
            }
        }
        array_2226.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_datatype(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Datatype) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2228) = &input.id {
        object.key("Id").string(var_2228.as_str());
    }
    if let Some(var_2229) = &input.label {
        object.key("Label").string(var_2229.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_number(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DecimalNumber) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2230) = &input.unscaled_value {
        object.key("UnscaledValue").string_unchecked(&aws_smithy_types::base64::encode(var_2230));
    }
     {
        object.key("Scale").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.scale).into()));
    }
    Ok(())
}

