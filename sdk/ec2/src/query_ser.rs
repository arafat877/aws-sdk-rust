// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TagSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ResourceType");
    if let Some(var_2) = &input.resource_type {
        scope_1.string(var_2.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Tag");
    if let Some(var_4) = &input.tags {
        let mut list_6 = scope_3.start_list(true, Some("item"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_7, item_5)?;
        }
        list_6.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_configuration_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TargetConfigurationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("InstanceCount");
    if let Some(var_9) = &input.instance_count {
        scope_8.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_9).into()));
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("OfferingId");
    if let Some(var_11) = &input.offering_id {
        scope_10.string(var_11);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_iam_instance_profile_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::IamInstanceProfileSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("Arn");
    if let Some(var_13) = &input.arn {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("Name");
    if let Some(var_15) = &input.name {
        scope_14.string(var_15);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_association_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceEventWindowAssociationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("InstanceId");
    if let Some(var_17) = &input.instance_ids {
        let mut list_19 = scope_16.start_list(true, Some("item"));
        for item_18 in var_17 {
            #[allow(unused_mut)]
            let mut entry_20 = list_19.entry();
            entry_20.string(item_18);
        }
        list_19.finish();
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("InstanceTag");
    if let Some(var_22) = &input.instance_tags {
        let mut list_24 = scope_21.start_list(true, Some("item"));
        for item_23 in var_22 {
            #[allow(unused_mut)]
            let mut entry_25 = list_24.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_25, item_23)?;
        }
        list_24.finish();
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DedicatedHostId");
    if let Some(var_27) = &input.dedicated_host_ids {
        let mut list_29 = scope_26.start_list(true, Some("item"));
        for item_28 in var_27 {
            #[allow(unused_mut)]
            let mut entry_30 = list_29.entry();
            entry_30.string(item_28);
        }
        list_29.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ena_srd_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::EnaSrdSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("EnaSrdEnabled");
    if let Some(var_32) = &input.ena_srd_enabled {
        scope_31.boolean(*var_32);
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("EnaSrdUdpSpecification");
    if let Some(var_34) = &input.ena_srd_udp_specification {
        crate::query_ser::serialize_structure_crate_model_ena_srd_udp_specification(scope_33, var_34)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_permission(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::IpPermission) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("FromPort");
    if let Some(var_36) = &input.from_port {
        scope_35.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_36).into()));
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("IpProtocol");
    if let Some(var_38) = &input.ip_protocol {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("IpRanges");
    if let Some(var_40) = &input.ip_ranges {
        let mut list_42 = scope_39.start_list(true, Some("item"));
        for item_41 in var_40 {
            #[allow(unused_mut)]
            let mut entry_43 = list_42.entry();
            crate::query_ser::serialize_structure_crate_model_ip_range(entry_43, item_41)?;
        }
        list_42.finish();
    }
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("Ipv6Ranges");
    if let Some(var_45) = &input.ipv6_ranges {
        let mut list_47 = scope_44.start_list(true, Some("item"));
        for item_46 in var_45 {
            #[allow(unused_mut)]
            let mut entry_48 = list_47.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_range(entry_48, item_46)?;
        }
        list_47.finish();
    }
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("PrefixListIds");
    if let Some(var_50) = &input.prefix_list_ids {
        let mut list_52 = scope_49.start_list(true, Some("item"));
        for item_51 in var_50 {
            #[allow(unused_mut)]
            let mut entry_53 = list_52.entry();
            crate::query_ser::serialize_structure_crate_model_prefix_list_id(entry_53, item_51)?;
        }
        list_52.finish();
    }
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("ToPort");
    if let Some(var_55) = &input.to_port {
        scope_54.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_55).into()));
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("Groups");
    if let Some(var_57) = &input.user_id_group_pairs {
        let mut list_59 = scope_56.start_list(true, Some("item"));
        for item_58 in var_57 {
            #[allow(unused_mut)]
            let mut entry_60 = list_59.entry();
            crate::query_ser::serialize_structure_crate_model_user_id_group_pair(entry_60, item_58)?;
        }
        list_59.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Storage) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("S3");
    if let Some(var_62) = &input.s3 {
        crate::query_ser::serialize_structure_crate_model_s3_storage(scope_61, var_62)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reservation_fleet_instance_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ReservationFleetInstanceSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("InstanceType");
    if let Some(var_64) = &input.instance_type {
        scope_63.string(var_64.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("InstancePlatform");
    if let Some(var_66) = &input.instance_platform {
        scope_65.string(var_66.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("Weight");
    if let Some(var_68) = &input.weight {
        scope_67.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_68).into()));
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("AvailabilityZone");
    if let Some(var_70) = &input.availability_zone {
        scope_69.string(var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("AvailabilityZoneId");
    if let Some(var_72) = &input.availability_zone_id {
        scope_71.string(var_72);
    }
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("EbsOptimized");
    if let Some(var_74) = &input.ebs_optimized {
        scope_73.boolean(*var_74);
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("Priority");
    if let Some(var_76) = &input.priority {
        scope_75.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_76).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_vpn_authentication_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ClientVpnAuthenticationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("Type");
    if let Some(var_78) = &input.r#type {
        scope_77.string(var_78.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("ActiveDirectory");
    if let Some(var_80) = &input.active_directory {
        crate::query_ser::serialize_structure_crate_model_directory_service_authentication_request(scope_79, var_80)?;
    }
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("MutualAuthentication");
    if let Some(var_82) = &input.mutual_authentication {
        crate::query_ser::serialize_structure_crate_model_certificate_authentication_request(scope_81, var_82)?;
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("FederatedAuthentication");
    if let Some(var_84) = &input.federated_authentication {
        crate::query_ser::serialize_structure_crate_model_federated_authentication_request(scope_83, var_84)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_connection_log_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ConnectionLogOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("Enabled");
    if let Some(var_86) = &input.enabled {
        scope_85.boolean(*var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("CloudwatchLogGroup");
    if let Some(var_88) = &input.cloudwatch_log_group {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("CloudwatchLogStream");
    if let Some(var_90) = &input.cloudwatch_log_stream {
        scope_89.string(var_90);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_connect_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ClientConnectOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("Enabled");
    if let Some(var_92) = &input.enabled {
        scope_91.boolean(*var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("LambdaFunctionArn");
    if let Some(var_94) = &input.lambda_function_arn {
        scope_93.string(var_94);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_login_banner_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ClientLoginBannerOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("Enabled");
    if let Some(var_96) = &input.enabled {
        scope_95.boolean(*var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("BannerText");
    if let Some(var_98) = &input.banner_text {
        scope_97.string(var_98);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_new_dhcp_configuration(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::NewDhcpConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("Key");
    if let Some(var_100) = &input.key {
        scope_99.string(var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("Value");
    if let Some(var_102) = &input.values {
        let mut list_104 = scope_101.start_list(true, Some("item"));
        for item_103 in var_102 {
            #[allow(unused_mut)]
            let mut entry_105 = list_104.entry();
            entry_105.string(item_103);
        }
        list_104.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("AllocationStrategy");
    if let Some(var_107) = &input.allocation_strategy {
        scope_106.string(var_107.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("MaintenanceStrategies");
    if let Some(var_109) = &input.maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(scope_108, var_109)?;
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_111) = &input.instance_interruption_behavior {
        scope_110.string(var_111.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_113) = &input.instance_pools_to_use_count {
        scope_112.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_113).into()));
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("SingleInstanceType");
    if let Some(var_115) = &input.single_instance_type {
        scope_114.boolean(*var_115);
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_117) = &input.single_availability_zone {
        scope_116.boolean(*var_117);
    }
    #[allow(unused_mut)]
    let mut scope_118 = writer.prefix("MinTargetCapacity");
    if let Some(var_119) = &input.min_target_capacity {
        scope_118.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_119).into()));
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("MaxTotalPrice");
    if let Some(var_121) = &input.max_total_price {
        scope_120.string(var_121);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_on_demand_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::OnDemandOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_122 = writer.prefix("AllocationStrategy");
    if let Some(var_123) = &input.allocation_strategy {
        scope_122.string(var_123.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("CapacityReservationOptions");
    if let Some(var_125) = &input.capacity_reservation_options {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_options_request(scope_124, var_125)?;
    }
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("SingleInstanceType");
    if let Some(var_127) = &input.single_instance_type {
        scope_126.boolean(*var_127);
    }
    #[allow(unused_mut)]
    let mut scope_128 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_129) = &input.single_availability_zone {
        scope_128.boolean(*var_129);
    }
    #[allow(unused_mut)]
    let mut scope_130 = writer.prefix("MinTargetCapacity");
    if let Some(var_131) = &input.min_target_capacity {
        scope_130.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_131).into()));
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("MaxTotalPrice");
    if let Some(var_133) = &input.max_total_price {
        scope_132.string(var_133);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_config_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FleetLaunchTemplateConfigRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_134 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_135) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification_request(scope_134, var_135)?;
    }
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("Overrides");
    if let Some(var_137) = &input.overrides {
        let mut list_139 = scope_136.start_list(true, Some("item"));
        for item_138 in var_137 {
            #[allow(unused_mut)]
            let mut entry_140 = list_139.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_overrides_request(entry_140, item_138)?;
        }
        list_139.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_capacity_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TargetCapacitySpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("TotalTargetCapacity");
    if let Some(var_142) = &input.total_target_capacity {
        scope_141.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_142).into()));
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_144) = &input.on_demand_target_capacity {
        scope_143.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_144).into()));
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("SpotTargetCapacity");
    if let Some(var_146) = &input.spot_target_capacity {
        scope_145.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_146).into()));
    }
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("DefaultTargetCapacityType");
    if let Some(var_148) = &input.default_target_capacity_type {
        scope_147.string(var_148.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_150) = &input.target_capacity_unit_type {
        scope_149.string(var_150.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_destination_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::DestinationOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("FileFormat");
    if let Some(var_152) = &input.file_format {
        scope_151.string(var_152.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("HiveCompatiblePartitions");
    if let Some(var_154) = &input.hive_compatible_partitions {
        scope_153.boolean(*var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("PerHourPartition");
    if let Some(var_156) = &input.per_hour_partition {
        scope_155.boolean(*var_156);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage_location(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::StorageLocation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("Bucket");
    if let Some(var_158) = &input.bucket {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("Key");
    if let Some(var_160) = &input.key {
        scope_159.string(var_160);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_block_device_mapping(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::BlockDeviceMapping) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("DeviceName");
    if let Some(var_162) = &input.device_name {
        scope_161.string(var_162);
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("VirtualName");
    if let Some(var_164) = &input.virtual_name {
        scope_163.string(var_164);
    }
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("Ebs");
    if let Some(var_166) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_block_device(scope_165, var_166)?;
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("NoDevice");
    if let Some(var_168) = &input.no_device {
        scope_167.string(var_168);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_time_range_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceEventWindowTimeRangeRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("StartWeekDay");
    if let Some(var_170) = &input.start_week_day {
        scope_169.string(var_170.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("StartHour");
    if let Some(var_172) = &input.start_hour {
        scope_171.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_172).into()));
    }
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("EndWeekDay");
    if let Some(var_174) = &input.end_week_day {
        scope_173.string(var_174.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("EndHour");
    if let Some(var_176) = &input.end_hour {
        scope_175.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_176).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_to_s3_task_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ExportToS3TaskSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("ContainerFormat");
    if let Some(var_178) = &input.container_format {
        scope_177.string(var_178.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("DiskImageFormat");
    if let Some(var_180) = &input.disk_image_format {
        scope_179.string(var_180.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("S3Bucket");
    if let Some(var_182) = &input.s3_bucket {
        scope_181.string(var_182);
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("S3Prefix");
    if let Some(var_184) = &input.s3_prefix {
        scope_183.string(var_184);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_add_ipam_operating_region(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AddIpamOperatingRegion) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("RegionName");
    if let Some(var_186) = &input.region_name {
        scope_185.string(var_186);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_ipam_resource_tag(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::RequestIpamResourceTag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("Key");
    if let Some(var_188) = &input.key {
        scope_187.string(var_188);
    }
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("Value");
    if let Some(var_190) = &input.value {
        scope_189.string(var_190);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_launch_template_data(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::RequestLaunchTemplateData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("KernelId");
    if let Some(var_192) = &input.kernel_id {
        scope_191.string(var_192);
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("EbsOptimized");
    if let Some(var_194) = &input.ebs_optimized {
        scope_193.boolean(*var_194);
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("IamInstanceProfile");
    if let Some(var_196) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(scope_195, var_196)?;
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("BlockDeviceMapping");
    if let Some(var_198) = &input.block_device_mappings {
        let mut list_200 = scope_197.start_list(true, Some("BlockDeviceMapping"));
        for item_199 in var_198 {
            #[allow(unused_mut)]
            let mut entry_201 = list_200.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_block_device_mapping_request(entry_201, item_199)?;
        }
        list_200.finish();
    }
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("NetworkInterface");
    if let Some(var_203) = &input.network_interfaces {
        let mut list_205 = scope_202.start_list(true, Some("InstanceNetworkInterfaceSpecification"));
        for item_204 in var_203 {
            #[allow(unused_mut)]
            let mut entry_206 = list_205.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(entry_206, item_204)?;
        }
        list_205.finish();
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("ImageId");
    if let Some(var_208) = &input.image_id {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("InstanceType");
    if let Some(var_210) = &input.instance_type {
        scope_209.string(var_210.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("KeyName");
    if let Some(var_212) = &input.key_name {
        scope_211.string(var_212);
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("Monitoring");
    if let Some(var_214) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_launch_templates_monitoring_request(scope_213, var_214)?;
    }
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("Placement");
    if let Some(var_216) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_launch_template_placement_request(scope_215, var_216)?;
    }
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("RamDiskId");
    if let Some(var_218) = &input.ram_disk_id {
        scope_217.string(var_218);
    }
    #[allow(unused_mut)]
    let mut scope_219 = writer.prefix("DisableApiTermination");
    if let Some(var_220) = &input.disable_api_termination {
        scope_219.boolean(*var_220);
    }
    #[allow(unused_mut)]
    let mut scope_221 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_222) = &input.instance_initiated_shutdown_behavior {
        scope_221.string(var_222.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_223 = writer.prefix("UserData");
    if let Some(var_224) = &input.user_data {
        scope_223.string(var_224);
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("TagSpecification");
    if let Some(var_226) = &input.tag_specifications {
        let mut list_228 = scope_225.start_list(true, Some("LaunchTemplateTagSpecificationRequest"));
        for item_227 in var_226 {
            #[allow(unused_mut)]
            let mut entry_229 = list_228.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_tag_specification_request(entry_229, item_227)?;
        }
        list_228.finish();
    }
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_231) = &input.elastic_gpu_specifications {
        let mut list_233 = scope_230.start_list(true, Some("ElasticGpuSpecification"));
        for item_232 in var_231 {
            #[allow(unused_mut)]
            let mut entry_234 = list_233.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(entry_234, item_232)?;
        }
        list_233.finish();
    }
    #[allow(unused_mut)]
    let mut scope_235 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_236) = &input.elastic_inference_accelerators {
        let mut list_238 = scope_235.start_list(true, Some("item"));
        for item_237 in var_236 {
            #[allow(unused_mut)]
            let mut entry_239 = list_238.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_elastic_inference_accelerator(entry_239, item_237)?;
        }
        list_238.finish();
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("SecurityGroupId");
    if let Some(var_241) = &input.security_group_ids {
        let mut list_243 = scope_240.start_list(true, Some("SecurityGroupId"));
        for item_242 in var_241 {
            #[allow(unused_mut)]
            let mut entry_244 = list_243.entry();
            entry_244.string(item_242);
        }
        list_243.finish();
    }
    #[allow(unused_mut)]
    let mut scope_245 = writer.prefix("SecurityGroup");
    if let Some(var_246) = &input.security_groups {
        let mut list_248 = scope_245.start_list(true, Some("SecurityGroup"));
        for item_247 in var_246 {
            #[allow(unused_mut)]
            let mut entry_249 = list_248.entry();
            entry_249.string(item_247);
        }
        list_248.finish();
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("InstanceMarketOptions");
    if let Some(var_251) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_market_options_request(scope_250, var_251)?;
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("CreditSpecification");
    if let Some(var_253) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(scope_252, var_253)?;
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("CpuOptions");
    if let Some(var_255) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_cpu_options_request(scope_254, var_255)?;
    }
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_257) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(scope_256, var_257)?;
    }
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("LicenseSpecification");
    if let Some(var_259) = &input.license_specifications {
        let mut list_261 = scope_258.start_list(true, Some("item"));
        for item_260 in var_259 {
            #[allow(unused_mut)]
            let mut entry_262 = list_261.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_license_configuration_request(entry_262, item_260)?;
        }
        list_261.finish();
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("HibernationOptions");
    if let Some(var_264) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_hibernation_options_request(scope_263, var_264)?;
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("MetadataOptions");
    if let Some(var_266) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_metadata_options_request(scope_265, var_266)?;
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("EnclaveOptions");
    if let Some(var_268) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_enclave_options_request(scope_267, var_268)?;
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("InstanceRequirements");
    if let Some(var_270) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(scope_269, var_270)?;
    }
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_272) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_private_dns_name_options_request(scope_271, var_272)?;
    }
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("MaintenanceOptions");
    if let Some(var_274) = &input.maintenance_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_maintenance_options_request(scope_273, var_274)?;
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("DisableApiStop");
    if let Some(var_276) = &input.disable_api_stop {
        scope_275.boolean(*var_276);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_add_prefix_list_entry(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AddPrefixListEntry) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("Cidr");
    if let Some(var_278) = &input.cidr {
        scope_277.string(var_278);
    }
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("Description");
    if let Some(var_280) = &input.description {
        scope_279.string(var_280);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_icmp_type_code(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::IcmpTypeCode) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("Code");
    if let Some(var_282) = &input.code {
        scope_281.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_282).into()));
    }
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("Type");
    if let Some(var_284) = &input.r#type {
        scope_283.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_284).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_port_range(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PortRange) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("From");
    if let Some(var_286) = &input.from {
        scope_285.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_286).into()));
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("To");
    if let Some(var_288) = &input.to {
        scope_287.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_288).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_access_scope_path_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AccessScopePathRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("Source");
    if let Some(var_290) = &input.source {
        crate::query_ser::serialize_structure_crate_model_path_statement_request(scope_289, var_290)?;
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("Destination");
    if let Some(var_292) = &input.destination {
        crate::query_ser::serialize_structure_crate_model_path_statement_request(scope_291, var_292)?;
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("ThroughResource");
    if let Some(var_294) = &input.through_resources {
        let mut list_296 = scope_293.start_list(true, Some("item"));
        for item_295 in var_294 {
            #[allow(unused_mut)]
            let mut entry_297 = list_296.entry();
            crate::query_ser::serialize_structure_crate_model_through_resources_statement_request(entry_297, item_295)?;
        }
        list_296.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceIpv6Address) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("Ipv6Address");
    if let Some(var_299) = &input.ipv6_address {
        scope_298.string(var_299);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_private_ip_address_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PrivateIpAddressSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("Primary");
    if let Some(var_301) = &input.primary {
        scope_300.boolean(*var_301);
    }
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("PrivateIpAddress");
    if let Some(var_303) = &input.private_ip_address {
        scope_302.string(var_303);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv4_prefix_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Ipv4PrefixSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("Ipv4Prefix");
    if let Some(var_305) = &input.ipv4_prefix {
        scope_304.string(var_305);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_prefix_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Ipv6PrefixSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("Ipv6Prefix");
    if let Some(var_307) = &input.ipv6_prefix {
        scope_306.string(var_307);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_price_schedule_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PriceScheduleSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("CurrencyCode");
    if let Some(var_309) = &input.currency_code {
        scope_308.string(var_309.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("Price");
    if let Some(var_311) = &input.price {
        scope_310.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_311).into()));
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("Term");
    if let Some(var_313) = &input.term {
        scope_312.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_313).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("InstanceId");
    if let Some(var_315) = &input.instance_id {
        scope_314.string(var_315);
    }
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("ExcludeBootVolume");
    if let Some(var_317) = &input.exclude_boot_volume {
        scope_316.boolean(*var_317);
    }
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("ExcludeDataVolumeId");
    if let Some(var_319) = &input.exclude_data_volume_ids {
        let mut list_321 = scope_318.start_list(true, Some("VolumeId"));
        for item_320 in var_319 {
            #[allow(unused_mut)]
            let mut entry_322 = list_321.entry();
            entry_322.string(item_320);
        }
        list_321.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_object_tag(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::S3ObjectTag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("Key");
    if let Some(var_324) = &input.key {
        scope_323.string(var_324);
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("Value");
    if let Some(var_326) = &input.value {
        scope_325.string(var_326);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Tag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("Key");
    if let Some(var_328) = &input.key {
        scope_327.string(var_328);
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("Value");
    if let Some(var_330) = &input.value {
        scope_329.string(var_330);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_traffic_mirror_port_range_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TrafficMirrorPortRangeRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("FromPort");
    if let Some(var_332) = &input.from_port {
        scope_331.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_332).into()));
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("ToPort");
    if let Some(var_334) = &input.to_port {
        scope_333.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_334).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_request_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TransitGatewayRequestOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("AmazonSideAsn");
    if let Some(var_336) = &input.amazon_side_asn {
        scope_335.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_336).into()));
    }
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_338) = &input.auto_accept_shared_attachments {
        scope_337.string(var_338.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_340) = &input.default_route_table_association {
        scope_339.string(var_340.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_342) = &input.default_route_table_propagation {
        scope_341.string(var_342.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("VpnEcmpSupport");
    if let Some(var_344) = &input.vpn_ecmp_support {
        scope_343.string(var_344.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("DnsSupport");
    if let Some(var_346) = &input.dns_support {
        scope_345.string(var_346.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("MulticastSupport");
    if let Some(var_348) = &input.multicast_support {
        scope_347.string(var_348.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("TransitGatewayCidrBlocks");
    if let Some(var_350) = &input.transit_gateway_cidr_blocks {
        let mut list_352 = scope_349.start_list(true, Some("item"));
        for item_351 in var_350 {
            #[allow(unused_mut)]
            let mut entry_353 = list_352.entry();
            entry_353.string(item_351);
        }
        list_352.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_connect_request_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreateTransitGatewayConnectRequestOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("Protocol");
    if let Some(var_355) = &input.protocol {
        scope_354.string(var_355.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TransitGatewayConnectRequestBgpOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("PeerAsn");
    if let Some(var_357) = &input.peer_asn {
        scope_356.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_357).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreateTransitGatewayMulticastDomainRequestOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("Igmpv2Support");
    if let Some(var_359) = &input.igmpv2_support {
        scope_358.string(var_359.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("StaticSourcesSupport");
    if let Some(var_361) = &input.static_sources_support {
        scope_360.string(var_361.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_362 = writer.prefix("AutoAcceptSharedAssociations");
    if let Some(var_363) = &input.auto_accept_shared_associations {
        scope_362.string(var_363.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_peering_attachment_request_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreateTransitGatewayPeeringAttachmentRequestOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("DynamicRouting");
    if let Some(var_365) = &input.dynamic_routing {
        scope_364.string(var_365.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreateTransitGatewayVpcAttachmentRequestOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("DnsSupport");
    if let Some(var_367) = &input.dns_support {
        scope_366.string(var_367.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("Ipv6Support");
    if let Some(var_369) = &input.ipv6_support {
        scope_368.string(var_369.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_370 = writer.prefix("ApplianceModeSupport");
    if let Some(var_371) = &input.appliance_mode_support {
        scope_370.string(var_371.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_verified_access_endpoint_load_balancer_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreateVerifiedAccessEndpointLoadBalancerOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_372 = writer.prefix("Protocol");
    if let Some(var_373) = &input.protocol {
        scope_372.string(var_373.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("Port");
    if let Some(var_375) = &input.port {
        scope_374.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_375).into()));
    }
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("LoadBalancerArn");
    if let Some(var_377) = &input.load_balancer_arn {
        scope_376.string(var_377);
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("SubnetId");
    if let Some(var_379) = &input.subnet_ids {
        let mut list_381 = scope_378.start_list(true, Some("item"));
        for item_380 in var_379 {
            #[allow(unused_mut)]
            let mut entry_382 = list_381.entry();
            entry_382.string(item_380);
        }
        list_381.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_verified_access_endpoint_eni_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreateVerifiedAccessEndpointEniOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_383 = writer.prefix("NetworkInterfaceId");
    if let Some(var_384) = &input.network_interface_id {
        scope_383.string(var_384);
    }
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("Protocol");
    if let Some(var_386) = &input.protocol {
        scope_385.string(var_386.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("Port");
    if let Some(var_388) = &input.port {
        scope_387.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_388).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_verified_access_trust_provider_oidc_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreateVerifiedAccessTrustProviderOidcOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_389 = writer.prefix("Issuer");
    if let Some(var_390) = &input.issuer {
        scope_389.string(var_390);
    }
    #[allow(unused_mut)]
    let mut scope_391 = writer.prefix("AuthorizationEndpoint");
    if let Some(var_392) = &input.authorization_endpoint {
        scope_391.string(var_392);
    }
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("TokenEndpoint");
    if let Some(var_394) = &input.token_endpoint {
        scope_393.string(var_394);
    }
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("UserInfoEndpoint");
    if let Some(var_396) = &input.user_info_endpoint {
        scope_395.string(var_396);
    }
    #[allow(unused_mut)]
    let mut scope_397 = writer.prefix("ClientId");
    if let Some(var_398) = &input.client_id {
        scope_397.string(var_398);
    }
    #[allow(unused_mut)]
    let mut scope_399 = writer.prefix("ClientSecret");
    if let Some(var_400) = &input.client_secret {
        scope_399.string(var_400);
    }
    #[allow(unused_mut)]
    let mut scope_401 = writer.prefix("Scope");
    if let Some(var_402) = &input.scope {
        scope_401.string(var_402);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_verified_access_trust_provider_device_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreateVerifiedAccessTrustProviderDeviceOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_403 = writer.prefix("TenantId");
    if let Some(var_404) = &input.tenant_id {
        scope_403.string(var_404);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_dns_options_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::DnsOptionsSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("DnsRecordIpType");
    if let Some(var_406) = &input.dns_record_ip_type {
        scope_405.string(var_406.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_connection_options_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::VpnConnectionOptionsSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("EnableAcceleration");
    if let Some(var_408) = &input.enable_acceleration {
        scope_407.boolean(*var_408);
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("StaticRoutesOnly");
    if let Some(var_410) = &input.static_routes_only {
        scope_409.boolean(*var_410);
    }
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("TunnelInsideIpVersion");
    if let Some(var_412) = &input.tunnel_inside_ip_version {
        scope_411.string(var_412.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("TunnelOptions");
    if let Some(var_414) = &input.tunnel_options {
        let mut list_416 = scope_413.start_list(true, None);
        for item_415 in var_414 {
            #[allow(unused_mut)]
            let mut entry_417 = list_416.entry();
            crate::query_ser::serialize_structure_crate_model_vpn_tunnel_options_specification(entry_417, item_415)?;
        }
        list_416.finish();
    }
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_419) = &input.local_ipv4_network_cidr {
        scope_418.string(var_419);
    }
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_421) = &input.remote_ipv4_network_cidr {
        scope_420.string(var_421);
    }
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_423) = &input.local_ipv6_network_cidr {
        scope_422.string(var_423);
    }
    #[allow(unused_mut)]
    let mut scope_424 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_425) = &input.remote_ipv6_network_cidr {
        scope_424.string(var_425);
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("OutsideIpAddressType");
    if let Some(var_427) = &input.outside_ip_address_type {
        scope_426.string(var_427);
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_429) = &input.transport_transit_gateway_attachment_id {
        scope_428.string(var_429);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_deregister_instance_tag_attribute_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::DeregisterInstanceTagAttributeRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_431) = &input.include_all_tags_of_instance {
        scope_430.boolean(*var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("InstanceTagKey");
    if let Some(var_433) = &input.instance_tag_keys {
        let mut list_435 = scope_432.start_list(true, Some("item"));
        for item_434 in var_433 {
            #[allow(unused_mut)]
            let mut entry_436 = list_435.entry();
            entry_436.string(item_434);
        }
        list_435.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_filter(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Filter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("Name");
    if let Some(var_438) = &input.name {
        scope_437.string(var_438);
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("Value");
    if let Some(var_440) = &input.values {
        let mut list_442 = scope_439.start_list(true, Some("item"));
        for item_441 in var_440 {
            #[allow(unused_mut)]
            let mut entry_443 = list_442.entry();
            entry_443.string(item_441);
        }
        list_442.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_date_time_range_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SlotDateTimeRangeRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("EarliestTime");
    if let Some(var_445) = &input.earliest_time {
        scope_444.date_time(var_445, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("LatestTime");
    if let Some(var_447) = &input.latest_time {
        scope_446.date_time(var_447, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instance_recurrence_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstanceRecurrenceRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("Frequency");
    if let Some(var_449) = &input.frequency {
        scope_448.string(var_449);
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("Interval");
    if let Some(var_451) = &input.interval {
        scope_450.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_451).into()));
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("OccurrenceDay");
    if let Some(var_453) = &input.occurrence_days {
        let mut list_455 = scope_452.start_list(true, Some("OccurenceDay"));
        for item_454 in var_453 {
            #[allow(unused_mut)]
            let mut entry_456 = list_455.entry();
            entry_456.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*item_454).into()));
        }
        list_455.finish();
    }
    #[allow(unused_mut)]
    let mut scope_457 = writer.prefix("OccurrenceRelativeToEnd");
    if let Some(var_458) = &input.occurrence_relative_to_end {
        scope_457.boolean(*var_458);
    }
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("OccurrenceUnit");
    if let Some(var_460) = &input.occurrence_unit {
        scope_459.string(var_460);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_start_time_range_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SlotStartTimeRangeRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("EarliestTime");
    if let Some(var_462) = &input.earliest_time {
        scope_461.date_time(var_462, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("LatestTime");
    if let Some(var_464) = &input.latest_time {
        scope_463.date_time(var_464, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_disassociation_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceEventWindowDisassociationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("InstanceId");
    if let Some(var_466) = &input.instance_ids {
        let mut list_468 = scope_465.start_list(true, Some("item"));
        for item_467 in var_466 {
            #[allow(unused_mut)]
            let mut entry_469 = list_468.entry();
            entry_469.string(item_467);
        }
        list_468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("InstanceTag");
    if let Some(var_471) = &input.instance_tags {
        let mut list_473 = scope_470.start_list(true, Some("item"));
        for item_472 in var_471 {
            #[allow(unused_mut)]
            let mut entry_474 = list_473.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_474, item_472)?;
        }
        list_473.finish();
    }
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("DedicatedHostId");
    if let Some(var_476) = &input.dedicated_host_ids {
        let mut list_478 = scope_475.start_list(true, Some("item"));
        for item_477 in var_476 {
            #[allow(unused_mut)]
            let mut entry_479 = list_478.entry();
            entry_479.string(item_477);
        }
        list_478.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fast_launch_snapshot_configuration_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FastLaunchSnapshotConfigurationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_480 = writer.prefix("TargetResourceCount");
    if let Some(var_481) = &input.target_resource_count {
        scope_480.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_481).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fast_launch_launch_template_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FastLaunchLaunchTemplateSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_482 = writer.prefix("LaunchTemplateId");
    if let Some(var_483) = &input.launch_template_id {
        scope_482.string(var_483);
    }
    #[allow(unused_mut)]
    let mut scope_484 = writer.prefix("LaunchTemplateName");
    if let Some(var_485) = &input.launch_template_name {
        scope_484.string(var_485);
    }
    #[allow(unused_mut)]
    let mut scope_486 = writer.prefix("Version");
    if let Some(var_487) = &input.version {
        scope_486.string(var_487);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_task_s3_location_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ExportTaskS3LocationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_488 = writer.prefix("S3Bucket");
    if let Some(var_489) = &input.s3_bucket {
        scope_488.string(var_489);
    }
    #[allow(unused_mut)]
    let mut scope_490 = writer.prefix("S3Prefix");
    if let Some(var_491) = &input.s3_prefix {
        scope_490.string(var_491);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_data_query(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::DataQuery) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_492 = writer.prefix("Id");
    if let Some(var_493) = &input.id {
        scope_492.string(var_493);
    }
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("Source");
    if let Some(var_495) = &input.source {
        scope_494.string(var_495);
    }
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("Destination");
    if let Some(var_497) = &input.destination {
        scope_496.string(var_497);
    }
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("Metric");
    if let Some(var_499) = &input.metric {
        scope_498.string(var_499.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_500 = writer.prefix("Statistic");
    if let Some(var_501) = &input.statistic {
        scope_500.string(var_501.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_502 = writer.prefix("Period");
    if let Some(var_503) = &input.period {
        scope_502.string(var_503.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_integrate_services(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::IntegrateServices) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("AthenaIntegration");
    if let Some(var_505) = &input.athena_integrations {
        let mut list_507 = scope_504.start_list(true, Some("item"));
        for item_506 in var_505 {
            #[allow(unused_mut)]
            let mut entry_508 = list_507.entry();
            crate::query_ser::serialize_structure_crate_model_athena_integration(entry_508, item_506)?;
        }
        list_507.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceRequirementsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_509 = writer.prefix("VCpuCount");
    if let Some(var_510) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range_request(scope_509, var_510)?;
    }
    #[allow(unused_mut)]
    let mut scope_511 = writer.prefix("MemoryMiB");
    if let Some(var_512) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b_request(scope_511, var_512)?;
    }
    #[allow(unused_mut)]
    let mut scope_513 = writer.prefix("CpuManufacturer");
    if let Some(var_514) = &input.cpu_manufacturers {
        let mut list_516 = scope_513.start_list(true, Some("item"));
        for item_515 in var_514 {
            #[allow(unused_mut)]
            let mut entry_517 = list_516.entry();
            entry_517.string(item_515.as_str());
        }
        list_516.finish();
    }
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_519) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(scope_518, var_519)?;
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("ExcludedInstanceType");
    if let Some(var_521) = &input.excluded_instance_types {
        let mut list_523 = scope_520.start_list(true, Some("item"));
        for item_522 in var_521 {
            #[allow(unused_mut)]
            let mut entry_524 = list_523.entry();
            entry_524.string(item_522);
        }
        list_523.finish();
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("InstanceGeneration");
    if let Some(var_526) = &input.instance_generations {
        let mut list_528 = scope_525.start_list(true, Some("item"));
        for item_527 in var_526 {
            #[allow(unused_mut)]
            let mut entry_529 = list_528.entry();
            entry_529.string(item_527.as_str());
        }
        list_528.finish();
    }
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_531) = &input.spot_max_price_percentage_over_lowest_price {
        scope_530.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_531).into()));
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_533) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_532.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_533).into()));
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("BareMetal");
    if let Some(var_535) = &input.bare_metal {
        scope_534.string(var_535.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("BurstablePerformance");
    if let Some(var_537) = &input.burstable_performance {
        scope_536.string(var_537.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("RequireHibernateSupport");
    if let Some(var_539) = &input.require_hibernate_support {
        scope_538.boolean(*var_539);
    }
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_541) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count_request(scope_540, var_541)?;
    }
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("LocalStorage");
    if let Some(var_543) = &input.local_storage {
        scope_542.string(var_543.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("LocalStorageType");
    if let Some(var_545) = &input.local_storage_types {
        let mut list_547 = scope_544.start_list(true, Some("item"));
        for item_546 in var_545 {
            #[allow(unused_mut)]
            let mut entry_548 = list_547.entry();
            entry_548.string(item_546.as_str());
        }
        list_547.finish();
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_550) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb_request(scope_549, var_550)?;
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_552) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(scope_551, var_552)?;
    }
    #[allow(unused_mut)]
    let mut scope_553 = writer.prefix("AcceleratorType");
    if let Some(var_554) = &input.accelerator_types {
        let mut list_556 = scope_553.start_list(true, Some("item"));
        for item_555 in var_554 {
            #[allow(unused_mut)]
            let mut entry_557 = list_556.entry();
            entry_557.string(item_555.as_str());
        }
        list_556.finish();
    }
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("AcceleratorCount");
    if let Some(var_559) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count_request(scope_558, var_559)?;
    }
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("AcceleratorManufacturer");
    if let Some(var_561) = &input.accelerator_manufacturers {
        let mut list_563 = scope_560.start_list(true, Some("item"));
        for item_562 in var_561 {
            #[allow(unused_mut)]
            let mut entry_564 = list_563.entry();
            entry_564.string(item_562.as_str());
        }
        list_563.finish();
    }
    #[allow(unused_mut)]
    let mut scope_565 = writer.prefix("AcceleratorName");
    if let Some(var_566) = &input.accelerator_names {
        let mut list_568 = scope_565.start_list(true, Some("item"));
        for item_567 in var_566 {
            #[allow(unused_mut)]
            let mut entry_569 = list_568.entry();
            entry_569.string(item_567.as_str());
        }
        list_568.finish();
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_571) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b_request(scope_570, var_571)?;
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("NetworkBandwidthGbps");
    if let Some(var_573) = &input.network_bandwidth_gbps {
        crate::query_ser::serialize_structure_crate_model_network_bandwidth_gbps_request(scope_572, var_573)?;
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("AllowedInstanceType");
    if let Some(var_575) = &input.allowed_instance_types {
        let mut list_577 = scope_574.start_list(true, Some("item"));
        for item_576 in var_575 {
            #[allow(unused_mut)]
            let mut entry_578 = list_577.entry();
            entry_578.string(item_576);
        }
        list_577.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements_with_metadata_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceRequirementsWithMetadataRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_579 = writer.prefix("ArchitectureType");
    if let Some(var_580) = &input.architecture_types {
        let mut list_582 = scope_579.start_list(true, Some("item"));
        for item_581 in var_580 {
            #[allow(unused_mut)]
            let mut entry_583 = list_582.entry();
            entry_583.string(item_581.as_str());
        }
        list_582.finish();
    }
    #[allow(unused_mut)]
    let mut scope_584 = writer.prefix("VirtualizationType");
    if let Some(var_585) = &input.virtualization_types {
        let mut list_587 = scope_584.start_list(true, Some("item"));
        for item_586 in var_585 {
            #[allow(unused_mut)]
            let mut entry_588 = list_587.entry();
            entry_588.string(item_586.as_str());
        }
        list_587.finish();
    }
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("InstanceRequirements");
    if let Some(var_590) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(scope_589, var_590)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_data(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ClientData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("Comment");
    if let Some(var_592) = &input.comment {
        scope_591.string(var_592);
    }
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("UploadEnd");
    if let Some(var_594) = &input.upload_end {
        scope_593.date_time(var_594, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("UploadSize");
    if let Some(var_596) = &input.upload_size {
        scope_595.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_596).into()));
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("UploadStart");
    if let Some(var_598) = &input.upload_start {
        scope_597.date_time(var_598, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_image_disk_container(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ImageDiskContainer) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("Description");
    if let Some(var_600) = &input.description {
        scope_599.string(var_600);
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("DeviceName");
    if let Some(var_602) = &input.device_name {
        scope_601.string(var_602);
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("Format");
    if let Some(var_604) = &input.format {
        scope_603.string(var_604);
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("SnapshotId");
    if let Some(var_606) = &input.snapshot_id {
        scope_605.string(var_606);
    }
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("Url");
    if let Some(var_608) = &input.url {
        scope_607.string(var_608);
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("UserBucket");
    if let Some(var_610) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_609, var_610)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_image_license_configuration_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ImportImageLicenseConfigurationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_612) = &input.license_configuration_arn {
        scope_611.string(var_612);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::DiskImage) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("Description");
    if let Some(var_614) = &input.description {
        scope_613.string(var_614);
    }
    #[allow(unused_mut)]
    let mut scope_615 = writer.prefix("Image");
    if let Some(var_616) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_615, var_616)?;
    }
    #[allow(unused_mut)]
    let mut scope_617 = writer.prefix("Volume");
    if let Some(var_618) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_617, var_618)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_instance_launch_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ImportInstanceLaunchSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_619 = writer.prefix("AdditionalInfo");
    if let Some(var_620) = &input.additional_info {
        scope_619.string(var_620);
    }
    #[allow(unused_mut)]
    let mut scope_621 = writer.prefix("Architecture");
    if let Some(var_622) = &input.architecture {
        scope_621.string(var_622.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_623 = writer.prefix("GroupId");
    if let Some(var_624) = &input.group_ids {
        let mut list_626 = scope_623.start_list(true, Some("SecurityGroupId"));
        for item_625 in var_624 {
            #[allow(unused_mut)]
            let mut entry_627 = list_626.entry();
            entry_627.string(item_625);
        }
        list_626.finish();
    }
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("GroupName");
    if let Some(var_629) = &input.group_names {
        let mut list_631 = scope_628.start_list(true, Some("SecurityGroup"));
        for item_630 in var_629 {
            #[allow(unused_mut)]
            let mut entry_632 = list_631.entry();
            entry_632.string(item_630);
        }
        list_631.finish();
    }
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_634) = &input.instance_initiated_shutdown_behavior {
        scope_633.string(var_634.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("InstanceType");
    if let Some(var_636) = &input.instance_type {
        scope_635.string(var_636.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("Monitoring");
    if let Some(var_638) = &input.monitoring {
        scope_637.boolean(*var_638);
    }
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("Placement");
    if let Some(var_640) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_639, var_640)?;
    }
    #[allow(unused_mut)]
    let mut scope_641 = writer.prefix("PrivateIpAddress");
    if let Some(var_642) = &input.private_ip_address {
        scope_641.string(var_642);
    }
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("SubnetId");
    if let Some(var_644) = &input.subnet_id {
        scope_643.string(var_644);
    }
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("UserData");
    if let Some(var_646) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_user_data(scope_645, var_646)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_snapshot_disk_container(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SnapshotDiskContainer) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("Description");
    if let Some(var_648) = &input.description {
        scope_647.string(var_648);
    }
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("Format");
    if let Some(var_650) = &input.format {
        scope_649.string(var_650);
    }
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("Url");
    if let Some(var_652) = &input.url {
        scope_651.string(var_652);
    }
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("UserBucket");
    if let Some(var_654) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_653, var_654)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image_detail(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::DiskImageDetail) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("Bytes");
    if let Some(var_656) = &input.bytes {
        scope_655.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_656).into()));
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("Format");
    if let Some(var_658) = &input.format {
        scope_657.string(var_658.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("ImportManifestUrl");
    if let Some(var_660) = &input.import_manifest_url {
        scope_659.string(var_660);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_volume_detail(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::VolumeDetail) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("Size");
    if let Some(var_662) = &input.size {
        scope_661.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_662).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_dns_servers_options_modify_structure(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::DnsServersOptionsModifyStructure) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("CustomDnsServers");
    if let Some(var_664) = &input.custom_dns_servers {
        let mut list_666 = scope_663.start_list(true, Some("item"));
        for item_665 in var_664 {
            #[allow(unused_mut)]
            let mut entry_667 = list_666.entry();
            entry_667.string(item_665);
        }
        list_666.finish();
    }
    #[allow(unused_mut)]
    let mut scope_668 = writer.prefix("Enabled");
    if let Some(var_669) = &input.enabled {
        scope_668.boolean(*var_669);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_modifications(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LoadPermissionModifications) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_670 = writer.prefix("Add");
    if let Some(var_671) = &input.add {
        let mut list_673 = scope_670.start_list(true, Some("item"));
        for item_672 in var_671 {
            #[allow(unused_mut)]
            let mut entry_674 = list_673.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(entry_674, item_672)?;
        }
        list_673.finish();
    }
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("Remove");
    if let Some(var_676) = &input.remove {
        let mut list_678 = scope_675.start_list(true, Some("item"));
        for item_677 in var_676 {
            #[allow(unused_mut)]
            let mut entry_679 = list_678.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(entry_679, item_677)?;
        }
        list_678.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AttributeValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("Value");
    if let Some(var_681) = &input.value {
        scope_680.string(var_681);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission_modifications(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchPermissionModifications) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_682 = writer.prefix("Add");
    if let Some(var_683) = &input.add {
        let mut list_685 = scope_682.start_list(true, Some("item"));
        for item_684 in var_683 {
            #[allow(unused_mut)]
            let mut entry_686 = list_685.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(entry_686, item_684)?;
        }
        list_685.finish();
    }
    #[allow(unused_mut)]
    let mut scope_687 = writer.prefix("Remove");
    if let Some(var_688) = &input.remove {
        let mut list_690 = scope_687.start_list(true, Some("item"));
        for item_689 in var_688 {
            #[allow(unused_mut)]
            let mut entry_691 = list_690.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(entry_691, item_689)?;
        }
        list_690.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_boolean_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AttributeBooleanValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("Value");
    if let Some(var_693) = &input.value {
        scope_692.boolean(*var_693);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_block_device_mapping_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceBlockDeviceMappingSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("DeviceName");
    if let Some(var_695) = &input.device_name {
        scope_694.string(var_695);
    }
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("Ebs");
    if let Some(var_697) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_instance_block_device_specification(scope_696, var_697)?;
    }
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("NoDevice");
    if let Some(var_699) = &input.no_device {
        scope_698.string(var_699);
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("VirtualName");
    if let Some(var_701) = &input.virtual_name {
        scope_700.string(var_701);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_blob_attribute_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::BlobAttributeValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("Value");
    if let Some(var_703) = &input.value {
        scope_702.string(&aws_smithy_types::base64::encode(var_703));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CapacityReservationSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("CapacityReservationPreference");
    if let Some(var_705) = &input.capacity_reservation_preference {
        scope_704.string(var_705.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("CapacityReservationTarget");
    if let Some(var_707) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(scope_706, var_707)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_credit_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceCreditSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("InstanceId");
    if let Some(var_709) = &input.instance_id {
        scope_708.string(var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("CpuCredits");
    if let Some(var_711) = &input.cpu_credits {
        scope_710.string(var_711);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_remove_ipam_operating_region(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::RemoveIpamOperatingRegion) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("RegionName");
    if let Some(var_713) = &input.region_name {
        scope_712.string(var_713);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_remove_prefix_list_entry(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::RemovePrefixListEntry) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("Cidr");
    if let Some(var_715) = &input.cidr {
        scope_714.string(var_715);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_attachment_changes(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::NetworkInterfaceAttachmentChanges) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("AttachmentId");
    if let Some(var_717) = &input.attachment_id {
        scope_716.string(var_717);
    }
    #[allow(unused_mut)]
    let mut scope_718 = writer.prefix("DeleteOnTermination");
    if let Some(var_719) = &input.delete_on_termination {
        scope_718.boolean(*var_719);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instances_configuration(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ReservedInstancesConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_720 = writer.prefix("AvailabilityZone");
    if let Some(var_721) = &input.availability_zone {
        scope_720.string(var_721);
    }
    #[allow(unused_mut)]
    let mut scope_722 = writer.prefix("InstanceCount");
    if let Some(var_723) = &input.instance_count {
        scope_722.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_723).into()));
    }
    #[allow(unused_mut)]
    let mut scope_724 = writer.prefix("InstanceType");
    if let Some(var_725) = &input.instance_type {
        scope_724.string(var_725.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_726 = writer.prefix("Platform");
    if let Some(var_727) = &input.platform {
        scope_726.string(var_727);
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("Scope");
    if let Some(var_729) = &input.scope {
        scope_728.string(var_729.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_update(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SecurityGroupRuleUpdate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_731) = &input.security_group_rule_id {
        scope_730.string(var_731);
    }
    #[allow(unused_mut)]
    let mut scope_732 = writer.prefix("SecurityGroupRule");
    if let Some(var_733) = &input.security_group_rule {
        crate::query_ser::serialize_structure_crate_model_security_group_rule_request(scope_732, var_733)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission_modifications(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreateVolumePermissionModifications) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_734 = writer.prefix("Add");
    if let Some(var_735) = &input.add {
        let mut list_737 = scope_734.start_list(true, Some("item"));
        for item_736 in var_735 {
            #[allow(unused_mut)]
            let mut entry_738 = list_737.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(entry_738, item_736)?;
        }
        list_737.finish();
    }
    #[allow(unused_mut)]
    let mut scope_739 = writer.prefix("Remove");
    if let Some(var_740) = &input.remove {
        let mut list_742 = scope_739.start_list(true, Some("item"));
        for item_741 in var_740 {
            #[allow(unused_mut)]
            let mut entry_743 = list_742.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(entry_743, item_741)?;
        }
        list_742.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_config(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_744 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_745) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification(scope_744, var_745)?;
    }
    #[allow(unused_mut)]
    let mut scope_746 = writer.prefix("Overrides");
    if let Some(var_747) = &input.overrides {
        let mut list_749 = scope_746.start_list(true, Some("item"));
        for item_748 in var_747 {
            #[allow(unused_mut)]
            let mut entry_750 = list_749.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_overrides(entry_750, item_748)?;
        }
        list_749.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ModifyTransitGatewayOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_751 = writer.prefix("AddTransitGatewayCidrBlocks");
    if let Some(var_752) = &input.add_transit_gateway_cidr_blocks {
        let mut list_754 = scope_751.start_list(true, Some("item"));
        for item_753 in var_752 {
            #[allow(unused_mut)]
            let mut entry_755 = list_754.entry();
            entry_755.string(item_753);
        }
        list_754.finish();
    }
    #[allow(unused_mut)]
    let mut scope_756 = writer.prefix("RemoveTransitGatewayCidrBlocks");
    if let Some(var_757) = &input.remove_transit_gateway_cidr_blocks {
        let mut list_759 = scope_756.start_list(true, Some("item"));
        for item_758 in var_757 {
            #[allow(unused_mut)]
            let mut entry_760 = list_759.entry();
            entry_760.string(item_758);
        }
        list_759.finish();
    }
    #[allow(unused_mut)]
    let mut scope_761 = writer.prefix("VpnEcmpSupport");
    if let Some(var_762) = &input.vpn_ecmp_support {
        scope_761.string(var_762.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_763 = writer.prefix("DnsSupport");
    if let Some(var_764) = &input.dns_support {
        scope_763.string(var_764.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_765 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_766) = &input.auto_accept_shared_attachments {
        scope_765.string(var_766.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_767 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_768) = &input.default_route_table_association {
        scope_767.string(var_768.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_769 = writer.prefix("AssociationDefaultRouteTableId");
    if let Some(var_770) = &input.association_default_route_table_id {
        scope_769.string(var_770);
    }
    #[allow(unused_mut)]
    let mut scope_771 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_772) = &input.default_route_table_propagation {
        scope_771.string(var_772.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_773 = writer.prefix("PropagationDefaultRouteTableId");
    if let Some(var_774) = &input.propagation_default_route_table_id {
        scope_773.string(var_774);
    }
    #[allow(unused_mut)]
    let mut scope_775 = writer.prefix("AmazonSideAsn");
    if let Some(var_776) = &input.amazon_side_asn {
        scope_775.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_776).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ModifyTransitGatewayVpcAttachmentRequestOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_777 = writer.prefix("DnsSupport");
    if let Some(var_778) = &input.dns_support {
        scope_777.string(var_778.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("Ipv6Support");
    if let Some(var_780) = &input.ipv6_support {
        scope_779.string(var_780.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("ApplianceModeSupport");
    if let Some(var_782) = &input.appliance_mode_support {
        scope_781.string(var_782.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_verified_access_endpoint_load_balancer_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ModifyVerifiedAccessEndpointLoadBalancerOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("SubnetId");
    if let Some(var_784) = &input.subnet_ids {
        let mut list_786 = scope_783.start_list(true, Some("item"));
        for item_785 in var_784 {
            #[allow(unused_mut)]
            let mut entry_787 = list_786.entry();
            entry_787.string(item_785);
        }
        list_786.finish();
    }
    #[allow(unused_mut)]
    let mut scope_788 = writer.prefix("Protocol");
    if let Some(var_789) = &input.protocol {
        scope_788.string(var_789.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_790 = writer.prefix("Port");
    if let Some(var_791) = &input.port {
        scope_790.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_791).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_verified_access_endpoint_eni_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ModifyVerifiedAccessEndpointEniOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("Protocol");
    if let Some(var_793) = &input.protocol {
        scope_792.string(var_793.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("Port");
    if let Some(var_795) = &input.port {
        scope_794.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_795).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_verified_access_log_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::VerifiedAccessLogOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("S3");
    if let Some(var_797) = &input.s3 {
        crate::query_ser::serialize_structure_crate_model_verified_access_log_s3_destination_options(scope_796, var_797)?;
    }
    #[allow(unused_mut)]
    let mut scope_798 = writer.prefix("CloudWatchLogs");
    if let Some(var_799) = &input.cloud_watch_logs {
        crate::query_ser::serialize_structure_crate_model_verified_access_log_cloud_watch_logs_destination_options(scope_798, var_799)?;
    }
    #[allow(unused_mut)]
    let mut scope_800 = writer.prefix("KinesisDataFirehose");
    if let Some(var_801) = &input.kinesis_data_firehose {
        crate::query_ser::serialize_structure_crate_model_verified_access_log_kinesis_data_firehose_destination_options(scope_800, var_801)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_verified_access_trust_provider_oidc_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ModifyVerifiedAccessTrustProviderOidcOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_802 = writer.prefix("Scope");
    if let Some(var_803) = &input.scope {
        scope_802.string(var_803);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_peering_connection_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PeeringConnectionOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_804 = writer.prefix("AllowDnsResolutionFromRemoteVpc");
    if let Some(var_805) = &input.allow_dns_resolution_from_remote_vpc {
        scope_804.boolean(*var_805);
    }
    #[allow(unused_mut)]
    let mut scope_806 = writer.prefix("AllowEgressFromLocalClassicLinkToRemoteVpc");
    if let Some(var_807) = &input.allow_egress_from_local_classic_link_to_remote_vpc {
        scope_806.boolean(*var_807);
    }
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("AllowEgressFromLocalVpcToRemoteClassicLink");
    if let Some(var_809) = &input.allow_egress_from_local_vpc_to_remote_classic_link {
        scope_808.boolean(*var_809);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_vpn_tunnel_options_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ModifyVpnTunnelOptionsSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("TunnelInsideCidr");
    if let Some(var_811) = &input.tunnel_inside_cidr {
        scope_810.string(var_811);
    }
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_813) = &input.tunnel_inside_ipv6_cidr {
        scope_812.string(var_813);
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("PreSharedKey");
    if let Some(var_815) = &input.pre_shared_key {
        scope_814.string(var_815);
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_817) = &input.phase1_lifetime_seconds {
        scope_816.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_817).into()));
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_819) = &input.phase2_lifetime_seconds {
        scope_818.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_819).into()));
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_821) = &input.rekey_margin_time_seconds {
        scope_820.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_821).into()));
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_823) = &input.rekey_fuzz_percentage {
        scope_822.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_823).into()));
    }
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("ReplayWindowSize");
    if let Some(var_825) = &input.replay_window_size {
        scope_824.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_825).into()));
    }
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_827) = &input.dpd_timeout_seconds {
        scope_826.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_827).into()));
    }
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("DPDTimeoutAction");
    if let Some(var_829) = &input.dpd_timeout_action {
        scope_828.string(var_829);
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_831) = &input.phase1_encryption_algorithms {
        let mut list_833 = scope_830.start_list(true, Some("item"));
        for item_832 in var_831 {
            #[allow(unused_mut)]
            let mut entry_834 = list_833.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_834, item_832)?;
        }
        list_833.finish();
    }
    #[allow(unused_mut)]
    let mut scope_835 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_836) = &input.phase2_encryption_algorithms {
        let mut list_838 = scope_835.start_list(true, Some("item"));
        for item_837 in var_836 {
            #[allow(unused_mut)]
            let mut entry_839 = list_838.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_839, item_837)?;
        }
        list_838.finish();
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_841) = &input.phase1_integrity_algorithms {
        let mut list_843 = scope_840.start_list(true, Some("item"));
        for item_842 in var_841 {
            #[allow(unused_mut)]
            let mut entry_844 = list_843.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_844, item_842)?;
        }
        list_843.finish();
    }
    #[allow(unused_mut)]
    let mut scope_845 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_846) = &input.phase2_integrity_algorithms {
        let mut list_848 = scope_845.start_list(true, Some("item"));
        for item_847 in var_846 {
            #[allow(unused_mut)]
            let mut entry_849 = list_848.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_849, item_847)?;
        }
        list_848.finish();
    }
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_851) = &input.phase1_dh_group_numbers {
        let mut list_853 = scope_850.start_list(true, Some("item"));
        for item_852 in var_851 {
            #[allow(unused_mut)]
            let mut entry_854 = list_853.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_854, item_852)?;
        }
        list_853.finish();
    }
    #[allow(unused_mut)]
    let mut scope_855 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_856) = &input.phase2_dh_group_numbers {
        let mut list_858 = scope_855.start_list(true, Some("item"));
        for item_857 in var_856 {
            #[allow(unused_mut)]
            let mut entry_859 = list_858.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_859, item_857)?;
        }
        list_858.finish();
    }
    #[allow(unused_mut)]
    let mut scope_860 = writer.prefix("IKEVersion");
    if let Some(var_861) = &input.ike_versions {
        let mut list_863 = scope_860.start_list(true, Some("item"));
        for item_862 in var_861 {
            #[allow(unused_mut)]
            let mut entry_864 = list_863.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(entry_864, item_862)?;
        }
        list_863.finish();
    }
    #[allow(unused_mut)]
    let mut scope_865 = writer.prefix("StartupAction");
    if let Some(var_866) = &input.startup_action {
        scope_865.string(var_866);
    }
    #[allow(unused_mut)]
    let mut scope_867 = writer.prefix("LogOptions");
    if let Some(var_868) = &input.log_options {
        crate::query_ser::serialize_structure_crate_model_vpn_tunnel_log_options_specification(scope_867, var_868)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cidr_authorization_context(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CidrAuthorizationContext) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_869 = writer.prefix("Message");
    if let Some(var_870) = &input.message {
        scope_869.string(var_870);
    }
    #[allow(unused_mut)]
    let mut scope_871 = writer.prefix("Signature");
    if let Some(var_872) = &input.signature {
        scope_871.string(var_872);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipam_cidr_authorization_context(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::IpamCidrAuthorizationContext) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_873 = writer.prefix("Message");
    if let Some(var_874) = &input.message {
        scope_873.string(var_874);
    }
    #[allow(unused_mut)]
    let mut scope_875 = writer.prefix("Signature");
    if let Some(var_876) = &input.signature {
        scope_875.string(var_876);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instance_limit_price(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ReservedInstanceLimitPrice) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_877 = writer.prefix("Amount");
    if let Some(var_878) = &input.amount {
        scope_877.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_878).into()));
    }
    #[allow(unused_mut)]
    let mut scope_879 = writer.prefix("CurrencyCode");
    if let Some(var_880) = &input.currency_code {
        scope_879.string(var_880.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_purchase_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PurchaseRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_881 = writer.prefix("InstanceCount");
    if let Some(var_882) = &input.instance_count {
        scope_881.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_882).into()));
    }
    #[allow(unused_mut)]
    let mut scope_883 = writer.prefix("PurchaseToken");
    if let Some(var_884) = &input.purchase_token {
        scope_883.string(var_884);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_register_instance_tag_attribute_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::RegisterInstanceTagAttributeRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_885 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_886) = &input.include_all_tags_of_instance {
        scope_885.boolean(*var_886);
    }
    #[allow(unused_mut)]
    let mut scope_887 = writer.prefix("InstanceTagKey");
    if let Some(var_888) = &input.instance_tag_keys {
        let mut list_890 = scope_887.start_list(true, Some("item"));
        for item_889 in var_888 {
            #[allow(unused_mut)]
            let mut entry_891 = list_890.entry();
            entry_891.string(item_889);
        }
        list_890.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_request_config_data(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotFleetRequestConfigData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_892 = writer.prefix("AllocationStrategy");
    if let Some(var_893) = &input.allocation_strategy {
        scope_892.string(var_893.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_894 = writer.prefix("OnDemandAllocationStrategy");
    if let Some(var_895) = &input.on_demand_allocation_strategy {
        scope_894.string(var_895.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_896 = writer.prefix("SpotMaintenanceStrategies");
    if let Some(var_897) = &input.spot_maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_spot_maintenance_strategies(scope_896, var_897)?;
    }
    #[allow(unused_mut)]
    let mut scope_898 = writer.prefix("ClientToken");
    if let Some(var_899) = &input.client_token {
        scope_898.string(var_899);
    }
    #[allow(unused_mut)]
    let mut scope_900 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_901) = &input.excess_capacity_termination_policy {
        scope_900.string(var_901.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_902 = writer.prefix("FulfilledCapacity");
    if let Some(var_903) = &input.fulfilled_capacity {
        scope_902.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_903).into()));
    }
    #[allow(unused_mut)]
    let mut scope_904 = writer.prefix("OnDemandFulfilledCapacity");
    if let Some(var_905) = &input.on_demand_fulfilled_capacity {
        scope_904.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_905).into()));
    }
    #[allow(unused_mut)]
    let mut scope_906 = writer.prefix("IamFleetRole");
    if let Some(var_907) = &input.iam_fleet_role {
        scope_906.string(var_907);
    }
    #[allow(unused_mut)]
    let mut scope_908 = writer.prefix("LaunchSpecifications");
    if let Some(var_909) = &input.launch_specifications {
        let mut list_911 = scope_908.start_list(true, Some("item"));
        for item_910 in var_909 {
            #[allow(unused_mut)]
            let mut entry_912 = list_911.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_launch_specification(entry_912, item_910)?;
        }
        list_911.finish();
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_914) = &input.launch_template_configs {
        let mut list_916 = scope_913.start_list(true, Some("item"));
        for item_915 in var_914 {
            #[allow(unused_mut)]
            let mut entry_917 = list_916.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(entry_917, item_915)?;
        }
        list_916.finish();
    }
    #[allow(unused_mut)]
    let mut scope_918 = writer.prefix("SpotPrice");
    if let Some(var_919) = &input.spot_price {
        scope_918.string(var_919);
    }
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("TargetCapacity");
    if let Some(var_921) = &input.target_capacity {
        scope_920.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_921).into()));
    }
    #[allow(unused_mut)]
    let mut scope_922 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_923) = &input.on_demand_target_capacity {
        scope_922.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_923).into()));
    }
    #[allow(unused_mut)]
    let mut scope_924 = writer.prefix("OnDemandMaxTotalPrice");
    if let Some(var_925) = &input.on_demand_max_total_price {
        scope_924.string(var_925);
    }
    #[allow(unused_mut)]
    let mut scope_926 = writer.prefix("SpotMaxTotalPrice");
    if let Some(var_927) = &input.spot_max_total_price {
        scope_926.string(var_927);
    }
    #[allow(unused_mut)]
    let mut scope_928 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_929) = &input.terminate_instances_with_expiration {
        scope_928.boolean(*var_929);
    }
    #[allow(unused_mut)]
    let mut scope_930 = writer.prefix("Type");
    if let Some(var_931) = &input.r#type {
        scope_930.string(var_931.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_932 = writer.prefix("ValidFrom");
    if let Some(var_933) = &input.valid_from {
        scope_932.date_time(var_933, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_934 = writer.prefix("ValidUntil");
    if let Some(var_935) = &input.valid_until {
        scope_934.date_time(var_935, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_937) = &input.replace_unhealthy_instances {
        scope_936.boolean(*var_937);
    }
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_939) = &input.instance_interruption_behavior {
        scope_938.string(var_939.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("LoadBalancersConfig");
    if let Some(var_941) = &input.load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_load_balancers_config(scope_940, var_941)?;
    }
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_943) = &input.instance_pools_to_use_count {
        scope_942.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_943).into()));
    }
    #[allow(unused_mut)]
    let mut scope_944 = writer.prefix("Context");
    if let Some(var_945) = &input.context {
        scope_944.string(var_945);
    }
    #[allow(unused_mut)]
    let mut scope_946 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_947) = &input.target_capacity_unit_type {
        scope_946.string(var_947.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_948 = writer.prefix("TagSpecification");
    if let Some(var_949) = &input.tag_specifications {
        let mut list_951 = scope_948.start_list(true, Some("item"));
        for item_950 in var_949 {
            #[allow(unused_mut)]
            let mut entry_952 = list_951.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_952, item_950)?;
        }
        list_951.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_spot_launch_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::RequestSpotLaunchSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("SecurityGroupId");
    if let Some(var_954) = &input.security_group_ids {
        let mut list_956 = scope_953.start_list(true, Some("item"));
        for item_955 in var_954 {
            #[allow(unused_mut)]
            let mut entry_957 = list_956.entry();
            entry_957.string(item_955);
        }
        list_956.finish();
    }
    #[allow(unused_mut)]
    let mut scope_958 = writer.prefix("SecurityGroup");
    if let Some(var_959) = &input.security_groups {
        let mut list_961 = scope_958.start_list(true, Some("item"));
        for item_960 in var_959 {
            #[allow(unused_mut)]
            let mut entry_962 = list_961.entry();
            entry_962.string(item_960);
        }
        list_961.finish();
    }
    #[allow(unused_mut)]
    let mut scope_963 = writer.prefix("AddressingType");
    if let Some(var_964) = &input.addressing_type {
        scope_963.string(var_964);
    }
    #[allow(unused_mut)]
    let mut scope_965 = writer.prefix("BlockDeviceMapping");
    if let Some(var_966) = &input.block_device_mappings {
        let mut list_968 = scope_965.start_list(true, Some("item"));
        for item_967 in var_966 {
            #[allow(unused_mut)]
            let mut entry_969 = list_968.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(entry_969, item_967)?;
        }
        list_968.finish();
    }
    #[allow(unused_mut)]
    let mut scope_970 = writer.prefix("EbsOptimized");
    if let Some(var_971) = &input.ebs_optimized {
        scope_970.boolean(*var_971);
    }
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("IamInstanceProfile");
    if let Some(var_973) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(scope_972, var_973)?;
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("ImageId");
    if let Some(var_975) = &input.image_id {
        scope_974.string(var_975);
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("InstanceType");
    if let Some(var_977) = &input.instance_type {
        scope_976.string(var_977.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("KernelId");
    if let Some(var_979) = &input.kernel_id {
        scope_978.string(var_979);
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("KeyName");
    if let Some(var_981) = &input.key_name {
        scope_980.string(var_981);
    }
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("Monitoring");
    if let Some(var_983) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(scope_982, var_983)?;
    }
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("NetworkInterface");
    if let Some(var_985) = &input.network_interfaces {
        let mut list_987 = scope_984.start_list(true, Some("item"));
        for item_986 in var_985 {
            #[allow(unused_mut)]
            let mut entry_988 = list_987.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_988, item_986)?;
        }
        list_987.finish();
    }
    #[allow(unused_mut)]
    let mut scope_989 = writer.prefix("Placement");
    if let Some(var_990) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_989, var_990)?;
    }
    #[allow(unused_mut)]
    let mut scope_991 = writer.prefix("RamdiskId");
    if let Some(var_992) = &input.ramdisk_id {
        scope_991.string(var_992);
    }
    #[allow(unused_mut)]
    let mut scope_993 = writer.prefix("SubnetId");
    if let Some(var_994) = &input.subnet_id {
        scope_993.string(var_994);
    }
    #[allow(unused_mut)]
    let mut scope_995 = writer.prefix("UserData");
    if let Some(var_996) = &input.user_data {
        scope_995.string(var_996);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_run_instances_monitoring_enabled(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::RunInstancesMonitoringEnabled) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_997 = writer.prefix("Enabled");
    if let Some(var_998) = &input.enabled {
        scope_997.boolean(*var_998);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_placement(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Placement) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_999 = writer.prefix("AvailabilityZone");
    if let Some(var_1000) = &input.availability_zone {
        scope_999.string(var_1000);
    }
    #[allow(unused_mut)]
    let mut scope_1001 = writer.prefix("Affinity");
    if let Some(var_1002) = &input.affinity {
        scope_1001.string(var_1002);
    }
    #[allow(unused_mut)]
    let mut scope_1003 = writer.prefix("GroupName");
    if let Some(var_1004) = &input.group_name {
        scope_1003.string(var_1004);
    }
    #[allow(unused_mut)]
    let mut scope_1005 = writer.prefix("PartitionNumber");
    if let Some(var_1006) = &input.partition_number {
        scope_1005.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1006).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1007 = writer.prefix("HostId");
    if let Some(var_1008) = &input.host_id {
        scope_1007.string(var_1008);
    }
    #[allow(unused_mut)]
    let mut scope_1009 = writer.prefix("Tenancy");
    if let Some(var_1010) = &input.tenancy {
        scope_1009.string(var_1010.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1011 = writer.prefix("SpreadDomain");
    if let Some(var_1012) = &input.spread_domain {
        scope_1011.string(var_1012);
    }
    #[allow(unused_mut)]
    let mut scope_1013 = writer.prefix("HostResourceGroupArn");
    if let Some(var_1014) = &input.host_resource_group_arn {
        scope_1013.string(var_1014);
    }
    #[allow(unused_mut)]
    let mut scope_1015 = writer.prefix("GroupId");
    if let Some(var_1016) = &input.group_id {
        scope_1015.string(var_1016);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_network_interface_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceNetworkInterfaceSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1017 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1018) = &input.associate_public_ip_address {
        scope_1017.boolean(*var_1018);
    }
    #[allow(unused_mut)]
    let mut scope_1019 = writer.prefix("DeleteOnTermination");
    if let Some(var_1020) = &input.delete_on_termination {
        scope_1019.boolean(*var_1020);
    }
    #[allow(unused_mut)]
    let mut scope_1021 = writer.prefix("Description");
    if let Some(var_1022) = &input.description {
        scope_1021.string(var_1022);
    }
    #[allow(unused_mut)]
    let mut scope_1023 = writer.prefix("DeviceIndex");
    if let Some(var_1024) = &input.device_index {
        scope_1023.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1024).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1025 = writer.prefix("SecurityGroupId");
    if let Some(var_1026) = &input.groups {
        let mut list_1028 = scope_1025.start_list(true, Some("SecurityGroupId"));
        for item_1027 in var_1026 {
            #[allow(unused_mut)]
            let mut entry_1029 = list_1028.entry();
            entry_1029.string(item_1027);
        }
        list_1028.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1030 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1031) = &input.ipv6_address_count {
        scope_1030.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1031).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1032 = writer.prefix("Ipv6Addresses");
    if let Some(var_1033) = &input.ipv6_addresses {
        let mut list_1035 = scope_1032.start_list(true, Some("item"));
        for item_1034 in var_1033 {
            #[allow(unused_mut)]
            let mut entry_1036 = list_1035.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(entry_1036, item_1034)?;
        }
        list_1035.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1038) = &input.network_interface_id {
        scope_1037.string(var_1038);
    }
    #[allow(unused_mut)]
    let mut scope_1039 = writer.prefix("PrivateIpAddress");
    if let Some(var_1040) = &input.private_ip_address {
        scope_1039.string(var_1040);
    }
    #[allow(unused_mut)]
    let mut scope_1041 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1042) = &input.private_ip_addresses {
        let mut list_1044 = scope_1041.start_list(true, Some("item"));
        for item_1043 in var_1042 {
            #[allow(unused_mut)]
            let mut entry_1045 = list_1044.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(entry_1045, item_1043)?;
        }
        list_1044.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1046 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1047) = &input.secondary_private_ip_address_count {
        scope_1046.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1047).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1048 = writer.prefix("SubnetId");
    if let Some(var_1049) = &input.subnet_id {
        scope_1048.string(var_1049);
    }
    #[allow(unused_mut)]
    let mut scope_1050 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_1051) = &input.associate_carrier_ip_address {
        scope_1050.boolean(*var_1051);
    }
    #[allow(unused_mut)]
    let mut scope_1052 = writer.prefix("InterfaceType");
    if let Some(var_1053) = &input.interface_type {
        scope_1052.string(var_1053);
    }
    #[allow(unused_mut)]
    let mut scope_1054 = writer.prefix("NetworkCardIndex");
    if let Some(var_1055) = &input.network_card_index {
        scope_1054.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1055).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1056 = writer.prefix("Ipv4Prefix");
    if let Some(var_1057) = &input.ipv4_prefixes {
        let mut list_1059 = scope_1056.start_list(true, Some("item"));
        for item_1058 in var_1057 {
            #[allow(unused_mut)]
            let mut entry_1060 = list_1059.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(entry_1060, item_1058)?;
        }
        list_1059.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1062) = &input.ipv4_prefix_count {
        scope_1061.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1062).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("Ipv6Prefix");
    if let Some(var_1064) = &input.ipv6_prefixes {
        let mut list_1066 = scope_1063.start_list(true, Some("item"));
        for item_1065 in var_1064 {
            #[allow(unused_mut)]
            let mut entry_1067 = list_1066.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(entry_1067, item_1065)?;
        }
        list_1066.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1068 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1069) = &input.ipv6_prefix_count {
        scope_1068.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1069).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_gpu_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ElasticGpuSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1070 = writer.prefix("Type");
    if let Some(var_1071) = &input.r#type {
        scope_1070.string(var_1071);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_inference_accelerator(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ElasticInferenceAccelerator) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1072 = writer.prefix("Type");
    if let Some(var_1073) = &input.r#type {
        scope_1072.string(var_1073);
    }
    #[allow(unused_mut)]
    let mut scope_1074 = writer.prefix("Count");
    if let Some(var_1075) = &input.count {
        scope_1074.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1075).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1076 = writer.prefix("LaunchTemplateId");
    if let Some(var_1077) = &input.launch_template_id {
        scope_1076.string(var_1077);
    }
    #[allow(unused_mut)]
    let mut scope_1078 = writer.prefix("LaunchTemplateName");
    if let Some(var_1079) = &input.launch_template_name {
        scope_1078.string(var_1079);
    }
    #[allow(unused_mut)]
    let mut scope_1080 = writer.prefix("Version");
    if let Some(var_1081) = &input.version {
        scope_1080.string(var_1081);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_market_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceMarketOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1082 = writer.prefix("MarketType");
    if let Some(var_1083) = &input.market_type {
        scope_1082.string(var_1083.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1084 = writer.prefix("SpotOptions");
    if let Some(var_1085) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_market_options(scope_1084, var_1085)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_credit_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreditSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1086 = writer.prefix("CpuCredits");
    if let Some(var_1087) = &input.cpu_credits {
        scope_1086.string(var_1087);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cpu_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CpuOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1088 = writer.prefix("CoreCount");
    if let Some(var_1089) = &input.core_count {
        scope_1088.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1089).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1090 = writer.prefix("ThreadsPerCore");
    if let Some(var_1091) = &input.threads_per_core {
        scope_1090.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1091).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_hibernation_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::HibernationOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1092 = writer.prefix("Configured");
    if let Some(var_1093) = &input.configured {
        scope_1092.boolean(*var_1093);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_license_configuration_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LicenseConfigurationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1094 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_1095) = &input.license_configuration_arn {
        scope_1094.string(var_1095);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_metadata_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceMetadataOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1096 = writer.prefix("HttpTokens");
    if let Some(var_1097) = &input.http_tokens {
        scope_1096.string(var_1097.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1098 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_1099) = &input.http_put_response_hop_limit {
        scope_1098.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1099).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1100 = writer.prefix("HttpEndpoint");
    if let Some(var_1101) = &input.http_endpoint {
        scope_1100.string(var_1101.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1102 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_1103) = &input.http_protocol_ipv6 {
        scope_1102.string(var_1103.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1104 = writer.prefix("InstanceMetadataTags");
    if let Some(var_1105) = &input.instance_metadata_tags {
        scope_1104.string(var_1105.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_enclave_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::EnclaveOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1106 = writer.prefix("Enabled");
    if let Some(var_1107) = &input.enabled {
        scope_1106.boolean(*var_1107);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_private_dns_name_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PrivateDnsNameOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1108 = writer.prefix("HostnameType");
    if let Some(var_1109) = &input.hostname_type {
        scope_1108.string(var_1109.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1110 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_1111) = &input.enable_resource_name_dns_a_record {
        scope_1110.boolean(*var_1111);
    }
    #[allow(unused_mut)]
    let mut scope_1112 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_1113) = &input.enable_resource_name_dns_aaaa_record {
        scope_1112.boolean(*var_1113);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_maintenance_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceMaintenanceOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1114 = writer.prefix("AutoRecovery");
    if let Some(var_1115) = &input.auto_recovery {
        scope_1114.string(var_1115.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_launch_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesLaunchSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1116 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1117) = &input.block_device_mappings {
        let mut list_1119 = scope_1116.start_list(true, Some("BlockDeviceMapping"));
        for item_1118 in var_1117 {
            #[allow(unused_mut)]
            let mut entry_1120 = list_1119.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_block_device_mapping(entry_1120, item_1118)?;
        }
        list_1119.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("EbsOptimized");
    if let Some(var_1122) = &input.ebs_optimized {
        scope_1121.boolean(*var_1122);
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("IamInstanceProfile");
    if let Some(var_1124) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_iam_instance_profile(scope_1123, var_1124)?;
    }
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("ImageId");
    if let Some(var_1126) = &input.image_id {
        scope_1125.string(var_1126);
    }
    #[allow(unused_mut)]
    let mut scope_1127 = writer.prefix("InstanceType");
    if let Some(var_1128) = &input.instance_type {
        scope_1127.string(var_1128);
    }
    #[allow(unused_mut)]
    let mut scope_1129 = writer.prefix("KernelId");
    if let Some(var_1130) = &input.kernel_id {
        scope_1129.string(var_1130);
    }
    #[allow(unused_mut)]
    let mut scope_1131 = writer.prefix("KeyName");
    if let Some(var_1132) = &input.key_name {
        scope_1131.string(var_1132);
    }
    #[allow(unused_mut)]
    let mut scope_1133 = writer.prefix("Monitoring");
    if let Some(var_1134) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_monitoring(scope_1133, var_1134)?;
    }
    #[allow(unused_mut)]
    let mut scope_1135 = writer.prefix("NetworkInterface");
    if let Some(var_1136) = &input.network_interfaces {
        let mut list_1138 = scope_1135.start_list(true, Some("NetworkInterface"));
        for item_1137 in var_1136 {
            #[allow(unused_mut)]
            let mut entry_1139 = list_1138.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_network_interface(entry_1139, item_1137)?;
        }
        list_1138.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1140 = writer.prefix("Placement");
    if let Some(var_1141) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_placement(scope_1140, var_1141)?;
    }
    #[allow(unused_mut)]
    let mut scope_1142 = writer.prefix("RamdiskId");
    if let Some(var_1143) = &input.ramdisk_id {
        scope_1142.string(var_1143);
    }
    #[allow(unused_mut)]
    let mut scope_1144 = writer.prefix("SecurityGroupId");
    if let Some(var_1145) = &input.security_group_ids {
        let mut list_1147 = scope_1144.start_list(true, Some("SecurityGroupId"));
        for item_1146 in var_1145 {
            #[allow(unused_mut)]
            let mut entry_1148 = list_1147.entry();
            entry_1148.string(item_1146);
        }
        list_1147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("SubnetId");
    if let Some(var_1150) = &input.subnet_id {
        scope_1149.string(var_1150);
    }
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("UserData");
    if let Some(var_1152) = &input.user_data {
        scope_1151.string(var_1152);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_description(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SecurityGroupRuleDescription) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_1154) = &input.security_group_rule_id {
        scope_1153.string(var_1154);
    }
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("Description");
    if let Some(var_1156) = &input.description {
        scope_1155.string(var_1156);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ena_srd_udp_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::EnaSrdUdpSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("EnaSrdUdpEnabled");
    if let Some(var_1158) = &input.ena_srd_udp_enabled {
        scope_1157.boolean(*var_1158);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_range(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::IpRange) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("CidrIp");
    if let Some(var_1160) = &input.cidr_ip {
        scope_1159.string(var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("Description");
    if let Some(var_1162) = &input.description {
        scope_1161.string(var_1162);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_range(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Ipv6Range) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("CidrIpv6");
    if let Some(var_1164) = &input.cidr_ipv6 {
        scope_1163.string(var_1164);
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("Description");
    if let Some(var_1166) = &input.description {
        scope_1165.string(var_1166);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_prefix_list_id(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PrefixListId) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("Description");
    if let Some(var_1168) = &input.description {
        scope_1167.string(var_1168);
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("PrefixListId");
    if let Some(var_1170) = &input.prefix_list_id {
        scope_1169.string(var_1170);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_id_group_pair(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::UserIdGroupPair) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("Description");
    if let Some(var_1172) = &input.description {
        scope_1171.string(var_1172);
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("GroupId");
    if let Some(var_1174) = &input.group_id {
        scope_1173.string(var_1174);
    }
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("GroupName");
    if let Some(var_1176) = &input.group_name {
        scope_1175.string(var_1176);
    }
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("PeeringStatus");
    if let Some(var_1178) = &input.peering_status {
        scope_1177.string(var_1178);
    }
    #[allow(unused_mut)]
    let mut scope_1179 = writer.prefix("UserId");
    if let Some(var_1180) = &input.user_id {
        scope_1179.string(var_1180);
    }
    #[allow(unused_mut)]
    let mut scope_1181 = writer.prefix("VpcId");
    if let Some(var_1182) = &input.vpc_id {
        scope_1181.string(var_1182);
    }
    #[allow(unused_mut)]
    let mut scope_1183 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1184) = &input.vpc_peering_connection_id {
        scope_1183.string(var_1184);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_storage(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::S3Storage) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1185 = writer.prefix("AWSAccessKeyId");
    if let Some(var_1186) = &input.aws_access_key_id {
        scope_1185.string(var_1186);
    }
    #[allow(unused_mut)]
    let mut scope_1187 = writer.prefix("Bucket");
    if let Some(var_1188) = &input.bucket {
        scope_1187.string(var_1188);
    }
    #[allow(unused_mut)]
    let mut scope_1189 = writer.prefix("Prefix");
    if let Some(var_1190) = &input.prefix {
        scope_1189.string(var_1190);
    }
    #[allow(unused_mut)]
    let mut scope_1191 = writer.prefix("UploadPolicy");
    if let Some(var_1192) = &input.upload_policy {
        scope_1191.string(&aws_smithy_types::base64::encode(var_1192));
    }
    #[allow(unused_mut)]
    let mut scope_1193 = writer.prefix("UploadPolicySignature");
    if let Some(var_1194) = &input.upload_policy_signature {
        scope_1193.string(var_1194);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_directory_service_authentication_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::DirectoryServiceAuthenticationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1195 = writer.prefix("DirectoryId");
    if let Some(var_1196) = &input.directory_id {
        scope_1195.string(var_1196);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_certificate_authentication_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CertificateAuthenticationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1197 = writer.prefix("ClientRootCertificateChainArn");
    if let Some(var_1198) = &input.client_root_certificate_chain_arn {
        scope_1197.string(var_1198);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_federated_authentication_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FederatedAuthenticationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1199 = writer.prefix("SAMLProviderArn");
    if let Some(var_1200) = &input.saml_provider_arn {
        scope_1199.string(var_1200);
    }
    #[allow(unused_mut)]
    let mut scope_1201 = writer.prefix("SelfServiceSAMLProviderArn");
    if let Some(var_1202) = &input.self_service_saml_provider_arn {
        scope_1201.string(var_1202);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FleetSpotMaintenanceStrategiesRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1203 = writer.prefix("CapacityRebalance");
    if let Some(var_1204) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(scope_1203, var_1204)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CapacityReservationOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1205 = writer.prefix("UsageStrategy");
    if let Some(var_1206) = &input.usage_strategy {
        scope_1205.string(var_1206.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FleetLaunchTemplateSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1207 = writer.prefix("LaunchTemplateId");
    if let Some(var_1208) = &input.launch_template_id {
        scope_1207.string(var_1208);
    }
    #[allow(unused_mut)]
    let mut scope_1209 = writer.prefix("LaunchTemplateName");
    if let Some(var_1210) = &input.launch_template_name {
        scope_1209.string(var_1210);
    }
    #[allow(unused_mut)]
    let mut scope_1211 = writer.prefix("Version");
    if let Some(var_1212) = &input.version {
        scope_1211.string(var_1212);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_overrides_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FleetLaunchTemplateOverridesRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1213 = writer.prefix("InstanceType");
    if let Some(var_1214) = &input.instance_type {
        scope_1213.string(var_1214.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1215 = writer.prefix("MaxPrice");
    if let Some(var_1216) = &input.max_price {
        scope_1215.string(var_1216);
    }
    #[allow(unused_mut)]
    let mut scope_1217 = writer.prefix("SubnetId");
    if let Some(var_1218) = &input.subnet_id {
        scope_1217.string(var_1218);
    }
    #[allow(unused_mut)]
    let mut scope_1219 = writer.prefix("AvailabilityZone");
    if let Some(var_1220) = &input.availability_zone {
        scope_1219.string(var_1220);
    }
    #[allow(unused_mut)]
    let mut scope_1221 = writer.prefix("WeightedCapacity");
    if let Some(var_1222) = &input.weighted_capacity {
        scope_1221.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1222).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1223 = writer.prefix("Priority");
    if let Some(var_1224) = &input.priority {
        scope_1223.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1224).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1225 = writer.prefix("Placement");
    if let Some(var_1226) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_1225, var_1226)?;
    }
    #[allow(unused_mut)]
    let mut scope_1227 = writer.prefix("InstanceRequirements");
    if let Some(var_1228) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(scope_1227, var_1228)?;
    }
    #[allow(unused_mut)]
    let mut scope_1229 = writer.prefix("ImageId");
    if let Some(var_1230) = &input.image_id {
        scope_1229.string(var_1230);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_block_device(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::EbsBlockDevice) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1231 = writer.prefix("DeleteOnTermination");
    if let Some(var_1232) = &input.delete_on_termination {
        scope_1231.boolean(*var_1232);
    }
    #[allow(unused_mut)]
    let mut scope_1233 = writer.prefix("Iops");
    if let Some(var_1234) = &input.iops {
        scope_1233.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1234).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1235 = writer.prefix("SnapshotId");
    if let Some(var_1236) = &input.snapshot_id {
        scope_1235.string(var_1236);
    }
    #[allow(unused_mut)]
    let mut scope_1237 = writer.prefix("VolumeSize");
    if let Some(var_1238) = &input.volume_size {
        scope_1237.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1238).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1239 = writer.prefix("VolumeType");
    if let Some(var_1240) = &input.volume_type {
        scope_1239.string(var_1240.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1241 = writer.prefix("KmsKeyId");
    if let Some(var_1242) = &input.kms_key_id {
        scope_1241.string(var_1242);
    }
    #[allow(unused_mut)]
    let mut scope_1243 = writer.prefix("Throughput");
    if let Some(var_1244) = &input.throughput {
        scope_1243.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1244).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("OutpostArn");
    if let Some(var_1246) = &input.outpost_arn {
        scope_1245.string(var_1246);
    }
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("Encrypted");
    if let Some(var_1248) = &input.encrypted {
        scope_1247.boolean(*var_1248);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateIamInstanceProfileSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("Arn");
    if let Some(var_1250) = &input.arn {
        scope_1249.string(var_1250);
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("Name");
    if let Some(var_1252) = &input.name {
        scope_1251.string(var_1252);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_block_device_mapping_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateBlockDeviceMappingRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("DeviceName");
    if let Some(var_1254) = &input.device_name {
        scope_1253.string(var_1254);
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("VirtualName");
    if let Some(var_1256) = &input.virtual_name {
        scope_1255.string(var_1256);
    }
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("Ebs");
    if let Some(var_1258) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_launch_template_ebs_block_device_request(scope_1257, var_1258)?;
    }
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("NoDevice");
    if let Some(var_1260) = &input.no_device {
        scope_1259.string(var_1260);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1261 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_1262) = &input.associate_carrier_ip_address {
        scope_1261.boolean(*var_1262);
    }
    #[allow(unused_mut)]
    let mut scope_1263 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1264) = &input.associate_public_ip_address {
        scope_1263.boolean(*var_1264);
    }
    #[allow(unused_mut)]
    let mut scope_1265 = writer.prefix("DeleteOnTermination");
    if let Some(var_1266) = &input.delete_on_termination {
        scope_1265.boolean(*var_1266);
    }
    #[allow(unused_mut)]
    let mut scope_1267 = writer.prefix("Description");
    if let Some(var_1268) = &input.description {
        scope_1267.string(var_1268);
    }
    #[allow(unused_mut)]
    let mut scope_1269 = writer.prefix("DeviceIndex");
    if let Some(var_1270) = &input.device_index {
        scope_1269.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1270).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1271 = writer.prefix("SecurityGroupId");
    if let Some(var_1272) = &input.groups {
        let mut list_1274 = scope_1271.start_list(true, Some("SecurityGroupId"));
        for item_1273 in var_1272 {
            #[allow(unused_mut)]
            let mut entry_1275 = list_1274.entry();
            entry_1275.string(item_1273);
        }
        list_1274.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1276 = writer.prefix("InterfaceType");
    if let Some(var_1277) = &input.interface_type {
        scope_1276.string(var_1277);
    }
    #[allow(unused_mut)]
    let mut scope_1278 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1279) = &input.ipv6_address_count {
        scope_1278.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1279).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1280 = writer.prefix("Ipv6Addresses");
    if let Some(var_1281) = &input.ipv6_addresses {
        let mut list_1283 = scope_1280.start_list(true, Some("InstanceIpv6Address"));
        for item_1282 in var_1281 {
            #[allow(unused_mut)]
            let mut entry_1284 = list_1283.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address_request(entry_1284, item_1282)?;
        }
        list_1283.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1285 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1286) = &input.network_interface_id {
        scope_1285.string(var_1286);
    }
    #[allow(unused_mut)]
    let mut scope_1287 = writer.prefix("PrivateIpAddress");
    if let Some(var_1288) = &input.private_ip_address {
        scope_1287.string(var_1288);
    }
    #[allow(unused_mut)]
    let mut scope_1289 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1290) = &input.private_ip_addresses {
        let mut list_1292 = scope_1289.start_list(true, Some("item"));
        for item_1291 in var_1290 {
            #[allow(unused_mut)]
            let mut entry_1293 = list_1292.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(entry_1293, item_1291)?;
        }
        list_1292.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1294 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1295) = &input.secondary_private_ip_address_count {
        scope_1294.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1295).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1296 = writer.prefix("SubnetId");
    if let Some(var_1297) = &input.subnet_id {
        scope_1296.string(var_1297);
    }
    #[allow(unused_mut)]
    let mut scope_1298 = writer.prefix("NetworkCardIndex");
    if let Some(var_1299) = &input.network_card_index {
        scope_1298.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1299).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1300 = writer.prefix("Ipv4Prefix");
    if let Some(var_1301) = &input.ipv4_prefixes {
        let mut list_1303 = scope_1300.start_list(true, Some("item"));
        for item_1302 in var_1301 {
            #[allow(unused_mut)]
            let mut entry_1304 = list_1303.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(entry_1304, item_1302)?;
        }
        list_1303.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1306) = &input.ipv4_prefix_count {
        scope_1305.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1306).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("Ipv6Prefix");
    if let Some(var_1308) = &input.ipv6_prefixes {
        let mut list_1310 = scope_1307.start_list(true, Some("item"));
        for item_1309 in var_1308 {
            #[allow(unused_mut)]
            let mut entry_1311 = list_1310.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(entry_1311, item_1309)?;
        }
        list_1310.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1312 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1313) = &input.ipv6_prefix_count {
        scope_1312.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1313).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_templates_monitoring_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplatesMonitoringRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1314 = writer.prefix("Enabled");
    if let Some(var_1315) = &input.enabled {
        scope_1314.boolean(*var_1315);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_placement_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplatePlacementRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1316 = writer.prefix("AvailabilityZone");
    if let Some(var_1317) = &input.availability_zone {
        scope_1316.string(var_1317);
    }
    #[allow(unused_mut)]
    let mut scope_1318 = writer.prefix("Affinity");
    if let Some(var_1319) = &input.affinity {
        scope_1318.string(var_1319);
    }
    #[allow(unused_mut)]
    let mut scope_1320 = writer.prefix("GroupName");
    if let Some(var_1321) = &input.group_name {
        scope_1320.string(var_1321);
    }
    #[allow(unused_mut)]
    let mut scope_1322 = writer.prefix("HostId");
    if let Some(var_1323) = &input.host_id {
        scope_1322.string(var_1323);
    }
    #[allow(unused_mut)]
    let mut scope_1324 = writer.prefix("Tenancy");
    if let Some(var_1325) = &input.tenancy {
        scope_1324.string(var_1325.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1326 = writer.prefix("SpreadDomain");
    if let Some(var_1327) = &input.spread_domain {
        scope_1326.string(var_1327);
    }
    #[allow(unused_mut)]
    let mut scope_1328 = writer.prefix("HostResourceGroupArn");
    if let Some(var_1329) = &input.host_resource_group_arn {
        scope_1328.string(var_1329);
    }
    #[allow(unused_mut)]
    let mut scope_1330 = writer.prefix("PartitionNumber");
    if let Some(var_1331) = &input.partition_number {
        scope_1330.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1331).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1332 = writer.prefix("GroupId");
    if let Some(var_1333) = &input.group_id {
        scope_1332.string(var_1333);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_tag_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateTagSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1334 = writer.prefix("ResourceType");
    if let Some(var_1335) = &input.resource_type {
        scope_1334.string(var_1335.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1336 = writer.prefix("Tag");
    if let Some(var_1337) = &input.tags {
        let mut list_1339 = scope_1336.start_list(true, Some("item"));
        for item_1338 in var_1337 {
            #[allow(unused_mut)]
            let mut entry_1340 = list_1339.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1340, item_1338)?;
        }
        list_1339.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_elastic_inference_accelerator(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateElasticInferenceAccelerator) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1341 = writer.prefix("Type");
    if let Some(var_1342) = &input.r#type {
        scope_1341.string(var_1342);
    }
    #[allow(unused_mut)]
    let mut scope_1343 = writer.prefix("Count");
    if let Some(var_1344) = &input.count {
        scope_1343.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1344).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_market_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateInstanceMarketOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1345 = writer.prefix("MarketType");
    if let Some(var_1346) = &input.market_type {
        scope_1345.string(var_1346.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1347 = writer.prefix("SpotOptions");
    if let Some(var_1348) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_spot_market_options_request(scope_1347, var_1348)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_cpu_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateCpuOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1349 = writer.prefix("CoreCount");
    if let Some(var_1350) = &input.core_count {
        scope_1349.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1350).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1351 = writer.prefix("ThreadsPerCore");
    if let Some(var_1352) = &input.threads_per_core {
        scope_1351.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1352).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateCapacityReservationSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1353 = writer.prefix("CapacityReservationPreference");
    if let Some(var_1354) = &input.capacity_reservation_preference {
        scope_1353.string(var_1354.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1355 = writer.prefix("CapacityReservationTarget");
    if let Some(var_1356) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(scope_1355, var_1356)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_license_configuration_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateLicenseConfigurationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1357 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_1358) = &input.license_configuration_arn {
        scope_1357.string(var_1358);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_hibernation_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateHibernationOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1359 = writer.prefix("Configured");
    if let Some(var_1360) = &input.configured {
        scope_1359.boolean(*var_1360);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_metadata_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateInstanceMetadataOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1361 = writer.prefix("HttpTokens");
    if let Some(var_1362) = &input.http_tokens {
        scope_1361.string(var_1362.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1363 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_1364) = &input.http_put_response_hop_limit {
        scope_1363.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1364).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1365 = writer.prefix("HttpEndpoint");
    if let Some(var_1366) = &input.http_endpoint {
        scope_1365.string(var_1366.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1367 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_1368) = &input.http_protocol_ipv6 {
        scope_1367.string(var_1368.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1369 = writer.prefix("InstanceMetadataTags");
    if let Some(var_1370) = &input.instance_metadata_tags {
        scope_1369.string(var_1370.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_enclave_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateEnclaveOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1371 = writer.prefix("Enabled");
    if let Some(var_1372) = &input.enabled {
        scope_1371.boolean(*var_1372);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_private_dns_name_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplatePrivateDnsNameOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1373 = writer.prefix("HostnameType");
    if let Some(var_1374) = &input.hostname_type {
        scope_1373.string(var_1374.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1375 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_1376) = &input.enable_resource_name_dns_a_record {
        scope_1375.boolean(*var_1376);
    }
    #[allow(unused_mut)]
    let mut scope_1377 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_1378) = &input.enable_resource_name_dns_aaaa_record {
        scope_1377.boolean(*var_1378);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_maintenance_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateInstanceMaintenanceOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1379 = writer.prefix("AutoRecovery");
    if let Some(var_1380) = &input.auto_recovery {
        scope_1379.string(var_1380.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_path_statement_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PathStatementRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1381 = writer.prefix("PacketHeaderStatement");
    if let Some(var_1382) = &input.packet_header_statement {
        crate::query_ser::serialize_structure_crate_model_packet_header_statement_request(scope_1381, var_1382)?;
    }
    #[allow(unused_mut)]
    let mut scope_1383 = writer.prefix("ResourceStatement");
    if let Some(var_1384) = &input.resource_statement {
        crate::query_ser::serialize_structure_crate_model_resource_statement_request(scope_1383, var_1384)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_through_resources_statement_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ThroughResourcesStatementRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1385 = writer.prefix("ResourceStatement");
    if let Some(var_1386) = &input.resource_statement {
        crate::query_ser::serialize_structure_crate_model_resource_statement_request(scope_1385, var_1386)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_tunnel_options_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::VpnTunnelOptionsSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1387 = writer.prefix("TunnelInsideCidr");
    if let Some(var_1388) = &input.tunnel_inside_cidr {
        scope_1387.string(var_1388);
    }
    #[allow(unused_mut)]
    let mut scope_1389 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_1390) = &input.tunnel_inside_ipv6_cidr {
        scope_1389.string(var_1390);
    }
    #[allow(unused_mut)]
    let mut scope_1391 = writer.prefix("PreSharedKey");
    if let Some(var_1392) = &input.pre_shared_key {
        scope_1391.string(var_1392);
    }
    #[allow(unused_mut)]
    let mut scope_1393 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_1394) = &input.phase1_lifetime_seconds {
        scope_1393.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1394).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1395 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_1396) = &input.phase2_lifetime_seconds {
        scope_1395.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1396).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1397 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_1398) = &input.rekey_margin_time_seconds {
        scope_1397.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1398).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1399 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_1400) = &input.rekey_fuzz_percentage {
        scope_1399.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1400).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1401 = writer.prefix("ReplayWindowSize");
    if let Some(var_1402) = &input.replay_window_size {
        scope_1401.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1402).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1403 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_1404) = &input.dpd_timeout_seconds {
        scope_1403.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1404).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1405 = writer.prefix("DPDTimeoutAction");
    if let Some(var_1406) = &input.dpd_timeout_action {
        scope_1405.string(var_1406);
    }
    #[allow(unused_mut)]
    let mut scope_1407 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_1408) = &input.phase1_encryption_algorithms {
        let mut list_1410 = scope_1407.start_list(true, Some("item"));
        for item_1409 in var_1408 {
            #[allow(unused_mut)]
            let mut entry_1411 = list_1410.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_1411, item_1409)?;
        }
        list_1410.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1412 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_1413) = &input.phase2_encryption_algorithms {
        let mut list_1415 = scope_1412.start_list(true, Some("item"));
        for item_1414 in var_1413 {
            #[allow(unused_mut)]
            let mut entry_1416 = list_1415.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_1416, item_1414)?;
        }
        list_1415.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1417 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_1418) = &input.phase1_integrity_algorithms {
        let mut list_1420 = scope_1417.start_list(true, Some("item"));
        for item_1419 in var_1418 {
            #[allow(unused_mut)]
            let mut entry_1421 = list_1420.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_1421, item_1419)?;
        }
        list_1420.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1422 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_1423) = &input.phase2_integrity_algorithms {
        let mut list_1425 = scope_1422.start_list(true, Some("item"));
        for item_1424 in var_1423 {
            #[allow(unused_mut)]
            let mut entry_1426 = list_1425.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_1426, item_1424)?;
        }
        list_1425.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1427 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_1428) = &input.phase1_dh_group_numbers {
        let mut list_1430 = scope_1427.start_list(true, Some("item"));
        for item_1429 in var_1428 {
            #[allow(unused_mut)]
            let mut entry_1431 = list_1430.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_1431, item_1429)?;
        }
        list_1430.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1432 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_1433) = &input.phase2_dh_group_numbers {
        let mut list_1435 = scope_1432.start_list(true, Some("item"));
        for item_1434 in var_1433 {
            #[allow(unused_mut)]
            let mut entry_1436 = list_1435.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_1436, item_1434)?;
        }
        list_1435.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1437 = writer.prefix("IKEVersion");
    if let Some(var_1438) = &input.ike_versions {
        let mut list_1440 = scope_1437.start_list(true, Some("item"));
        for item_1439 in var_1438 {
            #[allow(unused_mut)]
            let mut entry_1441 = list_1440.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(entry_1441, item_1439)?;
        }
        list_1440.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1442 = writer.prefix("StartupAction");
    if let Some(var_1443) = &input.startup_action {
        scope_1442.string(var_1443);
    }
    #[allow(unused_mut)]
    let mut scope_1444 = writer.prefix("LogOptions");
    if let Some(var_1445) = &input.log_options {
        crate::query_ser::serialize_structure_crate_model_vpn_tunnel_log_options_specification(scope_1444, var_1445)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_athena_integration(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AthenaIntegration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1446 = writer.prefix("IntegrationResultS3DestinationArn");
    if let Some(var_1447) = &input.integration_result_s3_destination_arn {
        scope_1446.string(var_1447);
    }
    #[allow(unused_mut)]
    let mut scope_1448 = writer.prefix("PartitionLoadFrequency");
    if let Some(var_1449) = &input.partition_load_frequency {
        scope_1448.string(var_1449.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1450 = writer.prefix("PartitionStartDate");
    if let Some(var_1451) = &input.partition_start_date {
        scope_1450.date_time(var_1451, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1452 = writer.prefix("PartitionEndDate");
    if let Some(var_1453) = &input.partition_end_date {
        scope_1452.date_time(var_1453, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_v_cpu_count_range_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::VCpuCountRangeRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1454 = writer.prefix("Min");
    if let Some(var_1455) = &input.min {
        scope_1454.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1455).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1456 = writer.prefix("Max");
    if let Some(var_1457) = &input.max {
        scope_1456.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1457).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_mi_b_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::MemoryMiBRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1458 = writer.prefix("Min");
    if let Some(var_1459) = &input.min {
        scope_1458.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1459).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1460 = writer.prefix("Max");
    if let Some(var_1461) = &input.max {
        scope_1460.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1461).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::MemoryGiBPerVCpuRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1462 = writer.prefix("Min");
    if let Some(var_1463) = &input.min {
        scope_1462.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1463).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1464 = writer.prefix("Max");
    if let Some(var_1465) = &input.max {
        scope_1464.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1465).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_count_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::NetworkInterfaceCountRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1466 = writer.prefix("Min");
    if let Some(var_1467) = &input.min {
        scope_1466.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1467).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1468 = writer.prefix("Max");
    if let Some(var_1469) = &input.max {
        scope_1468.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1469).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_total_local_storage_gb_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TotalLocalStorageGbRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1470 = writer.prefix("Min");
    if let Some(var_1471) = &input.min {
        scope_1470.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1471).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1472 = writer.prefix("Max");
    if let Some(var_1473) = &input.max {
        scope_1472.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1473).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::BaselineEbsBandwidthMbpsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1474 = writer.prefix("Min");
    if let Some(var_1475) = &input.min {
        scope_1474.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1475).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1476 = writer.prefix("Max");
    if let Some(var_1477) = &input.max {
        scope_1476.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1477).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_count_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AcceleratorCountRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1478 = writer.prefix("Min");
    if let Some(var_1479) = &input.min {
        scope_1478.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1479).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("Max");
    if let Some(var_1481) = &input.max {
        scope_1480.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1481).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AcceleratorTotalMemoryMiBRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("Min");
    if let Some(var_1483) = &input.min {
        scope_1482.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1483).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("Max");
    if let Some(var_1485) = &input.max {
        scope_1484.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1485).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_bandwidth_gbps_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::NetworkBandwidthGbpsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1486 = writer.prefix("Min");
    if let Some(var_1487) = &input.min {
        scope_1486.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1487).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("Max");
    if let Some(var_1489) = &input.max {
        scope_1488.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1489).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_bucket(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::UserBucket) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("S3Bucket");
    if let Some(var_1491) = &input.s3_bucket {
        scope_1490.string(var_1491);
    }
    #[allow(unused_mut)]
    let mut scope_1492 = writer.prefix("S3Key");
    if let Some(var_1493) = &input.s3_key {
        scope_1492.string(var_1493);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_data(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::UserData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1494 = writer.prefix("Data");
    if let Some(var_1495) = &input.data {
        scope_1494.string(var_1495);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LoadPermissionRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1496 = writer.prefix("Group");
    if let Some(var_1497) = &input.group {
        scope_1496.string(var_1497.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1498 = writer.prefix("UserId");
    if let Some(var_1499) = &input.user_id {
        scope_1498.string(var_1499);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchPermission) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1500 = writer.prefix("Group");
    if let Some(var_1501) = &input.group {
        scope_1500.string(var_1501.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1502 = writer.prefix("UserId");
    if let Some(var_1503) = &input.user_id {
        scope_1502.string(var_1503);
    }
    #[allow(unused_mut)]
    let mut scope_1504 = writer.prefix("OrganizationArn");
    if let Some(var_1505) = &input.organization_arn {
        scope_1504.string(var_1505);
    }
    #[allow(unused_mut)]
    let mut scope_1506 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_1507) = &input.organizational_unit_arn {
        scope_1506.string(var_1507);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_instance_block_device_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::EbsInstanceBlockDeviceSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1508 = writer.prefix("DeleteOnTermination");
    if let Some(var_1509) = &input.delete_on_termination {
        scope_1508.boolean(*var_1509);
    }
    #[allow(unused_mut)]
    let mut scope_1510 = writer.prefix("VolumeId");
    if let Some(var_1511) = &input.volume_id {
        scope_1510.string(var_1511);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_target(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CapacityReservationTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1512 = writer.prefix("CapacityReservationId");
    if let Some(var_1513) = &input.capacity_reservation_id {
        scope_1512.string(var_1513);
    }
    #[allow(unused_mut)]
    let mut scope_1514 = writer.prefix("CapacityReservationResourceGroupArn");
    if let Some(var_1515) = &input.capacity_reservation_resource_group_arn {
        scope_1514.string(var_1515);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SecurityGroupRuleRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1516 = writer.prefix("IpProtocol");
    if let Some(var_1517) = &input.ip_protocol {
        scope_1516.string(var_1517);
    }
    #[allow(unused_mut)]
    let mut scope_1518 = writer.prefix("FromPort");
    if let Some(var_1519) = &input.from_port {
        scope_1518.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1519).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1520 = writer.prefix("ToPort");
    if let Some(var_1521) = &input.to_port {
        scope_1520.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1521).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1522 = writer.prefix("CidrIpv4");
    if let Some(var_1523) = &input.cidr_ipv4 {
        scope_1522.string(var_1523);
    }
    #[allow(unused_mut)]
    let mut scope_1524 = writer.prefix("CidrIpv6");
    if let Some(var_1525) = &input.cidr_ipv6 {
        scope_1524.string(var_1525);
    }
    #[allow(unused_mut)]
    let mut scope_1526 = writer.prefix("PrefixListId");
    if let Some(var_1527) = &input.prefix_list_id {
        scope_1526.string(var_1527);
    }
    #[allow(unused_mut)]
    let mut scope_1528 = writer.prefix("ReferencedGroupId");
    if let Some(var_1529) = &input.referenced_group_id {
        scope_1528.string(var_1529);
    }
    #[allow(unused_mut)]
    let mut scope_1530 = writer.prefix("Description");
    if let Some(var_1531) = &input.description {
        scope_1530.string(var_1531);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreateVolumePermission) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("Group");
    if let Some(var_1533) = &input.group {
        scope_1532.string(var_1533.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1534 = writer.prefix("UserId");
    if let Some(var_1535) = &input.user_id {
        scope_1534.string(var_1535);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FleetLaunchTemplateSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("LaunchTemplateId");
    if let Some(var_1537) = &input.launch_template_id {
        scope_1536.string(var_1537);
    }
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("LaunchTemplateName");
    if let Some(var_1539) = &input.launch_template_name {
        scope_1538.string(var_1539);
    }
    #[allow(unused_mut)]
    let mut scope_1540 = writer.prefix("Version");
    if let Some(var_1541) = &input.version {
        scope_1540.string(var_1541);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_overrides(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateOverrides) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("InstanceType");
    if let Some(var_1543) = &input.instance_type {
        scope_1542.string(var_1543.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1544 = writer.prefix("SpotPrice");
    if let Some(var_1545) = &input.spot_price {
        scope_1544.string(var_1545);
    }
    #[allow(unused_mut)]
    let mut scope_1546 = writer.prefix("SubnetId");
    if let Some(var_1547) = &input.subnet_id {
        scope_1546.string(var_1547);
    }
    #[allow(unused_mut)]
    let mut scope_1548 = writer.prefix("AvailabilityZone");
    if let Some(var_1549) = &input.availability_zone {
        scope_1548.string(var_1549);
    }
    #[allow(unused_mut)]
    let mut scope_1550 = writer.prefix("WeightedCapacity");
    if let Some(var_1551) = &input.weighted_capacity {
        scope_1550.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1551).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1552 = writer.prefix("Priority");
    if let Some(var_1553) = &input.priority {
        scope_1552.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1553).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1554 = writer.prefix("InstanceRequirements");
    if let Some(var_1555) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(scope_1554, var_1555)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_verified_access_log_s3_destination_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::VerifiedAccessLogS3DestinationOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1556 = writer.prefix("Enabled");
    if let Some(var_1557) = &input.enabled {
        scope_1556.boolean(*var_1557);
    }
    #[allow(unused_mut)]
    let mut scope_1558 = writer.prefix("BucketName");
    if let Some(var_1559) = &input.bucket_name {
        scope_1558.string(var_1559);
    }
    #[allow(unused_mut)]
    let mut scope_1560 = writer.prefix("Prefix");
    if let Some(var_1561) = &input.prefix {
        scope_1560.string(var_1561);
    }
    #[allow(unused_mut)]
    let mut scope_1562 = writer.prefix("BucketOwner");
    if let Some(var_1563) = &input.bucket_owner {
        scope_1562.string(var_1563);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_verified_access_log_cloud_watch_logs_destination_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::VerifiedAccessLogCloudWatchLogsDestinationOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1564 = writer.prefix("Enabled");
    if let Some(var_1565) = &input.enabled {
        scope_1564.boolean(*var_1565);
    }
    #[allow(unused_mut)]
    let mut scope_1566 = writer.prefix("LogGroup");
    if let Some(var_1567) = &input.log_group {
        scope_1566.string(var_1567);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_verified_access_log_kinesis_data_firehose_destination_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::VerifiedAccessLogKinesisDataFirehoseDestinationOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1568 = writer.prefix("Enabled");
    if let Some(var_1569) = &input.enabled {
        scope_1568.boolean(*var_1569);
    }
    #[allow(unused_mut)]
    let mut scope_1570 = writer.prefix("DeliveryStream");
    if let Some(var_1571) = &input.delivery_stream {
        scope_1570.string(var_1571);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Phase1EncryptionAlgorithmsRequestListValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1572 = writer.prefix("Value");
    if let Some(var_1573) = &input.value {
        scope_1572.string(var_1573);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Phase2EncryptionAlgorithmsRequestListValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1574 = writer.prefix("Value");
    if let Some(var_1575) = &input.value {
        scope_1574.string(var_1575);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Phase1IntegrityAlgorithmsRequestListValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1576 = writer.prefix("Value");
    if let Some(var_1577) = &input.value {
        scope_1576.string(var_1577);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Phase2IntegrityAlgorithmsRequestListValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1578 = writer.prefix("Value");
    if let Some(var_1579) = &input.value {
        scope_1578.string(var_1579);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Phase1DhGroupNumbersRequestListValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1580 = writer.prefix("Value");
    if let Some(var_1581) = &input.value {
        scope_1580.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1581).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Phase2DhGroupNumbersRequestListValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1582 = writer.prefix("Value");
    if let Some(var_1583) = &input.value {
        scope_1582.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1583).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ike_versions_request_list_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::IkeVersionsRequestListValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1584 = writer.prefix("Value");
    if let Some(var_1585) = &input.value {
        scope_1584.string(var_1585);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_tunnel_log_options_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::VpnTunnelLogOptionsSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1586 = writer.prefix("CloudWatchLogOptions");
    if let Some(var_1587) = &input.cloud_watch_log_options {
        crate::query_ser::serialize_structure_crate_model_cloud_watch_log_options_specification(scope_1586, var_1587)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_maintenance_strategies(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotMaintenanceStrategies) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1588 = writer.prefix("CapacityRebalance");
    if let Some(var_1589) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_spot_capacity_rebalance(scope_1588, var_1589)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_launch_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotFleetLaunchSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1590 = writer.prefix("GroupSet");
    if let Some(var_1591) = &input.security_groups {
        let mut list_1593 = scope_1590.start_list(true, Some("item"));
        for item_1592 in var_1591 {
            #[allow(unused_mut)]
            let mut entry_1594 = list_1593.entry();
            crate::query_ser::serialize_structure_crate_model_group_identifier(entry_1594, item_1592)?;
        }
        list_1593.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1595 = writer.prefix("AddressingType");
    if let Some(var_1596) = &input.addressing_type {
        scope_1595.string(var_1596);
    }
    #[allow(unused_mut)]
    let mut scope_1597 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1598) = &input.block_device_mappings {
        let mut list_1600 = scope_1597.start_list(true, Some("item"));
        for item_1599 in var_1598 {
            #[allow(unused_mut)]
            let mut entry_1601 = list_1600.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(entry_1601, item_1599)?;
        }
        list_1600.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1602 = writer.prefix("EbsOptimized");
    if let Some(var_1603) = &input.ebs_optimized {
        scope_1602.boolean(*var_1603);
    }
    #[allow(unused_mut)]
    let mut scope_1604 = writer.prefix("IamInstanceProfile");
    if let Some(var_1605) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(scope_1604, var_1605)?;
    }
    #[allow(unused_mut)]
    let mut scope_1606 = writer.prefix("ImageId");
    if let Some(var_1607) = &input.image_id {
        scope_1606.string(var_1607);
    }
    #[allow(unused_mut)]
    let mut scope_1608 = writer.prefix("InstanceType");
    if let Some(var_1609) = &input.instance_type {
        scope_1608.string(var_1609.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1610 = writer.prefix("KernelId");
    if let Some(var_1611) = &input.kernel_id {
        scope_1610.string(var_1611);
    }
    #[allow(unused_mut)]
    let mut scope_1612 = writer.prefix("KeyName");
    if let Some(var_1613) = &input.key_name {
        scope_1612.string(var_1613);
    }
    #[allow(unused_mut)]
    let mut scope_1614 = writer.prefix("Monitoring");
    if let Some(var_1615) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_monitoring(scope_1614, var_1615)?;
    }
    #[allow(unused_mut)]
    let mut scope_1616 = writer.prefix("NetworkInterfaceSet");
    if let Some(var_1617) = &input.network_interfaces {
        let mut list_1619 = scope_1616.start_list(true, Some("item"));
        for item_1618 in var_1617 {
            #[allow(unused_mut)]
            let mut entry_1620 = list_1619.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_1620, item_1618)?;
        }
        list_1619.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1621 = writer.prefix("Placement");
    if let Some(var_1622) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_1621, var_1622)?;
    }
    #[allow(unused_mut)]
    let mut scope_1623 = writer.prefix("RamdiskId");
    if let Some(var_1624) = &input.ramdisk_id {
        scope_1623.string(var_1624);
    }
    #[allow(unused_mut)]
    let mut scope_1625 = writer.prefix("SpotPrice");
    if let Some(var_1626) = &input.spot_price {
        scope_1625.string(var_1626);
    }
    #[allow(unused_mut)]
    let mut scope_1627 = writer.prefix("SubnetId");
    if let Some(var_1628) = &input.subnet_id {
        scope_1627.string(var_1628);
    }
    #[allow(unused_mut)]
    let mut scope_1629 = writer.prefix("UserData");
    if let Some(var_1630) = &input.user_data {
        scope_1629.string(var_1630);
    }
    #[allow(unused_mut)]
    let mut scope_1631 = writer.prefix("WeightedCapacity");
    if let Some(var_1632) = &input.weighted_capacity {
        scope_1631.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1632).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1633 = writer.prefix("TagSpecificationSet");
    if let Some(var_1634) = &input.tag_specifications {
        let mut list_1636 = scope_1633.start_list(true, Some("item"));
        for item_1635 in var_1634 {
            #[allow(unused_mut)]
            let mut entry_1637 = list_1636.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_tag_specification(entry_1637, item_1635)?;
        }
        list_1636.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("InstanceRequirements");
    if let Some(var_1639) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(scope_1638, var_1639)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_balancers_config(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LoadBalancersConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("ClassicLoadBalancersConfig");
    if let Some(var_1641) = &input.classic_load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_classic_load_balancers_config(scope_1640, var_1641)?;
    }
    #[allow(unused_mut)]
    let mut scope_1642 = writer.prefix("TargetGroupsConfig");
    if let Some(var_1643) = &input.target_groups_config {
        crate::query_ser::serialize_structure_crate_model_target_groups_config(scope_1642, var_1643)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_placement(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotPlacement) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1644 = writer.prefix("AvailabilityZone");
    if let Some(var_1645) = &input.availability_zone {
        scope_1644.string(var_1645);
    }
    #[allow(unused_mut)]
    let mut scope_1646 = writer.prefix("GroupName");
    if let Some(var_1647) = &input.group_name {
        scope_1646.string(var_1647);
    }
    #[allow(unused_mut)]
    let mut scope_1648 = writer.prefix("Tenancy");
    if let Some(var_1649) = &input.tenancy {
        scope_1648.string(var_1649.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_market_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotMarketOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1650 = writer.prefix("MaxPrice");
    if let Some(var_1651) = &input.max_price {
        scope_1650.string(var_1651);
    }
    #[allow(unused_mut)]
    let mut scope_1652 = writer.prefix("SpotInstanceType");
    if let Some(var_1653) = &input.spot_instance_type {
        scope_1652.string(var_1653.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1654 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1655) = &input.block_duration_minutes {
        scope_1654.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1655).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1656 = writer.prefix("ValidUntil");
    if let Some(var_1657) = &input.valid_until {
        scope_1656.date_time(var_1657, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1658 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1659) = &input.instance_interruption_behavior {
        scope_1658.string(var_1659.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_block_device_mapping(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesBlockDeviceMapping) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1660 = writer.prefix("DeviceName");
    if let Some(var_1661) = &input.device_name {
        scope_1660.string(var_1661);
    }
    #[allow(unused_mut)]
    let mut scope_1662 = writer.prefix("Ebs");
    if let Some(var_1663) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_ebs(scope_1662, var_1663)?;
    }
    #[allow(unused_mut)]
    let mut scope_1664 = writer.prefix("NoDevice");
    if let Some(var_1665) = &input.no_device {
        scope_1664.string(var_1665);
    }
    #[allow(unused_mut)]
    let mut scope_1666 = writer.prefix("VirtualName");
    if let Some(var_1667) = &input.virtual_name {
        scope_1666.string(var_1667);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_iam_instance_profile(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesIamInstanceProfile) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1668 = writer.prefix("Arn");
    if let Some(var_1669) = &input.arn {
        scope_1668.string(var_1669);
    }
    #[allow(unused_mut)]
    let mut scope_1670 = writer.prefix("Name");
    if let Some(var_1671) = &input.name {
        scope_1670.string(var_1671);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_monitoring(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesMonitoring) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1672 = writer.prefix("Enabled");
    if let Some(var_1673) = &input.enabled {
        scope_1672.boolean(*var_1673);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_network_interface(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesNetworkInterface) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1674 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1675) = &input.associate_public_ip_address {
        scope_1674.boolean(*var_1675);
    }
    #[allow(unused_mut)]
    let mut scope_1676 = writer.prefix("DeleteOnTermination");
    if let Some(var_1677) = &input.delete_on_termination {
        scope_1676.boolean(*var_1677);
    }
    #[allow(unused_mut)]
    let mut scope_1678 = writer.prefix("Description");
    if let Some(var_1679) = &input.description {
        scope_1678.string(var_1679);
    }
    #[allow(unused_mut)]
    let mut scope_1680 = writer.prefix("DeviceIndex");
    if let Some(var_1681) = &input.device_index {
        scope_1680.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1681).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1682 = writer.prefix("Group");
    if let Some(var_1683) = &input.groups {
        let mut list_1685 = scope_1682.start_list(true, Some("SecurityGroupId"));
        for item_1684 in var_1683 {
            #[allow(unused_mut)]
            let mut entry_1686 = list_1685.entry();
            entry_1686.string(item_1684);
        }
        list_1685.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1687 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1688) = &input.ipv6_address_count {
        scope_1687.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1688).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1689 = writer.prefix("Ipv6Address");
    if let Some(var_1690) = &input.ipv6_addresses {
        let mut list_1692 = scope_1689.start_list(true, Some("Ipv6Address"));
        for item_1691 in var_1690 {
            #[allow(unused_mut)]
            let mut entry_1693 = list_1692.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_ipv6_address(entry_1693, item_1691)?;
        }
        list_1692.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1694 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1695) = &input.network_interface_id {
        scope_1694.string(var_1695);
    }
    #[allow(unused_mut)]
    let mut scope_1696 = writer.prefix("PrivateIpAddress");
    if let Some(var_1697) = &input.private_ip_address {
        scope_1696.string(var_1697);
    }
    #[allow(unused_mut)]
    let mut scope_1698 = writer.prefix("PrivateIpAddressConfig");
    if let Some(var_1699) = &input.private_ip_address_configs {
        let mut list_1701 = scope_1698.start_list(true, Some("PrivateIpAddressConfigSet"));
        for item_1700 in var_1699 {
            #[allow(unused_mut)]
            let mut entry_1702 = list_1701.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_private_ip_address_config(entry_1702, item_1700)?;
        }
        list_1701.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1703 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1704) = &input.secondary_private_ip_address_count {
        scope_1703.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1704).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1705 = writer.prefix("SubnetId");
    if let Some(var_1706) = &input.subnet_id {
        scope_1705.string(var_1706);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_placement(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesPlacement) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1707 = writer.prefix("AvailabilityZone");
    if let Some(var_1708) = &input.availability_zone {
        scope_1707.string(var_1708);
    }
    #[allow(unused_mut)]
    let mut scope_1709 = writer.prefix("GroupName");
    if let Some(var_1710) = &input.group_name {
        scope_1709.string(var_1710);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FleetSpotCapacityRebalanceRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1711 = writer.prefix("ReplacementStrategy");
    if let Some(var_1712) = &input.replacement_strategy {
        scope_1711.string(var_1712.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1713 = writer.prefix("TerminationDelay");
    if let Some(var_1714) = &input.termination_delay {
        scope_1713.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1714).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_ebs_block_device_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateEbsBlockDeviceRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1715 = writer.prefix("Encrypted");
    if let Some(var_1716) = &input.encrypted {
        scope_1715.boolean(*var_1716);
    }
    #[allow(unused_mut)]
    let mut scope_1717 = writer.prefix("DeleteOnTermination");
    if let Some(var_1718) = &input.delete_on_termination {
        scope_1717.boolean(*var_1718);
    }
    #[allow(unused_mut)]
    let mut scope_1719 = writer.prefix("Iops");
    if let Some(var_1720) = &input.iops {
        scope_1719.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1720).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1721 = writer.prefix("KmsKeyId");
    if let Some(var_1722) = &input.kms_key_id {
        scope_1721.string(var_1722);
    }
    #[allow(unused_mut)]
    let mut scope_1723 = writer.prefix("SnapshotId");
    if let Some(var_1724) = &input.snapshot_id {
        scope_1723.string(var_1724);
    }
    #[allow(unused_mut)]
    let mut scope_1725 = writer.prefix("VolumeSize");
    if let Some(var_1726) = &input.volume_size {
        scope_1725.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1726).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1727 = writer.prefix("VolumeType");
    if let Some(var_1728) = &input.volume_type {
        scope_1727.string(var_1728.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1729 = writer.prefix("Throughput");
    if let Some(var_1730) = &input.throughput {
        scope_1729.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1730).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceIpv6AddressRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1731 = writer.prefix("Ipv6Address");
    if let Some(var_1732) = &input.ipv6_address {
        scope_1731.string(var_1732);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_spot_market_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateSpotMarketOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1733 = writer.prefix("MaxPrice");
    if let Some(var_1734) = &input.max_price {
        scope_1733.string(var_1734);
    }
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("SpotInstanceType");
    if let Some(var_1736) = &input.spot_instance_type {
        scope_1735.string(var_1736.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1737 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1738) = &input.block_duration_minutes {
        scope_1737.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1738).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1739 = writer.prefix("ValidUntil");
    if let Some(var_1740) = &input.valid_until {
        scope_1739.date_time(var_1740, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1741 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1742) = &input.instance_interruption_behavior {
        scope_1741.string(var_1742.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_packet_header_statement_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PacketHeaderStatementRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1743 = writer.prefix("SourceAddress");
    if let Some(var_1744) = &input.source_addresses {
        let mut list_1746 = scope_1743.start_list(true, Some("item"));
        for item_1745 in var_1744 {
            #[allow(unused_mut)]
            let mut entry_1747 = list_1746.entry();
            entry_1747.string(item_1745);
        }
        list_1746.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1748 = writer.prefix("DestinationAddress");
    if let Some(var_1749) = &input.destination_addresses {
        let mut list_1751 = scope_1748.start_list(true, Some("item"));
        for item_1750 in var_1749 {
            #[allow(unused_mut)]
            let mut entry_1752 = list_1751.entry();
            entry_1752.string(item_1750);
        }
        list_1751.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1753 = writer.prefix("SourcePort");
    if let Some(var_1754) = &input.source_ports {
        let mut list_1756 = scope_1753.start_list(true, Some("item"));
        for item_1755 in var_1754 {
            #[allow(unused_mut)]
            let mut entry_1757 = list_1756.entry();
            entry_1757.string(item_1755);
        }
        list_1756.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1758 = writer.prefix("DestinationPort");
    if let Some(var_1759) = &input.destination_ports {
        let mut list_1761 = scope_1758.start_list(true, Some("item"));
        for item_1760 in var_1759 {
            #[allow(unused_mut)]
            let mut entry_1762 = list_1761.entry();
            entry_1762.string(item_1760);
        }
        list_1761.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1763 = writer.prefix("SourcePrefixList");
    if let Some(var_1764) = &input.source_prefix_lists {
        let mut list_1766 = scope_1763.start_list(true, Some("item"));
        for item_1765 in var_1764 {
            #[allow(unused_mut)]
            let mut entry_1767 = list_1766.entry();
            entry_1767.string(item_1765);
        }
        list_1766.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1768 = writer.prefix("DestinationPrefixList");
    if let Some(var_1769) = &input.destination_prefix_lists {
        let mut list_1771 = scope_1768.start_list(true, Some("item"));
        for item_1770 in var_1769 {
            #[allow(unused_mut)]
            let mut entry_1772 = list_1771.entry();
            entry_1772.string(item_1770);
        }
        list_1771.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1773 = writer.prefix("Protocol");
    if let Some(var_1774) = &input.protocols {
        let mut list_1776 = scope_1773.start_list(true, Some("item"));
        for item_1775 in var_1774 {
            #[allow(unused_mut)]
            let mut entry_1777 = list_1776.entry();
            entry_1777.string(item_1775.as_str());
        }
        list_1776.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_resource_statement_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ResourceStatementRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1778 = writer.prefix("Resource");
    if let Some(var_1779) = &input.resources {
        let mut list_1781 = scope_1778.start_list(true, Some("item"));
        for item_1780 in var_1779 {
            #[allow(unused_mut)]
            let mut entry_1782 = list_1781.entry();
            entry_1782.string(item_1780);
        }
        list_1781.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1783 = writer.prefix("ResourceType");
    if let Some(var_1784) = &input.resource_types {
        let mut list_1786 = scope_1783.start_list(true, Some("item"));
        for item_1785 in var_1784 {
            #[allow(unused_mut)]
            let mut entry_1787 = list_1786.entry();
            entry_1787.string(item_1785);
        }
        list_1786.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceRequirements) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1788 = writer.prefix("VCpuCount");
    if let Some(var_1789) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range(scope_1788, var_1789)?;
    }
    #[allow(unused_mut)]
    let mut scope_1790 = writer.prefix("MemoryMiB");
    if let Some(var_1791) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b(scope_1790, var_1791)?;
    }
    #[allow(unused_mut)]
    let mut scope_1792 = writer.prefix("CpuManufacturerSet");
    if let Some(var_1793) = &input.cpu_manufacturers {
        let mut list_1795 = scope_1792.start_list(true, Some("item"));
        for item_1794 in var_1793 {
            #[allow(unused_mut)]
            let mut entry_1796 = list_1795.entry();
            entry_1796.string(item_1794.as_str());
        }
        list_1795.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1797 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_1798) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu(scope_1797, var_1798)?;
    }
    #[allow(unused_mut)]
    let mut scope_1799 = writer.prefix("ExcludedInstanceTypeSet");
    if let Some(var_1800) = &input.excluded_instance_types {
        let mut list_1802 = scope_1799.start_list(true, Some("item"));
        for item_1801 in var_1800 {
            #[allow(unused_mut)]
            let mut entry_1803 = list_1802.entry();
            entry_1803.string(item_1801);
        }
        list_1802.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1804 = writer.prefix("InstanceGenerationSet");
    if let Some(var_1805) = &input.instance_generations {
        let mut list_1807 = scope_1804.start_list(true, Some("item"));
        for item_1806 in var_1805 {
            #[allow(unused_mut)]
            let mut entry_1808 = list_1807.entry();
            entry_1808.string(item_1806.as_str());
        }
        list_1807.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1809 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_1810) = &input.spot_max_price_percentage_over_lowest_price {
        scope_1809.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1810).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1811 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_1812) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_1811.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1812).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1813 = writer.prefix("BareMetal");
    if let Some(var_1814) = &input.bare_metal {
        scope_1813.string(var_1814.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1815 = writer.prefix("BurstablePerformance");
    if let Some(var_1816) = &input.burstable_performance {
        scope_1815.string(var_1816.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1817 = writer.prefix("RequireHibernateSupport");
    if let Some(var_1818) = &input.require_hibernate_support {
        scope_1817.boolean(*var_1818);
    }
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_1820) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count(scope_1819, var_1820)?;
    }
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("LocalStorage");
    if let Some(var_1822) = &input.local_storage {
        scope_1821.string(var_1822.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("LocalStorageTypeSet");
    if let Some(var_1824) = &input.local_storage_types {
        let mut list_1826 = scope_1823.start_list(true, Some("item"));
        for item_1825 in var_1824 {
            #[allow(unused_mut)]
            let mut entry_1827 = list_1826.entry();
            entry_1827.string(item_1825.as_str());
        }
        list_1826.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1828 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_1829) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb(scope_1828, var_1829)?;
    }
    #[allow(unused_mut)]
    let mut scope_1830 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_1831) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(scope_1830, var_1831)?;
    }
    #[allow(unused_mut)]
    let mut scope_1832 = writer.prefix("AcceleratorTypeSet");
    if let Some(var_1833) = &input.accelerator_types {
        let mut list_1835 = scope_1832.start_list(true, Some("item"));
        for item_1834 in var_1833 {
            #[allow(unused_mut)]
            let mut entry_1836 = list_1835.entry();
            entry_1836.string(item_1834.as_str());
        }
        list_1835.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1837 = writer.prefix("AcceleratorCount");
    if let Some(var_1838) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count(scope_1837, var_1838)?;
    }
    #[allow(unused_mut)]
    let mut scope_1839 = writer.prefix("AcceleratorManufacturerSet");
    if let Some(var_1840) = &input.accelerator_manufacturers {
        let mut list_1842 = scope_1839.start_list(true, Some("item"));
        for item_1841 in var_1840 {
            #[allow(unused_mut)]
            let mut entry_1843 = list_1842.entry();
            entry_1843.string(item_1841.as_str());
        }
        list_1842.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1844 = writer.prefix("AcceleratorNameSet");
    if let Some(var_1845) = &input.accelerator_names {
        let mut list_1847 = scope_1844.start_list(true, Some("item"));
        for item_1846 in var_1845 {
            #[allow(unused_mut)]
            let mut entry_1848 = list_1847.entry();
            entry_1848.string(item_1846.as_str());
        }
        list_1847.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1849 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_1850) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b(scope_1849, var_1850)?;
    }
    #[allow(unused_mut)]
    let mut scope_1851 = writer.prefix("NetworkBandwidthGbps");
    if let Some(var_1852) = &input.network_bandwidth_gbps {
        crate::query_ser::serialize_structure_crate_model_network_bandwidth_gbps(scope_1851, var_1852)?;
    }
    #[allow(unused_mut)]
    let mut scope_1853 = writer.prefix("AllowedInstanceTypeSet");
    if let Some(var_1854) = &input.allowed_instance_types {
        let mut list_1856 = scope_1853.start_list(true, Some("item"));
        for item_1855 in var_1854 {
            #[allow(unused_mut)]
            let mut entry_1857 = list_1856.entry();
            entry_1857.string(item_1855);
        }
        list_1856.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cloud_watch_log_options_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CloudWatchLogOptionsSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1858 = writer.prefix("LogEnabled");
    if let Some(var_1859) = &input.log_enabled {
        scope_1858.boolean(*var_1859);
    }
    #[allow(unused_mut)]
    let mut scope_1860 = writer.prefix("LogGroupArn");
    if let Some(var_1861) = &input.log_group_arn {
        scope_1860.string(var_1861);
    }
    #[allow(unused_mut)]
    let mut scope_1862 = writer.prefix("LogOutputFormat");
    if let Some(var_1863) = &input.log_output_format {
        scope_1862.string(var_1863);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_capacity_rebalance(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotCapacityRebalance) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1864 = writer.prefix("ReplacementStrategy");
    if let Some(var_1865) = &input.replacement_strategy {
        scope_1864.string(var_1865.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1866 = writer.prefix("TerminationDelay");
    if let Some(var_1867) = &input.termination_delay {
        scope_1866.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1867).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_group_identifier(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::GroupIdentifier) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1868 = writer.prefix("GroupName");
    if let Some(var_1869) = &input.group_name {
        scope_1868.string(var_1869);
    }
    #[allow(unused_mut)]
    let mut scope_1870 = writer.prefix("GroupId");
    if let Some(var_1871) = &input.group_id {
        scope_1870.string(var_1871);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_monitoring(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotFleetMonitoring) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1872 = writer.prefix("Enabled");
    if let Some(var_1873) = &input.enabled {
        scope_1872.boolean(*var_1873);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_tag_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotFleetTagSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1874 = writer.prefix("ResourceType");
    if let Some(var_1875) = &input.resource_type {
        scope_1874.string(var_1875.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1876 = writer.prefix("Tag");
    if let Some(var_1877) = &input.tags {
        let mut list_1879 = scope_1876.start_list(true, Some("item"));
        for item_1878 in var_1877 {
            #[allow(unused_mut)]
            let mut entry_1880 = list_1879.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1880, item_1878)?;
        }
        list_1879.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancers_config(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ClassicLoadBalancersConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1881 = writer.prefix("ClassicLoadBalancers");
    if let Some(var_1882) = &input.classic_load_balancers {
        let mut list_1884 = scope_1881.start_list(true, Some("item"));
        for item_1883 in var_1882 {
            #[allow(unused_mut)]
            let mut entry_1885 = list_1884.entry();
            crate::query_ser::serialize_structure_crate_model_classic_load_balancer(entry_1885, item_1883)?;
        }
        list_1884.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_groups_config(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TargetGroupsConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1886 = writer.prefix("TargetGroups");
    if let Some(var_1887) = &input.target_groups {
        let mut list_1889 = scope_1886.start_list(true, Some("item"));
        for item_1888 in var_1887 {
            #[allow(unused_mut)]
            let mut entry_1890 = list_1889.entry();
            crate::query_ser::serialize_structure_crate_model_target_group(entry_1890, item_1888)?;
        }
        list_1889.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ebs(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesEbs) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1891 = writer.prefix("DeleteOnTermination");
    if let Some(var_1892) = &input.delete_on_termination {
        scope_1891.boolean(*var_1892);
    }
    #[allow(unused_mut)]
    let mut scope_1893 = writer.prefix("Encrypted");
    if let Some(var_1894) = &input.encrypted {
        scope_1893.boolean(*var_1894);
    }
    #[allow(unused_mut)]
    let mut scope_1895 = writer.prefix("Iops");
    if let Some(var_1896) = &input.iops {
        scope_1895.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1896).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1897 = writer.prefix("SnapshotId");
    if let Some(var_1898) = &input.snapshot_id {
        scope_1897.string(var_1898);
    }
    #[allow(unused_mut)]
    let mut scope_1899 = writer.prefix("VolumeSize");
    if let Some(var_1900) = &input.volume_size {
        scope_1899.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1900).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1901 = writer.prefix("VolumeType");
    if let Some(var_1902) = &input.volume_type {
        scope_1901.string(var_1902);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ipv6_address(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesIpv6Address) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1903 = writer.prefix("Ipv6Address");
    if let Some(var_1904) = &input.ipv6_address {
        scope_1903.string(var_1904);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_private_ip_address_config(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesPrivateIpAddressConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1905 = writer.prefix("Primary");
    if let Some(var_1906) = &input.primary {
        scope_1905.boolean(*var_1906);
    }
    #[allow(unused_mut)]
    let mut scope_1907 = writer.prefix("PrivateIpAddress");
    if let Some(var_1908) = &input.private_ip_address {
        scope_1907.string(var_1908);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_v_cpu_count_range(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::VCpuCountRange) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1909 = writer.prefix("Min");
    if let Some(var_1910) = &input.min {
        scope_1909.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1910).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1911 = writer.prefix("Max");
    if let Some(var_1912) = &input.max {
        scope_1911.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1912).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_mi_b(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::MemoryMiB) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1913 = writer.prefix("Min");
    if let Some(var_1914) = &input.min {
        scope_1913.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1914).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1915 = writer.prefix("Max");
    if let Some(var_1916) = &input.max {
        scope_1915.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1916).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::MemoryGiBPerVCpu) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1917 = writer.prefix("Min");
    if let Some(var_1918) = &input.min {
        scope_1917.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1918).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1919 = writer.prefix("Max");
    if let Some(var_1920) = &input.max {
        scope_1919.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1920).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_count(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::NetworkInterfaceCount) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1921 = writer.prefix("Min");
    if let Some(var_1922) = &input.min {
        scope_1921.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1922).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1923 = writer.prefix("Max");
    if let Some(var_1924) = &input.max {
        scope_1923.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1924).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_total_local_storage_gb(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TotalLocalStorageGb) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1925 = writer.prefix("Min");
    if let Some(var_1926) = &input.min {
        scope_1925.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1926).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1927 = writer.prefix("Max");
    if let Some(var_1928) = &input.max {
        scope_1927.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1928).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::BaselineEbsBandwidthMbps) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1929 = writer.prefix("Min");
    if let Some(var_1930) = &input.min {
        scope_1929.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1930).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1931 = writer.prefix("Max");
    if let Some(var_1932) = &input.max {
        scope_1931.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1932).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_count(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AcceleratorCount) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1933 = writer.prefix("Min");
    if let Some(var_1934) = &input.min {
        scope_1933.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1934).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1935 = writer.prefix("Max");
    if let Some(var_1936) = &input.max {
        scope_1935.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1936).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AcceleratorTotalMemoryMiB) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1937 = writer.prefix("Min");
    if let Some(var_1938) = &input.min {
        scope_1937.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1938).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1939 = writer.prefix("Max");
    if let Some(var_1940) = &input.max {
        scope_1939.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1940).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_bandwidth_gbps(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::NetworkBandwidthGbps) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1941 = writer.prefix("Min");
    if let Some(var_1942) = &input.min {
        scope_1941.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1942).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1943 = writer.prefix("Max");
    if let Some(var_1944) = &input.max {
        scope_1943.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1944).into()));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancer(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ClassicLoadBalancer) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1945 = writer.prefix("Name");
    if let Some(var_1946) = &input.name {
        scope_1945.string(var_1946);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_group(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TargetGroup) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1947 = writer.prefix("Arn");
    if let Some(var_1948) = &input.arn {
        scope_1947.string(var_1948);
    }
    Ok(())
}

