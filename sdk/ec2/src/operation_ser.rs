// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_reserved_instances_exchange_quote(
    input: &crate::input::AcceptReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReservedInstanceId");
    if let Some(var_4) = &input.reserved_instance_ids {
        let mut list_6 = scope_3.start_list(true, Some("ReservedInstanceId"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("TargetConfiguration");
    if let Some(var_9) = &input.target_configurations {
        let mut list_11 = scope_8.start_list(true, Some("TargetConfigurationRequest"));
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_12, item_10,
            )?;
        }
        list_11.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_multicast_domain_associations(
    input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_14) = &input.transit_gateway_multicast_domain_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_16) = &input.transit_gateway_attachment_id {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SubnetIds");
    if let Some(var_18) = &input.subnet_ids {
        let mut list_20 = scope_17.start_list(true, Some("item"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("DryRun");
    if let Some(var_23) = &input.dry_run {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_peering_attachment(
    input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DryRun");
    if let Some(var_27) = &input.dry_run {
        scope_26.boolean(*var_27);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_vpc_attachment(
    input: &crate::input::AcceptTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_29) = &input.transit_gateway_attachment_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DryRun");
    if let Some(var_31) = &input.dry_run {
        scope_30.boolean(*var_31);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_endpoint_connections(
    input: &crate::input::AcceptVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("DryRun");
    if let Some(var_33) = &input.dry_run {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ServiceId");
    if let Some(var_35) = &input.service_id {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("VpcEndpointId");
    if let Some(var_37) = &input.vpc_endpoint_ids {
        let mut list_39 = scope_36.start_list(true, Some("item"));
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_peering_connection(
    input: &crate::input::AcceptVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_44) = &input.vpc_peering_connection_id {
        scope_43.string(var_44);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_advertise_byoip_cidr(
    input: &crate::input::AdvertiseByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Cidr");
    if let Some(var_46) = &input.cidr {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("DryRun");
    if let Some(var_48) = &input.dry_run {
        scope_47.boolean(*var_48);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_address(
    input: &crate::input::AllocateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Domain");
    if let Some(var_50) = &input.domain {
        scope_49.string(var_50.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Address");
    if let Some(var_52) = &input.address {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("PublicIpv4Pool");
    if let Some(var_54) = &input.public_ipv4_pool {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("NetworkBorderGroup");
    if let Some(var_56) = &input.network_border_group {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_58) = &input.customer_owned_ipv4_pool {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DryRun");
    if let Some(var_60) = &input.dry_run {
        scope_59.boolean(*var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("TagSpecification");
    if let Some(var_62) = &input.tag_specifications {
        let mut list_64 = scope_61.start_list(true, Some("item"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_65, item_63)?;
        }
        list_64.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_hosts(
    input: &crate::input::AllocateHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AutoPlacement");
    if let Some(var_67) = &input.auto_placement {
        scope_66.string(var_67.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("AvailabilityZone");
    if let Some(var_69) = &input.availability_zone {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("ClientToken");
    if let Some(var_71) = &input.client_token {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("InstanceType");
    if let Some(var_73) = &input.instance_type {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("InstanceFamily");
    if let Some(var_75) = &input.instance_family {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("Quantity");
    if let Some(var_77) = &input.quantity {
        scope_76.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TagSpecification");
    if let Some(var_79) = &input.tag_specifications {
        let mut list_81 = scope_78.start_list(true, Some("item"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_82, item_80)?;
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HostRecovery");
    if let Some(var_84) = &input.host_recovery {
        scope_83.string(var_84.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("OutpostArn");
    if let Some(var_86) = &input.outpost_arn {
        scope_85.string(var_86);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_ipam_pool_cidr(
    input: &crate::input::AllocateIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AllocateIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("DryRun");
    if let Some(var_88) = &input.dry_run {
        scope_87.boolean(*var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("IpamPoolId");
    if let Some(var_90) = &input.ipam_pool_id {
        scope_89.string(var_90);
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("Cidr");
    if let Some(var_92) = &input.cidr {
        scope_91.string(var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("NetmaskLength");
    if let Some(var_94) = &input.netmask_length {
        scope_93.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_94).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("ClientToken");
    if let Some(var_96) = &input.client_token {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("Description");
    if let Some(var_98) = &input.description {
        scope_97.string(var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("PreviewNextCidr");
    if let Some(var_100) = &input.preview_next_cidr {
        scope_99.boolean(*var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("DisallowedCidr");
    if let Some(var_102) = &input.disallowed_cidrs {
        let mut list_104 = scope_101.start_list(true, Some("item"));
        for item_103 in var_102 {
            #[allow(unused_mut)]
            let mut entry_105 = list_104.entry();
            entry_105.string(item_103);
        }
        list_104.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_security_groups_to_client_vpn_target_network(
    input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ApplySecurityGroupsToClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_107) = &input.client_vpn_endpoint_id {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("VpcId");
    if let Some(var_109) = &input.vpc_id {
        scope_108.string(var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("SecurityGroupId");
    if let Some(var_111) = &input.security_group_ids {
        let mut list_113 = scope_110.start_list(true, Some("item"));
        for item_112 in var_111 {
            #[allow(unused_mut)]
            let mut entry_114 = list_113.entry();
            entry_114.string(item_112);
        }
        list_113.finish();
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("DryRun");
    if let Some(var_116) = &input.dry_run {
        scope_115.boolean(*var_116);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_ipv6_addresses(
    input: &crate::input::AssignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("Ipv6AddressCount");
    if let Some(var_118) = &input.ipv6_address_count {
        scope_117.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_118).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("Ipv6Addresses");
    if let Some(var_120) = &input.ipv6_addresses {
        let mut list_122 = scope_119.start_list(true, Some("item"));
        for item_121 in var_120 {
            #[allow(unused_mut)]
            let mut entry_123 = list_122.entry();
            entry_123.string(item_121);
        }
        list_122.finish();
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_125) = &input.ipv6_prefix_count {
        scope_124.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_125).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("Ipv6Prefix");
    if let Some(var_127) = &input.ipv6_prefixes {
        let mut list_129 = scope_126.start_list(true, Some("item"));
        for item_128 in var_127 {
            #[allow(unused_mut)]
            let mut entry_130 = list_129.entry();
            entry_130.string(item_128);
        }
        list_129.finish();
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("NetworkInterfaceId");
    if let Some(var_132) = &input.network_interface_id {
        scope_131.string(var_132);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_private_ip_addresses(
    input: &crate::input::AssignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("AllowReassignment");
    if let Some(var_134) = &input.allow_reassignment {
        scope_133.boolean(*var_134);
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("NetworkInterfaceId");
    if let Some(var_136) = &input.network_interface_id {
        scope_135.string(var_136);
    }
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("PrivateIpAddress");
    if let Some(var_138) = &input.private_ip_addresses {
        let mut list_140 = scope_137.start_list(true, Some("PrivateIpAddress"));
        for item_139 in var_138 {
            #[allow(unused_mut)]
            let mut entry_141 = list_140.entry();
            entry_141.string(item_139);
        }
        list_140.finish();
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_143) = &input.secondary_private_ip_address_count {
        scope_142.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_143).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("Ipv4Prefix");
    if let Some(var_145) = &input.ipv4_prefixes {
        let mut list_147 = scope_144.start_list(true, Some("item"));
        for item_146 in var_145 {
            #[allow(unused_mut)]
            let mut entry_148 = list_147.entry();
            entry_148.string(item_146);
        }
        list_147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_150) = &input.ipv4_prefix_count {
        scope_149.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_150).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_address(
    input: &crate::input::AssociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("AllocationId");
    if let Some(var_152) = &input.allocation_id {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("InstanceId");
    if let Some(var_154) = &input.instance_id {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("PublicIp");
    if let Some(var_156) = &input.public_ip {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("AllowReassociation");
    if let Some(var_158) = &input.allow_reassociation {
        scope_157.boolean(*var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("DryRun");
    if let Some(var_160) = &input.dry_run {
        scope_159.boolean(*var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("NetworkInterfaceId");
    if let Some(var_162) = &input.network_interface_id {
        scope_161.string(var_162);
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("PrivateIpAddress");
    if let Some(var_164) = &input.private_ip_address {
        scope_163.string(var_164);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_client_vpn_target_network(
    input: &crate::input::AssociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_166) = &input.client_vpn_endpoint_id {
        scope_165.string(var_166);
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("SubnetId");
    if let Some(var_168) = &input.subnet_id {
        scope_167.string(var_168);
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("ClientToken");
    if let Some(var_170) = &input.client_token {
        scope_169.string(var_170);
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("DryRun");
    if let Some(var_172) = &input.dry_run {
        scope_171.boolean(*var_172);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_dhcp_options(
    input: &crate::input::AssociateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("DhcpOptionsId");
    if let Some(var_174) = &input.dhcp_options_id {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("VpcId");
    if let Some(var_176) = &input.vpc_id {
        scope_175.string(var_176);
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("DryRun");
    if let Some(var_178) = &input.dry_run {
        scope_177.boolean(*var_178);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_enclave_certificate_iam_role(
    input: &crate::input::AssociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("CertificateArn");
    if let Some(var_180) = &input.certificate_arn {
        scope_179.string(var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("RoleArn");
    if let Some(var_182) = &input.role_arn {
        scope_181.string(var_182);
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("DryRun");
    if let Some(var_184) = &input.dry_run {
        scope_183.boolean(*var_184);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_iam_instance_profile(
    input: &crate::input::AssociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("IamInstanceProfile");
    if let Some(var_186) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_185, var_186,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("InstanceId");
    if let Some(var_188) = &input.instance_id {
        scope_187.string(var_188);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_instance_event_window(
    input: &crate::input::AssociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("DryRun");
    if let Some(var_190) = &input.dry_run {
        scope_189.boolean(*var_190);
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("InstanceEventWindowId");
    if let Some(var_192) = &input.instance_event_window_id {
        scope_191.string(var_192);
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("AssociationTarget");
    if let Some(var_194) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_association_request(scope_193, var_194)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_route_table(
    input: &crate::input::AssociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("DryRun");
    if let Some(var_196) = &input.dry_run {
        scope_195.boolean(*var_196);
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("RouteTableId");
    if let Some(var_198) = &input.route_table_id {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("SubnetId");
    if let Some(var_200) = &input.subnet_id {
        scope_199.string(var_200);
    }
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("GatewayId");
    if let Some(var_202) = &input.gateway_id {
        scope_201.string(var_202);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_subnet_cidr_block(
    input: &crate::input::AssociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_204) = &input.ipv6_cidr_block {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("SubnetId");
    if let Some(var_206) = &input.subnet_id {
        scope_205.string(var_206);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_multicast_domain(
    input: &crate::input::AssociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_208) = &input.transit_gateway_multicast_domain_id {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_210) = &input.transit_gateway_attachment_id {
        scope_209.string(var_210);
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("SubnetIds");
    if let Some(var_212) = &input.subnet_ids {
        let mut list_214 = scope_211.start_list(true, Some("item"));
        for item_213 in var_212 {
            #[allow(unused_mut)]
            let mut entry_215 = list_214.entry();
            entry_215.string(item_213);
        }
        list_214.finish();
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("DryRun");
    if let Some(var_217) = &input.dry_run {
        scope_216.boolean(*var_217);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_policy_table(
    input: &crate::input::AssociateTransitGatewayPolicyTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayPolicyTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_219) = &input.transit_gateway_policy_table_id {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_221) = &input.transit_gateway_attachment_id {
        scope_220.string(var_221);
    }
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("DryRun");
    if let Some(var_223) = &input.dry_run {
        scope_222.boolean(*var_223);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_route_table(
    input: &crate::input::AssociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_225) = &input.transit_gateway_route_table_id {
        scope_224.string(var_225);
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_227) = &input.transit_gateway_attachment_id {
        scope_226.string(var_227);
    }
    #[allow(unused_mut)]
    let mut scope_228 = writer.prefix("DryRun");
    if let Some(var_229) = &input.dry_run {
        scope_228.boolean(*var_229);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_trunk_interface(
    input: &crate::input::AssociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("BranchInterfaceId");
    if let Some(var_231) = &input.branch_interface_id {
        scope_230.string(var_231);
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("TrunkInterfaceId");
    if let Some(var_233) = &input.trunk_interface_id {
        scope_232.string(var_233);
    }
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("VlanId");
    if let Some(var_235) = &input.vlan_id {
        scope_234.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_235).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("GreKey");
    if let Some(var_237) = &input.gre_key {
        scope_236.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_237).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("ClientToken");
    if let Some(var_239) = &input.client_token {
        scope_238.string(var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("DryRun");
    if let Some(var_241) = &input.dry_run {
        scope_240.boolean(*var_241);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_vpc_cidr_block(
    input: &crate::input::AssociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_243) = &input.amazon_provided_ipv6_cidr_block {
        scope_242.boolean(*var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("CidrBlock");
    if let Some(var_245) = &input.cidr_block {
        scope_244.string(var_245);
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("VpcId");
    if let Some(var_247) = &input.vpc_id {
        scope_246.string(var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_249) = &input.ipv6_cidr_block_network_border_group {
        scope_248.string(var_249);
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("Ipv6Pool");
    if let Some(var_251) = &input.ipv6_pool {
        scope_250.string(var_251);
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_253) = &input.ipv6_cidr_block {
        scope_252.string(var_253);
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_255) = &input.ipv4_ipam_pool_id {
        scope_254.string(var_255);
    }
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_257) = &input.ipv4_netmask_length {
        scope_256.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_257).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_259) = &input.ipv6_ipam_pool_id {
        scope_258.string(var_259);
    }
    #[allow(unused_mut)]
    let mut scope_260 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_261) = &input.ipv6_netmask_length {
        scope_260.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_261).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_classic_link_vpc(
    input: &crate::input::AttachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("DryRun");
    if let Some(var_263) = &input.dry_run {
        scope_262.boolean(*var_263);
    }
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("SecurityGroupId");
    if let Some(var_265) = &input.groups {
        let mut list_267 = scope_264.start_list(true, Some("groupId"));
        for item_266 in var_265 {
            #[allow(unused_mut)]
            let mut entry_268 = list_267.entry();
            entry_268.string(item_266);
        }
        list_267.finish();
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("InstanceId");
    if let Some(var_270) = &input.instance_id {
        scope_269.string(var_270);
    }
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("VpcId");
    if let Some(var_272) = &input.vpc_id {
        scope_271.string(var_272);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_internet_gateway(
    input: &crate::input::AttachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("DryRun");
    if let Some(var_274) = &input.dry_run {
        scope_273.boolean(*var_274);
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("InternetGatewayId");
    if let Some(var_276) = &input.internet_gateway_id {
        scope_275.string(var_276);
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("VpcId");
    if let Some(var_278) = &input.vpc_id {
        scope_277.string(var_278);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_network_interface(
    input: &crate::input::AttachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("DeviceIndex");
    if let Some(var_280) = &input.device_index {
        scope_279.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_280).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("DryRun");
    if let Some(var_282) = &input.dry_run {
        scope_281.boolean(*var_282);
    }
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("InstanceId");
    if let Some(var_284) = &input.instance_id {
        scope_283.string(var_284);
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("NetworkInterfaceId");
    if let Some(var_286) = &input.network_interface_id {
        scope_285.string(var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("NetworkCardIndex");
    if let Some(var_288) = &input.network_card_index {
        scope_287.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_288).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_volume(
    input: &crate::input::AttachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("Device");
    if let Some(var_290) = &input.device {
        scope_289.string(var_290);
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("InstanceId");
    if let Some(var_292) = &input.instance_id {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("VolumeId");
    if let Some(var_294) = &input.volume_id {
        scope_293.string(var_294);
    }
    #[allow(unused_mut)]
    let mut scope_295 = writer.prefix("DryRun");
    if let Some(var_296) = &input.dry_run {
        scope_295.boolean(*var_296);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_vpn_gateway(
    input: &crate::input::AttachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_297 = writer.prefix("VpcId");
    if let Some(var_298) = &input.vpc_id {
        scope_297.string(var_298);
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("VpnGatewayId");
    if let Some(var_300) = &input.vpn_gateway_id {
        scope_299.string(var_300);
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("DryRun");
    if let Some(var_302) = &input.dry_run {
        scope_301.boolean(*var_302);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_client_vpn_ingress(
    input: &crate::input::AuthorizeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_304) = &input.client_vpn_endpoint_id {
        scope_303.string(var_304);
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("TargetNetworkCidr");
    if let Some(var_306) = &input.target_network_cidr {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("AccessGroupId");
    if let Some(var_308) = &input.access_group_id {
        scope_307.string(var_308);
    }
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_310) = &input.authorize_all_groups {
        scope_309.boolean(*var_310);
    }
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("Description");
    if let Some(var_312) = &input.description {
        scope_311.string(var_312);
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("ClientToken");
    if let Some(var_314) = &input.client_token {
        scope_313.string(var_314);
    }
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("DryRun");
    if let Some(var_316) = &input.dry_run {
        scope_315.boolean(*var_316);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_egress(
    input: &crate::input::AuthorizeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_317 = writer.prefix("DryRun");
    if let Some(var_318) = &input.dry_run {
        scope_317.boolean(*var_318);
    }
    #[allow(unused_mut)]
    let mut scope_319 = writer.prefix("GroupId");
    if let Some(var_320) = &input.group_id {
        scope_319.string(var_320);
    }
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("IpPermissions");
    if let Some(var_322) = &input.ip_permissions {
        let mut list_324 = scope_321.start_list(true, Some("item"));
        for item_323 in var_322 {
            #[allow(unused_mut)]
            let mut entry_325 = list_324.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_325, item_323)?;
        }
        list_324.finish();
    }
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("TagSpecification");
    if let Some(var_327) = &input.tag_specifications {
        let mut list_329 = scope_326.start_list(true, Some("item"));
        for item_328 in var_327 {
            #[allow(unused_mut)]
            let mut entry_330 = list_329.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_330, item_328,
            )?;
        }
        list_329.finish();
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("CidrIp");
    if let Some(var_332) = &input.cidr_ip {
        scope_331.string(var_332);
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("FromPort");
    if let Some(var_334) = &input.from_port {
        scope_333.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_334).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("IpProtocol");
    if let Some(var_336) = &input.ip_protocol {
        scope_335.string(var_336);
    }
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("ToPort");
    if let Some(var_338) = &input.to_port {
        scope_337.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_338).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_340) = &input.source_security_group_name {
        scope_339.string(var_340);
    }
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_342) = &input.source_security_group_owner_id {
        scope_341.string(var_342);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_ingress(
    input: &crate::input::AuthorizeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("CidrIp");
    if let Some(var_344) = &input.cidr_ip {
        scope_343.string(var_344);
    }
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("FromPort");
    if let Some(var_346) = &input.from_port {
        scope_345.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_346).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("GroupId");
    if let Some(var_348) = &input.group_id {
        scope_347.string(var_348);
    }
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("GroupName");
    if let Some(var_350) = &input.group_name {
        scope_349.string(var_350);
    }
    #[allow(unused_mut)]
    let mut scope_351 = writer.prefix("IpPermissions");
    if let Some(var_352) = &input.ip_permissions {
        let mut list_354 = scope_351.start_list(true, Some("item"));
        for item_353 in var_352 {
            #[allow(unused_mut)]
            let mut entry_355 = list_354.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_355, item_353)?;
        }
        list_354.finish();
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("IpProtocol");
    if let Some(var_357) = &input.ip_protocol {
        scope_356.string(var_357);
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_359) = &input.source_security_group_name {
        scope_358.string(var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_361) = &input.source_security_group_owner_id {
        scope_360.string(var_361);
    }
    #[allow(unused_mut)]
    let mut scope_362 = writer.prefix("ToPort");
    if let Some(var_363) = &input.to_port {
        scope_362.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_363).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("DryRun");
    if let Some(var_365) = &input.dry_run {
        scope_364.boolean(*var_365);
    }
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("TagSpecification");
    if let Some(var_367) = &input.tag_specifications {
        let mut list_369 = scope_366.start_list(true, Some("item"));
        for item_368 in var_367 {
            #[allow(unused_mut)]
            let mut entry_370 = list_369.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_370, item_368,
            )?;
        }
        list_369.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_bundle_instance(
    input: &crate::input::BundleInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("InstanceId");
    if let Some(var_372) = &input.instance_id {
        scope_371.string(var_372);
    }
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("Storage");
    if let Some(var_374) = &input.storage {
        crate::query_ser::serialize_structure_crate_model_storage(scope_373, var_374)?;
    }
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("DryRun");
    if let Some(var_376) = &input.dry_run {
        scope_375.boolean(*var_376);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_bundle_task(
    input: &crate::input::CancelBundleTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("BundleId");
    if let Some(var_378) = &input.bundle_id {
        scope_377.string(var_378);
    }
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("DryRun");
    if let Some(var_380) = &input.dry_run {
        scope_379.boolean(*var_380);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation(
    input: &crate::input::CancelCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_381 = writer.prefix("CapacityReservationId");
    if let Some(var_382) = &input.capacity_reservation_id {
        scope_381.string(var_382);
    }
    #[allow(unused_mut)]
    let mut scope_383 = writer.prefix("DryRun");
    if let Some(var_384) = &input.dry_run {
        scope_383.boolean(*var_384);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation_fleets(
    input: &crate::input::CancelCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("DryRun");
    if let Some(var_386) = &input.dry_run {
        scope_385.boolean(*var_386);
    }
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_388) = &input.capacity_reservation_fleet_ids {
        let mut list_390 = scope_387.start_list(true, Some("item"));
        for item_389 in var_388 {
            #[allow(unused_mut)]
            let mut entry_391 = list_390.entry();
            entry_391.string(item_389);
        }
        list_390.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_conversion_task(
    input: &crate::input::CancelConversionTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("ConversionTaskId");
    if let Some(var_393) = &input.conversion_task_id {
        scope_392.string(var_393);
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("DryRun");
    if let Some(var_395) = &input.dry_run {
        scope_394.boolean(*var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("ReasonMessage");
    if let Some(var_397) = &input.reason_message {
        scope_396.string(var_397);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("ExportTaskId");
    if let Some(var_399) = &input.export_task_id {
        scope_398.string(var_399);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_import_task(
    input: &crate::input::CancelImportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("CancelReason");
    if let Some(var_401) = &input.cancel_reason {
        scope_400.string(var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("DryRun");
    if let Some(var_403) = &input.dry_run {
        scope_402.boolean(*var_403);
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("ImportTaskId");
    if let Some(var_405) = &input.import_task_id {
        scope_404.string(var_405);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_reserved_instances_listing(
    input: &crate::input::CancelReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_406 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_407) = &input.reserved_instances_listing_id {
        scope_406.string(var_407);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_fleet_requests(
    input: &crate::input::CancelSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_408 = writer.prefix("DryRun");
    if let Some(var_409) = &input.dry_run {
        scope_408.boolean(*var_409);
    }
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("SpotFleetRequestId");
    if let Some(var_411) = &input.spot_fleet_request_ids {
        let mut list_413 = scope_410.start_list(true, Some("item"));
        for item_412 in var_411 {
            #[allow(unused_mut)]
            let mut entry_414 = list_413.entry();
            entry_414.string(item_412);
        }
        list_413.finish();
    }
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("TerminateInstances");
    if let Some(var_416) = &input.terminate_instances {
        scope_415.boolean(*var_416);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_instance_requests(
    input: &crate::input::CancelSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("DryRun");
    if let Some(var_418) = &input.dry_run {
        scope_417.boolean(*var_418);
    }
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_420) = &input.spot_instance_request_ids {
        let mut list_422 = scope_419.start_list(true, Some("SpotInstanceRequestId"));
        for item_421 in var_420 {
            #[allow(unused_mut)]
            let mut entry_423 = list_422.entry();
            entry_423.string(item_421);
        }
        list_422.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_confirm_product_instance(
    input: &crate::input::ConfirmProductInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_424 = writer.prefix("InstanceId");
    if let Some(var_425) = &input.instance_id {
        scope_424.string(var_425);
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("ProductCode");
    if let Some(var_427) = &input.product_code {
        scope_426.string(var_427);
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("DryRun");
    if let Some(var_429) = &input.dry_run {
        scope_428.boolean(*var_429);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_fpga_image(
    input: &crate::input::CopyFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("DryRun");
    if let Some(var_431) = &input.dry_run {
        scope_430.boolean(*var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("SourceFpgaImageId");
    if let Some(var_433) = &input.source_fpga_image_id {
        scope_432.string(var_433);
    }
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("Description");
    if let Some(var_435) = &input.description {
        scope_434.string(var_435);
    }
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("Name");
    if let Some(var_437) = &input.name {
        scope_436.string(var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("SourceRegion");
    if let Some(var_439) = &input.source_region {
        scope_438.string(var_439);
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("ClientToken");
    if let Some(var_441) = &input.client_token {
        scope_440.string(var_441);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_image(
    input: &crate::input::CopyImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("ClientToken");
    if let Some(var_443) = &input.client_token {
        scope_442.string(var_443);
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("Description");
    if let Some(var_445) = &input.description {
        scope_444.string(var_445);
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("Encrypted");
    if let Some(var_447) = &input.encrypted {
        scope_446.boolean(*var_447);
    }
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("KmsKeyId");
    if let Some(var_449) = &input.kms_key_id {
        scope_448.string(var_449);
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("Name");
    if let Some(var_451) = &input.name {
        scope_450.string(var_451);
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("SourceImageId");
    if let Some(var_453) = &input.source_image_id {
        scope_452.string(var_453);
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("SourceRegion");
    if let Some(var_455) = &input.source_region {
        scope_454.string(var_455);
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("DestinationOutpostArn");
    if let Some(var_457) = &input.destination_outpost_arn {
        scope_456.string(var_457);
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("DryRun");
    if let Some(var_459) = &input.dry_run {
        scope_458.boolean(*var_459);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("Description");
    if let Some(var_461) = &input.description {
        scope_460.string(var_461);
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("DestinationOutpostArn");
    if let Some(var_463) = &input.destination_outpost_arn {
        scope_462.string(var_463);
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("DestinationRegion");
    if let Some(var_465) = &input.destination_region {
        scope_464.string(var_465);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("Encrypted");
    if let Some(var_467) = &input.encrypted {
        scope_466.boolean(*var_467);
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("KmsKeyId");
    if let Some(var_469) = &input.kms_key_id {
        scope_468.string(var_469);
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("PresignedUrl");
    if let Some(var_471) = &input.presigned_url {
        scope_470.string(var_471);
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("SourceRegion");
    if let Some(var_473) = &input.source_region {
        scope_472.string(var_473);
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("SourceSnapshotId");
    if let Some(var_475) = &input.source_snapshot_id {
        scope_474.string(var_475);
    }
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("TagSpecification");
    if let Some(var_477) = &input.tag_specifications {
        let mut list_479 = scope_476.start_list(true, Some("item"));
        for item_478 in var_477 {
            #[allow(unused_mut)]
            let mut entry_480 = list_479.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_480, item_478,
            )?;
        }
        list_479.finish();
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("DryRun");
    if let Some(var_482) = &input.dry_run {
        scope_481.boolean(*var_482);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation(
    input: &crate::input::CreateCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("ClientToken");
    if let Some(var_484) = &input.client_token {
        scope_483.string(var_484);
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("InstanceType");
    if let Some(var_486) = &input.instance_type {
        scope_485.string(var_486);
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("InstancePlatform");
    if let Some(var_488) = &input.instance_platform {
        scope_487.string(var_488.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("AvailabilityZone");
    if let Some(var_490) = &input.availability_zone {
        scope_489.string(var_490);
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("AvailabilityZoneId");
    if let Some(var_492) = &input.availability_zone_id {
        scope_491.string(var_492);
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("Tenancy");
    if let Some(var_494) = &input.tenancy {
        scope_493.string(var_494.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("InstanceCount");
    if let Some(var_496) = &input.instance_count {
        scope_495.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_496).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("EbsOptimized");
    if let Some(var_498) = &input.ebs_optimized {
        scope_497.boolean(*var_498);
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("EphemeralStorage");
    if let Some(var_500) = &input.ephemeral_storage {
        scope_499.boolean(*var_500);
    }
    #[allow(unused_mut)]
    let mut scope_501 = writer.prefix("EndDate");
    if let Some(var_502) = &input.end_date {
        scope_501.date_time(var_502, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("EndDateType");
    if let Some(var_504) = &input.end_date_type {
        scope_503.string(var_504.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_506) = &input.instance_match_criteria {
        scope_505.string(var_506.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_507 = writer.prefix("TagSpecifications");
    if let Some(var_508) = &input.tag_specifications {
        let mut list_510 = scope_507.start_list(true, Some("item"));
        for item_509 in var_508 {
            #[allow(unused_mut)]
            let mut entry_511 = list_510.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_511, item_509,
            )?;
        }
        list_510.finish();
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("DryRun");
    if let Some(var_513) = &input.dry_run {
        scope_512.boolean(*var_513);
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("OutpostArn");
    if let Some(var_515) = &input.outpost_arn {
        scope_514.string(var_515);
    }
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("PlacementGroupArn");
    if let Some(var_517) = &input.placement_group_arn {
        scope_516.string(var_517);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation_fleet(
    input: &crate::input::CreateCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("AllocationStrategy");
    if let Some(var_519) = &input.allocation_strategy {
        scope_518.string(var_519);
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("ClientToken");
    if let Some(var_521) = &input.client_token {
        scope_520.string(var_521);
    }
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("InstanceTypeSpecification");
    if let Some(var_523) = &input.instance_type_specifications {
        let mut list_525 = scope_522.start_list(true, None);
        for item_524 in var_523 {
            #[allow(unused_mut)]
            let mut entry_526 = list_525.entry();
            crate::query_ser::serialize_structure_crate_model_reservation_fleet_instance_specification(entry_526, item_524)?;
        }
        list_525.finish();
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("Tenancy");
    if let Some(var_528) = &input.tenancy {
        scope_527.string(var_528.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_529 = writer.prefix("TotalTargetCapacity");
    if let Some(var_530) = &input.total_target_capacity {
        scope_529.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_530).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_531 = writer.prefix("EndDate");
    if let Some(var_532) = &input.end_date {
        scope_531.date_time(var_532, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_533 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_534) = &input.instance_match_criteria {
        scope_533.string(var_534.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_535 = writer.prefix("TagSpecification");
    if let Some(var_536) = &input.tag_specifications {
        let mut list_538 = scope_535.start_list(true, Some("item"));
        for item_537 in var_536 {
            #[allow(unused_mut)]
            let mut entry_539 = list_538.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_539, item_537,
            )?;
        }
        list_538.finish();
    }
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("DryRun");
    if let Some(var_541) = &input.dry_run {
        scope_540.boolean(*var_541);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_carrier_gateway(
    input: &crate::input::CreateCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("VpcId");
    if let Some(var_543) = &input.vpc_id {
        scope_542.string(var_543);
    }
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("TagSpecification");
    if let Some(var_545) = &input.tag_specifications {
        let mut list_547 = scope_544.start_list(true, Some("item"));
        for item_546 in var_545 {
            #[allow(unused_mut)]
            let mut entry_548 = list_547.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_548, item_546,
            )?;
        }
        list_547.finish();
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("DryRun");
    if let Some(var_550) = &input.dry_run {
        scope_549.boolean(*var_550);
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("ClientToken");
    if let Some(var_552) = &input.client_token {
        scope_551.string(var_552);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_endpoint(
    input: &crate::input::CreateClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_553 = writer.prefix("ClientCidrBlock");
    if let Some(var_554) = &input.client_cidr_block {
        scope_553.string(var_554);
    }
    #[allow(unused_mut)]
    let mut scope_555 = writer.prefix("ServerCertificateArn");
    if let Some(var_556) = &input.server_certificate_arn {
        scope_555.string(var_556);
    }
    #[allow(unused_mut)]
    let mut scope_557 = writer.prefix("Authentication");
    if let Some(var_558) = &input.authentication_options {
        let mut list_560 = scope_557.start_list(true, None);
        for item_559 in var_558 {
            #[allow(unused_mut)]
            let mut entry_561 = list_560.entry();
            crate::query_ser::serialize_structure_crate_model_client_vpn_authentication_request(
                entry_561, item_559,
            )?;
        }
        list_560.finish();
    }
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("ConnectionLogOptions");
    if let Some(var_563) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_562, var_563,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("DnsServers");
    if let Some(var_565) = &input.dns_servers {
        let mut list_567 = scope_564.start_list(true, Some("item"));
        for item_566 in var_565 {
            #[allow(unused_mut)]
            let mut entry_568 = list_567.entry();
            entry_568.string(item_566);
        }
        list_567.finish();
    }
    #[allow(unused_mut)]
    let mut scope_569 = writer.prefix("TransportProtocol");
    if let Some(var_570) = &input.transport_protocol {
        scope_569.string(var_570.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_571 = writer.prefix("VpnPort");
    if let Some(var_572) = &input.vpn_port {
        scope_571.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_572).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_573 = writer.prefix("Description");
    if let Some(var_574) = &input.description {
        scope_573.string(var_574);
    }
    #[allow(unused_mut)]
    let mut scope_575 = writer.prefix("SplitTunnel");
    if let Some(var_576) = &input.split_tunnel {
        scope_575.boolean(*var_576);
    }
    #[allow(unused_mut)]
    let mut scope_577 = writer.prefix("DryRun");
    if let Some(var_578) = &input.dry_run {
        scope_577.boolean(*var_578);
    }
    #[allow(unused_mut)]
    let mut scope_579 = writer.prefix("ClientToken");
    if let Some(var_580) = &input.client_token {
        scope_579.string(var_580);
    }
    #[allow(unused_mut)]
    let mut scope_581 = writer.prefix("TagSpecification");
    if let Some(var_582) = &input.tag_specifications {
        let mut list_584 = scope_581.start_list(true, Some("item"));
        for item_583 in var_582 {
            #[allow(unused_mut)]
            let mut entry_585 = list_584.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_585, item_583,
            )?;
        }
        list_584.finish();
    }
    #[allow(unused_mut)]
    let mut scope_586 = writer.prefix("SecurityGroupId");
    if let Some(var_587) = &input.security_group_ids {
        let mut list_589 = scope_586.start_list(true, Some("item"));
        for item_588 in var_587 {
            #[allow(unused_mut)]
            let mut entry_590 = list_589.entry();
            entry_590.string(item_588);
        }
        list_589.finish();
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("VpcId");
    if let Some(var_592) = &input.vpc_id {
        scope_591.string(var_592);
    }
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("SelfServicePortal");
    if let Some(var_594) = &input.self_service_portal {
        scope_593.string(var_594.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("ClientConnectOptions");
    if let Some(var_596) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_595, var_596,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("SessionTimeoutHours");
    if let Some(var_598) = &input.session_timeout_hours {
        scope_597.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_598).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_600) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_599, var_600,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_route(
    input: &crate::input::CreateClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_602) = &input.client_vpn_endpoint_id {
        scope_601.string(var_602);
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("DestinationCidrBlock");
    if let Some(var_604) = &input.destination_cidr_block {
        scope_603.string(var_604);
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_606) = &input.target_vpc_subnet_id {
        scope_605.string(var_606);
    }
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("Description");
    if let Some(var_608) = &input.description {
        scope_607.string(var_608);
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("ClientToken");
    if let Some(var_610) = &input.client_token {
        scope_609.string(var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("DryRun");
    if let Some(var_612) = &input.dry_run {
        scope_611.boolean(*var_612);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_coip_cidr(
    input: &crate::input::CreateCoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("Cidr");
    if let Some(var_614) = &input.cidr {
        scope_613.string(var_614);
    }
    #[allow(unused_mut)]
    let mut scope_615 = writer.prefix("CoipPoolId");
    if let Some(var_616) = &input.coip_pool_id {
        scope_615.string(var_616);
    }
    #[allow(unused_mut)]
    let mut scope_617 = writer.prefix("DryRun");
    if let Some(var_618) = &input.dry_run {
        scope_617.boolean(*var_618);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_coip_pool(
    input: &crate::input::CreateCoipPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCoipPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_619 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_620) = &input.local_gateway_route_table_id {
        scope_619.string(var_620);
    }
    #[allow(unused_mut)]
    let mut scope_621 = writer.prefix("TagSpecification");
    if let Some(var_622) = &input.tag_specifications {
        let mut list_624 = scope_621.start_list(true, Some("item"));
        for item_623 in var_622 {
            #[allow(unused_mut)]
            let mut entry_625 = list_624.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_625, item_623,
            )?;
        }
        list_624.finish();
    }
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("DryRun");
    if let Some(var_627) = &input.dry_run {
        scope_626.boolean(*var_627);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_customer_gateway(
    input: &crate::input::CreateCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("BgpAsn");
    if let Some(var_629) = &input.bgp_asn {
        scope_628.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_629).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("PublicIp");
    if let Some(var_631) = &input.public_ip {
        scope_630.string(var_631);
    }
    #[allow(unused_mut)]
    let mut scope_632 = writer.prefix("CertificateArn");
    if let Some(var_633) = &input.certificate_arn {
        scope_632.string(var_633);
    }
    #[allow(unused_mut)]
    let mut scope_634 = writer.prefix("Type");
    if let Some(var_635) = &input.r#type {
        scope_634.string(var_635.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_636 = writer.prefix("TagSpecification");
    if let Some(var_637) = &input.tag_specifications {
        let mut list_639 = scope_636.start_list(true, Some("item"));
        for item_638 in var_637 {
            #[allow(unused_mut)]
            let mut entry_640 = list_639.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_640, item_638,
            )?;
        }
        list_639.finish();
    }
    #[allow(unused_mut)]
    let mut scope_641 = writer.prefix("DeviceName");
    if let Some(var_642) = &input.device_name {
        scope_641.string(var_642);
    }
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("IpAddress");
    if let Some(var_644) = &input.ip_address {
        scope_643.string(var_644);
    }
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("DryRun");
    if let Some(var_646) = &input.dry_run {
        scope_645.boolean(*var_646);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_subnet(
    input: &crate::input::CreateDefaultSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("AvailabilityZone");
    if let Some(var_648) = &input.availability_zone {
        scope_647.string(var_648);
    }
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("DryRun");
    if let Some(var_650) = &input.dry_run {
        scope_649.boolean(*var_650);
    }
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("Ipv6Native");
    if let Some(var_652) = &input.ipv6_native {
        scope_651.boolean(*var_652);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_vpc(
    input: &crate::input::CreateDefaultVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("DryRun");
    if let Some(var_654) = &input.dry_run {
        scope_653.boolean(*var_654);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_dhcp_options(
    input: &crate::input::CreateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("DhcpConfiguration");
    if let Some(var_656) = &input.dhcp_configurations {
        let mut list_658 = scope_655.start_list(true, Some("item"));
        for item_657 in var_656 {
            #[allow(unused_mut)]
            let mut entry_659 = list_658.entry();
            crate::query_ser::serialize_structure_crate_model_new_dhcp_configuration(
                entry_659, item_657,
            )?;
        }
        list_658.finish();
    }
    #[allow(unused_mut)]
    let mut scope_660 = writer.prefix("TagSpecification");
    if let Some(var_661) = &input.tag_specifications {
        let mut list_663 = scope_660.start_list(true, Some("item"));
        for item_662 in var_661 {
            #[allow(unused_mut)]
            let mut entry_664 = list_663.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_664, item_662,
            )?;
        }
        list_663.finish();
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("DryRun");
    if let Some(var_666) = &input.dry_run {
        scope_665.boolean(*var_666);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_egress_only_internet_gateway(
    input: &crate::input::CreateEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_667 = writer.prefix("ClientToken");
    if let Some(var_668) = &input.client_token {
        scope_667.string(var_668);
    }
    #[allow(unused_mut)]
    let mut scope_669 = writer.prefix("DryRun");
    if let Some(var_670) = &input.dry_run {
        scope_669.boolean(*var_670);
    }
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("VpcId");
    if let Some(var_672) = &input.vpc_id {
        scope_671.string(var_672);
    }
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("TagSpecification");
    if let Some(var_674) = &input.tag_specifications {
        let mut list_676 = scope_673.start_list(true, Some("item"));
        for item_675 in var_674 {
            #[allow(unused_mut)]
            let mut entry_677 = list_676.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_677, item_675,
            )?;
        }
        list_676.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fleet(
    input: &crate::input::CreateFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_678 = writer.prefix("DryRun");
    if let Some(var_679) = &input.dry_run {
        scope_678.boolean(*var_679);
    }
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("ClientToken");
    if let Some(var_681) = &input.client_token {
        scope_680.string(var_681);
    }
    #[allow(unused_mut)]
    let mut scope_682 = writer.prefix("SpotOptions");
    if let Some(var_683) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_options_request(scope_682, var_683)?;
    }
    #[allow(unused_mut)]
    let mut scope_684 = writer.prefix("OnDemandOptions");
    if let Some(var_685) = &input.on_demand_options {
        crate::query_ser::serialize_structure_crate_model_on_demand_options_request(
            scope_684, var_685,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_686 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_687) = &input.excess_capacity_termination_policy {
        scope_686.string(var_687.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_688 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_689) = &input.launch_template_configs {
        let mut list_691 = scope_688.start_list(true, Some("item"));
        for item_690 in var_689 {
            #[allow(unused_mut)]
            let mut entry_692 = list_691.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_692, item_690,
            )?;
        }
        list_691.finish();
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_694) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_693, var_694,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_695 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_696) = &input.terminate_instances_with_expiration {
        scope_695.boolean(*var_696);
    }
    #[allow(unused_mut)]
    let mut scope_697 = writer.prefix("Type");
    if let Some(var_698) = &input.r#type {
        scope_697.string(var_698.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_699 = writer.prefix("ValidFrom");
    if let Some(var_700) = &input.valid_from {
        scope_699.date_time(var_700, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_701 = writer.prefix("ValidUntil");
    if let Some(var_702) = &input.valid_until {
        scope_701.date_time(var_702, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_703 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_704) = &input.replace_unhealthy_instances {
        scope_703.boolean(*var_704);
    }
    #[allow(unused_mut)]
    let mut scope_705 = writer.prefix("TagSpecification");
    if let Some(var_706) = &input.tag_specifications {
        let mut list_708 = scope_705.start_list(true, Some("item"));
        for item_707 in var_706 {
            #[allow(unused_mut)]
            let mut entry_709 = list_708.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_709, item_707,
            )?;
        }
        list_708.finish();
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("Context");
    if let Some(var_711) = &input.context {
        scope_710.string(var_711);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_flow_logs(
    input: &crate::input::CreateFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("DryRun");
    if let Some(var_713) = &input.dry_run {
        scope_712.boolean(*var_713);
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("ClientToken");
    if let Some(var_715) = &input.client_token {
        scope_714.string(var_715);
    }
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_717) = &input.deliver_logs_permission_arn {
        scope_716.string(var_717);
    }
    #[allow(unused_mut)]
    let mut scope_718 = writer.prefix("DeliverCrossAccountRole");
    if let Some(var_719) = &input.deliver_cross_account_role {
        scope_718.string(var_719);
    }
    #[allow(unused_mut)]
    let mut scope_720 = writer.prefix("LogGroupName");
    if let Some(var_721) = &input.log_group_name {
        scope_720.string(var_721);
    }
    #[allow(unused_mut)]
    let mut scope_722 = writer.prefix("ResourceId");
    if let Some(var_723) = &input.resource_ids {
        let mut list_725 = scope_722.start_list(true, Some("item"));
        for item_724 in var_723 {
            #[allow(unused_mut)]
            let mut entry_726 = list_725.entry();
            entry_726.string(item_724);
        }
        list_725.finish();
    }
    #[allow(unused_mut)]
    let mut scope_727 = writer.prefix("ResourceType");
    if let Some(var_728) = &input.resource_type {
        scope_727.string(var_728.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_729 = writer.prefix("TrafficType");
    if let Some(var_730) = &input.traffic_type {
        scope_729.string(var_730.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_731 = writer.prefix("LogDestinationType");
    if let Some(var_732) = &input.log_destination_type {
        scope_731.string(var_732.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_733 = writer.prefix("LogDestination");
    if let Some(var_734) = &input.log_destination {
        scope_733.string(var_734);
    }
    #[allow(unused_mut)]
    let mut scope_735 = writer.prefix("LogFormat");
    if let Some(var_736) = &input.log_format {
        scope_735.string(var_736);
    }
    #[allow(unused_mut)]
    let mut scope_737 = writer.prefix("TagSpecification");
    if let Some(var_738) = &input.tag_specifications {
        let mut list_740 = scope_737.start_list(true, Some("item"));
        for item_739 in var_738 {
            #[allow(unused_mut)]
            let mut entry_741 = list_740.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_741, item_739,
            )?;
        }
        list_740.finish();
    }
    #[allow(unused_mut)]
    let mut scope_742 = writer.prefix("MaxAggregationInterval");
    if let Some(var_743) = &input.max_aggregation_interval {
        scope_742.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_743).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_744 = writer.prefix("DestinationOptions");
    if let Some(var_745) = &input.destination_options {
        crate::query_ser::serialize_structure_crate_model_destination_options_request(
            scope_744, var_745,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fpga_image(
    input: &crate::input::CreateFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_746 = writer.prefix("DryRun");
    if let Some(var_747) = &input.dry_run {
        scope_746.boolean(*var_747);
    }
    #[allow(unused_mut)]
    let mut scope_748 = writer.prefix("InputStorageLocation");
    if let Some(var_749) = &input.input_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_748, var_749)?;
    }
    #[allow(unused_mut)]
    let mut scope_750 = writer.prefix("LogsStorageLocation");
    if let Some(var_751) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_750, var_751)?;
    }
    #[allow(unused_mut)]
    let mut scope_752 = writer.prefix("Description");
    if let Some(var_753) = &input.description {
        scope_752.string(var_753);
    }
    #[allow(unused_mut)]
    let mut scope_754 = writer.prefix("Name");
    if let Some(var_755) = &input.name {
        scope_754.string(var_755);
    }
    #[allow(unused_mut)]
    let mut scope_756 = writer.prefix("ClientToken");
    if let Some(var_757) = &input.client_token {
        scope_756.string(var_757);
    }
    #[allow(unused_mut)]
    let mut scope_758 = writer.prefix("TagSpecification");
    if let Some(var_759) = &input.tag_specifications {
        let mut list_761 = scope_758.start_list(true, Some("item"));
        for item_760 in var_759 {
            #[allow(unused_mut)]
            let mut entry_762 = list_761.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_762, item_760,
            )?;
        }
        list_761.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_image(
    input: &crate::input::CreateImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_763 = writer.prefix("BlockDeviceMapping");
    if let Some(var_764) = &input.block_device_mappings {
        let mut list_766 = scope_763.start_list(true, Some("BlockDeviceMapping"));
        for item_765 in var_764 {
            #[allow(unused_mut)]
            let mut entry_767 = list_766.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_767, item_765,
            )?;
        }
        list_766.finish();
    }
    #[allow(unused_mut)]
    let mut scope_768 = writer.prefix("Description");
    if let Some(var_769) = &input.description {
        scope_768.string(var_769);
    }
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("DryRun");
    if let Some(var_771) = &input.dry_run {
        scope_770.boolean(*var_771);
    }
    #[allow(unused_mut)]
    let mut scope_772 = writer.prefix("InstanceId");
    if let Some(var_773) = &input.instance_id {
        scope_772.string(var_773);
    }
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("Name");
    if let Some(var_775) = &input.name {
        scope_774.string(var_775);
    }
    #[allow(unused_mut)]
    let mut scope_776 = writer.prefix("NoReboot");
    if let Some(var_777) = &input.no_reboot {
        scope_776.boolean(*var_777);
    }
    #[allow(unused_mut)]
    let mut scope_778 = writer.prefix("TagSpecification");
    if let Some(var_779) = &input.tag_specifications {
        let mut list_781 = scope_778.start_list(true, Some("item"));
        for item_780 in var_779 {
            #[allow(unused_mut)]
            let mut entry_782 = list_781.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_782, item_780,
            )?;
        }
        list_781.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_event_window(
    input: &crate::input::CreateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("DryRun");
    if let Some(var_784) = &input.dry_run {
        scope_783.boolean(*var_784);
    }
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("Name");
    if let Some(var_786) = &input.name {
        scope_785.string(var_786);
    }
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("TimeRange");
    if let Some(var_788) = &input.time_ranges {
        let mut list_790 = scope_787.start_list(true, None);
        for item_789 in var_788 {
            #[allow(unused_mut)]
            let mut entry_791 = list_790.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_791, item_789)?;
        }
        list_790.finish();
    }
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("CronExpression");
    if let Some(var_793) = &input.cron_expression {
        scope_792.string(var_793);
    }
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("TagSpecification");
    if let Some(var_795) = &input.tag_specifications {
        let mut list_797 = scope_794.start_list(true, Some("item"));
        for item_796 in var_795 {
            #[allow(unused_mut)]
            let mut entry_798 = list_797.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_798, item_796,
            )?;
        }
        list_797.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_export_task(
    input: &crate::input::CreateInstanceExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_799 = writer.prefix("Description");
    if let Some(var_800) = &input.description {
        scope_799.string(var_800);
    }
    #[allow(unused_mut)]
    let mut scope_801 = writer.prefix("ExportToS3");
    if let Some(var_802) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_crate_model_export_to_s3_task_specification(
            scope_801, var_802,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("InstanceId");
    if let Some(var_804) = &input.instance_id {
        scope_803.string(var_804);
    }
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("TargetEnvironment");
    if let Some(var_806) = &input.target_environment {
        scope_805.string(var_806.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_807 = writer.prefix("TagSpecification");
    if let Some(var_808) = &input.tag_specifications {
        let mut list_810 = scope_807.start_list(true, Some("item"));
        for item_809 in var_808 {
            #[allow(unused_mut)]
            let mut entry_811 = list_810.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_811, item_809,
            )?;
        }
        list_810.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_internet_gateway(
    input: &crate::input::CreateInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("TagSpecification");
    if let Some(var_813) = &input.tag_specifications {
        let mut list_815 = scope_812.start_list(true, Some("item"));
        for item_814 in var_813 {
            #[allow(unused_mut)]
            let mut entry_816 = list_815.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_816, item_814,
            )?;
        }
        list_815.finish();
    }
    #[allow(unused_mut)]
    let mut scope_817 = writer.prefix("DryRun");
    if let Some(var_818) = &input.dry_run {
        scope_817.boolean(*var_818);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam(
    input: &crate::input::CreateIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_819 = writer.prefix("DryRun");
    if let Some(var_820) = &input.dry_run {
        scope_819.boolean(*var_820);
    }
    #[allow(unused_mut)]
    let mut scope_821 = writer.prefix("Description");
    if let Some(var_822) = &input.description {
        scope_821.string(var_822);
    }
    #[allow(unused_mut)]
    let mut scope_823 = writer.prefix("OperatingRegion");
    if let Some(var_824) = &input.operating_regions {
        let mut list_826 = scope_823.start_list(true, None);
        for item_825 in var_824 {
            #[allow(unused_mut)]
            let mut entry_827 = list_826.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_827, item_825,
            )?;
        }
        list_826.finish();
    }
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("TagSpecification");
    if let Some(var_829) = &input.tag_specifications {
        let mut list_831 = scope_828.start_list(true, Some("item"));
        for item_830 in var_829 {
            #[allow(unused_mut)]
            let mut entry_832 = list_831.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_832, item_830,
            )?;
        }
        list_831.finish();
    }
    #[allow(unused_mut)]
    let mut scope_833 = writer.prefix("ClientToken");
    if let Some(var_834) = &input.client_token {
        scope_833.string(var_834);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_pool(
    input: &crate::input::CreateIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_835 = writer.prefix("DryRun");
    if let Some(var_836) = &input.dry_run {
        scope_835.boolean(*var_836);
    }
    #[allow(unused_mut)]
    let mut scope_837 = writer.prefix("IpamScopeId");
    if let Some(var_838) = &input.ipam_scope_id {
        scope_837.string(var_838);
    }
    #[allow(unused_mut)]
    let mut scope_839 = writer.prefix("Locale");
    if let Some(var_840) = &input.locale {
        scope_839.string(var_840);
    }
    #[allow(unused_mut)]
    let mut scope_841 = writer.prefix("SourceIpamPoolId");
    if let Some(var_842) = &input.source_ipam_pool_id {
        scope_841.string(var_842);
    }
    #[allow(unused_mut)]
    let mut scope_843 = writer.prefix("Description");
    if let Some(var_844) = &input.description {
        scope_843.string(var_844);
    }
    #[allow(unused_mut)]
    let mut scope_845 = writer.prefix("AddressFamily");
    if let Some(var_846) = &input.address_family {
        scope_845.string(var_846.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_847 = writer.prefix("AutoImport");
    if let Some(var_848) = &input.auto_import {
        scope_847.boolean(*var_848);
    }
    #[allow(unused_mut)]
    let mut scope_849 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_850) = &input.publicly_advertisable {
        scope_849.boolean(*var_850);
    }
    #[allow(unused_mut)]
    let mut scope_851 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_852) = &input.allocation_min_netmask_length {
        scope_851.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_852).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_853 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_854) = &input.allocation_max_netmask_length {
        scope_853.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_854).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_855 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_856) = &input.allocation_default_netmask_length {
        scope_855.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_856).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_857 = writer.prefix("AllocationResourceTag");
    if let Some(var_858) = &input.allocation_resource_tags {
        let mut list_860 = scope_857.start_list(true, Some("item"));
        for item_859 in var_858 {
            #[allow(unused_mut)]
            let mut entry_861 = list_860.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_861, item_859,
            )?;
        }
        list_860.finish();
    }
    #[allow(unused_mut)]
    let mut scope_862 = writer.prefix("TagSpecification");
    if let Some(var_863) = &input.tag_specifications {
        let mut list_865 = scope_862.start_list(true, Some("item"));
        for item_864 in var_863 {
            #[allow(unused_mut)]
            let mut entry_866 = list_865.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_866, item_864,
            )?;
        }
        list_865.finish();
    }
    #[allow(unused_mut)]
    let mut scope_867 = writer.prefix("ClientToken");
    if let Some(var_868) = &input.client_token {
        scope_867.string(var_868);
    }
    #[allow(unused_mut)]
    let mut scope_869 = writer.prefix("AwsService");
    if let Some(var_870) = &input.aws_service {
        scope_869.string(var_870.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_scope(
    input: &crate::input::CreateIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_871 = writer.prefix("DryRun");
    if let Some(var_872) = &input.dry_run {
        scope_871.boolean(*var_872);
    }
    #[allow(unused_mut)]
    let mut scope_873 = writer.prefix("IpamId");
    if let Some(var_874) = &input.ipam_id {
        scope_873.string(var_874);
    }
    #[allow(unused_mut)]
    let mut scope_875 = writer.prefix("Description");
    if let Some(var_876) = &input.description {
        scope_875.string(var_876);
    }
    #[allow(unused_mut)]
    let mut scope_877 = writer.prefix("TagSpecification");
    if let Some(var_878) = &input.tag_specifications {
        let mut list_880 = scope_877.start_list(true, Some("item"));
        for item_879 in var_878 {
            #[allow(unused_mut)]
            let mut entry_881 = list_880.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_881, item_879,
            )?;
        }
        list_880.finish();
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("ClientToken");
    if let Some(var_883) = &input.client_token {
        scope_882.string(var_883);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_key_pair(
    input: &crate::input::CreateKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("KeyName");
    if let Some(var_885) = &input.key_name {
        scope_884.string(var_885);
    }
    #[allow(unused_mut)]
    let mut scope_886 = writer.prefix("DryRun");
    if let Some(var_887) = &input.dry_run {
        scope_886.boolean(*var_887);
    }
    #[allow(unused_mut)]
    let mut scope_888 = writer.prefix("KeyType");
    if let Some(var_889) = &input.key_type {
        scope_888.string(var_889.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_890 = writer.prefix("TagSpecification");
    if let Some(var_891) = &input.tag_specifications {
        let mut list_893 = scope_890.start_list(true, Some("item"));
        for item_892 in var_891 {
            #[allow(unused_mut)]
            let mut entry_894 = list_893.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_894, item_892,
            )?;
        }
        list_893.finish();
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("KeyFormat");
    if let Some(var_896) = &input.key_format {
        scope_895.string(var_896.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template(
    input: &crate::input::CreateLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("DryRun");
    if let Some(var_898) = &input.dry_run {
        scope_897.boolean(*var_898);
    }
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("ClientToken");
    if let Some(var_900) = &input.client_token {
        scope_899.string(var_900);
    }
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("LaunchTemplateName");
    if let Some(var_902) = &input.launch_template_name {
        scope_901.string(var_902);
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("VersionDescription");
    if let Some(var_904) = &input.version_description {
        scope_903.string(var_904);
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("LaunchTemplateData");
    if let Some(var_906) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_905, var_906,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("TagSpecification");
    if let Some(var_908) = &input.tag_specifications {
        let mut list_910 = scope_907.start_list(true, Some("item"));
        for item_909 in var_908 {
            #[allow(unused_mut)]
            let mut entry_911 = list_910.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_911, item_909,
            )?;
        }
        list_910.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template_version(
    input: &crate::input::CreateLaunchTemplateVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_912 = writer.prefix("DryRun");
    if let Some(var_913) = &input.dry_run {
        scope_912.boolean(*var_913);
    }
    #[allow(unused_mut)]
    let mut scope_914 = writer.prefix("ClientToken");
    if let Some(var_915) = &input.client_token {
        scope_914.string(var_915);
    }
    #[allow(unused_mut)]
    let mut scope_916 = writer.prefix("LaunchTemplateId");
    if let Some(var_917) = &input.launch_template_id {
        scope_916.string(var_917);
    }
    #[allow(unused_mut)]
    let mut scope_918 = writer.prefix("LaunchTemplateName");
    if let Some(var_919) = &input.launch_template_name {
        scope_918.string(var_919);
    }
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("SourceVersion");
    if let Some(var_921) = &input.source_version {
        scope_920.string(var_921);
    }
    #[allow(unused_mut)]
    let mut scope_922 = writer.prefix("VersionDescription");
    if let Some(var_923) = &input.version_description {
        scope_922.string(var_923);
    }
    #[allow(unused_mut)]
    let mut scope_924 = writer.prefix("LaunchTemplateData");
    if let Some(var_925) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_924, var_925,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route(
    input: &crate::input::CreateLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_926 = writer.prefix("DestinationCidrBlock");
    if let Some(var_927) = &input.destination_cidr_block {
        scope_926.string(var_927);
    }
    #[allow(unused_mut)]
    let mut scope_928 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_929) = &input.local_gateway_route_table_id {
        scope_928.string(var_929);
    }
    #[allow(unused_mut)]
    let mut scope_930 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_931) = &input.local_gateway_virtual_interface_group_id {
        scope_930.string(var_931);
    }
    #[allow(unused_mut)]
    let mut scope_932 = writer.prefix("DryRun");
    if let Some(var_933) = &input.dry_run {
        scope_932.boolean(*var_933);
    }
    #[allow(unused_mut)]
    let mut scope_934 = writer.prefix("NetworkInterfaceId");
    if let Some(var_935) = &input.network_interface_id {
        scope_934.string(var_935);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table(
    input: &crate::input::CreateLocalGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("LocalGatewayId");
    if let Some(var_937) = &input.local_gateway_id {
        scope_936.string(var_937);
    }
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("Mode");
    if let Some(var_939) = &input.mode {
        scope_938.string(var_939.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("TagSpecification");
    if let Some(var_941) = &input.tag_specifications {
        let mut list_943 = scope_940.start_list(true, Some("item"));
        for item_942 in var_941 {
            #[allow(unused_mut)]
            let mut entry_944 = list_943.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_944, item_942,
            )?;
        }
        list_943.finish();
    }
    #[allow(unused_mut)]
    let mut scope_945 = writer.prefix("DryRun");
    if let Some(var_946) = &input.dry_run {
        scope_945.boolean(*var_946);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_virtual_interface_group_association(
    input: &crate::input::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_947 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_948) = &input.local_gateway_route_table_id {
        scope_947.string(var_948);
    }
    #[allow(unused_mut)]
    let mut scope_949 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_950) = &input.local_gateway_virtual_interface_group_id {
        scope_949.string(var_950);
    }
    #[allow(unused_mut)]
    let mut scope_951 = writer.prefix("TagSpecification");
    if let Some(var_952) = &input.tag_specifications {
        let mut list_954 = scope_951.start_list(true, Some("item"));
        for item_953 in var_952 {
            #[allow(unused_mut)]
            let mut entry_955 = list_954.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_955, item_953,
            )?;
        }
        list_954.finish();
    }
    #[allow(unused_mut)]
    let mut scope_956 = writer.prefix("DryRun");
    if let Some(var_957) = &input.dry_run {
        scope_956.boolean(*var_957);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_vpc_association(
    input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_958 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_959) = &input.local_gateway_route_table_id {
        scope_958.string(var_959);
    }
    #[allow(unused_mut)]
    let mut scope_960 = writer.prefix("VpcId");
    if let Some(var_961) = &input.vpc_id {
        scope_960.string(var_961);
    }
    #[allow(unused_mut)]
    let mut scope_962 = writer.prefix("TagSpecification");
    if let Some(var_963) = &input.tag_specifications {
        let mut list_965 = scope_962.start_list(true, Some("item"));
        for item_964 in var_963 {
            #[allow(unused_mut)]
            let mut entry_966 = list_965.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_966, item_964,
            )?;
        }
        list_965.finish();
    }
    #[allow(unused_mut)]
    let mut scope_967 = writer.prefix("DryRun");
    if let Some(var_968) = &input.dry_run {
        scope_967.boolean(*var_968);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_managed_prefix_list(
    input: &crate::input::CreateManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_969 = writer.prefix("DryRun");
    if let Some(var_970) = &input.dry_run {
        scope_969.boolean(*var_970);
    }
    #[allow(unused_mut)]
    let mut scope_971 = writer.prefix("PrefixListName");
    if let Some(var_972) = &input.prefix_list_name {
        scope_971.string(var_972);
    }
    #[allow(unused_mut)]
    let mut scope_973 = writer.prefix("Entry");
    if let Some(var_974) = &input.entries {
        let mut list_976 = scope_973.start_list(true, None);
        for item_975 in var_974 {
            #[allow(unused_mut)]
            let mut entry_977 = list_976.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_977, item_975,
            )?;
        }
        list_976.finish();
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("MaxEntries");
    if let Some(var_979) = &input.max_entries {
        scope_978.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_979).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("TagSpecification");
    if let Some(var_981) = &input.tag_specifications {
        let mut list_983 = scope_980.start_list(true, Some("item"));
        for item_982 in var_981 {
            #[allow(unused_mut)]
            let mut entry_984 = list_983.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_984, item_982,
            )?;
        }
        list_983.finish();
    }
    #[allow(unused_mut)]
    let mut scope_985 = writer.prefix("AddressFamily");
    if let Some(var_986) = &input.address_family {
        scope_985.string(var_986);
    }
    #[allow(unused_mut)]
    let mut scope_987 = writer.prefix("ClientToken");
    if let Some(var_988) = &input.client_token {
        scope_987.string(var_988);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_nat_gateway(
    input: &crate::input::CreateNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_989 = writer.prefix("AllocationId");
    if let Some(var_990) = &input.allocation_id {
        scope_989.string(var_990);
    }
    #[allow(unused_mut)]
    let mut scope_991 = writer.prefix("ClientToken");
    if let Some(var_992) = &input.client_token {
        scope_991.string(var_992);
    }
    #[allow(unused_mut)]
    let mut scope_993 = writer.prefix("DryRun");
    if let Some(var_994) = &input.dry_run {
        scope_993.boolean(*var_994);
    }
    #[allow(unused_mut)]
    let mut scope_995 = writer.prefix("SubnetId");
    if let Some(var_996) = &input.subnet_id {
        scope_995.string(var_996);
    }
    #[allow(unused_mut)]
    let mut scope_997 = writer.prefix("TagSpecification");
    if let Some(var_998) = &input.tag_specifications {
        let mut list_1000 = scope_997.start_list(true, Some("item"));
        for item_999 in var_998 {
            #[allow(unused_mut)]
            let mut entry_1001 = list_1000.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1001, item_999,
            )?;
        }
        list_1000.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1002 = writer.prefix("ConnectivityType");
    if let Some(var_1003) = &input.connectivity_type {
        scope_1002.string(var_1003.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl(
    input: &crate::input::CreateNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("DryRun");
    if let Some(var_1005) = &input.dry_run {
        scope_1004.boolean(*var_1005);
    }
    #[allow(unused_mut)]
    let mut scope_1006 = writer.prefix("VpcId");
    if let Some(var_1007) = &input.vpc_id {
        scope_1006.string(var_1007);
    }
    #[allow(unused_mut)]
    let mut scope_1008 = writer.prefix("TagSpecification");
    if let Some(var_1009) = &input.tag_specifications {
        let mut list_1011 = scope_1008.start_list(true, Some("item"));
        for item_1010 in var_1009 {
            #[allow(unused_mut)]
            let mut entry_1012 = list_1011.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1012, item_1010,
            )?;
        }
        list_1011.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl_entry(
    input: &crate::input::CreateNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1013 = writer.prefix("CidrBlock");
    if let Some(var_1014) = &input.cidr_block {
        scope_1013.string(var_1014);
    }
    #[allow(unused_mut)]
    let mut scope_1015 = writer.prefix("DryRun");
    if let Some(var_1016) = &input.dry_run {
        scope_1015.boolean(*var_1016);
    }
    #[allow(unused_mut)]
    let mut scope_1017 = writer.prefix("Egress");
    if let Some(var_1018) = &input.egress {
        scope_1017.boolean(*var_1018);
    }
    #[allow(unused_mut)]
    let mut scope_1019 = writer.prefix("Icmp");
    if let Some(var_1020) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_1019, var_1020)?;
    }
    #[allow(unused_mut)]
    let mut scope_1021 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1022) = &input.ipv6_cidr_block {
        scope_1021.string(var_1022);
    }
    #[allow(unused_mut)]
    let mut scope_1023 = writer.prefix("NetworkAclId");
    if let Some(var_1024) = &input.network_acl_id {
        scope_1023.string(var_1024);
    }
    #[allow(unused_mut)]
    let mut scope_1025 = writer.prefix("PortRange");
    if let Some(var_1026) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_1025, var_1026)?;
    }
    #[allow(unused_mut)]
    let mut scope_1027 = writer.prefix("Protocol");
    if let Some(var_1028) = &input.protocol {
        scope_1027.string(var_1028);
    }
    #[allow(unused_mut)]
    let mut scope_1029 = writer.prefix("RuleAction");
    if let Some(var_1030) = &input.rule_action {
        scope_1029.string(var_1030.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("RuleNumber");
    if let Some(var_1032) = &input.rule_number {
        scope_1031.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1032).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_access_scope(
    input: &crate::input::CreateNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("MatchPath");
    if let Some(var_1034) = &input.match_paths {
        let mut list_1036 = scope_1033.start_list(true, Some("item"));
        for item_1035 in var_1034 {
            #[allow(unused_mut)]
            let mut entry_1037 = list_1036.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_1037, item_1035,
            )?;
        }
        list_1036.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1038 = writer.prefix("ExcludePath");
    if let Some(var_1039) = &input.exclude_paths {
        let mut list_1041 = scope_1038.start_list(true, Some("item"));
        for item_1040 in var_1039 {
            #[allow(unused_mut)]
            let mut entry_1042 = list_1041.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_1042, item_1040,
            )?;
        }
        list_1041.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1043 = writer.prefix("ClientToken");
    if let Some(var_1044) = &input.client_token {
        scope_1043.string(var_1044);
    }
    #[allow(unused_mut)]
    let mut scope_1045 = writer.prefix("TagSpecification");
    if let Some(var_1046) = &input.tag_specifications {
        let mut list_1048 = scope_1045.start_list(true, Some("item"));
        for item_1047 in var_1046 {
            #[allow(unused_mut)]
            let mut entry_1049 = list_1048.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1049, item_1047,
            )?;
        }
        list_1048.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1050 = writer.prefix("DryRun");
    if let Some(var_1051) = &input.dry_run {
        scope_1050.boolean(*var_1051);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_path(
    input: &crate::input::CreateNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1052 = writer.prefix("SourceIp");
    if let Some(var_1053) = &input.source_ip {
        scope_1052.string(var_1053);
    }
    #[allow(unused_mut)]
    let mut scope_1054 = writer.prefix("DestinationIp");
    if let Some(var_1055) = &input.destination_ip {
        scope_1054.string(var_1055);
    }
    #[allow(unused_mut)]
    let mut scope_1056 = writer.prefix("Source");
    if let Some(var_1057) = &input.source {
        scope_1056.string(var_1057);
    }
    #[allow(unused_mut)]
    let mut scope_1058 = writer.prefix("Destination");
    if let Some(var_1059) = &input.destination {
        scope_1058.string(var_1059);
    }
    #[allow(unused_mut)]
    let mut scope_1060 = writer.prefix("Protocol");
    if let Some(var_1061) = &input.protocol {
        scope_1060.string(var_1061.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1062 = writer.prefix("DestinationPort");
    if let Some(var_1063) = &input.destination_port {
        scope_1062.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1063).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1064 = writer.prefix("TagSpecification");
    if let Some(var_1065) = &input.tag_specifications {
        let mut list_1067 = scope_1064.start_list(true, Some("item"));
        for item_1066 in var_1065 {
            #[allow(unused_mut)]
            let mut entry_1068 = list_1067.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1068, item_1066,
            )?;
        }
        list_1067.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1069 = writer.prefix("DryRun");
    if let Some(var_1070) = &input.dry_run {
        scope_1069.boolean(*var_1070);
    }
    #[allow(unused_mut)]
    let mut scope_1071 = writer.prefix("ClientToken");
    if let Some(var_1072) = &input.client_token {
        scope_1071.string(var_1072);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface(
    input: &crate::input::CreateNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1073 = writer.prefix("Description");
    if let Some(var_1074) = &input.description {
        scope_1073.string(var_1074);
    }
    #[allow(unused_mut)]
    let mut scope_1075 = writer.prefix("DryRun");
    if let Some(var_1076) = &input.dry_run {
        scope_1075.boolean(*var_1076);
    }
    #[allow(unused_mut)]
    let mut scope_1077 = writer.prefix("SecurityGroupId");
    if let Some(var_1078) = &input.groups {
        let mut list_1080 = scope_1077.start_list(true, Some("SecurityGroupId"));
        for item_1079 in var_1078 {
            #[allow(unused_mut)]
            let mut entry_1081 = list_1080.entry();
            entry_1081.string(item_1079);
        }
        list_1080.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1082 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1083) = &input.ipv6_address_count {
        scope_1082.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1083).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1084 = writer.prefix("Ipv6Addresses");
    if let Some(var_1085) = &input.ipv6_addresses {
        let mut list_1087 = scope_1084.start_list(true, Some("item"));
        for item_1086 in var_1085 {
            #[allow(unused_mut)]
            let mut entry_1088 = list_1087.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_1088, item_1086,
            )?;
        }
        list_1087.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1089 = writer.prefix("PrivateIpAddress");
    if let Some(var_1090) = &input.private_ip_address {
        scope_1089.string(var_1090);
    }
    #[allow(unused_mut)]
    let mut scope_1091 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1092) = &input.private_ip_addresses {
        let mut list_1094 = scope_1091.start_list(true, Some("item"));
        for item_1093 in var_1092 {
            #[allow(unused_mut)]
            let mut entry_1095 = list_1094.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1095, item_1093,
            )?;
        }
        list_1094.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1096 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1097) = &input.secondary_private_ip_address_count {
        scope_1096.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1097).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1098 = writer.prefix("Ipv4Prefix");
    if let Some(var_1099) = &input.ipv4_prefixes {
        let mut list_1101 = scope_1098.start_list(true, Some("item"));
        for item_1100 in var_1099 {
            #[allow(unused_mut)]
            let mut entry_1102 = list_1101.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1102, item_1100,
            )?;
        }
        list_1101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1103 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1104) = &input.ipv4_prefix_count {
        scope_1103.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1104).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1105 = writer.prefix("Ipv6Prefix");
    if let Some(var_1106) = &input.ipv6_prefixes {
        let mut list_1108 = scope_1105.start_list(true, Some("item"));
        for item_1107 in var_1106 {
            #[allow(unused_mut)]
            let mut entry_1109 = list_1108.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1109, item_1107,
            )?;
        }
        list_1108.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1110 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1111) = &input.ipv6_prefix_count {
        scope_1110.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1111).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1112 = writer.prefix("InterfaceType");
    if let Some(var_1113) = &input.interface_type {
        scope_1112.string(var_1113.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1114 = writer.prefix("SubnetId");
    if let Some(var_1115) = &input.subnet_id {
        scope_1114.string(var_1115);
    }
    #[allow(unused_mut)]
    let mut scope_1116 = writer.prefix("TagSpecification");
    if let Some(var_1117) = &input.tag_specifications {
        let mut list_1119 = scope_1116.start_list(true, Some("item"));
        for item_1118 in var_1117 {
            #[allow(unused_mut)]
            let mut entry_1120 = list_1119.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1120, item_1118,
            )?;
        }
        list_1119.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("ClientToken");
    if let Some(var_1122) = &input.client_token {
        scope_1121.string(var_1122);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface_permission(
    input: &crate::input::CreateNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1124) = &input.network_interface_id {
        scope_1123.string(var_1124);
    }
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("AwsAccountId");
    if let Some(var_1126) = &input.aws_account_id {
        scope_1125.string(var_1126);
    }
    #[allow(unused_mut)]
    let mut scope_1127 = writer.prefix("AwsService");
    if let Some(var_1128) = &input.aws_service {
        scope_1127.string(var_1128);
    }
    #[allow(unused_mut)]
    let mut scope_1129 = writer.prefix("Permission");
    if let Some(var_1130) = &input.permission {
        scope_1129.string(var_1130.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1131 = writer.prefix("DryRun");
    if let Some(var_1132) = &input.dry_run {
        scope_1131.boolean(*var_1132);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_placement_group(
    input: &crate::input::CreatePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1133 = writer.prefix("DryRun");
    if let Some(var_1134) = &input.dry_run {
        scope_1133.boolean(*var_1134);
    }
    #[allow(unused_mut)]
    let mut scope_1135 = writer.prefix("GroupName");
    if let Some(var_1136) = &input.group_name {
        scope_1135.string(var_1136);
    }
    #[allow(unused_mut)]
    let mut scope_1137 = writer.prefix("Strategy");
    if let Some(var_1138) = &input.strategy {
        scope_1137.string(var_1138.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1139 = writer.prefix("PartitionCount");
    if let Some(var_1140) = &input.partition_count {
        scope_1139.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1140).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1141 = writer.prefix("TagSpecification");
    if let Some(var_1142) = &input.tag_specifications {
        let mut list_1144 = scope_1141.start_list(true, Some("item"));
        for item_1143 in var_1142 {
            #[allow(unused_mut)]
            let mut entry_1145 = list_1144.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1145, item_1143,
            )?;
        }
        list_1144.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1146 = writer.prefix("SpreadLevel");
    if let Some(var_1147) = &input.spread_level {
        scope_1146.string(var_1147.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_public_ipv4_pool(
    input: &crate::input::CreatePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1148 = writer.prefix("DryRun");
    if let Some(var_1149) = &input.dry_run {
        scope_1148.boolean(*var_1149);
    }
    #[allow(unused_mut)]
    let mut scope_1150 = writer.prefix("TagSpecification");
    if let Some(var_1151) = &input.tag_specifications {
        let mut list_1153 = scope_1150.start_list(true, Some("item"));
        for item_1152 in var_1151 {
            #[allow(unused_mut)]
            let mut entry_1154 = list_1153.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1154, item_1152,
            )?;
        }
        list_1153.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replace_root_volume_task(
    input: &crate::input::CreateReplaceRootVolumeTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("InstanceId");
    if let Some(var_1156) = &input.instance_id {
        scope_1155.string(var_1156);
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("SnapshotId");
    if let Some(var_1158) = &input.snapshot_id {
        scope_1157.string(var_1158);
    }
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("ClientToken");
    if let Some(var_1160) = &input.client_token {
        scope_1159.string(var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("DryRun");
    if let Some(var_1162) = &input.dry_run {
        scope_1161.boolean(*var_1162);
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("TagSpecification");
    if let Some(var_1164) = &input.tag_specifications {
        let mut list_1166 = scope_1163.start_list(true, Some("item"));
        for item_1165 in var_1164 {
            #[allow(unused_mut)]
            let mut entry_1167 = list_1166.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1167, item_1165,
            )?;
        }
        list_1166.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_reserved_instances_listing(
    input: &crate::input::CreateReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1168 = writer.prefix("ClientToken");
    if let Some(var_1169) = &input.client_token {
        scope_1168.string(var_1169);
    }
    #[allow(unused_mut)]
    let mut scope_1170 = writer.prefix("InstanceCount");
    if let Some(var_1171) = &input.instance_count {
        scope_1170.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1171).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1172 = writer.prefix("PriceSchedules");
    if let Some(var_1173) = &input.price_schedules {
        let mut list_1175 = scope_1172.start_list(true, Some("item"));
        for item_1174 in var_1173 {
            #[allow(unused_mut)]
            let mut entry_1176 = list_1175.entry();
            crate::query_ser::serialize_structure_crate_model_price_schedule_specification(
                entry_1176, item_1174,
            )?;
        }
        list_1175.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("ReservedInstancesId");
    if let Some(var_1178) = &input.reserved_instances_id {
        scope_1177.string(var_1178);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_restore_image_task(
    input: &crate::input::CreateRestoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1179 = writer.prefix("Bucket");
    if let Some(var_1180) = &input.bucket {
        scope_1179.string(var_1180);
    }
    #[allow(unused_mut)]
    let mut scope_1181 = writer.prefix("ObjectKey");
    if let Some(var_1182) = &input.object_key {
        scope_1181.string(var_1182);
    }
    #[allow(unused_mut)]
    let mut scope_1183 = writer.prefix("Name");
    if let Some(var_1184) = &input.name {
        scope_1183.string(var_1184);
    }
    #[allow(unused_mut)]
    let mut scope_1185 = writer.prefix("TagSpecification");
    if let Some(var_1186) = &input.tag_specifications {
        let mut list_1188 = scope_1185.start_list(true, Some("item"));
        for item_1187 in var_1186 {
            #[allow(unused_mut)]
            let mut entry_1189 = list_1188.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1189, item_1187,
            )?;
        }
        list_1188.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1190 = writer.prefix("DryRun");
    if let Some(var_1191) = &input.dry_run {
        scope_1190.boolean(*var_1191);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route(
    input: &crate::input::CreateRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1192 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1193) = &input.destination_cidr_block {
        scope_1192.string(var_1193);
    }
    #[allow(unused_mut)]
    let mut scope_1194 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1195) = &input.destination_ipv6_cidr_block {
        scope_1194.string(var_1195);
    }
    #[allow(unused_mut)]
    let mut scope_1196 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1197) = &input.destination_prefix_list_id {
        scope_1196.string(var_1197);
    }
    #[allow(unused_mut)]
    let mut scope_1198 = writer.prefix("DryRun");
    if let Some(var_1199) = &input.dry_run {
        scope_1198.boolean(*var_1199);
    }
    #[allow(unused_mut)]
    let mut scope_1200 = writer.prefix("VpcEndpointId");
    if let Some(var_1201) = &input.vpc_endpoint_id {
        scope_1200.string(var_1201);
    }
    #[allow(unused_mut)]
    let mut scope_1202 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1203) = &input.egress_only_internet_gateway_id {
        scope_1202.string(var_1203);
    }
    #[allow(unused_mut)]
    let mut scope_1204 = writer.prefix("GatewayId");
    if let Some(var_1205) = &input.gateway_id {
        scope_1204.string(var_1205);
    }
    #[allow(unused_mut)]
    let mut scope_1206 = writer.prefix("InstanceId");
    if let Some(var_1207) = &input.instance_id {
        scope_1206.string(var_1207);
    }
    #[allow(unused_mut)]
    let mut scope_1208 = writer.prefix("NatGatewayId");
    if let Some(var_1209) = &input.nat_gateway_id {
        scope_1208.string(var_1209);
    }
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("TransitGatewayId");
    if let Some(var_1211) = &input.transit_gateway_id {
        scope_1210.string(var_1211);
    }
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("LocalGatewayId");
    if let Some(var_1213) = &input.local_gateway_id {
        scope_1212.string(var_1213);
    }
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("CarrierGatewayId");
    if let Some(var_1215) = &input.carrier_gateway_id {
        scope_1214.string(var_1215);
    }
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1217) = &input.network_interface_id {
        scope_1216.string(var_1217);
    }
    #[allow(unused_mut)]
    let mut scope_1218 = writer.prefix("RouteTableId");
    if let Some(var_1219) = &input.route_table_id {
        scope_1218.string(var_1219);
    }
    #[allow(unused_mut)]
    let mut scope_1220 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1221) = &input.vpc_peering_connection_id {
        scope_1220.string(var_1221);
    }
    #[allow(unused_mut)]
    let mut scope_1222 = writer.prefix("CoreNetworkArn");
    if let Some(var_1223) = &input.core_network_arn {
        scope_1222.string(var_1223);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route_table(
    input: &crate::input::CreateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1224 = writer.prefix("DryRun");
    if let Some(var_1225) = &input.dry_run {
        scope_1224.boolean(*var_1225);
    }
    #[allow(unused_mut)]
    let mut scope_1226 = writer.prefix("VpcId");
    if let Some(var_1227) = &input.vpc_id {
        scope_1226.string(var_1227);
    }
    #[allow(unused_mut)]
    let mut scope_1228 = writer.prefix("TagSpecification");
    if let Some(var_1229) = &input.tag_specifications {
        let mut list_1231 = scope_1228.start_list(true, Some("item"));
        for item_1230 in var_1229 {
            #[allow(unused_mut)]
            let mut entry_1232 = list_1231.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1232, item_1230,
            )?;
        }
        list_1231.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_security_group(
    input: &crate::input::CreateSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1233 = writer.prefix("GroupDescription");
    if let Some(var_1234) = &input.description {
        scope_1233.string(var_1234);
    }
    #[allow(unused_mut)]
    let mut scope_1235 = writer.prefix("GroupName");
    if let Some(var_1236) = &input.group_name {
        scope_1235.string(var_1236);
    }
    #[allow(unused_mut)]
    let mut scope_1237 = writer.prefix("VpcId");
    if let Some(var_1238) = &input.vpc_id {
        scope_1237.string(var_1238);
    }
    #[allow(unused_mut)]
    let mut scope_1239 = writer.prefix("TagSpecification");
    if let Some(var_1240) = &input.tag_specifications {
        let mut list_1242 = scope_1239.start_list(true, Some("item"));
        for item_1241 in var_1240 {
            #[allow(unused_mut)]
            let mut entry_1243 = list_1242.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1243, item_1241,
            )?;
        }
        list_1242.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1244 = writer.prefix("DryRun");
    if let Some(var_1245) = &input.dry_run {
        scope_1244.boolean(*var_1245);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1246 = writer.prefix("Description");
    if let Some(var_1247) = &input.description {
        scope_1246.string(var_1247);
    }
    #[allow(unused_mut)]
    let mut scope_1248 = writer.prefix("OutpostArn");
    if let Some(var_1249) = &input.outpost_arn {
        scope_1248.string(var_1249);
    }
    #[allow(unused_mut)]
    let mut scope_1250 = writer.prefix("VolumeId");
    if let Some(var_1251) = &input.volume_id {
        scope_1250.string(var_1251);
    }
    #[allow(unused_mut)]
    let mut scope_1252 = writer.prefix("TagSpecification");
    if let Some(var_1253) = &input.tag_specifications {
        let mut list_1255 = scope_1252.start_list(true, Some("item"));
        for item_1254 in var_1253 {
            #[allow(unused_mut)]
            let mut entry_1256 = list_1255.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1256, item_1254,
            )?;
        }
        list_1255.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("DryRun");
    if let Some(var_1258) = &input.dry_run {
        scope_1257.boolean(*var_1258);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshots(
    input: &crate::input::CreateSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("Description");
    if let Some(var_1260) = &input.description {
        scope_1259.string(var_1260);
    }
    #[allow(unused_mut)]
    let mut scope_1261 = writer.prefix("InstanceSpecification");
    if let Some(var_1262) = &input.instance_specification {
        crate::query_ser::serialize_structure_crate_model_instance_specification(
            scope_1261, var_1262,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1263 = writer.prefix("OutpostArn");
    if let Some(var_1264) = &input.outpost_arn {
        scope_1263.string(var_1264);
    }
    #[allow(unused_mut)]
    let mut scope_1265 = writer.prefix("TagSpecification");
    if let Some(var_1266) = &input.tag_specifications {
        let mut list_1268 = scope_1265.start_list(true, Some("item"));
        for item_1267 in var_1266 {
            #[allow(unused_mut)]
            let mut entry_1269 = list_1268.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1269, item_1267,
            )?;
        }
        list_1268.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1270 = writer.prefix("DryRun");
    if let Some(var_1271) = &input.dry_run {
        scope_1270.boolean(*var_1271);
    }
    #[allow(unused_mut)]
    let mut scope_1272 = writer.prefix("CopyTagsFromSource");
    if let Some(var_1273) = &input.copy_tags_from_source {
        scope_1272.string(var_1273.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_spot_datafeed_subscription(
    input: &crate::input::CreateSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1274 = writer.prefix("Bucket");
    if let Some(var_1275) = &input.bucket {
        scope_1274.string(var_1275);
    }
    #[allow(unused_mut)]
    let mut scope_1276 = writer.prefix("DryRun");
    if let Some(var_1277) = &input.dry_run {
        scope_1276.boolean(*var_1277);
    }
    #[allow(unused_mut)]
    let mut scope_1278 = writer.prefix("Prefix");
    if let Some(var_1279) = &input.prefix {
        scope_1278.string(var_1279);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_store_image_task(
    input: &crate::input::CreateStoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1280 = writer.prefix("ImageId");
    if let Some(var_1281) = &input.image_id {
        scope_1280.string(var_1281);
    }
    #[allow(unused_mut)]
    let mut scope_1282 = writer.prefix("Bucket");
    if let Some(var_1283) = &input.bucket {
        scope_1282.string(var_1283);
    }
    #[allow(unused_mut)]
    let mut scope_1284 = writer.prefix("S3ObjectTag");
    if let Some(var_1285) = &input.s3_object_tags {
        let mut list_1287 = scope_1284.start_list(true, Some("item"));
        for item_1286 in var_1285 {
            #[allow(unused_mut)]
            let mut entry_1288 = list_1287.entry();
            crate::query_ser::serialize_structure_crate_model_s3_object_tag(entry_1288, item_1286)?;
        }
        list_1287.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1289 = writer.prefix("DryRun");
    if let Some(var_1290) = &input.dry_run {
        scope_1289.boolean(*var_1290);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet(
    input: &crate::input::CreateSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("TagSpecification");
    if let Some(var_1292) = &input.tag_specifications {
        let mut list_1294 = scope_1291.start_list(true, Some("item"));
        for item_1293 in var_1292 {
            #[allow(unused_mut)]
            let mut entry_1295 = list_1294.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1295, item_1293,
            )?;
        }
        list_1294.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1296 = writer.prefix("AvailabilityZone");
    if let Some(var_1297) = &input.availability_zone {
        scope_1296.string(var_1297);
    }
    #[allow(unused_mut)]
    let mut scope_1298 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1299) = &input.availability_zone_id {
        scope_1298.string(var_1299);
    }
    #[allow(unused_mut)]
    let mut scope_1300 = writer.prefix("CidrBlock");
    if let Some(var_1301) = &input.cidr_block {
        scope_1300.string(var_1301);
    }
    #[allow(unused_mut)]
    let mut scope_1302 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1303) = &input.ipv6_cidr_block {
        scope_1302.string(var_1303);
    }
    #[allow(unused_mut)]
    let mut scope_1304 = writer.prefix("OutpostArn");
    if let Some(var_1305) = &input.outpost_arn {
        scope_1304.string(var_1305);
    }
    #[allow(unused_mut)]
    let mut scope_1306 = writer.prefix("VpcId");
    if let Some(var_1307) = &input.vpc_id {
        scope_1306.string(var_1307);
    }
    #[allow(unused_mut)]
    let mut scope_1308 = writer.prefix("DryRun");
    if let Some(var_1309) = &input.dry_run {
        scope_1308.boolean(*var_1309);
    }
    #[allow(unused_mut)]
    let mut scope_1310 = writer.prefix("Ipv6Native");
    if let Some(var_1311) = &input.ipv6_native {
        scope_1310.boolean(*var_1311);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet_cidr_reservation(
    input: &crate::input::CreateSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1312 = writer.prefix("SubnetId");
    if let Some(var_1313) = &input.subnet_id {
        scope_1312.string(var_1313);
    }
    #[allow(unused_mut)]
    let mut scope_1314 = writer.prefix("Cidr");
    if let Some(var_1315) = &input.cidr {
        scope_1314.string(var_1315);
    }
    #[allow(unused_mut)]
    let mut scope_1316 = writer.prefix("ReservationType");
    if let Some(var_1317) = &input.reservation_type {
        scope_1316.string(var_1317.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1318 = writer.prefix("Description");
    if let Some(var_1319) = &input.description {
        scope_1318.string(var_1319);
    }
    #[allow(unused_mut)]
    let mut scope_1320 = writer.prefix("DryRun");
    if let Some(var_1321) = &input.dry_run {
        scope_1320.boolean(*var_1321);
    }
    #[allow(unused_mut)]
    let mut scope_1322 = writer.prefix("TagSpecification");
    if let Some(var_1323) = &input.tag_specifications {
        let mut list_1325 = scope_1322.start_list(true, Some("item"));
        for item_1324 in var_1323 {
            #[allow(unused_mut)]
            let mut entry_1326 = list_1325.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1326, item_1324,
            )?;
        }
        list_1325.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("DryRun");
    if let Some(var_1328) = &input.dry_run {
        scope_1327.boolean(*var_1328);
    }
    #[allow(unused_mut)]
    let mut scope_1329 = writer.prefix("ResourceId");
    if let Some(var_1330) = &input.resources {
        let mut list_1332 = scope_1329.start_list(true, None);
        for item_1331 in var_1330 {
            #[allow(unused_mut)]
            let mut entry_1333 = list_1332.entry();
            entry_1333.string(item_1331);
        }
        list_1332.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1334 = writer.prefix("Tag");
    if let Some(var_1335) = &input.tags {
        let mut list_1337 = scope_1334.start_list(true, Some("item"));
        for item_1336 in var_1335 {
            #[allow(unused_mut)]
            let mut entry_1338 = list_1337.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1338, item_1336)?;
        }
        list_1337.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter(
    input: &crate::input::CreateTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1339 = writer.prefix("Description");
    if let Some(var_1340) = &input.description {
        scope_1339.string(var_1340);
    }
    #[allow(unused_mut)]
    let mut scope_1341 = writer.prefix("TagSpecification");
    if let Some(var_1342) = &input.tag_specifications {
        let mut list_1344 = scope_1341.start_list(true, Some("item"));
        for item_1343 in var_1342 {
            #[allow(unused_mut)]
            let mut entry_1345 = list_1344.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1345, item_1343,
            )?;
        }
        list_1344.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("DryRun");
    if let Some(var_1347) = &input.dry_run {
        scope_1346.boolean(*var_1347);
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("ClientToken");
    if let Some(var_1349) = &input.client_token {
        scope_1348.string(var_1349);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter_rule(
    input: &crate::input::CreateTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1351) = &input.traffic_mirror_filter_id {
        scope_1350.string(var_1351);
    }
    #[allow(unused_mut)]
    let mut scope_1352 = writer.prefix("TrafficDirection");
    if let Some(var_1353) = &input.traffic_direction {
        scope_1352.string(var_1353.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1354 = writer.prefix("RuleNumber");
    if let Some(var_1355) = &input.rule_number {
        scope_1354.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1355).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1356 = writer.prefix("RuleAction");
    if let Some(var_1357) = &input.rule_action {
        scope_1356.string(var_1357.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1358 = writer.prefix("DestinationPortRange");
    if let Some(var_1359) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1358, var_1359,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1360 = writer.prefix("SourcePortRange");
    if let Some(var_1361) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1360, var_1361,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1362 = writer.prefix("Protocol");
    if let Some(var_1363) = &input.protocol {
        scope_1362.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1363).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1364 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1365) = &input.destination_cidr_block {
        scope_1364.string(var_1365);
    }
    #[allow(unused_mut)]
    let mut scope_1366 = writer.prefix("SourceCidrBlock");
    if let Some(var_1367) = &input.source_cidr_block {
        scope_1366.string(var_1367);
    }
    #[allow(unused_mut)]
    let mut scope_1368 = writer.prefix("Description");
    if let Some(var_1369) = &input.description {
        scope_1368.string(var_1369);
    }
    #[allow(unused_mut)]
    let mut scope_1370 = writer.prefix("DryRun");
    if let Some(var_1371) = &input.dry_run {
        scope_1370.boolean(*var_1371);
    }
    #[allow(unused_mut)]
    let mut scope_1372 = writer.prefix("ClientToken");
    if let Some(var_1373) = &input.client_token {
        scope_1372.string(var_1373);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_session(
    input: &crate::input::CreateTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1374 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1375) = &input.network_interface_id {
        scope_1374.string(var_1375);
    }
    #[allow(unused_mut)]
    let mut scope_1376 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1377) = &input.traffic_mirror_target_id {
        scope_1376.string(var_1377);
    }
    #[allow(unused_mut)]
    let mut scope_1378 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1379) = &input.traffic_mirror_filter_id {
        scope_1378.string(var_1379);
    }
    #[allow(unused_mut)]
    let mut scope_1380 = writer.prefix("PacketLength");
    if let Some(var_1381) = &input.packet_length {
        scope_1380.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1381).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1382 = writer.prefix("SessionNumber");
    if let Some(var_1383) = &input.session_number {
        scope_1382.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1383).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1384 = writer.prefix("VirtualNetworkId");
    if let Some(var_1385) = &input.virtual_network_id {
        scope_1384.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1385).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1386 = writer.prefix("Description");
    if let Some(var_1387) = &input.description {
        scope_1386.string(var_1387);
    }
    #[allow(unused_mut)]
    let mut scope_1388 = writer.prefix("TagSpecification");
    if let Some(var_1389) = &input.tag_specifications {
        let mut list_1391 = scope_1388.start_list(true, Some("item"));
        for item_1390 in var_1389 {
            #[allow(unused_mut)]
            let mut entry_1392 = list_1391.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1392, item_1390,
            )?;
        }
        list_1391.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1393 = writer.prefix("DryRun");
    if let Some(var_1394) = &input.dry_run {
        scope_1393.boolean(*var_1394);
    }
    #[allow(unused_mut)]
    let mut scope_1395 = writer.prefix("ClientToken");
    if let Some(var_1396) = &input.client_token {
        scope_1395.string(var_1396);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_target(
    input: &crate::input::CreateTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1397 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1398) = &input.network_interface_id {
        scope_1397.string(var_1398);
    }
    #[allow(unused_mut)]
    let mut scope_1399 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1400) = &input.network_load_balancer_arn {
        scope_1399.string(var_1400);
    }
    #[allow(unused_mut)]
    let mut scope_1401 = writer.prefix("Description");
    if let Some(var_1402) = &input.description {
        scope_1401.string(var_1402);
    }
    #[allow(unused_mut)]
    let mut scope_1403 = writer.prefix("TagSpecification");
    if let Some(var_1404) = &input.tag_specifications {
        let mut list_1406 = scope_1403.start_list(true, Some("item"));
        for item_1405 in var_1404 {
            #[allow(unused_mut)]
            let mut entry_1407 = list_1406.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1407, item_1405,
            )?;
        }
        list_1406.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1408 = writer.prefix("DryRun");
    if let Some(var_1409) = &input.dry_run {
        scope_1408.boolean(*var_1409);
    }
    #[allow(unused_mut)]
    let mut scope_1410 = writer.prefix("ClientToken");
    if let Some(var_1411) = &input.client_token {
        scope_1410.string(var_1411);
    }
    #[allow(unused_mut)]
    let mut scope_1412 = writer.prefix("GatewayLoadBalancerEndpointId");
    if let Some(var_1413) = &input.gateway_load_balancer_endpoint_id {
        scope_1412.string(var_1413);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway(
    input: &crate::input::CreateTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1414 = writer.prefix("Description");
    if let Some(var_1415) = &input.description {
        scope_1414.string(var_1415);
    }
    #[allow(unused_mut)]
    let mut scope_1416 = writer.prefix("Options");
    if let Some(var_1417) = &input.options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_request_options(
            scope_1416, var_1417,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1418 = writer.prefix("TagSpecification");
    if let Some(var_1419) = &input.tag_specifications {
        let mut list_1421 = scope_1418.start_list(true, Some("item"));
        for item_1420 in var_1419 {
            #[allow(unused_mut)]
            let mut entry_1422 = list_1421.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1422, item_1420,
            )?;
        }
        list_1421.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1423 = writer.prefix("DryRun");
    if let Some(var_1424) = &input.dry_run {
        scope_1423.boolean(*var_1424);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect(
    input: &crate::input::CreateTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1425 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1426) = &input.transport_transit_gateway_attachment_id {
        scope_1425.string(var_1426);
    }
    #[allow(unused_mut)]
    let mut scope_1427 = writer.prefix("Options");
    if let Some(var_1428) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_connect_request_options(scope_1427, var_1428)?;
    }
    #[allow(unused_mut)]
    let mut scope_1429 = writer.prefix("TagSpecification");
    if let Some(var_1430) = &input.tag_specifications {
        let mut list_1432 = scope_1429.start_list(true, Some("item"));
        for item_1431 in var_1430 {
            #[allow(unused_mut)]
            let mut entry_1433 = list_1432.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1433, item_1431,
            )?;
        }
        list_1432.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1434 = writer.prefix("DryRun");
    if let Some(var_1435) = &input.dry_run {
        scope_1434.boolean(*var_1435);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect_peer(
    input: &crate::input::CreateTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1436 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1437) = &input.transit_gateway_attachment_id {
        scope_1436.string(var_1437);
    }
    #[allow(unused_mut)]
    let mut scope_1438 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1439) = &input.transit_gateway_address {
        scope_1438.string(var_1439);
    }
    #[allow(unused_mut)]
    let mut scope_1440 = writer.prefix("PeerAddress");
    if let Some(var_1441) = &input.peer_address {
        scope_1440.string(var_1441);
    }
    #[allow(unused_mut)]
    let mut scope_1442 = writer.prefix("BgpOptions");
    if let Some(var_1443) = &input.bgp_options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(scope_1442, var_1443)?;
    }
    #[allow(unused_mut)]
    let mut scope_1444 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1445) = &input.inside_cidr_blocks {
        let mut list_1447 = scope_1444.start_list(true, Some("item"));
        for item_1446 in var_1445 {
            #[allow(unused_mut)]
            let mut entry_1448 = list_1447.entry();
            entry_1448.string(item_1446);
        }
        list_1447.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1449 = writer.prefix("TagSpecification");
    if let Some(var_1450) = &input.tag_specifications {
        let mut list_1452 = scope_1449.start_list(true, Some("item"));
        for item_1451 in var_1450 {
            #[allow(unused_mut)]
            let mut entry_1453 = list_1452.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1453, item_1451,
            )?;
        }
        list_1452.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1454 = writer.prefix("DryRun");
    if let Some(var_1455) = &input.dry_run {
        scope_1454.boolean(*var_1455);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_multicast_domain(
    input: &crate::input::CreateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1456 = writer.prefix("TransitGatewayId");
    if let Some(var_1457) = &input.transit_gateway_id {
        scope_1456.string(var_1457);
    }
    #[allow(unused_mut)]
    let mut scope_1458 = writer.prefix("Options");
    if let Some(var_1459) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(scope_1458, var_1459)?;
    }
    #[allow(unused_mut)]
    let mut scope_1460 = writer.prefix("TagSpecification");
    if let Some(var_1461) = &input.tag_specifications {
        let mut list_1463 = scope_1460.start_list(true, Some("item"));
        for item_1462 in var_1461 {
            #[allow(unused_mut)]
            let mut entry_1464 = list_1463.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1464, item_1462,
            )?;
        }
        list_1463.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1465 = writer.prefix("DryRun");
    if let Some(var_1466) = &input.dry_run {
        scope_1465.boolean(*var_1466);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_peering_attachment(
    input: &crate::input::CreateTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1467 = writer.prefix("TransitGatewayId");
    if let Some(var_1468) = &input.transit_gateway_id {
        scope_1467.string(var_1468);
    }
    #[allow(unused_mut)]
    let mut scope_1469 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1470) = &input.peer_transit_gateway_id {
        scope_1469.string(var_1470);
    }
    #[allow(unused_mut)]
    let mut scope_1471 = writer.prefix("PeerAccountId");
    if let Some(var_1472) = &input.peer_account_id {
        scope_1471.string(var_1472);
    }
    #[allow(unused_mut)]
    let mut scope_1473 = writer.prefix("PeerRegion");
    if let Some(var_1474) = &input.peer_region {
        scope_1473.string(var_1474);
    }
    #[allow(unused_mut)]
    let mut scope_1475 = writer.prefix("Options");
    if let Some(var_1476) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_peering_attachment_request_options(scope_1475, var_1476)?;
    }
    #[allow(unused_mut)]
    let mut scope_1477 = writer.prefix("TagSpecification");
    if let Some(var_1478) = &input.tag_specifications {
        let mut list_1480 = scope_1477.start_list(true, Some("item"));
        for item_1479 in var_1478 {
            #[allow(unused_mut)]
            let mut entry_1481 = list_1480.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1481, item_1479,
            )?;
        }
        list_1480.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("DryRun");
    if let Some(var_1483) = &input.dry_run {
        scope_1482.boolean(*var_1483);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_policy_table(
    input: &crate::input::CreateTransitGatewayPolicyTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPolicyTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("TransitGatewayId");
    if let Some(var_1485) = &input.transit_gateway_id {
        scope_1484.string(var_1485);
    }
    #[allow(unused_mut)]
    let mut scope_1486 = writer.prefix("TagSpecifications");
    if let Some(var_1487) = &input.tag_specifications {
        let mut list_1489 = scope_1486.start_list(true, Some("item"));
        for item_1488 in var_1487 {
            #[allow(unused_mut)]
            let mut entry_1490 = list_1489.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1490, item_1488,
            )?;
        }
        list_1489.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1491 = writer.prefix("DryRun");
    if let Some(var_1492) = &input.dry_run {
        scope_1491.boolean(*var_1492);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_prefix_list_reference(
    input: &crate::input::CreateTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1493 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1494) = &input.transit_gateway_route_table_id {
        scope_1493.string(var_1494);
    }
    #[allow(unused_mut)]
    let mut scope_1495 = writer.prefix("PrefixListId");
    if let Some(var_1496) = &input.prefix_list_id {
        scope_1495.string(var_1496);
    }
    #[allow(unused_mut)]
    let mut scope_1497 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1498) = &input.transit_gateway_attachment_id {
        scope_1497.string(var_1498);
    }
    #[allow(unused_mut)]
    let mut scope_1499 = writer.prefix("Blackhole");
    if let Some(var_1500) = &input.blackhole {
        scope_1499.boolean(*var_1500);
    }
    #[allow(unused_mut)]
    let mut scope_1501 = writer.prefix("DryRun");
    if let Some(var_1502) = &input.dry_run {
        scope_1501.boolean(*var_1502);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route(
    input: &crate::input::CreateTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1503 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1504) = &input.destination_cidr_block {
        scope_1503.string(var_1504);
    }
    #[allow(unused_mut)]
    let mut scope_1505 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1506) = &input.transit_gateway_route_table_id {
        scope_1505.string(var_1506);
    }
    #[allow(unused_mut)]
    let mut scope_1507 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1508) = &input.transit_gateway_attachment_id {
        scope_1507.string(var_1508);
    }
    #[allow(unused_mut)]
    let mut scope_1509 = writer.prefix("Blackhole");
    if let Some(var_1510) = &input.blackhole {
        scope_1509.boolean(*var_1510);
    }
    #[allow(unused_mut)]
    let mut scope_1511 = writer.prefix("DryRun");
    if let Some(var_1512) = &input.dry_run {
        scope_1511.boolean(*var_1512);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table(
    input: &crate::input::CreateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1513 = writer.prefix("TransitGatewayId");
    if let Some(var_1514) = &input.transit_gateway_id {
        scope_1513.string(var_1514);
    }
    #[allow(unused_mut)]
    let mut scope_1515 = writer.prefix("TagSpecifications");
    if let Some(var_1516) = &input.tag_specifications {
        let mut list_1518 = scope_1515.start_list(true, Some("item"));
        for item_1517 in var_1516 {
            #[allow(unused_mut)]
            let mut entry_1519 = list_1518.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1519, item_1517,
            )?;
        }
        list_1518.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1520 = writer.prefix("DryRun");
    if let Some(var_1521) = &input.dry_run {
        scope_1520.boolean(*var_1521);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table_announcement(
    input: &crate::input::CreateTransitGatewayRouteTableAnnouncementInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayRouteTableAnnouncement",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1522 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1523) = &input.transit_gateway_route_table_id {
        scope_1522.string(var_1523);
    }
    #[allow(unused_mut)]
    let mut scope_1524 = writer.prefix("PeeringAttachmentId");
    if let Some(var_1525) = &input.peering_attachment_id {
        scope_1524.string(var_1525);
    }
    #[allow(unused_mut)]
    let mut scope_1526 = writer.prefix("TagSpecification");
    if let Some(var_1527) = &input.tag_specifications {
        let mut list_1529 = scope_1526.start_list(true, Some("item"));
        for item_1528 in var_1527 {
            #[allow(unused_mut)]
            let mut entry_1530 = list_1529.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1530, item_1528,
            )?;
        }
        list_1529.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1531 = writer.prefix("DryRun");
    if let Some(var_1532) = &input.dry_run {
        scope_1531.boolean(*var_1532);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_vpc_attachment(
    input: &crate::input::CreateTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1533 = writer.prefix("TransitGatewayId");
    if let Some(var_1534) = &input.transit_gateway_id {
        scope_1533.string(var_1534);
    }
    #[allow(unused_mut)]
    let mut scope_1535 = writer.prefix("VpcId");
    if let Some(var_1536) = &input.vpc_id {
        scope_1535.string(var_1536);
    }
    #[allow(unused_mut)]
    let mut scope_1537 = writer.prefix("SubnetIds");
    if let Some(var_1538) = &input.subnet_ids {
        let mut list_1540 = scope_1537.start_list(true, Some("item"));
        for item_1539 in var_1538 {
            #[allow(unused_mut)]
            let mut entry_1541 = list_1540.entry();
            entry_1541.string(item_1539);
        }
        list_1540.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("Options");
    if let Some(var_1543) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(scope_1542, var_1543)?;
    }
    #[allow(unused_mut)]
    let mut scope_1544 = writer.prefix("TagSpecifications");
    if let Some(var_1545) = &input.tag_specifications {
        let mut list_1547 = scope_1544.start_list(true, Some("item"));
        for item_1546 in var_1545 {
            #[allow(unused_mut)]
            let mut entry_1548 = list_1547.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1548, item_1546,
            )?;
        }
        list_1547.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1549 = writer.prefix("DryRun");
    if let Some(var_1550) = &input.dry_run {
        scope_1549.boolean(*var_1550);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_volume(
    input: &crate::input::CreateVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1551 = writer.prefix("AvailabilityZone");
    if let Some(var_1552) = &input.availability_zone {
        scope_1551.string(var_1552);
    }
    #[allow(unused_mut)]
    let mut scope_1553 = writer.prefix("Encrypted");
    if let Some(var_1554) = &input.encrypted {
        scope_1553.boolean(*var_1554);
    }
    #[allow(unused_mut)]
    let mut scope_1555 = writer.prefix("Iops");
    if let Some(var_1556) = &input.iops {
        scope_1555.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1556).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1557 = writer.prefix("KmsKeyId");
    if let Some(var_1558) = &input.kms_key_id {
        scope_1557.string(var_1558);
    }
    #[allow(unused_mut)]
    let mut scope_1559 = writer.prefix("OutpostArn");
    if let Some(var_1560) = &input.outpost_arn {
        scope_1559.string(var_1560);
    }
    #[allow(unused_mut)]
    let mut scope_1561 = writer.prefix("Size");
    if let Some(var_1562) = &input.size {
        scope_1561.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1562).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1563 = writer.prefix("SnapshotId");
    if let Some(var_1564) = &input.snapshot_id {
        scope_1563.string(var_1564);
    }
    #[allow(unused_mut)]
    let mut scope_1565 = writer.prefix("VolumeType");
    if let Some(var_1566) = &input.volume_type {
        scope_1565.string(var_1566.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1567 = writer.prefix("DryRun");
    if let Some(var_1568) = &input.dry_run {
        scope_1567.boolean(*var_1568);
    }
    #[allow(unused_mut)]
    let mut scope_1569 = writer.prefix("TagSpecification");
    if let Some(var_1570) = &input.tag_specifications {
        let mut list_1572 = scope_1569.start_list(true, Some("item"));
        for item_1571 in var_1570 {
            #[allow(unused_mut)]
            let mut entry_1573 = list_1572.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1573, item_1571,
            )?;
        }
        list_1572.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1574 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1575) = &input.multi_attach_enabled {
        scope_1574.boolean(*var_1575);
    }
    #[allow(unused_mut)]
    let mut scope_1576 = writer.prefix("Throughput");
    if let Some(var_1577) = &input.throughput {
        scope_1576.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1577).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1578 = writer.prefix("ClientToken");
    if let Some(var_1579) = &input.client_token {
        scope_1578.string(var_1579);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc(
    input: &crate::input::CreateVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1580 = writer.prefix("CidrBlock");
    if let Some(var_1581) = &input.cidr_block {
        scope_1580.string(var_1581);
    }
    #[allow(unused_mut)]
    let mut scope_1582 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1583) = &input.amazon_provided_ipv6_cidr_block {
        scope_1582.boolean(*var_1583);
    }
    #[allow(unused_mut)]
    let mut scope_1584 = writer.prefix("Ipv6Pool");
    if let Some(var_1585) = &input.ipv6_pool {
        scope_1584.string(var_1585);
    }
    #[allow(unused_mut)]
    let mut scope_1586 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1587) = &input.ipv6_cidr_block {
        scope_1586.string(var_1587);
    }
    #[allow(unused_mut)]
    let mut scope_1588 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_1589) = &input.ipv4_ipam_pool_id {
        scope_1588.string(var_1589);
    }
    #[allow(unused_mut)]
    let mut scope_1590 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_1591) = &input.ipv4_netmask_length {
        scope_1590.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1591).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1592 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_1593) = &input.ipv6_ipam_pool_id {
        scope_1592.string(var_1593);
    }
    #[allow(unused_mut)]
    let mut scope_1594 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_1595) = &input.ipv6_netmask_length {
        scope_1594.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1595).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1596 = writer.prefix("DryRun");
    if let Some(var_1597) = &input.dry_run {
        scope_1596.boolean(*var_1597);
    }
    #[allow(unused_mut)]
    let mut scope_1598 = writer.prefix("InstanceTenancy");
    if let Some(var_1599) = &input.instance_tenancy {
        scope_1598.string(var_1599.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1600 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1601) = &input.ipv6_cidr_block_network_border_group {
        scope_1600.string(var_1601);
    }
    #[allow(unused_mut)]
    let mut scope_1602 = writer.prefix("TagSpecification");
    if let Some(var_1603) = &input.tag_specifications {
        let mut list_1605 = scope_1602.start_list(true, Some("item"));
        for item_1604 in var_1603 {
            #[allow(unused_mut)]
            let mut entry_1606 = list_1605.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1606, item_1604,
            )?;
        }
        list_1605.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint(
    input: &crate::input::CreateVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1607 = writer.prefix("DryRun");
    if let Some(var_1608) = &input.dry_run {
        scope_1607.boolean(*var_1608);
    }
    #[allow(unused_mut)]
    let mut scope_1609 = writer.prefix("VpcEndpointType");
    if let Some(var_1610) = &input.vpc_endpoint_type {
        scope_1609.string(var_1610.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1611 = writer.prefix("VpcId");
    if let Some(var_1612) = &input.vpc_id {
        scope_1611.string(var_1612);
    }
    #[allow(unused_mut)]
    let mut scope_1613 = writer.prefix("ServiceName");
    if let Some(var_1614) = &input.service_name {
        scope_1613.string(var_1614);
    }
    #[allow(unused_mut)]
    let mut scope_1615 = writer.prefix("PolicyDocument");
    if let Some(var_1616) = &input.policy_document {
        scope_1615.string(var_1616);
    }
    #[allow(unused_mut)]
    let mut scope_1617 = writer.prefix("RouteTableId");
    if let Some(var_1618) = &input.route_table_ids {
        let mut list_1620 = scope_1617.start_list(true, Some("item"));
        for item_1619 in var_1618 {
            #[allow(unused_mut)]
            let mut entry_1621 = list_1620.entry();
            entry_1621.string(item_1619);
        }
        list_1620.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1622 = writer.prefix("SubnetId");
    if let Some(var_1623) = &input.subnet_ids {
        let mut list_1625 = scope_1622.start_list(true, Some("item"));
        for item_1624 in var_1623 {
            #[allow(unused_mut)]
            let mut entry_1626 = list_1625.entry();
            entry_1626.string(item_1624);
        }
        list_1625.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1627 = writer.prefix("SecurityGroupId");
    if let Some(var_1628) = &input.security_group_ids {
        let mut list_1630 = scope_1627.start_list(true, Some("item"));
        for item_1629 in var_1628 {
            #[allow(unused_mut)]
            let mut entry_1631 = list_1630.entry();
            entry_1631.string(item_1629);
        }
        list_1630.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1632 = writer.prefix("IpAddressType");
    if let Some(var_1633) = &input.ip_address_type {
        scope_1632.string(var_1633.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1634 = writer.prefix("DnsOptions");
    if let Some(var_1635) = &input.dns_options {
        crate::query_ser::serialize_structure_crate_model_dns_options_specification(
            scope_1634, var_1635,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1636 = writer.prefix("ClientToken");
    if let Some(var_1637) = &input.client_token {
        scope_1636.string(var_1637);
    }
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1639) = &input.private_dns_enabled {
        scope_1638.boolean(*var_1639);
    }
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("TagSpecification");
    if let Some(var_1641) = &input.tag_specifications {
        let mut list_1643 = scope_1640.start_list(true, Some("item"));
        for item_1642 in var_1641 {
            #[allow(unused_mut)]
            let mut entry_1644 = list_1643.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1644, item_1642,
            )?;
        }
        list_1643.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_connection_notification(
    input: &crate::input::CreateVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1645 = writer.prefix("DryRun");
    if let Some(var_1646) = &input.dry_run {
        scope_1645.boolean(*var_1646);
    }
    #[allow(unused_mut)]
    let mut scope_1647 = writer.prefix("ServiceId");
    if let Some(var_1648) = &input.service_id {
        scope_1647.string(var_1648);
    }
    #[allow(unused_mut)]
    let mut scope_1649 = writer.prefix("VpcEndpointId");
    if let Some(var_1650) = &input.vpc_endpoint_id {
        scope_1649.string(var_1650);
    }
    #[allow(unused_mut)]
    let mut scope_1651 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1652) = &input.connection_notification_arn {
        scope_1651.string(var_1652);
    }
    #[allow(unused_mut)]
    let mut scope_1653 = writer.prefix("ConnectionEvents");
    if let Some(var_1654) = &input.connection_events {
        let mut list_1656 = scope_1653.start_list(true, Some("item"));
        for item_1655 in var_1654 {
            #[allow(unused_mut)]
            let mut entry_1657 = list_1656.entry();
            entry_1657.string(item_1655);
        }
        list_1656.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1658 = writer.prefix("ClientToken");
    if let Some(var_1659) = &input.client_token {
        scope_1658.string(var_1659);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_service_configuration(
    input: &crate::input::CreateVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1660 = writer.prefix("DryRun");
    if let Some(var_1661) = &input.dry_run {
        scope_1660.boolean(*var_1661);
    }
    #[allow(unused_mut)]
    let mut scope_1662 = writer.prefix("AcceptanceRequired");
    if let Some(var_1663) = &input.acceptance_required {
        scope_1662.boolean(*var_1663);
    }
    #[allow(unused_mut)]
    let mut scope_1664 = writer.prefix("PrivateDnsName");
    if let Some(var_1665) = &input.private_dns_name {
        scope_1664.string(var_1665);
    }
    #[allow(unused_mut)]
    let mut scope_1666 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1667) = &input.network_load_balancer_arns {
        let mut list_1669 = scope_1666.start_list(true, Some("item"));
        for item_1668 in var_1667 {
            #[allow(unused_mut)]
            let mut entry_1670 = list_1669.entry();
            entry_1670.string(item_1668);
        }
        list_1669.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1671 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1672) = &input.gateway_load_balancer_arns {
        let mut list_1674 = scope_1671.start_list(true, Some("item"));
        for item_1673 in var_1672 {
            #[allow(unused_mut)]
            let mut entry_1675 = list_1674.entry();
            entry_1675.string(item_1673);
        }
        list_1674.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1676 = writer.prefix("SupportedIpAddressType");
    if let Some(var_1677) = &input.supported_ip_address_types {
        let mut list_1679 = scope_1676.start_list(true, Some("item"));
        for item_1678 in var_1677 {
            #[allow(unused_mut)]
            let mut entry_1680 = list_1679.entry();
            entry_1680.string(item_1678);
        }
        list_1679.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1681 = writer.prefix("ClientToken");
    if let Some(var_1682) = &input.client_token {
        scope_1681.string(var_1682);
    }
    #[allow(unused_mut)]
    let mut scope_1683 = writer.prefix("TagSpecification");
    if let Some(var_1684) = &input.tag_specifications {
        let mut list_1686 = scope_1683.start_list(true, Some("item"));
        for item_1685 in var_1684 {
            #[allow(unused_mut)]
            let mut entry_1687 = list_1686.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1687, item_1685,
            )?;
        }
        list_1686.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_peering_connection(
    input: &crate::input::CreateVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1688 = writer.prefix("DryRun");
    if let Some(var_1689) = &input.dry_run {
        scope_1688.boolean(*var_1689);
    }
    #[allow(unused_mut)]
    let mut scope_1690 = writer.prefix("PeerOwnerId");
    if let Some(var_1691) = &input.peer_owner_id {
        scope_1690.string(var_1691);
    }
    #[allow(unused_mut)]
    let mut scope_1692 = writer.prefix("PeerVpcId");
    if let Some(var_1693) = &input.peer_vpc_id {
        scope_1692.string(var_1693);
    }
    #[allow(unused_mut)]
    let mut scope_1694 = writer.prefix("VpcId");
    if let Some(var_1695) = &input.vpc_id {
        scope_1694.string(var_1695);
    }
    #[allow(unused_mut)]
    let mut scope_1696 = writer.prefix("PeerRegion");
    if let Some(var_1697) = &input.peer_region {
        scope_1696.string(var_1697);
    }
    #[allow(unused_mut)]
    let mut scope_1698 = writer.prefix("TagSpecification");
    if let Some(var_1699) = &input.tag_specifications {
        let mut list_1701 = scope_1698.start_list(true, Some("item"));
        for item_1700 in var_1699 {
            #[allow(unused_mut)]
            let mut entry_1702 = list_1701.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1702, item_1700,
            )?;
        }
        list_1701.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection(
    input: &crate::input::CreateVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1703 = writer.prefix("CustomerGatewayId");
    if let Some(var_1704) = &input.customer_gateway_id {
        scope_1703.string(var_1704);
    }
    #[allow(unused_mut)]
    let mut scope_1705 = writer.prefix("Type");
    if let Some(var_1706) = &input.r#type {
        scope_1705.string(var_1706);
    }
    #[allow(unused_mut)]
    let mut scope_1707 = writer.prefix("VpnGatewayId");
    if let Some(var_1708) = &input.vpn_gateway_id {
        scope_1707.string(var_1708);
    }
    #[allow(unused_mut)]
    let mut scope_1709 = writer.prefix("TransitGatewayId");
    if let Some(var_1710) = &input.transit_gateway_id {
        scope_1709.string(var_1710);
    }
    #[allow(unused_mut)]
    let mut scope_1711 = writer.prefix("DryRun");
    if let Some(var_1712) = &input.dry_run {
        scope_1711.boolean(*var_1712);
    }
    #[allow(unused_mut)]
    let mut scope_1713 = writer.prefix("Options");
    if let Some(var_1714) = &input.options {
        crate::query_ser::serialize_structure_crate_model_vpn_connection_options_specification(
            scope_1713, var_1714,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1715 = writer.prefix("TagSpecification");
    if let Some(var_1716) = &input.tag_specifications {
        let mut list_1718 = scope_1715.start_list(true, Some("item"));
        for item_1717 in var_1716 {
            #[allow(unused_mut)]
            let mut entry_1719 = list_1718.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1719, item_1717,
            )?;
        }
        list_1718.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection_route(
    input: &crate::input::CreateVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1720 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1721) = &input.destination_cidr_block {
        scope_1720.string(var_1721);
    }
    #[allow(unused_mut)]
    let mut scope_1722 = writer.prefix("VpnConnectionId");
    if let Some(var_1723) = &input.vpn_connection_id {
        scope_1722.string(var_1723);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_gateway(
    input: &crate::input::CreateVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1724 = writer.prefix("AvailabilityZone");
    if let Some(var_1725) = &input.availability_zone {
        scope_1724.string(var_1725);
    }
    #[allow(unused_mut)]
    let mut scope_1726 = writer.prefix("Type");
    if let Some(var_1727) = &input.r#type {
        scope_1726.string(var_1727.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1728 = writer.prefix("TagSpecification");
    if let Some(var_1729) = &input.tag_specifications {
        let mut list_1731 = scope_1728.start_list(true, Some("item"));
        for item_1730 in var_1729 {
            #[allow(unused_mut)]
            let mut entry_1732 = list_1731.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1732, item_1730,
            )?;
        }
        list_1731.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1733 = writer.prefix("AmazonSideAsn");
    if let Some(var_1734) = &input.amazon_side_asn {
        scope_1733.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1734).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("DryRun");
    if let Some(var_1736) = &input.dry_run {
        scope_1735.boolean(*var_1736);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_carrier_gateway(
    input: &crate::input::DeleteCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1737 = writer.prefix("CarrierGatewayId");
    if let Some(var_1738) = &input.carrier_gateway_id {
        scope_1737.string(var_1738);
    }
    #[allow(unused_mut)]
    let mut scope_1739 = writer.prefix("DryRun");
    if let Some(var_1740) = &input.dry_run {
        scope_1739.boolean(*var_1740);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_endpoint(
    input: &crate::input::DeleteClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1741 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1742) = &input.client_vpn_endpoint_id {
        scope_1741.string(var_1742);
    }
    #[allow(unused_mut)]
    let mut scope_1743 = writer.prefix("DryRun");
    if let Some(var_1744) = &input.dry_run {
        scope_1743.boolean(*var_1744);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_route(
    input: &crate::input::DeleteClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1745 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1746) = &input.client_vpn_endpoint_id {
        scope_1745.string(var_1746);
    }
    #[allow(unused_mut)]
    let mut scope_1747 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1748) = &input.target_vpc_subnet_id {
        scope_1747.string(var_1748);
    }
    #[allow(unused_mut)]
    let mut scope_1749 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1750) = &input.destination_cidr_block {
        scope_1749.string(var_1750);
    }
    #[allow(unused_mut)]
    let mut scope_1751 = writer.prefix("DryRun");
    if let Some(var_1752) = &input.dry_run {
        scope_1751.boolean(*var_1752);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_coip_cidr(
    input: &crate::input::DeleteCoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1753 = writer.prefix("Cidr");
    if let Some(var_1754) = &input.cidr {
        scope_1753.string(var_1754);
    }
    #[allow(unused_mut)]
    let mut scope_1755 = writer.prefix("CoipPoolId");
    if let Some(var_1756) = &input.coip_pool_id {
        scope_1755.string(var_1756);
    }
    #[allow(unused_mut)]
    let mut scope_1757 = writer.prefix("DryRun");
    if let Some(var_1758) = &input.dry_run {
        scope_1757.boolean(*var_1758);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_coip_pool(
    input: &crate::input::DeleteCoipPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCoipPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1759 = writer.prefix("CoipPoolId");
    if let Some(var_1760) = &input.coip_pool_id {
        scope_1759.string(var_1760);
    }
    #[allow(unused_mut)]
    let mut scope_1761 = writer.prefix("DryRun");
    if let Some(var_1762) = &input.dry_run {
        scope_1761.boolean(*var_1762);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_customer_gateway(
    input: &crate::input::DeleteCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1763 = writer.prefix("CustomerGatewayId");
    if let Some(var_1764) = &input.customer_gateway_id {
        scope_1763.string(var_1764);
    }
    #[allow(unused_mut)]
    let mut scope_1765 = writer.prefix("DryRun");
    if let Some(var_1766) = &input.dry_run {
        scope_1765.boolean(*var_1766);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_dhcp_options(
    input: &crate::input::DeleteDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1767 = writer.prefix("DhcpOptionsId");
    if let Some(var_1768) = &input.dhcp_options_id {
        scope_1767.string(var_1768);
    }
    #[allow(unused_mut)]
    let mut scope_1769 = writer.prefix("DryRun");
    if let Some(var_1770) = &input.dry_run {
        scope_1769.boolean(*var_1770);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_egress_only_internet_gateway(
    input: &crate::input::DeleteEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1771 = writer.prefix("DryRun");
    if let Some(var_1772) = &input.dry_run {
        scope_1771.boolean(*var_1772);
    }
    #[allow(unused_mut)]
    let mut scope_1773 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1774) = &input.egress_only_internet_gateway_id {
        scope_1773.string(var_1774);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fleets(
    input: &crate::input::DeleteFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1775 = writer.prefix("DryRun");
    if let Some(var_1776) = &input.dry_run {
        scope_1775.boolean(*var_1776);
    }
    #[allow(unused_mut)]
    let mut scope_1777 = writer.prefix("FleetId");
    if let Some(var_1778) = &input.fleet_ids {
        let mut list_1780 = scope_1777.start_list(true, None);
        for item_1779 in var_1778 {
            #[allow(unused_mut)]
            let mut entry_1781 = list_1780.entry();
            entry_1781.string(item_1779);
        }
        list_1780.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1782 = writer.prefix("TerminateInstances");
    if let Some(var_1783) = &input.terminate_instances {
        scope_1782.boolean(*var_1783);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_flow_logs(
    input: &crate::input::DeleteFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1784 = writer.prefix("DryRun");
    if let Some(var_1785) = &input.dry_run {
        scope_1784.boolean(*var_1785);
    }
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("FlowLogId");
    if let Some(var_1787) = &input.flow_log_ids {
        let mut list_1789 = scope_1786.start_list(true, Some("item"));
        for item_1788 in var_1787 {
            #[allow(unused_mut)]
            let mut entry_1790 = list_1789.entry();
            entry_1790.string(item_1788);
        }
        list_1789.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fpga_image(
    input: &crate::input::DeleteFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1791 = writer.prefix("DryRun");
    if let Some(var_1792) = &input.dry_run {
        scope_1791.boolean(*var_1792);
    }
    #[allow(unused_mut)]
    let mut scope_1793 = writer.prefix("FpgaImageId");
    if let Some(var_1794) = &input.fpga_image_id {
        scope_1793.string(var_1794);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_instance_event_window(
    input: &crate::input::DeleteInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1795 = writer.prefix("DryRun");
    if let Some(var_1796) = &input.dry_run {
        scope_1795.boolean(*var_1796);
    }
    #[allow(unused_mut)]
    let mut scope_1797 = writer.prefix("ForceDelete");
    if let Some(var_1798) = &input.force_delete {
        scope_1797.boolean(*var_1798);
    }
    #[allow(unused_mut)]
    let mut scope_1799 = writer.prefix("InstanceEventWindowId");
    if let Some(var_1800) = &input.instance_event_window_id {
        scope_1799.string(var_1800);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_internet_gateway(
    input: &crate::input::DeleteInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1801 = writer.prefix("DryRun");
    if let Some(var_1802) = &input.dry_run {
        scope_1801.boolean(*var_1802);
    }
    #[allow(unused_mut)]
    let mut scope_1803 = writer.prefix("InternetGatewayId");
    if let Some(var_1804) = &input.internet_gateway_id {
        scope_1803.string(var_1804);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam(
    input: &crate::input::DeleteIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1805 = writer.prefix("DryRun");
    if let Some(var_1806) = &input.dry_run {
        scope_1805.boolean(*var_1806);
    }
    #[allow(unused_mut)]
    let mut scope_1807 = writer.prefix("IpamId");
    if let Some(var_1808) = &input.ipam_id {
        scope_1807.string(var_1808);
    }
    #[allow(unused_mut)]
    let mut scope_1809 = writer.prefix("Cascade");
    if let Some(var_1810) = &input.cascade {
        scope_1809.boolean(*var_1810);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_pool(
    input: &crate::input::DeleteIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1811 = writer.prefix("DryRun");
    if let Some(var_1812) = &input.dry_run {
        scope_1811.boolean(*var_1812);
    }
    #[allow(unused_mut)]
    let mut scope_1813 = writer.prefix("IpamPoolId");
    if let Some(var_1814) = &input.ipam_pool_id {
        scope_1813.string(var_1814);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_scope(
    input: &crate::input::DeleteIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1815 = writer.prefix("DryRun");
    if let Some(var_1816) = &input.dry_run {
        scope_1815.boolean(*var_1816);
    }
    #[allow(unused_mut)]
    let mut scope_1817 = writer.prefix("IpamScopeId");
    if let Some(var_1818) = &input.ipam_scope_id {
        scope_1817.string(var_1818);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_key_pair(
    input: &crate::input::DeleteKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("KeyName");
    if let Some(var_1820) = &input.key_name {
        scope_1819.string(var_1820);
    }
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("KeyPairId");
    if let Some(var_1822) = &input.key_pair_id {
        scope_1821.string(var_1822);
    }
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("DryRun");
    if let Some(var_1824) = &input.dry_run {
        scope_1823.boolean(*var_1824);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template(
    input: &crate::input::DeleteLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1825 = writer.prefix("DryRun");
    if let Some(var_1826) = &input.dry_run {
        scope_1825.boolean(*var_1826);
    }
    #[allow(unused_mut)]
    let mut scope_1827 = writer.prefix("LaunchTemplateId");
    if let Some(var_1828) = &input.launch_template_id {
        scope_1827.string(var_1828);
    }
    #[allow(unused_mut)]
    let mut scope_1829 = writer.prefix("LaunchTemplateName");
    if let Some(var_1830) = &input.launch_template_name {
        scope_1829.string(var_1830);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template_versions(
    input: &crate::input::DeleteLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1831 = writer.prefix("DryRun");
    if let Some(var_1832) = &input.dry_run {
        scope_1831.boolean(*var_1832);
    }
    #[allow(unused_mut)]
    let mut scope_1833 = writer.prefix("LaunchTemplateId");
    if let Some(var_1834) = &input.launch_template_id {
        scope_1833.string(var_1834);
    }
    #[allow(unused_mut)]
    let mut scope_1835 = writer.prefix("LaunchTemplateName");
    if let Some(var_1836) = &input.launch_template_name {
        scope_1835.string(var_1836);
    }
    #[allow(unused_mut)]
    let mut scope_1837 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1838) = &input.versions {
        let mut list_1840 = scope_1837.start_list(true, Some("item"));
        for item_1839 in var_1838 {
            #[allow(unused_mut)]
            let mut entry_1841 = list_1840.entry();
            entry_1841.string(item_1839);
        }
        list_1840.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route(
    input: &crate::input::DeleteLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1842 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1843) = &input.destination_cidr_block {
        scope_1842.string(var_1843);
    }
    #[allow(unused_mut)]
    let mut scope_1844 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1845) = &input.local_gateway_route_table_id {
        scope_1844.string(var_1845);
    }
    #[allow(unused_mut)]
    let mut scope_1846 = writer.prefix("DryRun");
    if let Some(var_1847) = &input.dry_run {
        scope_1846.boolean(*var_1847);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table(
    input: &crate::input::DeleteLocalGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1848 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1849) = &input.local_gateway_route_table_id {
        scope_1848.string(var_1849);
    }
    #[allow(unused_mut)]
    let mut scope_1850 = writer.prefix("DryRun");
    if let Some(var_1851) = &input.dry_run {
        scope_1850.boolean(*var_1851);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_virtual_interface_group_association(
    input: &crate::input::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1852 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_1853) = &input.local_gateway_route_table_virtual_interface_group_association_id
    {
        scope_1852.string(var_1853);
    }
    #[allow(unused_mut)]
    let mut scope_1854 = writer.prefix("DryRun");
    if let Some(var_1855) = &input.dry_run {
        scope_1854.boolean(*var_1855);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_vpc_association(
    input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1856 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1857) = &input.local_gateway_route_table_vpc_association_id {
        scope_1856.string(var_1857);
    }
    #[allow(unused_mut)]
    let mut scope_1858 = writer.prefix("DryRun");
    if let Some(var_1859) = &input.dry_run {
        scope_1858.boolean(*var_1859);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_managed_prefix_list(
    input: &crate::input::DeleteManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1860 = writer.prefix("DryRun");
    if let Some(var_1861) = &input.dry_run {
        scope_1860.boolean(*var_1861);
    }
    #[allow(unused_mut)]
    let mut scope_1862 = writer.prefix("PrefixListId");
    if let Some(var_1863) = &input.prefix_list_id {
        scope_1862.string(var_1863);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_nat_gateway(
    input: &crate::input::DeleteNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1864 = writer.prefix("DryRun");
    if let Some(var_1865) = &input.dry_run {
        scope_1864.boolean(*var_1865);
    }
    #[allow(unused_mut)]
    let mut scope_1866 = writer.prefix("NatGatewayId");
    if let Some(var_1867) = &input.nat_gateway_id {
        scope_1866.string(var_1867);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl(
    input: &crate::input::DeleteNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1868 = writer.prefix("DryRun");
    if let Some(var_1869) = &input.dry_run {
        scope_1868.boolean(*var_1869);
    }
    #[allow(unused_mut)]
    let mut scope_1870 = writer.prefix("NetworkAclId");
    if let Some(var_1871) = &input.network_acl_id {
        scope_1870.string(var_1871);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl_entry(
    input: &crate::input::DeleteNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1872 = writer.prefix("DryRun");
    if let Some(var_1873) = &input.dry_run {
        scope_1872.boolean(*var_1873);
    }
    #[allow(unused_mut)]
    let mut scope_1874 = writer.prefix("Egress");
    if let Some(var_1875) = &input.egress {
        scope_1874.boolean(*var_1875);
    }
    #[allow(unused_mut)]
    let mut scope_1876 = writer.prefix("NetworkAclId");
    if let Some(var_1877) = &input.network_acl_id {
        scope_1876.string(var_1877);
    }
    #[allow(unused_mut)]
    let mut scope_1878 = writer.prefix("RuleNumber");
    if let Some(var_1879) = &input.rule_number {
        scope_1878.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1879).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope(
    input: &crate::input::DeleteNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1880 = writer.prefix("DryRun");
    if let Some(var_1881) = &input.dry_run {
        scope_1880.boolean(*var_1881);
    }
    #[allow(unused_mut)]
    let mut scope_1882 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_1883) = &input.network_insights_access_scope_id {
        scope_1882.string(var_1883);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope_analysis(
    input: &crate::input::DeleteNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1884 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_1885) = &input.network_insights_access_scope_analysis_id {
        scope_1884.string(var_1885);
    }
    #[allow(unused_mut)]
    let mut scope_1886 = writer.prefix("DryRun");
    if let Some(var_1887) = &input.dry_run {
        scope_1886.boolean(*var_1887);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_analysis(
    input: &crate::input::DeleteNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1888 = writer.prefix("DryRun");
    if let Some(var_1889) = &input.dry_run {
        scope_1888.boolean(*var_1889);
    }
    #[allow(unused_mut)]
    let mut scope_1890 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_1891) = &input.network_insights_analysis_id {
        scope_1890.string(var_1891);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_path(
    input: &crate::input::DeleteNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1892 = writer.prefix("DryRun");
    if let Some(var_1893) = &input.dry_run {
        scope_1892.boolean(*var_1893);
    }
    #[allow(unused_mut)]
    let mut scope_1894 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_1895) = &input.network_insights_path_id {
        scope_1894.string(var_1895);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface(
    input: &crate::input::DeleteNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1896 = writer.prefix("DryRun");
    if let Some(var_1897) = &input.dry_run {
        scope_1896.boolean(*var_1897);
    }
    #[allow(unused_mut)]
    let mut scope_1898 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1899) = &input.network_interface_id {
        scope_1898.string(var_1899);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface_permission(
    input: &crate::input::DeleteNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1900 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_1901) = &input.network_interface_permission_id {
        scope_1900.string(var_1901);
    }
    #[allow(unused_mut)]
    let mut scope_1902 = writer.prefix("Force");
    if let Some(var_1903) = &input.force {
        scope_1902.boolean(*var_1903);
    }
    #[allow(unused_mut)]
    let mut scope_1904 = writer.prefix("DryRun");
    if let Some(var_1905) = &input.dry_run {
        scope_1904.boolean(*var_1905);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_placement_group(
    input: &crate::input::DeletePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1906 = writer.prefix("DryRun");
    if let Some(var_1907) = &input.dry_run {
        scope_1906.boolean(*var_1907);
    }
    #[allow(unused_mut)]
    let mut scope_1908 = writer.prefix("GroupName");
    if let Some(var_1909) = &input.group_name {
        scope_1908.string(var_1909);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_public_ipv4_pool(
    input: &crate::input::DeletePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1910 = writer.prefix("DryRun");
    if let Some(var_1911) = &input.dry_run {
        scope_1910.boolean(*var_1911);
    }
    #[allow(unused_mut)]
    let mut scope_1912 = writer.prefix("PoolId");
    if let Some(var_1913) = &input.pool_id {
        scope_1912.string(var_1913);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_queued_reserved_instances(
    input: &crate::input::DeleteQueuedReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1914 = writer.prefix("DryRun");
    if let Some(var_1915) = &input.dry_run {
        scope_1914.boolean(*var_1915);
    }
    #[allow(unused_mut)]
    let mut scope_1916 = writer.prefix("ReservedInstancesId");
    if let Some(var_1917) = &input.reserved_instances_ids {
        let mut list_1919 = scope_1916.start_list(true, Some("item"));
        for item_1918 in var_1917 {
            #[allow(unused_mut)]
            let mut entry_1920 = list_1919.entry();
            entry_1920.string(item_1918);
        }
        list_1919.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route(
    input: &crate::input::DeleteRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1921 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1922) = &input.destination_cidr_block {
        scope_1921.string(var_1922);
    }
    #[allow(unused_mut)]
    let mut scope_1923 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1924) = &input.destination_ipv6_cidr_block {
        scope_1923.string(var_1924);
    }
    #[allow(unused_mut)]
    let mut scope_1925 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1926) = &input.destination_prefix_list_id {
        scope_1925.string(var_1926);
    }
    #[allow(unused_mut)]
    let mut scope_1927 = writer.prefix("DryRun");
    if let Some(var_1928) = &input.dry_run {
        scope_1927.boolean(*var_1928);
    }
    #[allow(unused_mut)]
    let mut scope_1929 = writer.prefix("RouteTableId");
    if let Some(var_1930) = &input.route_table_id {
        scope_1929.string(var_1930);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route_table(
    input: &crate::input::DeleteRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1931 = writer.prefix("DryRun");
    if let Some(var_1932) = &input.dry_run {
        scope_1931.boolean(*var_1932);
    }
    #[allow(unused_mut)]
    let mut scope_1933 = writer.prefix("RouteTableId");
    if let Some(var_1934) = &input.route_table_id {
        scope_1933.string(var_1934);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_security_group(
    input: &crate::input::DeleteSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1935 = writer.prefix("GroupId");
    if let Some(var_1936) = &input.group_id {
        scope_1935.string(var_1936);
    }
    #[allow(unused_mut)]
    let mut scope_1937 = writer.prefix("GroupName");
    if let Some(var_1938) = &input.group_name {
        scope_1937.string(var_1938);
    }
    #[allow(unused_mut)]
    let mut scope_1939 = writer.prefix("DryRun");
    if let Some(var_1940) = &input.dry_run {
        scope_1939.boolean(*var_1940);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1941 = writer.prefix("SnapshotId");
    if let Some(var_1942) = &input.snapshot_id {
        scope_1941.string(var_1942);
    }
    #[allow(unused_mut)]
    let mut scope_1943 = writer.prefix("DryRun");
    if let Some(var_1944) = &input.dry_run {
        scope_1943.boolean(*var_1944);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_spot_datafeed_subscription(
    input: &crate::input::DeleteSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1945 = writer.prefix("DryRun");
    if let Some(var_1946) = &input.dry_run {
        scope_1945.boolean(*var_1946);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet(
    input: &crate::input::DeleteSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1947 = writer.prefix("SubnetId");
    if let Some(var_1948) = &input.subnet_id {
        scope_1947.string(var_1948);
    }
    #[allow(unused_mut)]
    let mut scope_1949 = writer.prefix("DryRun");
    if let Some(var_1950) = &input.dry_run {
        scope_1949.boolean(*var_1950);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet_cidr_reservation(
    input: &crate::input::DeleteSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1951 = writer.prefix("SubnetCidrReservationId");
    if let Some(var_1952) = &input.subnet_cidr_reservation_id {
        scope_1951.string(var_1952);
    }
    #[allow(unused_mut)]
    let mut scope_1953 = writer.prefix("DryRun");
    if let Some(var_1954) = &input.dry_run {
        scope_1953.boolean(*var_1954);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1955 = writer.prefix("DryRun");
    if let Some(var_1956) = &input.dry_run {
        scope_1955.boolean(*var_1956);
    }
    #[allow(unused_mut)]
    let mut scope_1957 = writer.prefix("ResourceId");
    if let Some(var_1958) = &input.resources {
        let mut list_1960 = scope_1957.start_list(true, None);
        for item_1959 in var_1958 {
            #[allow(unused_mut)]
            let mut entry_1961 = list_1960.entry();
            entry_1961.string(item_1959);
        }
        list_1960.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1962 = writer.prefix("Tag");
    if let Some(var_1963) = &input.tags {
        let mut list_1965 = scope_1962.start_list(true, Some("item"));
        for item_1964 in var_1963 {
            #[allow(unused_mut)]
            let mut entry_1966 = list_1965.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1966, item_1964)?;
        }
        list_1965.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter(
    input: &crate::input::DeleteTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1967 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1968) = &input.traffic_mirror_filter_id {
        scope_1967.string(var_1968);
    }
    #[allow(unused_mut)]
    let mut scope_1969 = writer.prefix("DryRun");
    if let Some(var_1970) = &input.dry_run {
        scope_1969.boolean(*var_1970);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter_rule(
    input: &crate::input::DeleteTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1971 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_1972) = &input.traffic_mirror_filter_rule_id {
        scope_1971.string(var_1972);
    }
    #[allow(unused_mut)]
    let mut scope_1973 = writer.prefix("DryRun");
    if let Some(var_1974) = &input.dry_run {
        scope_1973.boolean(*var_1974);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_session(
    input: &crate::input::DeleteTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1975 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_1976) = &input.traffic_mirror_session_id {
        scope_1975.string(var_1976);
    }
    #[allow(unused_mut)]
    let mut scope_1977 = writer.prefix("DryRun");
    if let Some(var_1978) = &input.dry_run {
        scope_1977.boolean(*var_1978);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_target(
    input: &crate::input::DeleteTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1979 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1980) = &input.traffic_mirror_target_id {
        scope_1979.string(var_1980);
    }
    #[allow(unused_mut)]
    let mut scope_1981 = writer.prefix("DryRun");
    if let Some(var_1982) = &input.dry_run {
        scope_1981.boolean(*var_1982);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway(
    input: &crate::input::DeleteTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1983 = writer.prefix("TransitGatewayId");
    if let Some(var_1984) = &input.transit_gateway_id {
        scope_1983.string(var_1984);
    }
    #[allow(unused_mut)]
    let mut scope_1985 = writer.prefix("DryRun");
    if let Some(var_1986) = &input.dry_run {
        scope_1985.boolean(*var_1986);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect(
    input: &crate::input::DeleteTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1987 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1988) = &input.transit_gateway_attachment_id {
        scope_1987.string(var_1988);
    }
    #[allow(unused_mut)]
    let mut scope_1989 = writer.prefix("DryRun");
    if let Some(var_1990) = &input.dry_run {
        scope_1989.boolean(*var_1990);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect_peer(
    input: &crate::input::DeleteTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1991 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_1992) = &input.transit_gateway_connect_peer_id {
        scope_1991.string(var_1992);
    }
    #[allow(unused_mut)]
    let mut scope_1993 = writer.prefix("DryRun");
    if let Some(var_1994) = &input.dry_run {
        scope_1993.boolean(*var_1994);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_multicast_domain(
    input: &crate::input::DeleteTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1995 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1996) = &input.transit_gateway_multicast_domain_id {
        scope_1995.string(var_1996);
    }
    #[allow(unused_mut)]
    let mut scope_1997 = writer.prefix("DryRun");
    if let Some(var_1998) = &input.dry_run {
        scope_1997.boolean(*var_1998);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_peering_attachment(
    input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1999 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_2000) = &input.transit_gateway_attachment_id {
        scope_1999.string(var_2000);
    }
    #[allow(unused_mut)]
    let mut scope_2001 = writer.prefix("DryRun");
    if let Some(var_2002) = &input.dry_run {
        scope_2001.boolean(*var_2002);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_policy_table(
    input: &crate::input::DeleteTransitGatewayPolicyTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPolicyTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2003 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_2004) = &input.transit_gateway_policy_table_id {
        scope_2003.string(var_2004);
    }
    #[allow(unused_mut)]
    let mut scope_2005 = writer.prefix("DryRun");
    if let Some(var_2006) = &input.dry_run {
        scope_2005.boolean(*var_2006);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_prefix_list_reference(
    input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2007 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_2008) = &input.transit_gateway_route_table_id {
        scope_2007.string(var_2008);
    }
    #[allow(unused_mut)]
    let mut scope_2009 = writer.prefix("PrefixListId");
    if let Some(var_2010) = &input.prefix_list_id {
        scope_2009.string(var_2010);
    }
    #[allow(unused_mut)]
    let mut scope_2011 = writer.prefix("DryRun");
    if let Some(var_2012) = &input.dry_run {
        scope_2011.boolean(*var_2012);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route(
    input: &crate::input::DeleteTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2013 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_2014) = &input.transit_gateway_route_table_id {
        scope_2013.string(var_2014);
    }
    #[allow(unused_mut)]
    let mut scope_2015 = writer.prefix("DestinationCidrBlock");
    if let Some(var_2016) = &input.destination_cidr_block {
        scope_2015.string(var_2016);
    }
    #[allow(unused_mut)]
    let mut scope_2017 = writer.prefix("DryRun");
    if let Some(var_2018) = &input.dry_run {
        scope_2017.boolean(*var_2018);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table(
    input: &crate::input::DeleteTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2019 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_2020) = &input.transit_gateway_route_table_id {
        scope_2019.string(var_2020);
    }
    #[allow(unused_mut)]
    let mut scope_2021 = writer.prefix("DryRun");
    if let Some(var_2022) = &input.dry_run {
        scope_2021.boolean(*var_2022);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table_announcement(
    input: &crate::input::DeleteTransitGatewayRouteTableAnnouncementInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayRouteTableAnnouncement",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2023 = writer.prefix("TransitGatewayRouteTableAnnouncementId");
    if let Some(var_2024) = &input.transit_gateway_route_table_announcement_id {
        scope_2023.string(var_2024);
    }
    #[allow(unused_mut)]
    let mut scope_2025 = writer.prefix("DryRun");
    if let Some(var_2026) = &input.dry_run {
        scope_2025.boolean(*var_2026);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_vpc_attachment(
    input: &crate::input::DeleteTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2027 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_2028) = &input.transit_gateway_attachment_id {
        scope_2027.string(var_2028);
    }
    #[allow(unused_mut)]
    let mut scope_2029 = writer.prefix("DryRun");
    if let Some(var_2030) = &input.dry_run {
        scope_2029.boolean(*var_2030);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_volume(
    input: &crate::input::DeleteVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2031 = writer.prefix("VolumeId");
    if let Some(var_2032) = &input.volume_id {
        scope_2031.string(var_2032);
    }
    #[allow(unused_mut)]
    let mut scope_2033 = writer.prefix("DryRun");
    if let Some(var_2034) = &input.dry_run {
        scope_2033.boolean(*var_2034);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc(
    input: &crate::input::DeleteVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2035 = writer.prefix("VpcId");
    if let Some(var_2036) = &input.vpc_id {
        scope_2035.string(var_2036);
    }
    #[allow(unused_mut)]
    let mut scope_2037 = writer.prefix("DryRun");
    if let Some(var_2038) = &input.dry_run {
        scope_2037.boolean(*var_2038);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_connection_notifications(
    input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2039 = writer.prefix("DryRun");
    if let Some(var_2040) = &input.dry_run {
        scope_2039.boolean(*var_2040);
    }
    #[allow(unused_mut)]
    let mut scope_2041 = writer.prefix("ConnectionNotificationId");
    if let Some(var_2042) = &input.connection_notification_ids {
        let mut list_2044 = scope_2041.start_list(true, Some("item"));
        for item_2043 in var_2042 {
            #[allow(unused_mut)]
            let mut entry_2045 = list_2044.entry();
            entry_2045.string(item_2043);
        }
        list_2044.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoints(
    input: &crate::input::DeleteVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2046 = writer.prefix("DryRun");
    if let Some(var_2047) = &input.dry_run {
        scope_2046.boolean(*var_2047);
    }
    #[allow(unused_mut)]
    let mut scope_2048 = writer.prefix("VpcEndpointId");
    if let Some(var_2049) = &input.vpc_endpoint_ids {
        let mut list_2051 = scope_2048.start_list(true, Some("item"));
        for item_2050 in var_2049 {
            #[allow(unused_mut)]
            let mut entry_2052 = list_2051.entry();
            entry_2052.string(item_2050);
        }
        list_2051.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_service_configurations(
    input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2053 = writer.prefix("DryRun");
    if let Some(var_2054) = &input.dry_run {
        scope_2053.boolean(*var_2054);
    }
    #[allow(unused_mut)]
    let mut scope_2055 = writer.prefix("ServiceId");
    if let Some(var_2056) = &input.service_ids {
        let mut list_2058 = scope_2055.start_list(true, Some("item"));
        for item_2057 in var_2056 {
            #[allow(unused_mut)]
            let mut entry_2059 = list_2058.entry();
            entry_2059.string(item_2057);
        }
        list_2058.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_peering_connection(
    input: &crate::input::DeleteVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2060 = writer.prefix("DryRun");
    if let Some(var_2061) = &input.dry_run {
        scope_2060.boolean(*var_2061);
    }
    #[allow(unused_mut)]
    let mut scope_2062 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_2063) = &input.vpc_peering_connection_id {
        scope_2062.string(var_2063);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection(
    input: &crate::input::DeleteVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2064 = writer.prefix("VpnConnectionId");
    if let Some(var_2065) = &input.vpn_connection_id {
        scope_2064.string(var_2065);
    }
    #[allow(unused_mut)]
    let mut scope_2066 = writer.prefix("DryRun");
    if let Some(var_2067) = &input.dry_run {
        scope_2066.boolean(*var_2067);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection_route(
    input: &crate::input::DeleteVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2068 = writer.prefix("DestinationCidrBlock");
    if let Some(var_2069) = &input.destination_cidr_block {
        scope_2068.string(var_2069);
    }
    #[allow(unused_mut)]
    let mut scope_2070 = writer.prefix("VpnConnectionId");
    if let Some(var_2071) = &input.vpn_connection_id {
        scope_2070.string(var_2071);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_gateway(
    input: &crate::input::DeleteVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2072 = writer.prefix("VpnGatewayId");
    if let Some(var_2073) = &input.vpn_gateway_id {
        scope_2072.string(var_2073);
    }
    #[allow(unused_mut)]
    let mut scope_2074 = writer.prefix("DryRun");
    if let Some(var_2075) = &input.dry_run {
        scope_2074.boolean(*var_2075);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_byoip_cidr(
    input: &crate::input::DeprovisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2076 = writer.prefix("Cidr");
    if let Some(var_2077) = &input.cidr {
        scope_2076.string(var_2077);
    }
    #[allow(unused_mut)]
    let mut scope_2078 = writer.prefix("DryRun");
    if let Some(var_2079) = &input.dry_run {
        scope_2078.boolean(*var_2079);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_ipam_pool_cidr(
    input: &crate::input::DeprovisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2080 = writer.prefix("DryRun");
    if let Some(var_2081) = &input.dry_run {
        scope_2080.boolean(*var_2081);
    }
    #[allow(unused_mut)]
    let mut scope_2082 = writer.prefix("IpamPoolId");
    if let Some(var_2083) = &input.ipam_pool_id {
        scope_2082.string(var_2083);
    }
    #[allow(unused_mut)]
    let mut scope_2084 = writer.prefix("Cidr");
    if let Some(var_2085) = &input.cidr {
        scope_2084.string(var_2085);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_public_ipv4_pool_cidr(
    input: &crate::input::DeprovisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2086 = writer.prefix("DryRun");
    if let Some(var_2087) = &input.dry_run {
        scope_2086.boolean(*var_2087);
    }
    #[allow(unused_mut)]
    let mut scope_2088 = writer.prefix("PoolId");
    if let Some(var_2089) = &input.pool_id {
        scope_2088.string(var_2089);
    }
    #[allow(unused_mut)]
    let mut scope_2090 = writer.prefix("Cidr");
    if let Some(var_2091) = &input.cidr {
        scope_2090.string(var_2091);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_image(
    input: &crate::input::DeregisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2092 = writer.prefix("ImageId");
    if let Some(var_2093) = &input.image_id {
        scope_2092.string(var_2093);
    }
    #[allow(unused_mut)]
    let mut scope_2094 = writer.prefix("DryRun");
    if let Some(var_2095) = &input.dry_run {
        scope_2094.boolean(*var_2095);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_instance_event_notification_attributes(
    input: &crate::input::DeregisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2096 = writer.prefix("DryRun");
    if let Some(var_2097) = &input.dry_run {
        scope_2096.boolean(*var_2097);
    }
    #[allow(unused_mut)]
    let mut scope_2098 = writer.prefix("InstanceTagAttribute");
    if let Some(var_2099) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_deregister_instance_tag_attribute_request(scope_2098, var_2099)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_members(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2100 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2101) = &input.transit_gateway_multicast_domain_id {
        scope_2100.string(var_2101);
    }
    #[allow(unused_mut)]
    let mut scope_2102 = writer.prefix("GroupIpAddress");
    if let Some(var_2103) = &input.group_ip_address {
        scope_2102.string(var_2103);
    }
    #[allow(unused_mut)]
    let mut scope_2104 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2105) = &input.network_interface_ids {
        let mut list_2107 = scope_2104.start_list(true, Some("item"));
        for item_2106 in var_2105 {
            #[allow(unused_mut)]
            let mut entry_2108 = list_2107.entry();
            entry_2108.string(item_2106);
        }
        list_2107.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2109 = writer.prefix("DryRun");
    if let Some(var_2110) = &input.dry_run {
        scope_2109.boolean(*var_2110);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_sources(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2111 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2112) = &input.transit_gateway_multicast_domain_id {
        scope_2111.string(var_2112);
    }
    #[allow(unused_mut)]
    let mut scope_2113 = writer.prefix("GroupIpAddress");
    if let Some(var_2114) = &input.group_ip_address {
        scope_2113.string(var_2114);
    }
    #[allow(unused_mut)]
    let mut scope_2115 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2116) = &input.network_interface_ids {
        let mut list_2118 = scope_2115.start_list(true, Some("item"));
        for item_2117 in var_2116 {
            #[allow(unused_mut)]
            let mut entry_2119 = list_2118.entry();
            entry_2119.string(item_2117);
        }
        list_2118.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2120 = writer.prefix("DryRun");
    if let Some(var_2121) = &input.dry_run {
        scope_2120.boolean(*var_2121);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2122 = writer.prefix("AttributeName");
    if let Some(var_2123) = &input.attribute_names {
        let mut list_2125 = scope_2122.start_list(true, Some("attributeName"));
        for item_2124 in var_2123 {
            #[allow(unused_mut)]
            let mut entry_2126 = list_2125.entry();
            entry_2126.string(item_2124.as_str());
        }
        list_2125.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2127 = writer.prefix("DryRun");
    if let Some(var_2128) = &input.dry_run {
        scope_2127.boolean(*var_2128);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses(
    input: &crate::input::DescribeAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2129 = writer.prefix("Filter");
    if let Some(var_2130) = &input.filters {
        let mut list_2132 = scope_2129.start_list(true, Some("Filter"));
        for item_2131 in var_2130 {
            #[allow(unused_mut)]
            let mut entry_2133 = list_2132.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2133, item_2131)?;
        }
        list_2132.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2134 = writer.prefix("PublicIp");
    if let Some(var_2135) = &input.public_ips {
        let mut list_2137 = scope_2134.start_list(true, Some("PublicIp"));
        for item_2136 in var_2135 {
            #[allow(unused_mut)]
            let mut entry_2138 = list_2137.entry();
            entry_2138.string(item_2136);
        }
        list_2137.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2139 = writer.prefix("AllocationId");
    if let Some(var_2140) = &input.allocation_ids {
        let mut list_2142 = scope_2139.start_list(true, Some("AllocationId"));
        for item_2141 in var_2140 {
            #[allow(unused_mut)]
            let mut entry_2143 = list_2142.entry();
            entry_2143.string(item_2141);
        }
        list_2142.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2144 = writer.prefix("DryRun");
    if let Some(var_2145) = &input.dry_run {
        scope_2144.boolean(*var_2145);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses_attribute(
    input: &crate::input::DescribeAddressesAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2146 = writer.prefix("AllocationId");
    if let Some(var_2147) = &input.allocation_ids {
        let mut list_2149 = scope_2146.start_list(true, Some("item"));
        for item_2148 in var_2147 {
            #[allow(unused_mut)]
            let mut entry_2150 = list_2149.entry();
            entry_2150.string(item_2148);
        }
        list_2149.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2151 = writer.prefix("Attribute");
    if let Some(var_2152) = &input.attribute {
        scope_2151.string(var_2152.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2153 = writer.prefix("NextToken");
    if let Some(var_2154) = &input.next_token {
        scope_2153.string(var_2154);
    }
    #[allow(unused_mut)]
    let mut scope_2155 = writer.prefix("MaxResults");
    if let Some(var_2156) = &input.max_results {
        scope_2155.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2156).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2157 = writer.prefix("DryRun");
    if let Some(var_2158) = &input.dry_run {
        scope_2157.boolean(*var_2158);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_aggregate_id_format(
    input: &crate::input::DescribeAggregateIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2159 = writer.prefix("DryRun");
    if let Some(var_2160) = &input.dry_run {
        scope_2159.boolean(*var_2160);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_availability_zones(
    input: &crate::input::DescribeAvailabilityZonesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2161 = writer.prefix("Filter");
    if let Some(var_2162) = &input.filters {
        let mut list_2164 = scope_2161.start_list(true, Some("Filter"));
        for item_2163 in var_2162 {
            #[allow(unused_mut)]
            let mut entry_2165 = list_2164.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2165, item_2163)?;
        }
        list_2164.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2166 = writer.prefix("ZoneName");
    if let Some(var_2167) = &input.zone_names {
        let mut list_2169 = scope_2166.start_list(true, Some("ZoneName"));
        for item_2168 in var_2167 {
            #[allow(unused_mut)]
            let mut entry_2170 = list_2169.entry();
            entry_2170.string(item_2168);
        }
        list_2169.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2171 = writer.prefix("ZoneId");
    if let Some(var_2172) = &input.zone_ids {
        let mut list_2174 = scope_2171.start_list(true, Some("ZoneId"));
        for item_2173 in var_2172 {
            #[allow(unused_mut)]
            let mut entry_2175 = list_2174.entry();
            entry_2175.string(item_2173);
        }
        list_2174.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2176 = writer.prefix("AllAvailabilityZones");
    if let Some(var_2177) = &input.all_availability_zones {
        scope_2176.boolean(*var_2177);
    }
    #[allow(unused_mut)]
    let mut scope_2178 = writer.prefix("DryRun");
    if let Some(var_2179) = &input.dry_run {
        scope_2178.boolean(*var_2179);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_bundle_tasks(
    input: &crate::input::DescribeBundleTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2180 = writer.prefix("BundleId");
    if let Some(var_2181) = &input.bundle_ids {
        let mut list_2183 = scope_2180.start_list(true, Some("BundleId"));
        for item_2182 in var_2181 {
            #[allow(unused_mut)]
            let mut entry_2184 = list_2183.entry();
            entry_2184.string(item_2182);
        }
        list_2183.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2185 = writer.prefix("Filter");
    if let Some(var_2186) = &input.filters {
        let mut list_2188 = scope_2185.start_list(true, Some("Filter"));
        for item_2187 in var_2186 {
            #[allow(unused_mut)]
            let mut entry_2189 = list_2188.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2189, item_2187)?;
        }
        list_2188.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2190 = writer.prefix("DryRun");
    if let Some(var_2191) = &input.dry_run {
        scope_2190.boolean(*var_2191);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_byoip_cidrs(
    input: &crate::input::DescribeByoipCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2192 = writer.prefix("DryRun");
    if let Some(var_2193) = &input.dry_run {
        scope_2192.boolean(*var_2193);
    }
    #[allow(unused_mut)]
    let mut scope_2194 = writer.prefix("MaxResults");
    if let Some(var_2195) = &input.max_results {
        scope_2194.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2195).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2196 = writer.prefix("NextToken");
    if let Some(var_2197) = &input.next_token {
        scope_2196.string(var_2197);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservation_fleets(
    input: &crate::input::DescribeCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2198 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_2199) = &input.capacity_reservation_fleet_ids {
        let mut list_2201 = scope_2198.start_list(true, Some("item"));
        for item_2200 in var_2199 {
            #[allow(unused_mut)]
            let mut entry_2202 = list_2201.entry();
            entry_2202.string(item_2200);
        }
        list_2201.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2203 = writer.prefix("NextToken");
    if let Some(var_2204) = &input.next_token {
        scope_2203.string(var_2204);
    }
    #[allow(unused_mut)]
    let mut scope_2205 = writer.prefix("MaxResults");
    if let Some(var_2206) = &input.max_results {
        scope_2205.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2206).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2207 = writer.prefix("Filter");
    if let Some(var_2208) = &input.filters {
        let mut list_2210 = scope_2207.start_list(true, Some("Filter"));
        for item_2209 in var_2208 {
            #[allow(unused_mut)]
            let mut entry_2211 = list_2210.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2211, item_2209)?;
        }
        list_2210.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2212 = writer.prefix("DryRun");
    if let Some(var_2213) = &input.dry_run {
        scope_2212.boolean(*var_2213);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservations(
    input: &crate::input::DescribeCapacityReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2214 = writer.prefix("CapacityReservationId");
    if let Some(var_2215) = &input.capacity_reservation_ids {
        let mut list_2217 = scope_2214.start_list(true, Some("item"));
        for item_2216 in var_2215 {
            #[allow(unused_mut)]
            let mut entry_2218 = list_2217.entry();
            entry_2218.string(item_2216);
        }
        list_2217.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2219 = writer.prefix("NextToken");
    if let Some(var_2220) = &input.next_token {
        scope_2219.string(var_2220);
    }
    #[allow(unused_mut)]
    let mut scope_2221 = writer.prefix("MaxResults");
    if let Some(var_2222) = &input.max_results {
        scope_2221.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2222).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2223 = writer.prefix("Filter");
    if let Some(var_2224) = &input.filters {
        let mut list_2226 = scope_2223.start_list(true, Some("Filter"));
        for item_2225 in var_2224 {
            #[allow(unused_mut)]
            let mut entry_2227 = list_2226.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2227, item_2225)?;
        }
        list_2226.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2228 = writer.prefix("DryRun");
    if let Some(var_2229) = &input.dry_run {
        scope_2228.boolean(*var_2229);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_carrier_gateways(
    input: &crate::input::DescribeCarrierGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2230 = writer.prefix("CarrierGatewayId");
    if let Some(var_2231) = &input.carrier_gateway_ids {
        let mut list_2233 = scope_2230.start_list(true, None);
        for item_2232 in var_2231 {
            #[allow(unused_mut)]
            let mut entry_2234 = list_2233.entry();
            entry_2234.string(item_2232);
        }
        list_2233.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2235 = writer.prefix("Filter");
    if let Some(var_2236) = &input.filters {
        let mut list_2238 = scope_2235.start_list(true, Some("Filter"));
        for item_2237 in var_2236 {
            #[allow(unused_mut)]
            let mut entry_2239 = list_2238.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2239, item_2237)?;
        }
        list_2238.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2240 = writer.prefix("MaxResults");
    if let Some(var_2241) = &input.max_results {
        scope_2240.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2241).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2242 = writer.prefix("NextToken");
    if let Some(var_2243) = &input.next_token {
        scope_2242.string(var_2243);
    }
    #[allow(unused_mut)]
    let mut scope_2244 = writer.prefix("DryRun");
    if let Some(var_2245) = &input.dry_run {
        scope_2244.boolean(*var_2245);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_classic_link_instances(
    input: &crate::input::DescribeClassicLinkInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2246 = writer.prefix("Filter");
    if let Some(var_2247) = &input.filters {
        let mut list_2249 = scope_2246.start_list(true, Some("Filter"));
        for item_2248 in var_2247 {
            #[allow(unused_mut)]
            let mut entry_2250 = list_2249.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2250, item_2248)?;
        }
        list_2249.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2251 = writer.prefix("DryRun");
    if let Some(var_2252) = &input.dry_run {
        scope_2251.boolean(*var_2252);
    }
    #[allow(unused_mut)]
    let mut scope_2253 = writer.prefix("InstanceId");
    if let Some(var_2254) = &input.instance_ids {
        let mut list_2256 = scope_2253.start_list(true, Some("InstanceId"));
        for item_2255 in var_2254 {
            #[allow(unused_mut)]
            let mut entry_2257 = list_2256.entry();
            entry_2257.string(item_2255);
        }
        list_2256.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2258 = writer.prefix("MaxResults");
    if let Some(var_2259) = &input.max_results {
        scope_2258.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2259).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2260 = writer.prefix("NextToken");
    if let Some(var_2261) = &input.next_token {
        scope_2260.string(var_2261);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_authorization_rules(
    input: &crate::input::DescribeClientVpnAuthorizationRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnAuthorizationRules",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2262 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2263) = &input.client_vpn_endpoint_id {
        scope_2262.string(var_2263);
    }
    #[allow(unused_mut)]
    let mut scope_2264 = writer.prefix("DryRun");
    if let Some(var_2265) = &input.dry_run {
        scope_2264.boolean(*var_2265);
    }
    #[allow(unused_mut)]
    let mut scope_2266 = writer.prefix("NextToken");
    if let Some(var_2267) = &input.next_token {
        scope_2266.string(var_2267);
    }
    #[allow(unused_mut)]
    let mut scope_2268 = writer.prefix("Filter");
    if let Some(var_2269) = &input.filters {
        let mut list_2271 = scope_2268.start_list(true, Some("Filter"));
        for item_2270 in var_2269 {
            #[allow(unused_mut)]
            let mut entry_2272 = list_2271.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2272, item_2270)?;
        }
        list_2271.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2273 = writer.prefix("MaxResults");
    if let Some(var_2274) = &input.max_results {
        scope_2273.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2274).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_connections(
    input: &crate::input::DescribeClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2275 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2276) = &input.client_vpn_endpoint_id {
        scope_2275.string(var_2276);
    }
    #[allow(unused_mut)]
    let mut scope_2277 = writer.prefix("Filter");
    if let Some(var_2278) = &input.filters {
        let mut list_2280 = scope_2277.start_list(true, Some("Filter"));
        for item_2279 in var_2278 {
            #[allow(unused_mut)]
            let mut entry_2281 = list_2280.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2281, item_2279)?;
        }
        list_2280.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2282 = writer.prefix("NextToken");
    if let Some(var_2283) = &input.next_token {
        scope_2282.string(var_2283);
    }
    #[allow(unused_mut)]
    let mut scope_2284 = writer.prefix("MaxResults");
    if let Some(var_2285) = &input.max_results {
        scope_2284.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2285).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2286 = writer.prefix("DryRun");
    if let Some(var_2287) = &input.dry_run {
        scope_2286.boolean(*var_2287);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_endpoints(
    input: &crate::input::DescribeClientVpnEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2288 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2289) = &input.client_vpn_endpoint_ids {
        let mut list_2291 = scope_2288.start_list(true, Some("item"));
        for item_2290 in var_2289 {
            #[allow(unused_mut)]
            let mut entry_2292 = list_2291.entry();
            entry_2292.string(item_2290);
        }
        list_2291.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2293 = writer.prefix("MaxResults");
    if let Some(var_2294) = &input.max_results {
        scope_2293.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2294).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2295 = writer.prefix("NextToken");
    if let Some(var_2296) = &input.next_token {
        scope_2295.string(var_2296);
    }
    #[allow(unused_mut)]
    let mut scope_2297 = writer.prefix("Filter");
    if let Some(var_2298) = &input.filters {
        let mut list_2300 = scope_2297.start_list(true, Some("Filter"));
        for item_2299 in var_2298 {
            #[allow(unused_mut)]
            let mut entry_2301 = list_2300.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2301, item_2299)?;
        }
        list_2300.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2302 = writer.prefix("DryRun");
    if let Some(var_2303) = &input.dry_run {
        scope_2302.boolean(*var_2303);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_routes(
    input: &crate::input::DescribeClientVpnRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2304 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2305) = &input.client_vpn_endpoint_id {
        scope_2304.string(var_2305);
    }
    #[allow(unused_mut)]
    let mut scope_2306 = writer.prefix("Filter");
    if let Some(var_2307) = &input.filters {
        let mut list_2309 = scope_2306.start_list(true, Some("Filter"));
        for item_2308 in var_2307 {
            #[allow(unused_mut)]
            let mut entry_2310 = list_2309.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2310, item_2308)?;
        }
        list_2309.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2311 = writer.prefix("MaxResults");
    if let Some(var_2312) = &input.max_results {
        scope_2311.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2312).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2313 = writer.prefix("NextToken");
    if let Some(var_2314) = &input.next_token {
        scope_2313.string(var_2314);
    }
    #[allow(unused_mut)]
    let mut scope_2315 = writer.prefix("DryRun");
    if let Some(var_2316) = &input.dry_run {
        scope_2315.boolean(*var_2316);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_target_networks(
    input: &crate::input::DescribeClientVpnTargetNetworksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnTargetNetworks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2317 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2318) = &input.client_vpn_endpoint_id {
        scope_2317.string(var_2318);
    }
    #[allow(unused_mut)]
    let mut scope_2319 = writer.prefix("AssociationIds");
    if let Some(var_2320) = &input.association_ids {
        let mut list_2322 = scope_2319.start_list(true, Some("item"));
        for item_2321 in var_2320 {
            #[allow(unused_mut)]
            let mut entry_2323 = list_2322.entry();
            entry_2323.string(item_2321);
        }
        list_2322.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2324 = writer.prefix("MaxResults");
    if let Some(var_2325) = &input.max_results {
        scope_2324.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2325).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2326 = writer.prefix("NextToken");
    if let Some(var_2327) = &input.next_token {
        scope_2326.string(var_2327);
    }
    #[allow(unused_mut)]
    let mut scope_2328 = writer.prefix("Filter");
    if let Some(var_2329) = &input.filters {
        let mut list_2331 = scope_2328.start_list(true, Some("Filter"));
        for item_2330 in var_2329 {
            #[allow(unused_mut)]
            let mut entry_2332 = list_2331.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2332, item_2330)?;
        }
        list_2331.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2333 = writer.prefix("DryRun");
    if let Some(var_2334) = &input.dry_run {
        scope_2333.boolean(*var_2334);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_coip_pools(
    input: &crate::input::DescribeCoipPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2335 = writer.prefix("PoolId");
    if let Some(var_2336) = &input.pool_ids {
        let mut list_2338 = scope_2335.start_list(true, Some("item"));
        for item_2337 in var_2336 {
            #[allow(unused_mut)]
            let mut entry_2339 = list_2338.entry();
            entry_2339.string(item_2337);
        }
        list_2338.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2340 = writer.prefix("Filter");
    if let Some(var_2341) = &input.filters {
        let mut list_2343 = scope_2340.start_list(true, Some("Filter"));
        for item_2342 in var_2341 {
            #[allow(unused_mut)]
            let mut entry_2344 = list_2343.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2344, item_2342)?;
        }
        list_2343.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2345 = writer.prefix("MaxResults");
    if let Some(var_2346) = &input.max_results {
        scope_2345.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2346).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2347 = writer.prefix("NextToken");
    if let Some(var_2348) = &input.next_token {
        scope_2347.string(var_2348);
    }
    #[allow(unused_mut)]
    let mut scope_2349 = writer.prefix("DryRun");
    if let Some(var_2350) = &input.dry_run {
        scope_2349.boolean(*var_2350);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_conversion_tasks(
    input: &crate::input::DescribeConversionTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2351 = writer.prefix("ConversionTaskId");
    if let Some(var_2352) = &input.conversion_task_ids {
        let mut list_2354 = scope_2351.start_list(true, Some("item"));
        for item_2353 in var_2352 {
            #[allow(unused_mut)]
            let mut entry_2355 = list_2354.entry();
            entry_2355.string(item_2353);
        }
        list_2354.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2356 = writer.prefix("DryRun");
    if let Some(var_2357) = &input.dry_run {
        scope_2356.boolean(*var_2357);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_customer_gateways(
    input: &crate::input::DescribeCustomerGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2358 = writer.prefix("CustomerGatewayId");
    if let Some(var_2359) = &input.customer_gateway_ids {
        let mut list_2361 = scope_2358.start_list(true, Some("CustomerGatewayId"));
        for item_2360 in var_2359 {
            #[allow(unused_mut)]
            let mut entry_2362 = list_2361.entry();
            entry_2362.string(item_2360);
        }
        list_2361.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2363 = writer.prefix("Filter");
    if let Some(var_2364) = &input.filters {
        let mut list_2366 = scope_2363.start_list(true, Some("Filter"));
        for item_2365 in var_2364 {
            #[allow(unused_mut)]
            let mut entry_2367 = list_2366.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2367, item_2365)?;
        }
        list_2366.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2368 = writer.prefix("DryRun");
    if let Some(var_2369) = &input.dry_run {
        scope_2368.boolean(*var_2369);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_dhcp_options(
    input: &crate::input::DescribeDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2370 = writer.prefix("DhcpOptionsId");
    if let Some(var_2371) = &input.dhcp_options_ids {
        let mut list_2373 = scope_2370.start_list(true, Some("DhcpOptionsId"));
        for item_2372 in var_2371 {
            #[allow(unused_mut)]
            let mut entry_2374 = list_2373.entry();
            entry_2374.string(item_2372);
        }
        list_2373.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2375 = writer.prefix("Filter");
    if let Some(var_2376) = &input.filters {
        let mut list_2378 = scope_2375.start_list(true, Some("Filter"));
        for item_2377 in var_2376 {
            #[allow(unused_mut)]
            let mut entry_2379 = list_2378.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2379, item_2377)?;
        }
        list_2378.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2380 = writer.prefix("DryRun");
    if let Some(var_2381) = &input.dry_run {
        scope_2380.boolean(*var_2381);
    }
    #[allow(unused_mut)]
    let mut scope_2382 = writer.prefix("NextToken");
    if let Some(var_2383) = &input.next_token {
        scope_2382.string(var_2383);
    }
    #[allow(unused_mut)]
    let mut scope_2384 = writer.prefix("MaxResults");
    if let Some(var_2385) = &input.max_results {
        scope_2384.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2385).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_egress_only_internet_gateways(
    input: &crate::input::DescribeEgressOnlyInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEgressOnlyInternetGateways",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2386 = writer.prefix("DryRun");
    if let Some(var_2387) = &input.dry_run {
        scope_2386.boolean(*var_2387);
    }
    #[allow(unused_mut)]
    let mut scope_2388 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_2389) = &input.egress_only_internet_gateway_ids {
        let mut list_2391 = scope_2388.start_list(true, Some("item"));
        for item_2390 in var_2389 {
            #[allow(unused_mut)]
            let mut entry_2392 = list_2391.entry();
            entry_2392.string(item_2390);
        }
        list_2391.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2393 = writer.prefix("MaxResults");
    if let Some(var_2394) = &input.max_results {
        scope_2393.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2394).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2395 = writer.prefix("NextToken");
    if let Some(var_2396) = &input.next_token {
        scope_2395.string(var_2396);
    }
    #[allow(unused_mut)]
    let mut scope_2397 = writer.prefix("Filter");
    if let Some(var_2398) = &input.filters {
        let mut list_2400 = scope_2397.start_list(true, Some("Filter"));
        for item_2399 in var_2398 {
            #[allow(unused_mut)]
            let mut entry_2401 = list_2400.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2401, item_2399)?;
        }
        list_2400.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_elastic_gpus(
    input: &crate::input::DescribeElasticGpusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2402 = writer.prefix("ElasticGpuId");
    if let Some(var_2403) = &input.elastic_gpu_ids {
        let mut list_2405 = scope_2402.start_list(true, Some("item"));
        for item_2404 in var_2403 {
            #[allow(unused_mut)]
            let mut entry_2406 = list_2405.entry();
            entry_2406.string(item_2404);
        }
        list_2405.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2407 = writer.prefix("DryRun");
    if let Some(var_2408) = &input.dry_run {
        scope_2407.boolean(*var_2408);
    }
    #[allow(unused_mut)]
    let mut scope_2409 = writer.prefix("Filter");
    if let Some(var_2410) = &input.filters {
        let mut list_2412 = scope_2409.start_list(true, Some("Filter"));
        for item_2411 in var_2410 {
            #[allow(unused_mut)]
            let mut entry_2413 = list_2412.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2413, item_2411)?;
        }
        list_2412.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2414 = writer.prefix("MaxResults");
    if let Some(var_2415) = &input.max_results {
        scope_2414.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2415).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2416 = writer.prefix("NextToken");
    if let Some(var_2417) = &input.next_token {
        scope_2416.string(var_2417);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_image_tasks(
    input: &crate::input::DescribeExportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2418 = writer.prefix("DryRun");
    if let Some(var_2419) = &input.dry_run {
        scope_2418.boolean(*var_2419);
    }
    #[allow(unused_mut)]
    let mut scope_2420 = writer.prefix("Filter");
    if let Some(var_2421) = &input.filters {
        let mut list_2423 = scope_2420.start_list(true, Some("Filter"));
        for item_2422 in var_2421 {
            #[allow(unused_mut)]
            let mut entry_2424 = list_2423.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2424, item_2422)?;
        }
        list_2423.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2425 = writer.prefix("ExportImageTaskId");
    if let Some(var_2426) = &input.export_image_task_ids {
        let mut list_2428 = scope_2425.start_list(true, Some("ExportImageTaskId"));
        for item_2427 in var_2426 {
            #[allow(unused_mut)]
            let mut entry_2429 = list_2428.entry();
            entry_2429.string(item_2427);
        }
        list_2428.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2430 = writer.prefix("MaxResults");
    if let Some(var_2431) = &input.max_results {
        scope_2430.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2431).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2432 = writer.prefix("NextToken");
    if let Some(var_2433) = &input.next_token {
        scope_2432.string(var_2433);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2434 = writer.prefix("ExportTaskId");
    if let Some(var_2435) = &input.export_task_ids {
        let mut list_2437 = scope_2434.start_list(true, Some("ExportTaskId"));
        for item_2436 in var_2435 {
            #[allow(unused_mut)]
            let mut entry_2438 = list_2437.entry();
            entry_2438.string(item_2436);
        }
        list_2437.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2439 = writer.prefix("Filter");
    if let Some(var_2440) = &input.filters {
        let mut list_2442 = scope_2439.start_list(true, Some("Filter"));
        for item_2441 in var_2440 {
            #[allow(unused_mut)]
            let mut entry_2443 = list_2442.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2443, item_2441)?;
        }
        list_2442.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_launch_images(
    input: &crate::input::DescribeFastLaunchImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastLaunchImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2444 = writer.prefix("ImageId");
    if let Some(var_2445) = &input.image_ids {
        let mut list_2447 = scope_2444.start_list(true, Some("ImageId"));
        for item_2446 in var_2445 {
            #[allow(unused_mut)]
            let mut entry_2448 = list_2447.entry();
            entry_2448.string(item_2446);
        }
        list_2447.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2449 = writer.prefix("Filter");
    if let Some(var_2450) = &input.filters {
        let mut list_2452 = scope_2449.start_list(true, Some("Filter"));
        for item_2451 in var_2450 {
            #[allow(unused_mut)]
            let mut entry_2453 = list_2452.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2453, item_2451)?;
        }
        list_2452.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2454 = writer.prefix("MaxResults");
    if let Some(var_2455) = &input.max_results {
        scope_2454.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2455).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2456 = writer.prefix("NextToken");
    if let Some(var_2457) = &input.next_token {
        scope_2456.string(var_2457);
    }
    #[allow(unused_mut)]
    let mut scope_2458 = writer.prefix("DryRun");
    if let Some(var_2459) = &input.dry_run {
        scope_2458.boolean(*var_2459);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_snapshot_restores(
    input: &crate::input::DescribeFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2460 = writer.prefix("Filter");
    if let Some(var_2461) = &input.filters {
        let mut list_2463 = scope_2460.start_list(true, Some("Filter"));
        for item_2462 in var_2461 {
            #[allow(unused_mut)]
            let mut entry_2464 = list_2463.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2464, item_2462)?;
        }
        list_2463.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2465 = writer.prefix("MaxResults");
    if let Some(var_2466) = &input.max_results {
        scope_2465.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2466).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2467 = writer.prefix("NextToken");
    if let Some(var_2468) = &input.next_token {
        scope_2467.string(var_2468);
    }
    #[allow(unused_mut)]
    let mut scope_2469 = writer.prefix("DryRun");
    if let Some(var_2470) = &input.dry_run {
        scope_2469.boolean(*var_2470);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_history(
    input: &crate::input::DescribeFleetHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2471 = writer.prefix("DryRun");
    if let Some(var_2472) = &input.dry_run {
        scope_2471.boolean(*var_2472);
    }
    #[allow(unused_mut)]
    let mut scope_2473 = writer.prefix("EventType");
    if let Some(var_2474) = &input.event_type {
        scope_2473.string(var_2474.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2475 = writer.prefix("MaxResults");
    if let Some(var_2476) = &input.max_results {
        scope_2475.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2476).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2477 = writer.prefix("NextToken");
    if let Some(var_2478) = &input.next_token {
        scope_2477.string(var_2478);
    }
    #[allow(unused_mut)]
    let mut scope_2479 = writer.prefix("FleetId");
    if let Some(var_2480) = &input.fleet_id {
        scope_2479.string(var_2480);
    }
    #[allow(unused_mut)]
    let mut scope_2481 = writer.prefix("StartTime");
    if let Some(var_2482) = &input.start_time {
        scope_2481.date_time(var_2482, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_instances(
    input: &crate::input::DescribeFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2483 = writer.prefix("DryRun");
    if let Some(var_2484) = &input.dry_run {
        scope_2483.boolean(*var_2484);
    }
    #[allow(unused_mut)]
    let mut scope_2485 = writer.prefix("MaxResults");
    if let Some(var_2486) = &input.max_results {
        scope_2485.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2486).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2487 = writer.prefix("NextToken");
    if let Some(var_2488) = &input.next_token {
        scope_2487.string(var_2488);
    }
    #[allow(unused_mut)]
    let mut scope_2489 = writer.prefix("FleetId");
    if let Some(var_2490) = &input.fleet_id {
        scope_2489.string(var_2490);
    }
    #[allow(unused_mut)]
    let mut scope_2491 = writer.prefix("Filter");
    if let Some(var_2492) = &input.filters {
        let mut list_2494 = scope_2491.start_list(true, Some("Filter"));
        for item_2493 in var_2492 {
            #[allow(unused_mut)]
            let mut entry_2495 = list_2494.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2495, item_2493)?;
        }
        list_2494.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleets(
    input: &crate::input::DescribeFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2496 = writer.prefix("DryRun");
    if let Some(var_2497) = &input.dry_run {
        scope_2496.boolean(*var_2497);
    }
    #[allow(unused_mut)]
    let mut scope_2498 = writer.prefix("MaxResults");
    if let Some(var_2499) = &input.max_results {
        scope_2498.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2499).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2500 = writer.prefix("NextToken");
    if let Some(var_2501) = &input.next_token {
        scope_2500.string(var_2501);
    }
    #[allow(unused_mut)]
    let mut scope_2502 = writer.prefix("FleetId");
    if let Some(var_2503) = &input.fleet_ids {
        let mut list_2505 = scope_2502.start_list(true, None);
        for item_2504 in var_2503 {
            #[allow(unused_mut)]
            let mut entry_2506 = list_2505.entry();
            entry_2506.string(item_2504);
        }
        list_2505.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2507 = writer.prefix("Filter");
    if let Some(var_2508) = &input.filters {
        let mut list_2510 = scope_2507.start_list(true, Some("Filter"));
        for item_2509 in var_2508 {
            #[allow(unused_mut)]
            let mut entry_2511 = list_2510.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2511, item_2509)?;
        }
        list_2510.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_flow_logs(
    input: &crate::input::DescribeFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2512 = writer.prefix("DryRun");
    if let Some(var_2513) = &input.dry_run {
        scope_2512.boolean(*var_2513);
    }
    #[allow(unused_mut)]
    let mut scope_2514 = writer.prefix("Filter");
    if let Some(var_2515) = &input.filter {
        let mut list_2517 = scope_2514.start_list(true, Some("Filter"));
        for item_2516 in var_2515 {
            #[allow(unused_mut)]
            let mut entry_2518 = list_2517.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2518, item_2516)?;
        }
        list_2517.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2519 = writer.prefix("FlowLogId");
    if let Some(var_2520) = &input.flow_log_ids {
        let mut list_2522 = scope_2519.start_list(true, Some("item"));
        for item_2521 in var_2520 {
            #[allow(unused_mut)]
            let mut entry_2523 = list_2522.entry();
            entry_2523.string(item_2521);
        }
        list_2522.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2524 = writer.prefix("MaxResults");
    if let Some(var_2525) = &input.max_results {
        scope_2524.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2525).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2526 = writer.prefix("NextToken");
    if let Some(var_2527) = &input.next_token {
        scope_2526.string(var_2527);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_image_attribute(
    input: &crate::input::DescribeFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2528 = writer.prefix("DryRun");
    if let Some(var_2529) = &input.dry_run {
        scope_2528.boolean(*var_2529);
    }
    #[allow(unused_mut)]
    let mut scope_2530 = writer.prefix("FpgaImageId");
    if let Some(var_2531) = &input.fpga_image_id {
        scope_2530.string(var_2531);
    }
    #[allow(unused_mut)]
    let mut scope_2532 = writer.prefix("Attribute");
    if let Some(var_2533) = &input.attribute {
        scope_2532.string(var_2533.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_images(
    input: &crate::input::DescribeFpgaImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2534 = writer.prefix("DryRun");
    if let Some(var_2535) = &input.dry_run {
        scope_2534.boolean(*var_2535);
    }
    #[allow(unused_mut)]
    let mut scope_2536 = writer.prefix("FpgaImageId");
    if let Some(var_2537) = &input.fpga_image_ids {
        let mut list_2539 = scope_2536.start_list(true, Some("item"));
        for item_2538 in var_2537 {
            #[allow(unused_mut)]
            let mut entry_2540 = list_2539.entry();
            entry_2540.string(item_2538);
        }
        list_2539.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2541 = writer.prefix("Owner");
    if let Some(var_2542) = &input.owners {
        let mut list_2544 = scope_2541.start_list(true, Some("Owner"));
        for item_2543 in var_2542 {
            #[allow(unused_mut)]
            let mut entry_2545 = list_2544.entry();
            entry_2545.string(item_2543);
        }
        list_2544.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2546 = writer.prefix("Filter");
    if let Some(var_2547) = &input.filters {
        let mut list_2549 = scope_2546.start_list(true, Some("Filter"));
        for item_2548 in var_2547 {
            #[allow(unused_mut)]
            let mut entry_2550 = list_2549.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2550, item_2548)?;
        }
        list_2549.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2551 = writer.prefix("NextToken");
    if let Some(var_2552) = &input.next_token {
        scope_2551.string(var_2552);
    }
    #[allow(unused_mut)]
    let mut scope_2553 = writer.prefix("MaxResults");
    if let Some(var_2554) = &input.max_results {
        scope_2553.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2554).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservation_offerings(
    input: &crate::input::DescribeHostReservationOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeHostReservationOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2555 = writer.prefix("Filter");
    if let Some(var_2556) = &input.filter {
        let mut list_2558 = scope_2555.start_list(true, Some("Filter"));
        for item_2557 in var_2556 {
            #[allow(unused_mut)]
            let mut entry_2559 = list_2558.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2559, item_2557)?;
        }
        list_2558.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2560 = writer.prefix("MaxDuration");
    if let Some(var_2561) = &input.max_duration {
        scope_2560.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2561).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2562 = writer.prefix("MaxResults");
    if let Some(var_2563) = &input.max_results {
        scope_2562.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2563).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2564 = writer.prefix("MinDuration");
    if let Some(var_2565) = &input.min_duration {
        scope_2564.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2565).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2566 = writer.prefix("NextToken");
    if let Some(var_2567) = &input.next_token {
        scope_2566.string(var_2567);
    }
    #[allow(unused_mut)]
    let mut scope_2568 = writer.prefix("OfferingId");
    if let Some(var_2569) = &input.offering_id {
        scope_2568.string(var_2569);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservations(
    input: &crate::input::DescribeHostReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2570 = writer.prefix("Filter");
    if let Some(var_2571) = &input.filter {
        let mut list_2573 = scope_2570.start_list(true, Some("Filter"));
        for item_2572 in var_2571 {
            #[allow(unused_mut)]
            let mut entry_2574 = list_2573.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2574, item_2572)?;
        }
        list_2573.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2575 = writer.prefix("HostReservationIdSet");
    if let Some(var_2576) = &input.host_reservation_id_set {
        let mut list_2578 = scope_2575.start_list(true, Some("item"));
        for item_2577 in var_2576 {
            #[allow(unused_mut)]
            let mut entry_2579 = list_2578.entry();
            entry_2579.string(item_2577);
        }
        list_2578.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2580 = writer.prefix("MaxResults");
    if let Some(var_2581) = &input.max_results {
        scope_2580.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2581).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2582 = writer.prefix("NextToken");
    if let Some(var_2583) = &input.next_token {
        scope_2582.string(var_2583);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hosts(
    input: &crate::input::DescribeHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2584 = writer.prefix("Filter");
    if let Some(var_2585) = &input.filter {
        let mut list_2587 = scope_2584.start_list(true, Some("Filter"));
        for item_2586 in var_2585 {
            #[allow(unused_mut)]
            let mut entry_2588 = list_2587.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2588, item_2586)?;
        }
        list_2587.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2589 = writer.prefix("HostId");
    if let Some(var_2590) = &input.host_ids {
        let mut list_2592 = scope_2589.start_list(true, Some("item"));
        for item_2591 in var_2590 {
            #[allow(unused_mut)]
            let mut entry_2593 = list_2592.entry();
            entry_2593.string(item_2591);
        }
        list_2592.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2594 = writer.prefix("MaxResults");
    if let Some(var_2595) = &input.max_results {
        scope_2594.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2595).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2596 = writer.prefix("NextToken");
    if let Some(var_2597) = &input.next_token {
        scope_2596.string(var_2597);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_iam_instance_profile_associations(
    input: &crate::input::DescribeIamInstanceProfileAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeIamInstanceProfileAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2598 = writer.prefix("AssociationId");
    if let Some(var_2599) = &input.association_ids {
        let mut list_2601 = scope_2598.start_list(true, Some("AssociationId"));
        for item_2600 in var_2599 {
            #[allow(unused_mut)]
            let mut entry_2602 = list_2601.entry();
            entry_2602.string(item_2600);
        }
        list_2601.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2603 = writer.prefix("Filter");
    if let Some(var_2604) = &input.filters {
        let mut list_2606 = scope_2603.start_list(true, Some("Filter"));
        for item_2605 in var_2604 {
            #[allow(unused_mut)]
            let mut entry_2607 = list_2606.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2607, item_2605)?;
        }
        list_2606.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2608 = writer.prefix("MaxResults");
    if let Some(var_2609) = &input.max_results {
        scope_2608.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2609).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2610 = writer.prefix("NextToken");
    if let Some(var_2611) = &input.next_token {
        scope_2610.string(var_2611);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_identity_id_format(
    input: &crate::input::DescribeIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2612 = writer.prefix("PrincipalArn");
    if let Some(var_2613) = &input.principal_arn {
        scope_2612.string(var_2613);
    }
    #[allow(unused_mut)]
    let mut scope_2614 = writer.prefix("Resource");
    if let Some(var_2615) = &input.resource {
        scope_2614.string(var_2615);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_id_format(
    input: &crate::input::DescribeIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2616 = writer.prefix("Resource");
    if let Some(var_2617) = &input.resource {
        scope_2616.string(var_2617);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_image_attribute(
    input: &crate::input::DescribeImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2618 = writer.prefix("Attribute");
    if let Some(var_2619) = &input.attribute {
        scope_2618.string(var_2619.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2620 = writer.prefix("ImageId");
    if let Some(var_2621) = &input.image_id {
        scope_2620.string(var_2621);
    }
    #[allow(unused_mut)]
    let mut scope_2622 = writer.prefix("DryRun");
    if let Some(var_2623) = &input.dry_run {
        scope_2622.boolean(*var_2623);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_images(
    input: &crate::input::DescribeImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2624 = writer.prefix("ExecutableBy");
    if let Some(var_2625) = &input.executable_users {
        let mut list_2627 = scope_2624.start_list(true, Some("ExecutableBy"));
        for item_2626 in var_2625 {
            #[allow(unused_mut)]
            let mut entry_2628 = list_2627.entry();
            entry_2628.string(item_2626);
        }
        list_2627.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2629 = writer.prefix("Filter");
    if let Some(var_2630) = &input.filters {
        let mut list_2632 = scope_2629.start_list(true, Some("Filter"));
        for item_2631 in var_2630 {
            #[allow(unused_mut)]
            let mut entry_2633 = list_2632.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2633, item_2631)?;
        }
        list_2632.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2634 = writer.prefix("ImageId");
    if let Some(var_2635) = &input.image_ids {
        let mut list_2637 = scope_2634.start_list(true, Some("ImageId"));
        for item_2636 in var_2635 {
            #[allow(unused_mut)]
            let mut entry_2638 = list_2637.entry();
            entry_2638.string(item_2636);
        }
        list_2637.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2639 = writer.prefix("Owner");
    if let Some(var_2640) = &input.owners {
        let mut list_2642 = scope_2639.start_list(true, Some("Owner"));
        for item_2641 in var_2640 {
            #[allow(unused_mut)]
            let mut entry_2643 = list_2642.entry();
            entry_2643.string(item_2641);
        }
        list_2642.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2644 = writer.prefix("IncludeDeprecated");
    if let Some(var_2645) = &input.include_deprecated {
        scope_2644.boolean(*var_2645);
    }
    #[allow(unused_mut)]
    let mut scope_2646 = writer.prefix("DryRun");
    if let Some(var_2647) = &input.dry_run {
        scope_2646.boolean(*var_2647);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_image_tasks(
    input: &crate::input::DescribeImportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2648 = writer.prefix("DryRun");
    if let Some(var_2649) = &input.dry_run {
        scope_2648.boolean(*var_2649);
    }
    #[allow(unused_mut)]
    let mut scope_2650 = writer.prefix("Filters");
    if let Some(var_2651) = &input.filters {
        let mut list_2653 = scope_2650.start_list(true, Some("Filter"));
        for item_2652 in var_2651 {
            #[allow(unused_mut)]
            let mut entry_2654 = list_2653.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2654, item_2652)?;
        }
        list_2653.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2655 = writer.prefix("ImportTaskId");
    if let Some(var_2656) = &input.import_task_ids {
        let mut list_2658 = scope_2655.start_list(true, Some("ImportTaskId"));
        for item_2657 in var_2656 {
            #[allow(unused_mut)]
            let mut entry_2659 = list_2658.entry();
            entry_2659.string(item_2657);
        }
        list_2658.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2660 = writer.prefix("MaxResults");
    if let Some(var_2661) = &input.max_results {
        scope_2660.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2661).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2662 = writer.prefix("NextToken");
    if let Some(var_2663) = &input.next_token {
        scope_2662.string(var_2663);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_snapshot_tasks(
    input: &crate::input::DescribeImportSnapshotTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2664 = writer.prefix("DryRun");
    if let Some(var_2665) = &input.dry_run {
        scope_2664.boolean(*var_2665);
    }
    #[allow(unused_mut)]
    let mut scope_2666 = writer.prefix("Filters");
    if let Some(var_2667) = &input.filters {
        let mut list_2669 = scope_2666.start_list(true, Some("Filter"));
        for item_2668 in var_2667 {
            #[allow(unused_mut)]
            let mut entry_2670 = list_2669.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2670, item_2668)?;
        }
        list_2669.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2671 = writer.prefix("ImportTaskId");
    if let Some(var_2672) = &input.import_task_ids {
        let mut list_2674 = scope_2671.start_list(true, Some("ImportTaskId"));
        for item_2673 in var_2672 {
            #[allow(unused_mut)]
            let mut entry_2675 = list_2674.entry();
            entry_2675.string(item_2673);
        }
        list_2674.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2676 = writer.prefix("MaxResults");
    if let Some(var_2677) = &input.max_results {
        scope_2676.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2677).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2678 = writer.prefix("NextToken");
    if let Some(var_2679) = &input.next_token {
        scope_2678.string(var_2679);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_attribute(
    input: &crate::input::DescribeInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2680 = writer.prefix("Attribute");
    if let Some(var_2681) = &input.attribute {
        scope_2680.string(var_2681.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2682 = writer.prefix("DryRun");
    if let Some(var_2683) = &input.dry_run {
        scope_2682.boolean(*var_2683);
    }
    #[allow(unused_mut)]
    let mut scope_2684 = writer.prefix("InstanceId");
    if let Some(var_2685) = &input.instance_id {
        scope_2684.string(var_2685);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_credit_specifications(
    input: &crate::input::DescribeInstanceCreditSpecificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceCreditSpecifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2686 = writer.prefix("DryRun");
    if let Some(var_2687) = &input.dry_run {
        scope_2686.boolean(*var_2687);
    }
    #[allow(unused_mut)]
    let mut scope_2688 = writer.prefix("Filter");
    if let Some(var_2689) = &input.filters {
        let mut list_2691 = scope_2688.start_list(true, Some("Filter"));
        for item_2690 in var_2689 {
            #[allow(unused_mut)]
            let mut entry_2692 = list_2691.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2692, item_2690)?;
        }
        list_2691.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2693 = writer.prefix("InstanceId");
    if let Some(var_2694) = &input.instance_ids {
        let mut list_2696 = scope_2693.start_list(true, Some("InstanceId"));
        for item_2695 in var_2694 {
            #[allow(unused_mut)]
            let mut entry_2697 = list_2696.entry();
            entry_2697.string(item_2695);
        }
        list_2696.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2698 = writer.prefix("MaxResults");
    if let Some(var_2699) = &input.max_results {
        scope_2698.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2699).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2700 = writer.prefix("NextToken");
    if let Some(var_2701) = &input.next_token {
        scope_2700.string(var_2701);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_notification_attributes(
    input: &crate::input::DescribeInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2702 = writer.prefix("DryRun");
    if let Some(var_2703) = &input.dry_run {
        scope_2702.boolean(*var_2703);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_windows(
    input: &crate::input::DescribeInstanceEventWindowsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventWindows", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2704 = writer.prefix("DryRun");
    if let Some(var_2705) = &input.dry_run {
        scope_2704.boolean(*var_2705);
    }
    #[allow(unused_mut)]
    let mut scope_2706 = writer.prefix("InstanceEventWindowId");
    if let Some(var_2707) = &input.instance_event_window_ids {
        let mut list_2709 = scope_2706.start_list(true, Some("InstanceEventWindowId"));
        for item_2708 in var_2707 {
            #[allow(unused_mut)]
            let mut entry_2710 = list_2709.entry();
            entry_2710.string(item_2708);
        }
        list_2709.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2711 = writer.prefix("Filter");
    if let Some(var_2712) = &input.filters {
        let mut list_2714 = scope_2711.start_list(true, Some("Filter"));
        for item_2713 in var_2712 {
            #[allow(unused_mut)]
            let mut entry_2715 = list_2714.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2715, item_2713)?;
        }
        list_2714.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2716 = writer.prefix("MaxResults");
    if let Some(var_2717) = &input.max_results {
        scope_2716.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2717).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2718 = writer.prefix("NextToken");
    if let Some(var_2719) = &input.next_token {
        scope_2718.string(var_2719);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances(
    input: &crate::input::DescribeInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2720 = writer.prefix("Filter");
    if let Some(var_2721) = &input.filters {
        let mut list_2723 = scope_2720.start_list(true, Some("Filter"));
        for item_2722 in var_2721 {
            #[allow(unused_mut)]
            let mut entry_2724 = list_2723.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2724, item_2722)?;
        }
        list_2723.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2725 = writer.prefix("InstanceId");
    if let Some(var_2726) = &input.instance_ids {
        let mut list_2728 = scope_2725.start_list(true, Some("InstanceId"));
        for item_2727 in var_2726 {
            #[allow(unused_mut)]
            let mut entry_2729 = list_2728.entry();
            entry_2729.string(item_2727);
        }
        list_2728.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2730 = writer.prefix("DryRun");
    if let Some(var_2731) = &input.dry_run {
        scope_2730.boolean(*var_2731);
    }
    #[allow(unused_mut)]
    let mut scope_2732 = writer.prefix("MaxResults");
    if let Some(var_2733) = &input.max_results {
        scope_2732.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2733).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2734 = writer.prefix("NextToken");
    if let Some(var_2735) = &input.next_token {
        scope_2734.string(var_2735);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_status(
    input: &crate::input::DescribeInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2736 = writer.prefix("Filter");
    if let Some(var_2737) = &input.filters {
        let mut list_2739 = scope_2736.start_list(true, Some("Filter"));
        for item_2738 in var_2737 {
            #[allow(unused_mut)]
            let mut entry_2740 = list_2739.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2740, item_2738)?;
        }
        list_2739.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2741 = writer.prefix("InstanceId");
    if let Some(var_2742) = &input.instance_ids {
        let mut list_2744 = scope_2741.start_list(true, Some("InstanceId"));
        for item_2743 in var_2742 {
            #[allow(unused_mut)]
            let mut entry_2745 = list_2744.entry();
            entry_2745.string(item_2743);
        }
        list_2744.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2746 = writer.prefix("MaxResults");
    if let Some(var_2747) = &input.max_results {
        scope_2746.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2747).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2748 = writer.prefix("NextToken");
    if let Some(var_2749) = &input.next_token {
        scope_2748.string(var_2749);
    }
    #[allow(unused_mut)]
    let mut scope_2750 = writer.prefix("DryRun");
    if let Some(var_2751) = &input.dry_run {
        scope_2750.boolean(*var_2751);
    }
    #[allow(unused_mut)]
    let mut scope_2752 = writer.prefix("IncludeAllInstances");
    if let Some(var_2753) = &input.include_all_instances {
        scope_2752.boolean(*var_2753);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_type_offerings(
    input: &crate::input::DescribeInstanceTypeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2754 = writer.prefix("DryRun");
    if let Some(var_2755) = &input.dry_run {
        scope_2754.boolean(*var_2755);
    }
    #[allow(unused_mut)]
    let mut scope_2756 = writer.prefix("LocationType");
    if let Some(var_2757) = &input.location_type {
        scope_2756.string(var_2757.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2758 = writer.prefix("Filter");
    if let Some(var_2759) = &input.filters {
        let mut list_2761 = scope_2758.start_list(true, Some("Filter"));
        for item_2760 in var_2759 {
            #[allow(unused_mut)]
            let mut entry_2762 = list_2761.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2762, item_2760)?;
        }
        list_2761.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2763 = writer.prefix("MaxResults");
    if let Some(var_2764) = &input.max_results {
        scope_2763.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2764).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2765 = writer.prefix("NextToken");
    if let Some(var_2766) = &input.next_token {
        scope_2765.string(var_2766);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_types(
    input: &crate::input::DescribeInstanceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2767 = writer.prefix("DryRun");
    if let Some(var_2768) = &input.dry_run {
        scope_2767.boolean(*var_2768);
    }
    #[allow(unused_mut)]
    let mut scope_2769 = writer.prefix("InstanceType");
    if let Some(var_2770) = &input.instance_types {
        let mut list_2772 = scope_2769.start_list(true, None);
        for item_2771 in var_2770 {
            #[allow(unused_mut)]
            let mut entry_2773 = list_2772.entry();
            entry_2773.string(item_2771.as_str());
        }
        list_2772.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2774 = writer.prefix("Filter");
    if let Some(var_2775) = &input.filters {
        let mut list_2777 = scope_2774.start_list(true, Some("Filter"));
        for item_2776 in var_2775 {
            #[allow(unused_mut)]
            let mut entry_2778 = list_2777.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2778, item_2776)?;
        }
        list_2777.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2779 = writer.prefix("MaxResults");
    if let Some(var_2780) = &input.max_results {
        scope_2779.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2780).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2781 = writer.prefix("NextToken");
    if let Some(var_2782) = &input.next_token {
        scope_2781.string(var_2782);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_internet_gateways(
    input: &crate::input::DescribeInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2783 = writer.prefix("Filter");
    if let Some(var_2784) = &input.filters {
        let mut list_2786 = scope_2783.start_list(true, Some("Filter"));
        for item_2785 in var_2784 {
            #[allow(unused_mut)]
            let mut entry_2787 = list_2786.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2787, item_2785)?;
        }
        list_2786.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2788 = writer.prefix("DryRun");
    if let Some(var_2789) = &input.dry_run {
        scope_2788.boolean(*var_2789);
    }
    #[allow(unused_mut)]
    let mut scope_2790 = writer.prefix("InternetGatewayId");
    if let Some(var_2791) = &input.internet_gateway_ids {
        let mut list_2793 = scope_2790.start_list(true, Some("item"));
        for item_2792 in var_2791 {
            #[allow(unused_mut)]
            let mut entry_2794 = list_2793.entry();
            entry_2794.string(item_2792);
        }
        list_2793.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2795 = writer.prefix("NextToken");
    if let Some(var_2796) = &input.next_token {
        scope_2795.string(var_2796);
    }
    #[allow(unused_mut)]
    let mut scope_2797 = writer.prefix("MaxResults");
    if let Some(var_2798) = &input.max_results {
        scope_2797.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2798).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_pools(
    input: &crate::input::DescribeIpamPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2799 = writer.prefix("DryRun");
    if let Some(var_2800) = &input.dry_run {
        scope_2799.boolean(*var_2800);
    }
    #[allow(unused_mut)]
    let mut scope_2801 = writer.prefix("Filter");
    if let Some(var_2802) = &input.filters {
        let mut list_2804 = scope_2801.start_list(true, Some("Filter"));
        for item_2803 in var_2802 {
            #[allow(unused_mut)]
            let mut entry_2805 = list_2804.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2805, item_2803)?;
        }
        list_2804.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2806 = writer.prefix("MaxResults");
    if let Some(var_2807) = &input.max_results {
        scope_2806.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2807).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2808 = writer.prefix("NextToken");
    if let Some(var_2809) = &input.next_token {
        scope_2808.string(var_2809);
    }
    #[allow(unused_mut)]
    let mut scope_2810 = writer.prefix("IpamPoolId");
    if let Some(var_2811) = &input.ipam_pool_ids {
        let mut list_2813 = scope_2810.start_list(true, Some("item"));
        for item_2812 in var_2811 {
            #[allow(unused_mut)]
            let mut entry_2814 = list_2813.entry();
            entry_2814.string(item_2812);
        }
        list_2813.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipams(
    input: &crate::input::DescribeIpamsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpams", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2815 = writer.prefix("DryRun");
    if let Some(var_2816) = &input.dry_run {
        scope_2815.boolean(*var_2816);
    }
    #[allow(unused_mut)]
    let mut scope_2817 = writer.prefix("Filter");
    if let Some(var_2818) = &input.filters {
        let mut list_2820 = scope_2817.start_list(true, Some("Filter"));
        for item_2819 in var_2818 {
            #[allow(unused_mut)]
            let mut entry_2821 = list_2820.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2821, item_2819)?;
        }
        list_2820.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2822 = writer.prefix("MaxResults");
    if let Some(var_2823) = &input.max_results {
        scope_2822.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2823).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2824 = writer.prefix("NextToken");
    if let Some(var_2825) = &input.next_token {
        scope_2824.string(var_2825);
    }
    #[allow(unused_mut)]
    let mut scope_2826 = writer.prefix("IpamId");
    if let Some(var_2827) = &input.ipam_ids {
        let mut list_2829 = scope_2826.start_list(true, Some("item"));
        for item_2828 in var_2827 {
            #[allow(unused_mut)]
            let mut entry_2830 = list_2829.entry();
            entry_2830.string(item_2828);
        }
        list_2829.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_scopes(
    input: &crate::input::DescribeIpamScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamScopes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2831 = writer.prefix("DryRun");
    if let Some(var_2832) = &input.dry_run {
        scope_2831.boolean(*var_2832);
    }
    #[allow(unused_mut)]
    let mut scope_2833 = writer.prefix("Filter");
    if let Some(var_2834) = &input.filters {
        let mut list_2836 = scope_2833.start_list(true, Some("Filter"));
        for item_2835 in var_2834 {
            #[allow(unused_mut)]
            let mut entry_2837 = list_2836.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2837, item_2835)?;
        }
        list_2836.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2838 = writer.prefix("MaxResults");
    if let Some(var_2839) = &input.max_results {
        scope_2838.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2839).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2840 = writer.prefix("NextToken");
    if let Some(var_2841) = &input.next_token {
        scope_2840.string(var_2841);
    }
    #[allow(unused_mut)]
    let mut scope_2842 = writer.prefix("IpamScopeId");
    if let Some(var_2843) = &input.ipam_scope_ids {
        let mut list_2845 = scope_2842.start_list(true, Some("item"));
        for item_2844 in var_2843 {
            #[allow(unused_mut)]
            let mut entry_2846 = list_2845.entry();
            entry_2846.string(item_2844);
        }
        list_2845.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipv6_pools(
    input: &crate::input::DescribeIpv6PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2847 = writer.prefix("PoolId");
    if let Some(var_2848) = &input.pool_ids {
        let mut list_2850 = scope_2847.start_list(true, Some("item"));
        for item_2849 in var_2848 {
            #[allow(unused_mut)]
            let mut entry_2851 = list_2850.entry();
            entry_2851.string(item_2849);
        }
        list_2850.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2852 = writer.prefix("NextToken");
    if let Some(var_2853) = &input.next_token {
        scope_2852.string(var_2853);
    }
    #[allow(unused_mut)]
    let mut scope_2854 = writer.prefix("MaxResults");
    if let Some(var_2855) = &input.max_results {
        scope_2854.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2855).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2856 = writer.prefix("DryRun");
    if let Some(var_2857) = &input.dry_run {
        scope_2856.boolean(*var_2857);
    }
    #[allow(unused_mut)]
    let mut scope_2858 = writer.prefix("Filter");
    if let Some(var_2859) = &input.filters {
        let mut list_2861 = scope_2858.start_list(true, Some("Filter"));
        for item_2860 in var_2859 {
            #[allow(unused_mut)]
            let mut entry_2862 = list_2861.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2862, item_2860)?;
        }
        list_2861.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_key_pairs(
    input: &crate::input::DescribeKeyPairsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2863 = writer.prefix("Filter");
    if let Some(var_2864) = &input.filters {
        let mut list_2866 = scope_2863.start_list(true, Some("Filter"));
        for item_2865 in var_2864 {
            #[allow(unused_mut)]
            let mut entry_2867 = list_2866.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2867, item_2865)?;
        }
        list_2866.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2868 = writer.prefix("KeyName");
    if let Some(var_2869) = &input.key_names {
        let mut list_2871 = scope_2868.start_list(true, Some("KeyName"));
        for item_2870 in var_2869 {
            #[allow(unused_mut)]
            let mut entry_2872 = list_2871.entry();
            entry_2872.string(item_2870);
        }
        list_2871.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2873 = writer.prefix("KeyPairId");
    if let Some(var_2874) = &input.key_pair_ids {
        let mut list_2876 = scope_2873.start_list(true, Some("KeyPairId"));
        for item_2875 in var_2874 {
            #[allow(unused_mut)]
            let mut entry_2877 = list_2876.entry();
            entry_2877.string(item_2875);
        }
        list_2876.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2878 = writer.prefix("DryRun");
    if let Some(var_2879) = &input.dry_run {
        scope_2878.boolean(*var_2879);
    }
    #[allow(unused_mut)]
    let mut scope_2880 = writer.prefix("IncludePublicKey");
    if let Some(var_2881) = &input.include_public_key {
        scope_2880.boolean(*var_2881);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_templates(
    input: &crate::input::DescribeLaunchTemplatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2882 = writer.prefix("DryRun");
    if let Some(var_2883) = &input.dry_run {
        scope_2882.boolean(*var_2883);
    }
    #[allow(unused_mut)]
    let mut scope_2884 = writer.prefix("LaunchTemplateId");
    if let Some(var_2885) = &input.launch_template_ids {
        let mut list_2887 = scope_2884.start_list(true, Some("item"));
        for item_2886 in var_2885 {
            #[allow(unused_mut)]
            let mut entry_2888 = list_2887.entry();
            entry_2888.string(item_2886);
        }
        list_2887.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2889 = writer.prefix("LaunchTemplateName");
    if let Some(var_2890) = &input.launch_template_names {
        let mut list_2892 = scope_2889.start_list(true, Some("item"));
        for item_2891 in var_2890 {
            #[allow(unused_mut)]
            let mut entry_2893 = list_2892.entry();
            entry_2893.string(item_2891);
        }
        list_2892.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2894 = writer.prefix("Filter");
    if let Some(var_2895) = &input.filters {
        let mut list_2897 = scope_2894.start_list(true, Some("Filter"));
        for item_2896 in var_2895 {
            #[allow(unused_mut)]
            let mut entry_2898 = list_2897.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2898, item_2896)?;
        }
        list_2897.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2899 = writer.prefix("NextToken");
    if let Some(var_2900) = &input.next_token {
        scope_2899.string(var_2900);
    }
    #[allow(unused_mut)]
    let mut scope_2901 = writer.prefix("MaxResults");
    if let Some(var_2902) = &input.max_results {
        scope_2901.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2902).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_template_versions(
    input: &crate::input::DescribeLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLaunchTemplateVersions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2903 = writer.prefix("DryRun");
    if let Some(var_2904) = &input.dry_run {
        scope_2903.boolean(*var_2904);
    }
    #[allow(unused_mut)]
    let mut scope_2905 = writer.prefix("LaunchTemplateId");
    if let Some(var_2906) = &input.launch_template_id {
        scope_2905.string(var_2906);
    }
    #[allow(unused_mut)]
    let mut scope_2907 = writer.prefix("LaunchTemplateName");
    if let Some(var_2908) = &input.launch_template_name {
        scope_2907.string(var_2908);
    }
    #[allow(unused_mut)]
    let mut scope_2909 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_2910) = &input.versions {
        let mut list_2912 = scope_2909.start_list(true, Some("item"));
        for item_2911 in var_2910 {
            #[allow(unused_mut)]
            let mut entry_2913 = list_2912.entry();
            entry_2913.string(item_2911);
        }
        list_2912.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2914 = writer.prefix("MinVersion");
    if let Some(var_2915) = &input.min_version {
        scope_2914.string(var_2915);
    }
    #[allow(unused_mut)]
    let mut scope_2916 = writer.prefix("MaxVersion");
    if let Some(var_2917) = &input.max_version {
        scope_2916.string(var_2917);
    }
    #[allow(unused_mut)]
    let mut scope_2918 = writer.prefix("NextToken");
    if let Some(var_2919) = &input.next_token {
        scope_2918.string(var_2919);
    }
    #[allow(unused_mut)]
    let mut scope_2920 = writer.prefix("MaxResults");
    if let Some(var_2921) = &input.max_results {
        scope_2920.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2921).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2922 = writer.prefix("Filter");
    if let Some(var_2923) = &input.filters {
        let mut list_2925 = scope_2922.start_list(true, Some("Filter"));
        for item_2924 in var_2923 {
            #[allow(unused_mut)]
            let mut entry_2926 = list_2925.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2926, item_2924)?;
        }
        list_2925.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_tables(
    input: &crate::input::DescribeLocalGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2927 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_2928) = &input.local_gateway_route_table_ids {
        let mut list_2930 = scope_2927.start_list(true, Some("item"));
        for item_2929 in var_2928 {
            #[allow(unused_mut)]
            let mut entry_2931 = list_2930.entry();
            entry_2931.string(item_2929);
        }
        list_2930.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2932 = writer.prefix("Filter");
    if let Some(var_2933) = &input.filters {
        let mut list_2935 = scope_2932.start_list(true, Some("Filter"));
        for item_2934 in var_2933 {
            #[allow(unused_mut)]
            let mut entry_2936 = list_2935.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2936, item_2934)?;
        }
        list_2935.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2937 = writer.prefix("MaxResults");
    if let Some(var_2938) = &input.max_results {
        scope_2937.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2938).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2939 = writer.prefix("NextToken");
    if let Some(var_2940) = &input.next_token {
        scope_2939.string(var_2940);
    }
    #[allow(unused_mut)]
    let mut scope_2941 = writer.prefix("DryRun");
    if let Some(var_2942) = &input.dry_run {
        scope_2941.boolean(*var_2942);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_virtual_interface_group_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2943 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_2944) = &input.local_gateway_route_table_virtual_interface_group_association_ids
    {
        let mut list_2946 = scope_2943.start_list(true, Some("item"));
        for item_2945 in var_2944 {
            #[allow(unused_mut)]
            let mut entry_2947 = list_2946.entry();
            entry_2947.string(item_2945);
        }
        list_2946.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2948 = writer.prefix("Filter");
    if let Some(var_2949) = &input.filters {
        let mut list_2951 = scope_2948.start_list(true, Some("Filter"));
        for item_2950 in var_2949 {
            #[allow(unused_mut)]
            let mut entry_2952 = list_2951.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2952, item_2950)?;
        }
        list_2951.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2953 = writer.prefix("MaxResults");
    if let Some(var_2954) = &input.max_results {
        scope_2953.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2954).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2955 = writer.prefix("NextToken");
    if let Some(var_2956) = &input.next_token {
        scope_2955.string(var_2956);
    }
    #[allow(unused_mut)]
    let mut scope_2957 = writer.prefix("DryRun");
    if let Some(var_2958) = &input.dry_run {
        scope_2957.boolean(*var_2958);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_vpc_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVpcAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2959 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_2960) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_2962 = scope_2959.start_list(true, Some("item"));
        for item_2961 in var_2960 {
            #[allow(unused_mut)]
            let mut entry_2963 = list_2962.entry();
            entry_2963.string(item_2961);
        }
        list_2962.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2964 = writer.prefix("Filter");
    if let Some(var_2965) = &input.filters {
        let mut list_2967 = scope_2964.start_list(true, Some("Filter"));
        for item_2966 in var_2965 {
            #[allow(unused_mut)]
            let mut entry_2968 = list_2967.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2968, item_2966)?;
        }
        list_2967.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2969 = writer.prefix("MaxResults");
    if let Some(var_2970) = &input.max_results {
        scope_2969.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2970).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2971 = writer.prefix("NextToken");
    if let Some(var_2972) = &input.next_token {
        scope_2971.string(var_2972);
    }
    #[allow(unused_mut)]
    let mut scope_2973 = writer.prefix("DryRun");
    if let Some(var_2974) = &input.dry_run {
        scope_2973.boolean(*var_2974);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateways(
    input: &crate::input::DescribeLocalGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2975 = writer.prefix("LocalGatewayId");
    if let Some(var_2976) = &input.local_gateway_ids {
        let mut list_2978 = scope_2975.start_list(true, Some("item"));
        for item_2977 in var_2976 {
            #[allow(unused_mut)]
            let mut entry_2979 = list_2978.entry();
            entry_2979.string(item_2977);
        }
        list_2978.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2980 = writer.prefix("Filter");
    if let Some(var_2981) = &input.filters {
        let mut list_2983 = scope_2980.start_list(true, Some("Filter"));
        for item_2982 in var_2981 {
            #[allow(unused_mut)]
            let mut entry_2984 = list_2983.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2984, item_2982)?;
        }
        list_2983.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2985 = writer.prefix("MaxResults");
    if let Some(var_2986) = &input.max_results {
        scope_2985.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2986).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2987 = writer.prefix("NextToken");
    if let Some(var_2988) = &input.next_token {
        scope_2987.string(var_2988);
    }
    #[allow(unused_mut)]
    let mut scope_2989 = writer.prefix("DryRun");
    if let Some(var_2990) = &input.dry_run {
        scope_2989.boolean(*var_2990);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interface_groups(
    input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaceGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2991 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_2992) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_2994 = scope_2991.start_list(true, Some("item"));
        for item_2993 in var_2992 {
            #[allow(unused_mut)]
            let mut entry_2995 = list_2994.entry();
            entry_2995.string(item_2993);
        }
        list_2994.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2996 = writer.prefix("Filter");
    if let Some(var_2997) = &input.filters {
        let mut list_2999 = scope_2996.start_list(true, Some("Filter"));
        for item_2998 in var_2997 {
            #[allow(unused_mut)]
            let mut entry_3000 = list_2999.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3000, item_2998)?;
        }
        list_2999.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3001 = writer.prefix("MaxResults");
    if let Some(var_3002) = &input.max_results {
        scope_3001.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3002).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3003 = writer.prefix("NextToken");
    if let Some(var_3004) = &input.next_token {
        scope_3003.string(var_3004);
    }
    #[allow(unused_mut)]
    let mut scope_3005 = writer.prefix("DryRun");
    if let Some(var_3006) = &input.dry_run {
        scope_3005.boolean(*var_3006);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interfaces(
    input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaces",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3007 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_3008) = &input.local_gateway_virtual_interface_ids {
        let mut list_3010 = scope_3007.start_list(true, Some("item"));
        for item_3009 in var_3008 {
            #[allow(unused_mut)]
            let mut entry_3011 = list_3010.entry();
            entry_3011.string(item_3009);
        }
        list_3010.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3012 = writer.prefix("Filter");
    if let Some(var_3013) = &input.filters {
        let mut list_3015 = scope_3012.start_list(true, Some("Filter"));
        for item_3014 in var_3013 {
            #[allow(unused_mut)]
            let mut entry_3016 = list_3015.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3016, item_3014)?;
        }
        list_3015.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3017 = writer.prefix("MaxResults");
    if let Some(var_3018) = &input.max_results {
        scope_3017.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3018).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3019 = writer.prefix("NextToken");
    if let Some(var_3020) = &input.next_token {
        scope_3019.string(var_3020);
    }
    #[allow(unused_mut)]
    let mut scope_3021 = writer.prefix("DryRun");
    if let Some(var_3022) = &input.dry_run {
        scope_3021.boolean(*var_3022);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_managed_prefix_lists(
    input: &crate::input::DescribeManagedPrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3023 = writer.prefix("DryRun");
    if let Some(var_3024) = &input.dry_run {
        scope_3023.boolean(*var_3024);
    }
    #[allow(unused_mut)]
    let mut scope_3025 = writer.prefix("Filter");
    if let Some(var_3026) = &input.filters {
        let mut list_3028 = scope_3025.start_list(true, Some("Filter"));
        for item_3027 in var_3026 {
            #[allow(unused_mut)]
            let mut entry_3029 = list_3028.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3029, item_3027)?;
        }
        list_3028.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3030 = writer.prefix("MaxResults");
    if let Some(var_3031) = &input.max_results {
        scope_3030.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3031).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3032 = writer.prefix("NextToken");
    if let Some(var_3033) = &input.next_token {
        scope_3032.string(var_3033);
    }
    #[allow(unused_mut)]
    let mut scope_3034 = writer.prefix("PrefixListId");
    if let Some(var_3035) = &input.prefix_list_ids {
        let mut list_3037 = scope_3034.start_list(true, Some("item"));
        for item_3036 in var_3035 {
            #[allow(unused_mut)]
            let mut entry_3038 = list_3037.entry();
            entry_3038.string(item_3036);
        }
        list_3037.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_moving_addresses(
    input: &crate::input::DescribeMovingAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3039 = writer.prefix("Filter");
    if let Some(var_3040) = &input.filters {
        let mut list_3042 = scope_3039.start_list(true, Some("Filter"));
        for item_3041 in var_3040 {
            #[allow(unused_mut)]
            let mut entry_3043 = list_3042.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3043, item_3041)?;
        }
        list_3042.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3044 = writer.prefix("DryRun");
    if let Some(var_3045) = &input.dry_run {
        scope_3044.boolean(*var_3045);
    }
    #[allow(unused_mut)]
    let mut scope_3046 = writer.prefix("MaxResults");
    if let Some(var_3047) = &input.max_results {
        scope_3046.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3047).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3048 = writer.prefix("NextToken");
    if let Some(var_3049) = &input.next_token {
        scope_3048.string(var_3049);
    }
    #[allow(unused_mut)]
    let mut scope_3050 = writer.prefix("PublicIp");
    if let Some(var_3051) = &input.public_ips {
        let mut list_3053 = scope_3050.start_list(true, Some("item"));
        for item_3052 in var_3051 {
            #[allow(unused_mut)]
            let mut entry_3054 = list_3053.entry();
            entry_3054.string(item_3052);
        }
        list_3053.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_nat_gateways(
    input: &crate::input::DescribeNatGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3055 = writer.prefix("DryRun");
    if let Some(var_3056) = &input.dry_run {
        scope_3055.boolean(*var_3056);
    }
    #[allow(unused_mut)]
    let mut scope_3057 = writer.prefix("Filter");
    if let Some(var_3058) = &input.filter {
        let mut list_3060 = scope_3057.start_list(true, Some("Filter"));
        for item_3059 in var_3058 {
            #[allow(unused_mut)]
            let mut entry_3061 = list_3060.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3061, item_3059)?;
        }
        list_3060.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3062 = writer.prefix("MaxResults");
    if let Some(var_3063) = &input.max_results {
        scope_3062.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3063).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3064 = writer.prefix("NatGatewayId");
    if let Some(var_3065) = &input.nat_gateway_ids {
        let mut list_3067 = scope_3064.start_list(true, Some("item"));
        for item_3066 in var_3065 {
            #[allow(unused_mut)]
            let mut entry_3068 = list_3067.entry();
            entry_3068.string(item_3066);
        }
        list_3067.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3069 = writer.prefix("NextToken");
    if let Some(var_3070) = &input.next_token {
        scope_3069.string(var_3070);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_acls(
    input: &crate::input::DescribeNetworkAclsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3071 = writer.prefix("Filter");
    if let Some(var_3072) = &input.filters {
        let mut list_3074 = scope_3071.start_list(true, Some("Filter"));
        for item_3073 in var_3072 {
            #[allow(unused_mut)]
            let mut entry_3075 = list_3074.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3075, item_3073)?;
        }
        list_3074.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3076 = writer.prefix("DryRun");
    if let Some(var_3077) = &input.dry_run {
        scope_3076.boolean(*var_3077);
    }
    #[allow(unused_mut)]
    let mut scope_3078 = writer.prefix("NetworkAclId");
    if let Some(var_3079) = &input.network_acl_ids {
        let mut list_3081 = scope_3078.start_list(true, Some("item"));
        for item_3080 in var_3079 {
            #[allow(unused_mut)]
            let mut entry_3082 = list_3081.entry();
            entry_3082.string(item_3080);
        }
        list_3081.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3083 = writer.prefix("NextToken");
    if let Some(var_3084) = &input.next_token {
        scope_3083.string(var_3084);
    }
    #[allow(unused_mut)]
    let mut scope_3085 = writer.prefix("MaxResults");
    if let Some(var_3086) = &input.max_results {
        scope_3085.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3086).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scope_analyses(
    input: &crate::input::DescribeNetworkInsightsAccessScopeAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopeAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3087 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_3088) = &input.network_insights_access_scope_analysis_ids {
        let mut list_3090 = scope_3087.start_list(true, Some("item"));
        for item_3089 in var_3088 {
            #[allow(unused_mut)]
            let mut entry_3091 = list_3090.entry();
            entry_3091.string(item_3089);
        }
        list_3090.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3092 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_3093) = &input.network_insights_access_scope_id {
        scope_3092.string(var_3093);
    }
    #[allow(unused_mut)]
    let mut scope_3094 = writer.prefix("AnalysisStartTimeBegin");
    if let Some(var_3095) = &input.analysis_start_time_begin {
        scope_3094.date_time(var_3095, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3096 = writer.prefix("AnalysisStartTimeEnd");
    if let Some(var_3097) = &input.analysis_start_time_end {
        scope_3096.date_time(var_3097, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3098 = writer.prefix("Filter");
    if let Some(var_3099) = &input.filters {
        let mut list_3101 = scope_3098.start_list(true, Some("Filter"));
        for item_3100 in var_3099 {
            #[allow(unused_mut)]
            let mut entry_3102 = list_3101.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3102, item_3100)?;
        }
        list_3101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3103 = writer.prefix("MaxResults");
    if let Some(var_3104) = &input.max_results {
        scope_3103.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3104).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3105 = writer.prefix("DryRun");
    if let Some(var_3106) = &input.dry_run {
        scope_3105.boolean(*var_3106);
    }
    #[allow(unused_mut)]
    let mut scope_3107 = writer.prefix("NextToken");
    if let Some(var_3108) = &input.next_token {
        scope_3107.string(var_3108);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scopes(
    input: &crate::input::DescribeNetworkInsightsAccessScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3109 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_3110) = &input.network_insights_access_scope_ids {
        let mut list_3112 = scope_3109.start_list(true, Some("item"));
        for item_3111 in var_3110 {
            #[allow(unused_mut)]
            let mut entry_3113 = list_3112.entry();
            entry_3113.string(item_3111);
        }
        list_3112.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3114 = writer.prefix("Filter");
    if let Some(var_3115) = &input.filters {
        let mut list_3117 = scope_3114.start_list(true, Some("Filter"));
        for item_3116 in var_3115 {
            #[allow(unused_mut)]
            let mut entry_3118 = list_3117.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3118, item_3116)?;
        }
        list_3117.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3119 = writer.prefix("MaxResults");
    if let Some(var_3120) = &input.max_results {
        scope_3119.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3120).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3121 = writer.prefix("DryRun");
    if let Some(var_3122) = &input.dry_run {
        scope_3121.boolean(*var_3122);
    }
    #[allow(unused_mut)]
    let mut scope_3123 = writer.prefix("NextToken");
    if let Some(var_3124) = &input.next_token {
        scope_3123.string(var_3124);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_analyses(
    input: &crate::input::DescribeNetworkInsightsAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3125 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_3126) = &input.network_insights_analysis_ids {
        let mut list_3128 = scope_3125.start_list(true, Some("item"));
        for item_3127 in var_3126 {
            #[allow(unused_mut)]
            let mut entry_3129 = list_3128.entry();
            entry_3129.string(item_3127);
        }
        list_3128.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3130 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3131) = &input.network_insights_path_id {
        scope_3130.string(var_3131);
    }
    #[allow(unused_mut)]
    let mut scope_3132 = writer.prefix("AnalysisStartTime");
    if let Some(var_3133) = &input.analysis_start_time {
        scope_3132.date_time(var_3133, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3134 = writer.prefix("AnalysisEndTime");
    if let Some(var_3135) = &input.analysis_end_time {
        scope_3134.date_time(var_3135, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3136 = writer.prefix("Filter");
    if let Some(var_3137) = &input.filters {
        let mut list_3139 = scope_3136.start_list(true, Some("Filter"));
        for item_3138 in var_3137 {
            #[allow(unused_mut)]
            let mut entry_3140 = list_3139.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3140, item_3138)?;
        }
        list_3139.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3141 = writer.prefix("MaxResults");
    if let Some(var_3142) = &input.max_results {
        scope_3141.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3142).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3143 = writer.prefix("DryRun");
    if let Some(var_3144) = &input.dry_run {
        scope_3143.boolean(*var_3144);
    }
    #[allow(unused_mut)]
    let mut scope_3145 = writer.prefix("NextToken");
    if let Some(var_3146) = &input.next_token {
        scope_3145.string(var_3146);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_paths(
    input: &crate::input::DescribeNetworkInsightsPathsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3147 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3148) = &input.network_insights_path_ids {
        let mut list_3150 = scope_3147.start_list(true, Some("item"));
        for item_3149 in var_3148 {
            #[allow(unused_mut)]
            let mut entry_3151 = list_3150.entry();
            entry_3151.string(item_3149);
        }
        list_3150.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3152 = writer.prefix("Filter");
    if let Some(var_3153) = &input.filters {
        let mut list_3155 = scope_3152.start_list(true, Some("Filter"));
        for item_3154 in var_3153 {
            #[allow(unused_mut)]
            let mut entry_3156 = list_3155.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3156, item_3154)?;
        }
        list_3155.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3157 = writer.prefix("MaxResults");
    if let Some(var_3158) = &input.max_results {
        scope_3157.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3158).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3159 = writer.prefix("DryRun");
    if let Some(var_3160) = &input.dry_run {
        scope_3159.boolean(*var_3160);
    }
    #[allow(unused_mut)]
    let mut scope_3161 = writer.prefix("NextToken");
    if let Some(var_3162) = &input.next_token {
        scope_3161.string(var_3162);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_attribute(
    input: &crate::input::DescribeNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3163 = writer.prefix("Attribute");
    if let Some(var_3164) = &input.attribute {
        scope_3163.string(var_3164.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3165 = writer.prefix("DryRun");
    if let Some(var_3166) = &input.dry_run {
        scope_3165.boolean(*var_3166);
    }
    #[allow(unused_mut)]
    let mut scope_3167 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3168) = &input.network_interface_id {
        scope_3167.string(var_3168);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_permissions(
    input: &crate::input::DescribeNetworkInterfacePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfacePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3169 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_3170) = &input.network_interface_permission_ids {
        let mut list_3172 = scope_3169.start_list(true, None);
        for item_3171 in var_3170 {
            #[allow(unused_mut)]
            let mut entry_3173 = list_3172.entry();
            entry_3173.string(item_3171);
        }
        list_3172.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3174 = writer.prefix("Filter");
    if let Some(var_3175) = &input.filters {
        let mut list_3177 = scope_3174.start_list(true, Some("Filter"));
        for item_3176 in var_3175 {
            #[allow(unused_mut)]
            let mut entry_3178 = list_3177.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3178, item_3176)?;
        }
        list_3177.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3179 = writer.prefix("NextToken");
    if let Some(var_3180) = &input.next_token {
        scope_3179.string(var_3180);
    }
    #[allow(unused_mut)]
    let mut scope_3181 = writer.prefix("MaxResults");
    if let Some(var_3182) = &input.max_results {
        scope_3181.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3182).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interfaces(
    input: &crate::input::DescribeNetworkInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3183 = writer.prefix("Filter");
    if let Some(var_3184) = &input.filters {
        let mut list_3186 = scope_3183.start_list(true, Some("Filter"));
        for item_3185 in var_3184 {
            #[allow(unused_mut)]
            let mut entry_3187 = list_3186.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3187, item_3185)?;
        }
        list_3186.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3188 = writer.prefix("DryRun");
    if let Some(var_3189) = &input.dry_run {
        scope_3188.boolean(*var_3189);
    }
    #[allow(unused_mut)]
    let mut scope_3190 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3191) = &input.network_interface_ids {
        let mut list_3193 = scope_3190.start_list(true, Some("item"));
        for item_3192 in var_3191 {
            #[allow(unused_mut)]
            let mut entry_3194 = list_3193.entry();
            entry_3194.string(item_3192);
        }
        list_3193.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3195 = writer.prefix("NextToken");
    if let Some(var_3196) = &input.next_token {
        scope_3195.string(var_3196);
    }
    #[allow(unused_mut)]
    let mut scope_3197 = writer.prefix("MaxResults");
    if let Some(var_3198) = &input.max_results {
        scope_3197.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3198).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_placement_groups(
    input: &crate::input::DescribePlacementGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3199 = writer.prefix("Filter");
    if let Some(var_3200) = &input.filters {
        let mut list_3202 = scope_3199.start_list(true, Some("Filter"));
        for item_3201 in var_3200 {
            #[allow(unused_mut)]
            let mut entry_3203 = list_3202.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3203, item_3201)?;
        }
        list_3202.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3204 = writer.prefix("DryRun");
    if let Some(var_3205) = &input.dry_run {
        scope_3204.boolean(*var_3205);
    }
    #[allow(unused_mut)]
    let mut scope_3206 = writer.prefix("GroupName");
    if let Some(var_3207) = &input.group_names {
        let mut list_3209 = scope_3206.start_list(true, None);
        for item_3208 in var_3207 {
            #[allow(unused_mut)]
            let mut entry_3210 = list_3209.entry();
            entry_3210.string(item_3208);
        }
        list_3209.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3211 = writer.prefix("GroupId");
    if let Some(var_3212) = &input.group_ids {
        let mut list_3214 = scope_3211.start_list(true, Some("GroupId"));
        for item_3213 in var_3212 {
            #[allow(unused_mut)]
            let mut entry_3215 = list_3214.entry();
            entry_3215.string(item_3213);
        }
        list_3214.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_prefix_lists(
    input: &crate::input::DescribePrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3216 = writer.prefix("DryRun");
    if let Some(var_3217) = &input.dry_run {
        scope_3216.boolean(*var_3217);
    }
    #[allow(unused_mut)]
    let mut scope_3218 = writer.prefix("Filter");
    if let Some(var_3219) = &input.filters {
        let mut list_3221 = scope_3218.start_list(true, Some("Filter"));
        for item_3220 in var_3219 {
            #[allow(unused_mut)]
            let mut entry_3222 = list_3221.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3222, item_3220)?;
        }
        list_3221.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3223 = writer.prefix("MaxResults");
    if let Some(var_3224) = &input.max_results {
        scope_3223.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3224).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3225 = writer.prefix("NextToken");
    if let Some(var_3226) = &input.next_token {
        scope_3225.string(var_3226);
    }
    #[allow(unused_mut)]
    let mut scope_3227 = writer.prefix("PrefixListId");
    if let Some(var_3228) = &input.prefix_list_ids {
        let mut list_3230 = scope_3227.start_list(true, Some("item"));
        for item_3229 in var_3228 {
            #[allow(unused_mut)]
            let mut entry_3231 = list_3230.entry();
            entry_3231.string(item_3229);
        }
        list_3230.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_principal_id_format(
    input: &crate::input::DescribePrincipalIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3232 = writer.prefix("DryRun");
    if let Some(var_3233) = &input.dry_run {
        scope_3232.boolean(*var_3233);
    }
    #[allow(unused_mut)]
    let mut scope_3234 = writer.prefix("Resource");
    if let Some(var_3235) = &input.resources {
        let mut list_3237 = scope_3234.start_list(true, Some("item"));
        for item_3236 in var_3235 {
            #[allow(unused_mut)]
            let mut entry_3238 = list_3237.entry();
            entry_3238.string(item_3236);
        }
        list_3237.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3239 = writer.prefix("MaxResults");
    if let Some(var_3240) = &input.max_results {
        scope_3239.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3240).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3241 = writer.prefix("NextToken");
    if let Some(var_3242) = &input.next_token {
        scope_3241.string(var_3242);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_public_ipv4_pools(
    input: &crate::input::DescribePublicIpv4PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3243 = writer.prefix("PoolId");
    if let Some(var_3244) = &input.pool_ids {
        let mut list_3246 = scope_3243.start_list(true, Some("item"));
        for item_3245 in var_3244 {
            #[allow(unused_mut)]
            let mut entry_3247 = list_3246.entry();
            entry_3247.string(item_3245);
        }
        list_3246.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3248 = writer.prefix("NextToken");
    if let Some(var_3249) = &input.next_token {
        scope_3248.string(var_3249);
    }
    #[allow(unused_mut)]
    let mut scope_3250 = writer.prefix("MaxResults");
    if let Some(var_3251) = &input.max_results {
        scope_3250.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3251).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3252 = writer.prefix("Filter");
    if let Some(var_3253) = &input.filters {
        let mut list_3255 = scope_3252.start_list(true, Some("Filter"));
        for item_3254 in var_3253 {
            #[allow(unused_mut)]
            let mut entry_3256 = list_3255.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3256, item_3254)?;
        }
        list_3255.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_regions(
    input: &crate::input::DescribeRegionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3257 = writer.prefix("Filter");
    if let Some(var_3258) = &input.filters {
        let mut list_3260 = scope_3257.start_list(true, Some("Filter"));
        for item_3259 in var_3258 {
            #[allow(unused_mut)]
            let mut entry_3261 = list_3260.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3261, item_3259)?;
        }
        list_3260.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3262 = writer.prefix("RegionName");
    if let Some(var_3263) = &input.region_names {
        let mut list_3265 = scope_3262.start_list(true, Some("RegionName"));
        for item_3264 in var_3263 {
            #[allow(unused_mut)]
            let mut entry_3266 = list_3265.entry();
            entry_3266.string(item_3264);
        }
        list_3265.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3267 = writer.prefix("DryRun");
    if let Some(var_3268) = &input.dry_run {
        scope_3267.boolean(*var_3268);
    }
    #[allow(unused_mut)]
    let mut scope_3269 = writer.prefix("AllRegions");
    if let Some(var_3270) = &input.all_regions {
        scope_3269.boolean(*var_3270);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replace_root_volume_tasks(
    input: &crate::input::DescribeReplaceRootVolumeTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReplaceRootVolumeTasks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3271 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_3272) = &input.replace_root_volume_task_ids {
        let mut list_3274 = scope_3271.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_3273 in var_3272 {
            #[allow(unused_mut)]
            let mut entry_3275 = list_3274.entry();
            entry_3275.string(item_3273);
        }
        list_3274.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3276 = writer.prefix("Filter");
    if let Some(var_3277) = &input.filters {
        let mut list_3279 = scope_3276.start_list(true, Some("Filter"));
        for item_3278 in var_3277 {
            #[allow(unused_mut)]
            let mut entry_3280 = list_3279.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3280, item_3278)?;
        }
        list_3279.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3281 = writer.prefix("MaxResults");
    if let Some(var_3282) = &input.max_results {
        scope_3281.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3282).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3283 = writer.prefix("NextToken");
    if let Some(var_3284) = &input.next_token {
        scope_3283.string(var_3284);
    }
    #[allow(unused_mut)]
    let mut scope_3285 = writer.prefix("DryRun");
    if let Some(var_3286) = &input.dry_run {
        scope_3285.boolean(*var_3286);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances(
    input: &crate::input::DescribeReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3287 = writer.prefix("Filter");
    if let Some(var_3288) = &input.filters {
        let mut list_3290 = scope_3287.start_list(true, Some("Filter"));
        for item_3289 in var_3288 {
            #[allow(unused_mut)]
            let mut entry_3291 = list_3290.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3291, item_3289)?;
        }
        list_3290.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3292 = writer.prefix("OfferingClass");
    if let Some(var_3293) = &input.offering_class {
        scope_3292.string(var_3293.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3294 = writer.prefix("ReservedInstancesId");
    if let Some(var_3295) = &input.reserved_instances_ids {
        let mut list_3297 = scope_3294.start_list(true, Some("ReservedInstancesId"));
        for item_3296 in var_3295 {
            #[allow(unused_mut)]
            let mut entry_3298 = list_3297.entry();
            entry_3298.string(item_3296);
        }
        list_3297.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3299 = writer.prefix("DryRun");
    if let Some(var_3300) = &input.dry_run {
        scope_3299.boolean(*var_3300);
    }
    #[allow(unused_mut)]
    let mut scope_3301 = writer.prefix("OfferingType");
    if let Some(var_3302) = &input.offering_type {
        scope_3301.string(var_3302.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_listings(
    input: &crate::input::DescribeReservedInstancesListingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesListings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3303 = writer.prefix("Filter");
    if let Some(var_3304) = &input.filters {
        let mut list_3306 = scope_3303.start_list(true, Some("Filter"));
        for item_3305 in var_3304 {
            #[allow(unused_mut)]
            let mut entry_3307 = list_3306.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3307, item_3305)?;
        }
        list_3306.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3308 = writer.prefix("ReservedInstancesId");
    if let Some(var_3309) = &input.reserved_instances_id {
        scope_3308.string(var_3309);
    }
    #[allow(unused_mut)]
    let mut scope_3310 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_3311) = &input.reserved_instances_listing_id {
        scope_3310.string(var_3311);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_modifications(
    input: &crate::input::DescribeReservedInstancesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesModifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3312 = writer.prefix("Filter");
    if let Some(var_3313) = &input.filters {
        let mut list_3315 = scope_3312.start_list(true, Some("Filter"));
        for item_3314 in var_3313 {
            #[allow(unused_mut)]
            let mut entry_3316 = list_3315.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3316, item_3314)?;
        }
        list_3315.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3317 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_3318) = &input.reserved_instances_modification_ids {
        let mut list_3320 = scope_3317.start_list(true, Some("ReservedInstancesModificationId"));
        for item_3319 in var_3318 {
            #[allow(unused_mut)]
            let mut entry_3321 = list_3320.entry();
            entry_3321.string(item_3319);
        }
        list_3320.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3322 = writer.prefix("NextToken");
    if let Some(var_3323) = &input.next_token {
        scope_3322.string(var_3323);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_offerings(
    input: &crate::input::DescribeReservedInstancesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3324 = writer.prefix("AvailabilityZone");
    if let Some(var_3325) = &input.availability_zone {
        scope_3324.string(var_3325);
    }
    #[allow(unused_mut)]
    let mut scope_3326 = writer.prefix("Filter");
    if let Some(var_3327) = &input.filters {
        let mut list_3329 = scope_3326.start_list(true, Some("Filter"));
        for item_3328 in var_3327 {
            #[allow(unused_mut)]
            let mut entry_3330 = list_3329.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3330, item_3328)?;
        }
        list_3329.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3331 = writer.prefix("IncludeMarketplace");
    if let Some(var_3332) = &input.include_marketplace {
        scope_3331.boolean(*var_3332);
    }
    #[allow(unused_mut)]
    let mut scope_3333 = writer.prefix("InstanceType");
    if let Some(var_3334) = &input.instance_type {
        scope_3333.string(var_3334.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3335 = writer.prefix("MaxDuration");
    if let Some(var_3336) = &input.max_duration {
        scope_3335.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3336).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3337 = writer.prefix("MaxInstanceCount");
    if let Some(var_3338) = &input.max_instance_count {
        scope_3337.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3338).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3339 = writer.prefix("MinDuration");
    if let Some(var_3340) = &input.min_duration {
        scope_3339.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3340).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3341 = writer.prefix("OfferingClass");
    if let Some(var_3342) = &input.offering_class {
        scope_3341.string(var_3342.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3343 = writer.prefix("ProductDescription");
    if let Some(var_3344) = &input.product_description {
        scope_3343.string(var_3344.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3345 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_3346) = &input.reserved_instances_offering_ids {
        let mut list_3348 = scope_3345.start_list(true, None);
        for item_3347 in var_3346 {
            #[allow(unused_mut)]
            let mut entry_3349 = list_3348.entry();
            entry_3349.string(item_3347);
        }
        list_3348.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3350 = writer.prefix("DryRun");
    if let Some(var_3351) = &input.dry_run {
        scope_3350.boolean(*var_3351);
    }
    #[allow(unused_mut)]
    let mut scope_3352 = writer.prefix("InstanceTenancy");
    if let Some(var_3353) = &input.instance_tenancy {
        scope_3352.string(var_3353.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3354 = writer.prefix("MaxResults");
    if let Some(var_3355) = &input.max_results {
        scope_3354.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3355).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3356 = writer.prefix("NextToken");
    if let Some(var_3357) = &input.next_token {
        scope_3356.string(var_3357);
    }
    #[allow(unused_mut)]
    let mut scope_3358 = writer.prefix("OfferingType");
    if let Some(var_3359) = &input.offering_type {
        scope_3358.string(var_3359.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_route_tables(
    input: &crate::input::DescribeRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3360 = writer.prefix("Filter");
    if let Some(var_3361) = &input.filters {
        let mut list_3363 = scope_3360.start_list(true, Some("Filter"));
        for item_3362 in var_3361 {
            #[allow(unused_mut)]
            let mut entry_3364 = list_3363.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3364, item_3362)?;
        }
        list_3363.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3365 = writer.prefix("DryRun");
    if let Some(var_3366) = &input.dry_run {
        scope_3365.boolean(*var_3366);
    }
    #[allow(unused_mut)]
    let mut scope_3367 = writer.prefix("RouteTableId");
    if let Some(var_3368) = &input.route_table_ids {
        let mut list_3370 = scope_3367.start_list(true, Some("item"));
        for item_3369 in var_3368 {
            #[allow(unused_mut)]
            let mut entry_3371 = list_3370.entry();
            entry_3371.string(item_3369);
        }
        list_3370.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3372 = writer.prefix("NextToken");
    if let Some(var_3373) = &input.next_token {
        scope_3372.string(var_3373);
    }
    #[allow(unused_mut)]
    let mut scope_3374 = writer.prefix("MaxResults");
    if let Some(var_3375) = &input.max_results {
        scope_3374.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3375).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instance_availability(
    input: &crate::input::DescribeScheduledInstanceAvailabilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeScheduledInstanceAvailability",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3376 = writer.prefix("DryRun");
    if let Some(var_3377) = &input.dry_run {
        scope_3376.boolean(*var_3377);
    }
    #[allow(unused_mut)]
    let mut scope_3378 = writer.prefix("Filter");
    if let Some(var_3379) = &input.filters {
        let mut list_3381 = scope_3378.start_list(true, Some("Filter"));
        for item_3380 in var_3379 {
            #[allow(unused_mut)]
            let mut entry_3382 = list_3381.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3382, item_3380)?;
        }
        list_3381.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3383 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_3384) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_date_time_range_request(
            scope_3383, var_3384,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_3385 = writer.prefix("MaxResults");
    if let Some(var_3386) = &input.max_results {
        scope_3385.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3386).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3387 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_3388) = &input.max_slot_duration_in_hours {
        scope_3387.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3388).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3389 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_3390) = &input.min_slot_duration_in_hours {
        scope_3389.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3390).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3391 = writer.prefix("NextToken");
    if let Some(var_3392) = &input.next_token {
        scope_3391.string(var_3392);
    }
    #[allow(unused_mut)]
    let mut scope_3393 = writer.prefix("Recurrence");
    if let Some(var_3394) = &input.recurrence {
        crate::query_ser::serialize_structure_crate_model_scheduled_instance_recurrence_request(
            scope_3393, var_3394,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instances(
    input: &crate::input::DescribeScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3395 = writer.prefix("DryRun");
    if let Some(var_3396) = &input.dry_run {
        scope_3395.boolean(*var_3396);
    }
    #[allow(unused_mut)]
    let mut scope_3397 = writer.prefix("Filter");
    if let Some(var_3398) = &input.filters {
        let mut list_3400 = scope_3397.start_list(true, Some("Filter"));
        for item_3399 in var_3398 {
            #[allow(unused_mut)]
            let mut entry_3401 = list_3400.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3401, item_3399)?;
        }
        list_3400.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3402 = writer.prefix("MaxResults");
    if let Some(var_3403) = &input.max_results {
        scope_3402.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3403).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3404 = writer.prefix("NextToken");
    if let Some(var_3405) = &input.next_token {
        scope_3404.string(var_3405);
    }
    #[allow(unused_mut)]
    let mut scope_3406 = writer.prefix("ScheduledInstanceId");
    if let Some(var_3407) = &input.scheduled_instance_ids {
        let mut list_3409 = scope_3406.start_list(true, Some("ScheduledInstanceId"));
        for item_3408 in var_3407 {
            #[allow(unused_mut)]
            let mut entry_3410 = list_3409.entry();
            entry_3410.string(item_3408);
        }
        list_3409.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3411 = writer.prefix("SlotStartTimeRange");
    if let Some(var_3412) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_start_time_range_request(
            scope_3411, var_3412,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_references(
    input: &crate::input::DescribeSecurityGroupReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSecurityGroupReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3413 = writer.prefix("DryRun");
    if let Some(var_3414) = &input.dry_run {
        scope_3413.boolean(*var_3414);
    }
    #[allow(unused_mut)]
    let mut scope_3415 = writer.prefix("GroupId");
    if let Some(var_3416) = &input.group_id {
        let mut list_3418 = scope_3415.start_list(true, Some("item"));
        for item_3417 in var_3416 {
            #[allow(unused_mut)]
            let mut entry_3419 = list_3418.entry();
            entry_3419.string(item_3417);
        }
        list_3418.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_rules(
    input: &crate::input::DescribeSecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3420 = writer.prefix("Filter");
    if let Some(var_3421) = &input.filters {
        let mut list_3423 = scope_3420.start_list(true, Some("Filter"));
        for item_3422 in var_3421 {
            #[allow(unused_mut)]
            let mut entry_3424 = list_3423.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3424, item_3422)?;
        }
        list_3423.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3425 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_3426) = &input.security_group_rule_ids {
        let mut list_3428 = scope_3425.start_list(true, Some("item"));
        for item_3427 in var_3426 {
            #[allow(unused_mut)]
            let mut entry_3429 = list_3428.entry();
            entry_3429.string(item_3427);
        }
        list_3428.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3430 = writer.prefix("DryRun");
    if let Some(var_3431) = &input.dry_run {
        scope_3430.boolean(*var_3431);
    }
    #[allow(unused_mut)]
    let mut scope_3432 = writer.prefix("NextToken");
    if let Some(var_3433) = &input.next_token {
        scope_3432.string(var_3433);
    }
    #[allow(unused_mut)]
    let mut scope_3434 = writer.prefix("MaxResults");
    if let Some(var_3435) = &input.max_results {
        scope_3434.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3435).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_groups(
    input: &crate::input::DescribeSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3436 = writer.prefix("Filter");
    if let Some(var_3437) = &input.filters {
        let mut list_3439 = scope_3436.start_list(true, Some("Filter"));
        for item_3438 in var_3437 {
            #[allow(unused_mut)]
            let mut entry_3440 = list_3439.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3440, item_3438)?;
        }
        list_3439.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3441 = writer.prefix("GroupId");
    if let Some(var_3442) = &input.group_ids {
        let mut list_3444 = scope_3441.start_list(true, Some("groupId"));
        for item_3443 in var_3442 {
            #[allow(unused_mut)]
            let mut entry_3445 = list_3444.entry();
            entry_3445.string(item_3443);
        }
        list_3444.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3446 = writer.prefix("GroupName");
    if let Some(var_3447) = &input.group_names {
        let mut list_3449 = scope_3446.start_list(true, Some("GroupName"));
        for item_3448 in var_3447 {
            #[allow(unused_mut)]
            let mut entry_3450 = list_3449.entry();
            entry_3450.string(item_3448);
        }
        list_3449.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3451 = writer.prefix("DryRun");
    if let Some(var_3452) = &input.dry_run {
        scope_3451.boolean(*var_3452);
    }
    #[allow(unused_mut)]
    let mut scope_3453 = writer.prefix("NextToken");
    if let Some(var_3454) = &input.next_token {
        scope_3453.string(var_3454);
    }
    #[allow(unused_mut)]
    let mut scope_3455 = writer.prefix("MaxResults");
    if let Some(var_3456) = &input.max_results {
        scope_3455.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3456).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_attribute(
    input: &crate::input::DescribeSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3457 = writer.prefix("Attribute");
    if let Some(var_3458) = &input.attribute {
        scope_3457.string(var_3458.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3459 = writer.prefix("SnapshotId");
    if let Some(var_3460) = &input.snapshot_id {
        scope_3459.string(var_3460);
    }
    #[allow(unused_mut)]
    let mut scope_3461 = writer.prefix("DryRun");
    if let Some(var_3462) = &input.dry_run {
        scope_3461.boolean(*var_3462);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3463 = writer.prefix("Filter");
    if let Some(var_3464) = &input.filters {
        let mut list_3466 = scope_3463.start_list(true, Some("Filter"));
        for item_3465 in var_3464 {
            #[allow(unused_mut)]
            let mut entry_3467 = list_3466.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3467, item_3465)?;
        }
        list_3466.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3468 = writer.prefix("MaxResults");
    if let Some(var_3469) = &input.max_results {
        scope_3468.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3469).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3470 = writer.prefix("NextToken");
    if let Some(var_3471) = &input.next_token {
        scope_3470.string(var_3471);
    }
    #[allow(unused_mut)]
    let mut scope_3472 = writer.prefix("Owner");
    if let Some(var_3473) = &input.owner_ids {
        let mut list_3475 = scope_3472.start_list(true, Some("Owner"));
        for item_3474 in var_3473 {
            #[allow(unused_mut)]
            let mut entry_3476 = list_3475.entry();
            entry_3476.string(item_3474);
        }
        list_3475.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3477 = writer.prefix("RestorableBy");
    if let Some(var_3478) = &input.restorable_by_user_ids {
        let mut list_3480 = scope_3477.start_list(true, None);
        for item_3479 in var_3478 {
            #[allow(unused_mut)]
            let mut entry_3481 = list_3480.entry();
            entry_3481.string(item_3479);
        }
        list_3480.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3482 = writer.prefix("SnapshotId");
    if let Some(var_3483) = &input.snapshot_ids {
        let mut list_3485 = scope_3482.start_list(true, Some("SnapshotId"));
        for item_3484 in var_3483 {
            #[allow(unused_mut)]
            let mut entry_3486 = list_3485.entry();
            entry_3486.string(item_3484);
        }
        list_3485.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3487 = writer.prefix("DryRun");
    if let Some(var_3488) = &input.dry_run {
        scope_3487.boolean(*var_3488);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_tier_status(
    input: &crate::input::DescribeSnapshotTierStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotTierStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3489 = writer.prefix("Filter");
    if let Some(var_3490) = &input.filters {
        let mut list_3492 = scope_3489.start_list(true, Some("Filter"));
        for item_3491 in var_3490 {
            #[allow(unused_mut)]
            let mut entry_3493 = list_3492.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3493, item_3491)?;
        }
        list_3492.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3494 = writer.prefix("DryRun");
    if let Some(var_3495) = &input.dry_run {
        scope_3494.boolean(*var_3495);
    }
    #[allow(unused_mut)]
    let mut scope_3496 = writer.prefix("NextToken");
    if let Some(var_3497) = &input.next_token {
        scope_3496.string(var_3497);
    }
    #[allow(unused_mut)]
    let mut scope_3498 = writer.prefix("MaxResults");
    if let Some(var_3499) = &input.max_results {
        scope_3498.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3499).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_datafeed_subscription(
    input: &crate::input::DescribeSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3500 = writer.prefix("DryRun");
    if let Some(var_3501) = &input.dry_run {
        scope_3500.boolean(*var_3501);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_instances(
    input: &crate::input::DescribeSpotFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3502 = writer.prefix("DryRun");
    if let Some(var_3503) = &input.dry_run {
        scope_3502.boolean(*var_3503);
    }
    #[allow(unused_mut)]
    let mut scope_3504 = writer.prefix("MaxResults");
    if let Some(var_3505) = &input.max_results {
        scope_3504.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3505).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3506 = writer.prefix("NextToken");
    if let Some(var_3507) = &input.next_token {
        scope_3506.string(var_3507);
    }
    #[allow(unused_mut)]
    let mut scope_3508 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3509) = &input.spot_fleet_request_id {
        scope_3508.string(var_3509);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_request_history(
    input: &crate::input::DescribeSpotFleetRequestHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotFleetRequestHistory",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3510 = writer.prefix("DryRun");
    if let Some(var_3511) = &input.dry_run {
        scope_3510.boolean(*var_3511);
    }
    #[allow(unused_mut)]
    let mut scope_3512 = writer.prefix("EventType");
    if let Some(var_3513) = &input.event_type {
        scope_3512.string(var_3513.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3514 = writer.prefix("MaxResults");
    if let Some(var_3515) = &input.max_results {
        scope_3514.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3515).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3516 = writer.prefix("NextToken");
    if let Some(var_3517) = &input.next_token {
        scope_3516.string(var_3517);
    }
    #[allow(unused_mut)]
    let mut scope_3518 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3519) = &input.spot_fleet_request_id {
        scope_3518.string(var_3519);
    }
    #[allow(unused_mut)]
    let mut scope_3520 = writer.prefix("StartTime");
    if let Some(var_3521) = &input.start_time {
        scope_3520.date_time(var_3521, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_requests(
    input: &crate::input::DescribeSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3522 = writer.prefix("DryRun");
    if let Some(var_3523) = &input.dry_run {
        scope_3522.boolean(*var_3523);
    }
    #[allow(unused_mut)]
    let mut scope_3524 = writer.prefix("MaxResults");
    if let Some(var_3525) = &input.max_results {
        scope_3524.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3525).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3526 = writer.prefix("NextToken");
    if let Some(var_3527) = &input.next_token {
        scope_3526.string(var_3527);
    }
    #[allow(unused_mut)]
    let mut scope_3528 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3529) = &input.spot_fleet_request_ids {
        let mut list_3531 = scope_3528.start_list(true, Some("item"));
        for item_3530 in var_3529 {
            #[allow(unused_mut)]
            let mut entry_3532 = list_3531.entry();
            entry_3532.string(item_3530);
        }
        list_3531.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_instance_requests(
    input: &crate::input::DescribeSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3533 = writer.prefix("Filter");
    if let Some(var_3534) = &input.filters {
        let mut list_3536 = scope_3533.start_list(true, Some("Filter"));
        for item_3535 in var_3534 {
            #[allow(unused_mut)]
            let mut entry_3537 = list_3536.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3537, item_3535)?;
        }
        list_3536.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3538 = writer.prefix("DryRun");
    if let Some(var_3539) = &input.dry_run {
        scope_3538.boolean(*var_3539);
    }
    #[allow(unused_mut)]
    let mut scope_3540 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_3541) = &input.spot_instance_request_ids {
        let mut list_3543 = scope_3540.start_list(true, Some("SpotInstanceRequestId"));
        for item_3542 in var_3541 {
            #[allow(unused_mut)]
            let mut entry_3544 = list_3543.entry();
            entry_3544.string(item_3542);
        }
        list_3543.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3545 = writer.prefix("NextToken");
    if let Some(var_3546) = &input.next_token {
        scope_3545.string(var_3546);
    }
    #[allow(unused_mut)]
    let mut scope_3547 = writer.prefix("MaxResults");
    if let Some(var_3548) = &input.max_results {
        scope_3547.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3548).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_price_history(
    input: &crate::input::DescribeSpotPriceHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3549 = writer.prefix("Filter");
    if let Some(var_3550) = &input.filters {
        let mut list_3552 = scope_3549.start_list(true, Some("Filter"));
        for item_3551 in var_3550 {
            #[allow(unused_mut)]
            let mut entry_3553 = list_3552.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3553, item_3551)?;
        }
        list_3552.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3554 = writer.prefix("AvailabilityZone");
    if let Some(var_3555) = &input.availability_zone {
        scope_3554.string(var_3555);
    }
    #[allow(unused_mut)]
    let mut scope_3556 = writer.prefix("DryRun");
    if let Some(var_3557) = &input.dry_run {
        scope_3556.boolean(*var_3557);
    }
    #[allow(unused_mut)]
    let mut scope_3558 = writer.prefix("EndTime");
    if let Some(var_3559) = &input.end_time {
        scope_3558.date_time(var_3559, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3560 = writer.prefix("InstanceType");
    if let Some(var_3561) = &input.instance_types {
        let mut list_3563 = scope_3560.start_list(true, None);
        for item_3562 in var_3561 {
            #[allow(unused_mut)]
            let mut entry_3564 = list_3563.entry();
            entry_3564.string(item_3562.as_str());
        }
        list_3563.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3565 = writer.prefix("MaxResults");
    if let Some(var_3566) = &input.max_results {
        scope_3565.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3566).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3567 = writer.prefix("NextToken");
    if let Some(var_3568) = &input.next_token {
        scope_3567.string(var_3568);
    }
    #[allow(unused_mut)]
    let mut scope_3569 = writer.prefix("ProductDescription");
    if let Some(var_3570) = &input.product_descriptions {
        let mut list_3572 = scope_3569.start_list(true, None);
        for item_3571 in var_3570 {
            #[allow(unused_mut)]
            let mut entry_3573 = list_3572.entry();
            entry_3573.string(item_3571);
        }
        list_3572.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3574 = writer.prefix("StartTime");
    if let Some(var_3575) = &input.start_time {
        scope_3574.date_time(var_3575, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stale_security_groups(
    input: &crate::input::DescribeStaleSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3576 = writer.prefix("DryRun");
    if let Some(var_3577) = &input.dry_run {
        scope_3576.boolean(*var_3577);
    }
    #[allow(unused_mut)]
    let mut scope_3578 = writer.prefix("MaxResults");
    if let Some(var_3579) = &input.max_results {
        scope_3578.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3579).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3580 = writer.prefix("NextToken");
    if let Some(var_3581) = &input.next_token {
        scope_3580.string(var_3581);
    }
    #[allow(unused_mut)]
    let mut scope_3582 = writer.prefix("VpcId");
    if let Some(var_3583) = &input.vpc_id {
        scope_3582.string(var_3583);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_store_image_tasks(
    input: &crate::input::DescribeStoreImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3584 = writer.prefix("ImageId");
    if let Some(var_3585) = &input.image_ids {
        let mut list_3587 = scope_3584.start_list(true, Some("item"));
        for item_3586 in var_3585 {
            #[allow(unused_mut)]
            let mut entry_3588 = list_3587.entry();
            entry_3588.string(item_3586);
        }
        list_3587.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3589 = writer.prefix("DryRun");
    if let Some(var_3590) = &input.dry_run {
        scope_3589.boolean(*var_3590);
    }
    #[allow(unused_mut)]
    let mut scope_3591 = writer.prefix("Filter");
    if let Some(var_3592) = &input.filters {
        let mut list_3594 = scope_3591.start_list(true, Some("Filter"));
        for item_3593 in var_3592 {
            #[allow(unused_mut)]
            let mut entry_3595 = list_3594.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3595, item_3593)?;
        }
        list_3594.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3596 = writer.prefix("NextToken");
    if let Some(var_3597) = &input.next_token {
        scope_3596.string(var_3597);
    }
    #[allow(unused_mut)]
    let mut scope_3598 = writer.prefix("MaxResults");
    if let Some(var_3599) = &input.max_results {
        scope_3598.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3599).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_subnets(
    input: &crate::input::DescribeSubnetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3600 = writer.prefix("Filter");
    if let Some(var_3601) = &input.filters {
        let mut list_3603 = scope_3600.start_list(true, Some("Filter"));
        for item_3602 in var_3601 {
            #[allow(unused_mut)]
            let mut entry_3604 = list_3603.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3604, item_3602)?;
        }
        list_3603.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3605 = writer.prefix("SubnetId");
    if let Some(var_3606) = &input.subnet_ids {
        let mut list_3608 = scope_3605.start_list(true, Some("SubnetId"));
        for item_3607 in var_3606 {
            #[allow(unused_mut)]
            let mut entry_3609 = list_3608.entry();
            entry_3609.string(item_3607);
        }
        list_3608.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3610 = writer.prefix("DryRun");
    if let Some(var_3611) = &input.dry_run {
        scope_3610.boolean(*var_3611);
    }
    #[allow(unused_mut)]
    let mut scope_3612 = writer.prefix("NextToken");
    if let Some(var_3613) = &input.next_token {
        scope_3612.string(var_3613);
    }
    #[allow(unused_mut)]
    let mut scope_3614 = writer.prefix("MaxResults");
    if let Some(var_3615) = &input.max_results {
        scope_3614.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3615).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3616 = writer.prefix("DryRun");
    if let Some(var_3617) = &input.dry_run {
        scope_3616.boolean(*var_3617);
    }
    #[allow(unused_mut)]
    let mut scope_3618 = writer.prefix("Filter");
    if let Some(var_3619) = &input.filters {
        let mut list_3621 = scope_3618.start_list(true, Some("Filter"));
        for item_3620 in var_3619 {
            #[allow(unused_mut)]
            let mut entry_3622 = list_3621.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3622, item_3620)?;
        }
        list_3621.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3623 = writer.prefix("MaxResults");
    if let Some(var_3624) = &input.max_results {
        scope_3623.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3624).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3625 = writer.prefix("NextToken");
    if let Some(var_3626) = &input.next_token {
        scope_3625.string(var_3626);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_filters(
    input: &crate::input::DescribeTrafficMirrorFiltersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3627 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3628) = &input.traffic_mirror_filter_ids {
        let mut list_3630 = scope_3627.start_list(true, Some("item"));
        for item_3629 in var_3628 {
            #[allow(unused_mut)]
            let mut entry_3631 = list_3630.entry();
            entry_3631.string(item_3629);
        }
        list_3630.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3632 = writer.prefix("DryRun");
    if let Some(var_3633) = &input.dry_run {
        scope_3632.boolean(*var_3633);
    }
    #[allow(unused_mut)]
    let mut scope_3634 = writer.prefix("Filter");
    if let Some(var_3635) = &input.filters {
        let mut list_3637 = scope_3634.start_list(true, Some("Filter"));
        for item_3636 in var_3635 {
            #[allow(unused_mut)]
            let mut entry_3638 = list_3637.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3638, item_3636)?;
        }
        list_3637.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3639 = writer.prefix("MaxResults");
    if let Some(var_3640) = &input.max_results {
        scope_3639.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3640).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3641 = writer.prefix("NextToken");
    if let Some(var_3642) = &input.next_token {
        scope_3641.string(var_3642);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_sessions(
    input: &crate::input::DescribeTrafficMirrorSessionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3643 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3644) = &input.traffic_mirror_session_ids {
        let mut list_3646 = scope_3643.start_list(true, Some("item"));
        for item_3645 in var_3644 {
            #[allow(unused_mut)]
            let mut entry_3647 = list_3646.entry();
            entry_3647.string(item_3645);
        }
        list_3646.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3648 = writer.prefix("DryRun");
    if let Some(var_3649) = &input.dry_run {
        scope_3648.boolean(*var_3649);
    }
    #[allow(unused_mut)]
    let mut scope_3650 = writer.prefix("Filter");
    if let Some(var_3651) = &input.filters {
        let mut list_3653 = scope_3650.start_list(true, Some("Filter"));
        for item_3652 in var_3651 {
            #[allow(unused_mut)]
            let mut entry_3654 = list_3653.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3654, item_3652)?;
        }
        list_3653.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3655 = writer.prefix("MaxResults");
    if let Some(var_3656) = &input.max_results {
        scope_3655.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3656).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3657 = writer.prefix("NextToken");
    if let Some(var_3658) = &input.next_token {
        scope_3657.string(var_3658);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_targets(
    input: &crate::input::DescribeTrafficMirrorTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3659 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3660) = &input.traffic_mirror_target_ids {
        let mut list_3662 = scope_3659.start_list(true, Some("item"));
        for item_3661 in var_3660 {
            #[allow(unused_mut)]
            let mut entry_3663 = list_3662.entry();
            entry_3663.string(item_3661);
        }
        list_3662.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3664 = writer.prefix("DryRun");
    if let Some(var_3665) = &input.dry_run {
        scope_3664.boolean(*var_3665);
    }
    #[allow(unused_mut)]
    let mut scope_3666 = writer.prefix("Filter");
    if let Some(var_3667) = &input.filters {
        let mut list_3669 = scope_3666.start_list(true, Some("Filter"));
        for item_3668 in var_3667 {
            #[allow(unused_mut)]
            let mut entry_3670 = list_3669.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3670, item_3668)?;
        }
        list_3669.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3671 = writer.prefix("MaxResults");
    if let Some(var_3672) = &input.max_results {
        scope_3671.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3672).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3673 = writer.prefix("NextToken");
    if let Some(var_3674) = &input.next_token {
        scope_3673.string(var_3674);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_attachments(
    input: &crate::input::DescribeTransitGatewayAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3675 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3676) = &input.transit_gateway_attachment_ids {
        let mut list_3678 = scope_3675.start_list(true, None);
        for item_3677 in var_3676 {
            #[allow(unused_mut)]
            let mut entry_3679 = list_3678.entry();
            entry_3679.string(item_3677);
        }
        list_3678.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3680 = writer.prefix("Filter");
    if let Some(var_3681) = &input.filters {
        let mut list_3683 = scope_3680.start_list(true, Some("Filter"));
        for item_3682 in var_3681 {
            #[allow(unused_mut)]
            let mut entry_3684 = list_3683.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3684, item_3682)?;
        }
        list_3683.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3685 = writer.prefix("MaxResults");
    if let Some(var_3686) = &input.max_results {
        scope_3685.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3686).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3687 = writer.prefix("NextToken");
    if let Some(var_3688) = &input.next_token {
        scope_3687.string(var_3688);
    }
    #[allow(unused_mut)]
    let mut scope_3689 = writer.prefix("DryRun");
    if let Some(var_3690) = &input.dry_run {
        scope_3689.boolean(*var_3690);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connect_peers(
    input: &crate::input::DescribeTransitGatewayConnectPeersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnectPeers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3691 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3692) = &input.transit_gateway_connect_peer_ids {
        let mut list_3694 = scope_3691.start_list(true, Some("item"));
        for item_3693 in var_3692 {
            #[allow(unused_mut)]
            let mut entry_3695 = list_3694.entry();
            entry_3695.string(item_3693);
        }
        list_3694.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3696 = writer.prefix("Filter");
    if let Some(var_3697) = &input.filters {
        let mut list_3699 = scope_3696.start_list(true, Some("Filter"));
        for item_3698 in var_3697 {
            #[allow(unused_mut)]
            let mut entry_3700 = list_3699.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3700, item_3698)?;
        }
        list_3699.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3701 = writer.prefix("MaxResults");
    if let Some(var_3702) = &input.max_results {
        scope_3701.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3702).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3703 = writer.prefix("NextToken");
    if let Some(var_3704) = &input.next_token {
        scope_3703.string(var_3704);
    }
    #[allow(unused_mut)]
    let mut scope_3705 = writer.prefix("DryRun");
    if let Some(var_3706) = &input.dry_run {
        scope_3705.boolean(*var_3706);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connects(
    input: &crate::input::DescribeTransitGatewayConnectsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnects",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3707 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3708) = &input.transit_gateway_attachment_ids {
        let mut list_3710 = scope_3707.start_list(true, None);
        for item_3709 in var_3708 {
            #[allow(unused_mut)]
            let mut entry_3711 = list_3710.entry();
            entry_3711.string(item_3709);
        }
        list_3710.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3712 = writer.prefix("Filter");
    if let Some(var_3713) = &input.filters {
        let mut list_3715 = scope_3712.start_list(true, Some("Filter"));
        for item_3714 in var_3713 {
            #[allow(unused_mut)]
            let mut entry_3716 = list_3715.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3716, item_3714)?;
        }
        list_3715.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3717 = writer.prefix("MaxResults");
    if let Some(var_3718) = &input.max_results {
        scope_3717.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3718).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3719 = writer.prefix("NextToken");
    if let Some(var_3720) = &input.next_token {
        scope_3719.string(var_3720);
    }
    #[allow(unused_mut)]
    let mut scope_3721 = writer.prefix("DryRun");
    if let Some(var_3722) = &input.dry_run {
        scope_3721.boolean(*var_3722);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_multicast_domains(
    input: &crate::input::DescribeTransitGatewayMulticastDomainsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayMulticastDomains",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3723 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3724) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3726 = scope_3723.start_list(true, Some("item"));
        for item_3725 in var_3724 {
            #[allow(unused_mut)]
            let mut entry_3727 = list_3726.entry();
            entry_3727.string(item_3725);
        }
        list_3726.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3728 = writer.prefix("Filter");
    if let Some(var_3729) = &input.filters {
        let mut list_3731 = scope_3728.start_list(true, Some("Filter"));
        for item_3730 in var_3729 {
            #[allow(unused_mut)]
            let mut entry_3732 = list_3731.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3732, item_3730)?;
        }
        list_3731.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3733 = writer.prefix("MaxResults");
    if let Some(var_3734) = &input.max_results {
        scope_3733.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3734).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3735 = writer.prefix("NextToken");
    if let Some(var_3736) = &input.next_token {
        scope_3735.string(var_3736);
    }
    #[allow(unused_mut)]
    let mut scope_3737 = writer.prefix("DryRun");
    if let Some(var_3738) = &input.dry_run {
        scope_3737.boolean(*var_3738);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_peering_attachments(
    input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPeeringAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3739 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3740) = &input.transit_gateway_attachment_ids {
        let mut list_3742 = scope_3739.start_list(true, None);
        for item_3741 in var_3740 {
            #[allow(unused_mut)]
            let mut entry_3743 = list_3742.entry();
            entry_3743.string(item_3741);
        }
        list_3742.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3744 = writer.prefix("Filter");
    if let Some(var_3745) = &input.filters {
        let mut list_3747 = scope_3744.start_list(true, Some("Filter"));
        for item_3746 in var_3745 {
            #[allow(unused_mut)]
            let mut entry_3748 = list_3747.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3748, item_3746)?;
        }
        list_3747.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3749 = writer.prefix("MaxResults");
    if let Some(var_3750) = &input.max_results {
        scope_3749.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3750).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3751 = writer.prefix("NextToken");
    if let Some(var_3752) = &input.next_token {
        scope_3751.string(var_3752);
    }
    #[allow(unused_mut)]
    let mut scope_3753 = writer.prefix("DryRun");
    if let Some(var_3754) = &input.dry_run {
        scope_3753.boolean(*var_3754);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_policy_tables(
    input: &crate::input::DescribeTransitGatewayPolicyTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPolicyTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3755 = writer.prefix("TransitGatewayPolicyTableIds");
    if let Some(var_3756) = &input.transit_gateway_policy_table_ids {
        let mut list_3758 = scope_3755.start_list(true, Some("item"));
        for item_3757 in var_3756 {
            #[allow(unused_mut)]
            let mut entry_3759 = list_3758.entry();
            entry_3759.string(item_3757);
        }
        list_3758.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3760 = writer.prefix("Filter");
    if let Some(var_3761) = &input.filters {
        let mut list_3763 = scope_3760.start_list(true, Some("Filter"));
        for item_3762 in var_3761 {
            #[allow(unused_mut)]
            let mut entry_3764 = list_3763.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3764, item_3762)?;
        }
        list_3763.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3765 = writer.prefix("MaxResults");
    if let Some(var_3766) = &input.max_results {
        scope_3765.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3766).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3767 = writer.prefix("NextToken");
    if let Some(var_3768) = &input.next_token {
        scope_3767.string(var_3768);
    }
    #[allow(unused_mut)]
    let mut scope_3769 = writer.prefix("DryRun");
    if let Some(var_3770) = &input.dry_run {
        scope_3769.boolean(*var_3770);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_table_announcements(
    input: &crate::input::DescribeTransitGatewayRouteTableAnnouncementsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayRouteTableAnnouncements",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3771 = writer.prefix("TransitGatewayRouteTableAnnouncementIds");
    if let Some(var_3772) = &input.transit_gateway_route_table_announcement_ids {
        let mut list_3774 = scope_3771.start_list(true, Some("item"));
        for item_3773 in var_3772 {
            #[allow(unused_mut)]
            let mut entry_3775 = list_3774.entry();
            entry_3775.string(item_3773);
        }
        list_3774.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3776 = writer.prefix("Filter");
    if let Some(var_3777) = &input.filters {
        let mut list_3779 = scope_3776.start_list(true, Some("Filter"));
        for item_3778 in var_3777 {
            #[allow(unused_mut)]
            let mut entry_3780 = list_3779.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3780, item_3778)?;
        }
        list_3779.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3781 = writer.prefix("MaxResults");
    if let Some(var_3782) = &input.max_results {
        scope_3781.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3782).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3783 = writer.prefix("NextToken");
    if let Some(var_3784) = &input.next_token {
        scope_3783.string(var_3784);
    }
    #[allow(unused_mut)]
    let mut scope_3785 = writer.prefix("DryRun");
    if let Some(var_3786) = &input.dry_run {
        scope_3785.boolean(*var_3786);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_tables(
    input: &crate::input::DescribeTransitGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3787 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3788) = &input.transit_gateway_route_table_ids {
        let mut list_3790 = scope_3787.start_list(true, Some("item"));
        for item_3789 in var_3788 {
            #[allow(unused_mut)]
            let mut entry_3791 = list_3790.entry();
            entry_3791.string(item_3789);
        }
        list_3790.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3792 = writer.prefix("Filter");
    if let Some(var_3793) = &input.filters {
        let mut list_3795 = scope_3792.start_list(true, Some("Filter"));
        for item_3794 in var_3793 {
            #[allow(unused_mut)]
            let mut entry_3796 = list_3795.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3796, item_3794)?;
        }
        list_3795.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3797 = writer.prefix("MaxResults");
    if let Some(var_3798) = &input.max_results {
        scope_3797.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3798).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3799 = writer.prefix("NextToken");
    if let Some(var_3800) = &input.next_token {
        scope_3799.string(var_3800);
    }
    #[allow(unused_mut)]
    let mut scope_3801 = writer.prefix("DryRun");
    if let Some(var_3802) = &input.dry_run {
        scope_3801.boolean(*var_3802);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateways(
    input: &crate::input::DescribeTransitGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3803 = writer.prefix("TransitGatewayIds");
    if let Some(var_3804) = &input.transit_gateway_ids {
        let mut list_3806 = scope_3803.start_list(true, Some("item"));
        for item_3805 in var_3804 {
            #[allow(unused_mut)]
            let mut entry_3807 = list_3806.entry();
            entry_3807.string(item_3805);
        }
        list_3806.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3808 = writer.prefix("Filter");
    if let Some(var_3809) = &input.filters {
        let mut list_3811 = scope_3808.start_list(true, Some("Filter"));
        for item_3810 in var_3809 {
            #[allow(unused_mut)]
            let mut entry_3812 = list_3811.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3812, item_3810)?;
        }
        list_3811.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3813 = writer.prefix("MaxResults");
    if let Some(var_3814) = &input.max_results {
        scope_3813.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3814).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3815 = writer.prefix("NextToken");
    if let Some(var_3816) = &input.next_token {
        scope_3815.string(var_3816);
    }
    #[allow(unused_mut)]
    let mut scope_3817 = writer.prefix("DryRun");
    if let Some(var_3818) = &input.dry_run {
        scope_3817.boolean(*var_3818);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_vpc_attachments(
    input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayVpcAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3819 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3820) = &input.transit_gateway_attachment_ids {
        let mut list_3822 = scope_3819.start_list(true, None);
        for item_3821 in var_3820 {
            #[allow(unused_mut)]
            let mut entry_3823 = list_3822.entry();
            entry_3823.string(item_3821);
        }
        list_3822.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3824 = writer.prefix("Filter");
    if let Some(var_3825) = &input.filters {
        let mut list_3827 = scope_3824.start_list(true, Some("Filter"));
        for item_3826 in var_3825 {
            #[allow(unused_mut)]
            let mut entry_3828 = list_3827.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3828, item_3826)?;
        }
        list_3827.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3829 = writer.prefix("MaxResults");
    if let Some(var_3830) = &input.max_results {
        scope_3829.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3830).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3831 = writer.prefix("NextToken");
    if let Some(var_3832) = &input.next_token {
        scope_3831.string(var_3832);
    }
    #[allow(unused_mut)]
    let mut scope_3833 = writer.prefix("DryRun");
    if let Some(var_3834) = &input.dry_run {
        scope_3833.boolean(*var_3834);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_trunk_interface_associations(
    input: &crate::input::DescribeTrunkInterfaceAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTrunkInterfaceAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3835 = writer.prefix("AssociationId");
    if let Some(var_3836) = &input.association_ids {
        let mut list_3838 = scope_3835.start_list(true, Some("item"));
        for item_3837 in var_3836 {
            #[allow(unused_mut)]
            let mut entry_3839 = list_3838.entry();
            entry_3839.string(item_3837);
        }
        list_3838.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3840 = writer.prefix("DryRun");
    if let Some(var_3841) = &input.dry_run {
        scope_3840.boolean(*var_3841);
    }
    #[allow(unused_mut)]
    let mut scope_3842 = writer.prefix("Filter");
    if let Some(var_3843) = &input.filters {
        let mut list_3845 = scope_3842.start_list(true, Some("Filter"));
        for item_3844 in var_3843 {
            #[allow(unused_mut)]
            let mut entry_3846 = list_3845.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3846, item_3844)?;
        }
        list_3845.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3847 = writer.prefix("NextToken");
    if let Some(var_3848) = &input.next_token {
        scope_3847.string(var_3848);
    }
    #[allow(unused_mut)]
    let mut scope_3849 = writer.prefix("MaxResults");
    if let Some(var_3850) = &input.max_results {
        scope_3849.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3850).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_attribute(
    input: &crate::input::DescribeVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3851 = writer.prefix("Attribute");
    if let Some(var_3852) = &input.attribute {
        scope_3851.string(var_3852.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3853 = writer.prefix("VolumeId");
    if let Some(var_3854) = &input.volume_id {
        scope_3853.string(var_3854);
    }
    #[allow(unused_mut)]
    let mut scope_3855 = writer.prefix("DryRun");
    if let Some(var_3856) = &input.dry_run {
        scope_3855.boolean(*var_3856);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes(
    input: &crate::input::DescribeVolumesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3857 = writer.prefix("Filter");
    if let Some(var_3858) = &input.filters {
        let mut list_3860 = scope_3857.start_list(true, Some("Filter"));
        for item_3859 in var_3858 {
            #[allow(unused_mut)]
            let mut entry_3861 = list_3860.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3861, item_3859)?;
        }
        list_3860.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3862 = writer.prefix("VolumeId");
    if let Some(var_3863) = &input.volume_ids {
        let mut list_3865 = scope_3862.start_list(true, Some("VolumeId"));
        for item_3864 in var_3863 {
            #[allow(unused_mut)]
            let mut entry_3866 = list_3865.entry();
            entry_3866.string(item_3864);
        }
        list_3865.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3867 = writer.prefix("DryRun");
    if let Some(var_3868) = &input.dry_run {
        scope_3867.boolean(*var_3868);
    }
    #[allow(unused_mut)]
    let mut scope_3869 = writer.prefix("MaxResults");
    if let Some(var_3870) = &input.max_results {
        scope_3869.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3870).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3871 = writer.prefix("NextToken");
    if let Some(var_3872) = &input.next_token {
        scope_3871.string(var_3872);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes_modifications(
    input: &crate::input::DescribeVolumesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3873 = writer.prefix("DryRun");
    if let Some(var_3874) = &input.dry_run {
        scope_3873.boolean(*var_3874);
    }
    #[allow(unused_mut)]
    let mut scope_3875 = writer.prefix("VolumeId");
    if let Some(var_3876) = &input.volume_ids {
        let mut list_3878 = scope_3875.start_list(true, Some("VolumeId"));
        for item_3877 in var_3876 {
            #[allow(unused_mut)]
            let mut entry_3879 = list_3878.entry();
            entry_3879.string(item_3877);
        }
        list_3878.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3880 = writer.prefix("Filter");
    if let Some(var_3881) = &input.filters {
        let mut list_3883 = scope_3880.start_list(true, Some("Filter"));
        for item_3882 in var_3881 {
            #[allow(unused_mut)]
            let mut entry_3884 = list_3883.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3884, item_3882)?;
        }
        list_3883.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3885 = writer.prefix("NextToken");
    if let Some(var_3886) = &input.next_token {
        scope_3885.string(var_3886);
    }
    #[allow(unused_mut)]
    let mut scope_3887 = writer.prefix("MaxResults");
    if let Some(var_3888) = &input.max_results {
        scope_3887.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3888).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_status(
    input: &crate::input::DescribeVolumeStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3889 = writer.prefix("Filter");
    if let Some(var_3890) = &input.filters {
        let mut list_3892 = scope_3889.start_list(true, Some("Filter"));
        for item_3891 in var_3890 {
            #[allow(unused_mut)]
            let mut entry_3893 = list_3892.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3893, item_3891)?;
        }
        list_3892.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3894 = writer.prefix("MaxResults");
    if let Some(var_3895) = &input.max_results {
        scope_3894.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3895).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3896 = writer.prefix("NextToken");
    if let Some(var_3897) = &input.next_token {
        scope_3896.string(var_3897);
    }
    #[allow(unused_mut)]
    let mut scope_3898 = writer.prefix("VolumeId");
    if let Some(var_3899) = &input.volume_ids {
        let mut list_3901 = scope_3898.start_list(true, Some("VolumeId"));
        for item_3900 in var_3899 {
            #[allow(unused_mut)]
            let mut entry_3902 = list_3901.entry();
            entry_3902.string(item_3900);
        }
        list_3901.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3903 = writer.prefix("DryRun");
    if let Some(var_3904) = &input.dry_run {
        scope_3903.boolean(*var_3904);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_attribute(
    input: &crate::input::DescribeVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3905 = writer.prefix("Attribute");
    if let Some(var_3906) = &input.attribute {
        scope_3905.string(var_3906.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3907 = writer.prefix("VpcId");
    if let Some(var_3908) = &input.vpc_id {
        scope_3907.string(var_3908);
    }
    #[allow(unused_mut)]
    let mut scope_3909 = writer.prefix("DryRun");
    if let Some(var_3910) = &input.dry_run {
        scope_3909.boolean(*var_3910);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link(
    input: &crate::input::DescribeVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3911 = writer.prefix("Filter");
    if let Some(var_3912) = &input.filters {
        let mut list_3914 = scope_3911.start_list(true, Some("Filter"));
        for item_3913 in var_3912 {
            #[allow(unused_mut)]
            let mut entry_3915 = list_3914.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3915, item_3913)?;
        }
        list_3914.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3916 = writer.prefix("DryRun");
    if let Some(var_3917) = &input.dry_run {
        scope_3916.boolean(*var_3917);
    }
    #[allow(unused_mut)]
    let mut scope_3918 = writer.prefix("VpcId");
    if let Some(var_3919) = &input.vpc_ids {
        let mut list_3921 = scope_3918.start_list(true, Some("VpcId"));
        for item_3920 in var_3919 {
            #[allow(unused_mut)]
            let mut entry_3922 = list_3921.entry();
            entry_3922.string(item_3920);
        }
        list_3921.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link_dns_support(
    input: &crate::input::DescribeVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3923 = writer.prefix("MaxResults");
    if let Some(var_3924) = &input.max_results {
        scope_3923.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3924).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3925 = writer.prefix("NextToken");
    if let Some(var_3926) = &input.next_token {
        scope_3925.string(var_3926);
    }
    #[allow(unused_mut)]
    let mut scope_3927 = writer.prefix("VpcIds");
    if let Some(var_3928) = &input.vpc_ids {
        let mut list_3930 = scope_3927.start_list(true, Some("VpcId"));
        for item_3929 in var_3928 {
            #[allow(unused_mut)]
            let mut entry_3931 = list_3930.entry();
            entry_3931.string(item_3929);
        }
        list_3930.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connection_notifications(
    input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3932 = writer.prefix("DryRun");
    if let Some(var_3933) = &input.dry_run {
        scope_3932.boolean(*var_3933);
    }
    #[allow(unused_mut)]
    let mut scope_3934 = writer.prefix("ConnectionNotificationId");
    if let Some(var_3935) = &input.connection_notification_id {
        scope_3934.string(var_3935);
    }
    #[allow(unused_mut)]
    let mut scope_3936 = writer.prefix("Filter");
    if let Some(var_3937) = &input.filters {
        let mut list_3939 = scope_3936.start_list(true, Some("Filter"));
        for item_3938 in var_3937 {
            #[allow(unused_mut)]
            let mut entry_3940 = list_3939.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3940, item_3938)?;
        }
        list_3939.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3941 = writer.prefix("MaxResults");
    if let Some(var_3942) = &input.max_results {
        scope_3941.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3942).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3943 = writer.prefix("NextToken");
    if let Some(var_3944) = &input.next_token {
        scope_3943.string(var_3944);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connections(
    input: &crate::input::DescribeVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnections",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3945 = writer.prefix("DryRun");
    if let Some(var_3946) = &input.dry_run {
        scope_3945.boolean(*var_3946);
    }
    #[allow(unused_mut)]
    let mut scope_3947 = writer.prefix("Filter");
    if let Some(var_3948) = &input.filters {
        let mut list_3950 = scope_3947.start_list(true, Some("Filter"));
        for item_3949 in var_3948 {
            #[allow(unused_mut)]
            let mut entry_3951 = list_3950.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3951, item_3949)?;
        }
        list_3950.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3952 = writer.prefix("MaxResults");
    if let Some(var_3953) = &input.max_results {
        scope_3952.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3953).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3954 = writer.prefix("NextToken");
    if let Some(var_3955) = &input.next_token {
        scope_3954.string(var_3955);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoints(
    input: &crate::input::DescribeVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3956 = writer.prefix("DryRun");
    if let Some(var_3957) = &input.dry_run {
        scope_3956.boolean(*var_3957);
    }
    #[allow(unused_mut)]
    let mut scope_3958 = writer.prefix("VpcEndpointId");
    if let Some(var_3959) = &input.vpc_endpoint_ids {
        let mut list_3961 = scope_3958.start_list(true, Some("item"));
        for item_3960 in var_3959 {
            #[allow(unused_mut)]
            let mut entry_3962 = list_3961.entry();
            entry_3962.string(item_3960);
        }
        list_3961.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3963 = writer.prefix("Filter");
    if let Some(var_3964) = &input.filters {
        let mut list_3966 = scope_3963.start_list(true, Some("Filter"));
        for item_3965 in var_3964 {
            #[allow(unused_mut)]
            let mut entry_3967 = list_3966.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3967, item_3965)?;
        }
        list_3966.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3968 = writer.prefix("MaxResults");
    if let Some(var_3969) = &input.max_results {
        scope_3968.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3969).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3970 = writer.prefix("NextToken");
    if let Some(var_3971) = &input.next_token {
        scope_3970.string(var_3971);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_configurations(
    input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3972 = writer.prefix("DryRun");
    if let Some(var_3973) = &input.dry_run {
        scope_3972.boolean(*var_3973);
    }
    #[allow(unused_mut)]
    let mut scope_3974 = writer.prefix("ServiceId");
    if let Some(var_3975) = &input.service_ids {
        let mut list_3977 = scope_3974.start_list(true, Some("item"));
        for item_3976 in var_3975 {
            #[allow(unused_mut)]
            let mut entry_3978 = list_3977.entry();
            entry_3978.string(item_3976);
        }
        list_3977.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3979 = writer.prefix("Filter");
    if let Some(var_3980) = &input.filters {
        let mut list_3982 = scope_3979.start_list(true, Some("Filter"));
        for item_3981 in var_3980 {
            #[allow(unused_mut)]
            let mut entry_3983 = list_3982.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3983, item_3981)?;
        }
        list_3982.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3984 = writer.prefix("MaxResults");
    if let Some(var_3985) = &input.max_results {
        scope_3984.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3985).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3986 = writer.prefix("NextToken");
    if let Some(var_3987) = &input.next_token {
        scope_3986.string(var_3987);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_permissions(
    input: &crate::input::DescribeVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3988 = writer.prefix("DryRun");
    if let Some(var_3989) = &input.dry_run {
        scope_3988.boolean(*var_3989);
    }
    #[allow(unused_mut)]
    let mut scope_3990 = writer.prefix("ServiceId");
    if let Some(var_3991) = &input.service_id {
        scope_3990.string(var_3991);
    }
    #[allow(unused_mut)]
    let mut scope_3992 = writer.prefix("Filter");
    if let Some(var_3993) = &input.filters {
        let mut list_3995 = scope_3992.start_list(true, Some("Filter"));
        for item_3994 in var_3993 {
            #[allow(unused_mut)]
            let mut entry_3996 = list_3995.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3996, item_3994)?;
        }
        list_3995.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3997 = writer.prefix("MaxResults");
    if let Some(var_3998) = &input.max_results {
        scope_3997.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3998).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3999 = writer.prefix("NextToken");
    if let Some(var_4000) = &input.next_token {
        scope_3999.string(var_4000);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_services(
    input: &crate::input::DescribeVpcEndpointServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4001 = writer.prefix("DryRun");
    if let Some(var_4002) = &input.dry_run {
        scope_4001.boolean(*var_4002);
    }
    #[allow(unused_mut)]
    let mut scope_4003 = writer.prefix("ServiceName");
    if let Some(var_4004) = &input.service_names {
        let mut list_4006 = scope_4003.start_list(true, Some("item"));
        for item_4005 in var_4004 {
            #[allow(unused_mut)]
            let mut entry_4007 = list_4006.entry();
            entry_4007.string(item_4005);
        }
        list_4006.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4008 = writer.prefix("Filter");
    if let Some(var_4009) = &input.filters {
        let mut list_4011 = scope_4008.start_list(true, Some("Filter"));
        for item_4010 in var_4009 {
            #[allow(unused_mut)]
            let mut entry_4012 = list_4011.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4012, item_4010)?;
        }
        list_4011.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4013 = writer.prefix("MaxResults");
    if let Some(var_4014) = &input.max_results {
        scope_4013.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4014).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4015 = writer.prefix("NextToken");
    if let Some(var_4016) = &input.next_token {
        scope_4015.string(var_4016);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_peering_connections(
    input: &crate::input::DescribeVpcPeeringConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4017 = writer.prefix("Filter");
    if let Some(var_4018) = &input.filters {
        let mut list_4020 = scope_4017.start_list(true, Some("Filter"));
        for item_4019 in var_4018 {
            #[allow(unused_mut)]
            let mut entry_4021 = list_4020.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4021, item_4019)?;
        }
        list_4020.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4022 = writer.prefix("DryRun");
    if let Some(var_4023) = &input.dry_run {
        scope_4022.boolean(*var_4023);
    }
    #[allow(unused_mut)]
    let mut scope_4024 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_4025) = &input.vpc_peering_connection_ids {
        let mut list_4027 = scope_4024.start_list(true, Some("item"));
        for item_4026 in var_4025 {
            #[allow(unused_mut)]
            let mut entry_4028 = list_4027.entry();
            entry_4028.string(item_4026);
        }
        list_4027.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4029 = writer.prefix("NextToken");
    if let Some(var_4030) = &input.next_token {
        scope_4029.string(var_4030);
    }
    #[allow(unused_mut)]
    let mut scope_4031 = writer.prefix("MaxResults");
    if let Some(var_4032) = &input.max_results {
        scope_4031.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4032).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpcs(
    input: &crate::input::DescribeVpcsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4033 = writer.prefix("Filter");
    if let Some(var_4034) = &input.filters {
        let mut list_4036 = scope_4033.start_list(true, Some("Filter"));
        for item_4035 in var_4034 {
            #[allow(unused_mut)]
            let mut entry_4037 = list_4036.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4037, item_4035)?;
        }
        list_4036.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4038 = writer.prefix("VpcId");
    if let Some(var_4039) = &input.vpc_ids {
        let mut list_4041 = scope_4038.start_list(true, Some("VpcId"));
        for item_4040 in var_4039 {
            #[allow(unused_mut)]
            let mut entry_4042 = list_4041.entry();
            entry_4042.string(item_4040);
        }
        list_4041.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4043 = writer.prefix("DryRun");
    if let Some(var_4044) = &input.dry_run {
        scope_4043.boolean(*var_4044);
    }
    #[allow(unused_mut)]
    let mut scope_4045 = writer.prefix("NextToken");
    if let Some(var_4046) = &input.next_token {
        scope_4045.string(var_4046);
    }
    #[allow(unused_mut)]
    let mut scope_4047 = writer.prefix("MaxResults");
    if let Some(var_4048) = &input.max_results {
        scope_4047.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4048).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_connections(
    input: &crate::input::DescribeVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4049 = writer.prefix("Filter");
    if let Some(var_4050) = &input.filters {
        let mut list_4052 = scope_4049.start_list(true, Some("Filter"));
        for item_4051 in var_4050 {
            #[allow(unused_mut)]
            let mut entry_4053 = list_4052.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4053, item_4051)?;
        }
        list_4052.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4054 = writer.prefix("VpnConnectionId");
    if let Some(var_4055) = &input.vpn_connection_ids {
        let mut list_4057 = scope_4054.start_list(true, Some("VpnConnectionId"));
        for item_4056 in var_4055 {
            #[allow(unused_mut)]
            let mut entry_4058 = list_4057.entry();
            entry_4058.string(item_4056);
        }
        list_4057.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4059 = writer.prefix("DryRun");
    if let Some(var_4060) = &input.dry_run {
        scope_4059.boolean(*var_4060);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_gateways(
    input: &crate::input::DescribeVpnGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4061 = writer.prefix("Filter");
    if let Some(var_4062) = &input.filters {
        let mut list_4064 = scope_4061.start_list(true, Some("Filter"));
        for item_4063 in var_4062 {
            #[allow(unused_mut)]
            let mut entry_4065 = list_4064.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4065, item_4063)?;
        }
        list_4064.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4066 = writer.prefix("VpnGatewayId");
    if let Some(var_4067) = &input.vpn_gateway_ids {
        let mut list_4069 = scope_4066.start_list(true, Some("VpnGatewayId"));
        for item_4068 in var_4067 {
            #[allow(unused_mut)]
            let mut entry_4070 = list_4069.entry();
            entry_4070.string(item_4068);
        }
        list_4069.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4071 = writer.prefix("DryRun");
    if let Some(var_4072) = &input.dry_run {
        scope_4071.boolean(*var_4072);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_classic_link_vpc(
    input: &crate::input::DetachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4073 = writer.prefix("DryRun");
    if let Some(var_4074) = &input.dry_run {
        scope_4073.boolean(*var_4074);
    }
    #[allow(unused_mut)]
    let mut scope_4075 = writer.prefix("InstanceId");
    if let Some(var_4076) = &input.instance_id {
        scope_4075.string(var_4076);
    }
    #[allow(unused_mut)]
    let mut scope_4077 = writer.prefix("VpcId");
    if let Some(var_4078) = &input.vpc_id {
        scope_4077.string(var_4078);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_internet_gateway(
    input: &crate::input::DetachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4079 = writer.prefix("DryRun");
    if let Some(var_4080) = &input.dry_run {
        scope_4079.boolean(*var_4080);
    }
    #[allow(unused_mut)]
    let mut scope_4081 = writer.prefix("InternetGatewayId");
    if let Some(var_4082) = &input.internet_gateway_id {
        scope_4081.string(var_4082);
    }
    #[allow(unused_mut)]
    let mut scope_4083 = writer.prefix("VpcId");
    if let Some(var_4084) = &input.vpc_id {
        scope_4083.string(var_4084);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_network_interface(
    input: &crate::input::DetachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4085 = writer.prefix("AttachmentId");
    if let Some(var_4086) = &input.attachment_id {
        scope_4085.string(var_4086);
    }
    #[allow(unused_mut)]
    let mut scope_4087 = writer.prefix("DryRun");
    if let Some(var_4088) = &input.dry_run {
        scope_4087.boolean(*var_4088);
    }
    #[allow(unused_mut)]
    let mut scope_4089 = writer.prefix("Force");
    if let Some(var_4090) = &input.force {
        scope_4089.boolean(*var_4090);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_volume(
    input: &crate::input::DetachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4091 = writer.prefix("Device");
    if let Some(var_4092) = &input.device {
        scope_4091.string(var_4092);
    }
    #[allow(unused_mut)]
    let mut scope_4093 = writer.prefix("Force");
    if let Some(var_4094) = &input.force {
        scope_4093.boolean(*var_4094);
    }
    #[allow(unused_mut)]
    let mut scope_4095 = writer.prefix("InstanceId");
    if let Some(var_4096) = &input.instance_id {
        scope_4095.string(var_4096);
    }
    #[allow(unused_mut)]
    let mut scope_4097 = writer.prefix("VolumeId");
    if let Some(var_4098) = &input.volume_id {
        scope_4097.string(var_4098);
    }
    #[allow(unused_mut)]
    let mut scope_4099 = writer.prefix("DryRun");
    if let Some(var_4100) = &input.dry_run {
        scope_4099.boolean(*var_4100);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_vpn_gateway(
    input: &crate::input::DetachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4101 = writer.prefix("VpcId");
    if let Some(var_4102) = &input.vpc_id {
        scope_4101.string(var_4102);
    }
    #[allow(unused_mut)]
    let mut scope_4103 = writer.prefix("VpnGatewayId");
    if let Some(var_4104) = &input.vpn_gateway_id {
        scope_4103.string(var_4104);
    }
    #[allow(unused_mut)]
    let mut scope_4105 = writer.prefix("DryRun");
    if let Some(var_4106) = &input.dry_run {
        scope_4105.boolean(*var_4106);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ebs_encryption_by_default(
    input: &crate::input::DisableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4107 = writer.prefix("DryRun");
    if let Some(var_4108) = &input.dry_run {
        scope_4107.boolean(*var_4108);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_launch(
    input: &crate::input::DisableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4109 = writer.prefix("ImageId");
    if let Some(var_4110) = &input.image_id {
        scope_4109.string(var_4110);
    }
    #[allow(unused_mut)]
    let mut scope_4111 = writer.prefix("Force");
    if let Some(var_4112) = &input.force {
        scope_4111.boolean(*var_4112);
    }
    #[allow(unused_mut)]
    let mut scope_4113 = writer.prefix("DryRun");
    if let Some(var_4114) = &input.dry_run {
        scope_4113.boolean(*var_4114);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_snapshot_restores(
    input: &crate::input::DisableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4115 = writer.prefix("AvailabilityZone");
    if let Some(var_4116) = &input.availability_zones {
        let mut list_4118 = scope_4115.start_list(true, Some("AvailabilityZone"));
        for item_4117 in var_4116 {
            #[allow(unused_mut)]
            let mut entry_4119 = list_4118.entry();
            entry_4119.string(item_4117);
        }
        list_4118.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4120 = writer.prefix("SourceSnapshotId");
    if let Some(var_4121) = &input.source_snapshot_ids {
        let mut list_4123 = scope_4120.start_list(true, Some("SnapshotId"));
        for item_4122 in var_4121 {
            #[allow(unused_mut)]
            let mut entry_4124 = list_4123.entry();
            entry_4124.string(item_4122);
        }
        list_4123.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4125 = writer.prefix("DryRun");
    if let Some(var_4126) = &input.dry_run {
        scope_4125.boolean(*var_4126);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_image_deprecation(
    input: &crate::input::DisableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4127 = writer.prefix("ImageId");
    if let Some(var_4128) = &input.image_id {
        scope_4127.string(var_4128);
    }
    #[allow(unused_mut)]
    let mut scope_4129 = writer.prefix("DryRun");
    if let Some(var_4130) = &input.dry_run {
        scope_4129.boolean(*var_4130);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ipam_organization_admin_account(
    input: &crate::input::DisableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4131 = writer.prefix("DryRun");
    if let Some(var_4132) = &input.dry_run {
        scope_4131.boolean(*var_4132);
    }
    #[allow(unused_mut)]
    let mut scope_4133 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4134) = &input.delegated_admin_account_id {
        scope_4133.string(var_4134);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_serial_console_access(
    input: &crate::input::DisableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4135 = writer.prefix("DryRun");
    if let Some(var_4136) = &input.dry_run {
        scope_4135.boolean(*var_4136);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_transit_gateway_route_table_propagation(
    input: &crate::input::DisableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4137 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4138) = &input.transit_gateway_route_table_id {
        scope_4137.string(var_4138);
    }
    #[allow(unused_mut)]
    let mut scope_4139 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4140) = &input.transit_gateway_attachment_id {
        scope_4139.string(var_4140);
    }
    #[allow(unused_mut)]
    let mut scope_4141 = writer.prefix("DryRun");
    if let Some(var_4142) = &input.dry_run {
        scope_4141.boolean(*var_4142);
    }
    #[allow(unused_mut)]
    let mut scope_4143 = writer.prefix("TransitGatewayRouteTableAnnouncementId");
    if let Some(var_4144) = &input.transit_gateway_route_table_announcement_id {
        scope_4143.string(var_4144);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vgw_route_propagation(
    input: &crate::input::DisableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4145 = writer.prefix("GatewayId");
    if let Some(var_4146) = &input.gateway_id {
        scope_4145.string(var_4146);
    }
    #[allow(unused_mut)]
    let mut scope_4147 = writer.prefix("RouteTableId");
    if let Some(var_4148) = &input.route_table_id {
        scope_4147.string(var_4148);
    }
    #[allow(unused_mut)]
    let mut scope_4149 = writer.prefix("DryRun");
    if let Some(var_4150) = &input.dry_run {
        scope_4149.boolean(*var_4150);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link(
    input: &crate::input::DisableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4151 = writer.prefix("DryRun");
    if let Some(var_4152) = &input.dry_run {
        scope_4151.boolean(*var_4152);
    }
    #[allow(unused_mut)]
    let mut scope_4153 = writer.prefix("VpcId");
    if let Some(var_4154) = &input.vpc_id {
        scope_4153.string(var_4154);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link_dns_support(
    input: &crate::input::DisableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4155 = writer.prefix("VpcId");
    if let Some(var_4156) = &input.vpc_id {
        scope_4155.string(var_4156);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_address(
    input: &crate::input::DisassociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4157 = writer.prefix("AssociationId");
    if let Some(var_4158) = &input.association_id {
        scope_4157.string(var_4158);
    }
    #[allow(unused_mut)]
    let mut scope_4159 = writer.prefix("PublicIp");
    if let Some(var_4160) = &input.public_ip {
        scope_4159.string(var_4160);
    }
    #[allow(unused_mut)]
    let mut scope_4161 = writer.prefix("DryRun");
    if let Some(var_4162) = &input.dry_run {
        scope_4161.boolean(*var_4162);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_client_vpn_target_network(
    input: &crate::input::DisassociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4163 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4164) = &input.client_vpn_endpoint_id {
        scope_4163.string(var_4164);
    }
    #[allow(unused_mut)]
    let mut scope_4165 = writer.prefix("AssociationId");
    if let Some(var_4166) = &input.association_id {
        scope_4165.string(var_4166);
    }
    #[allow(unused_mut)]
    let mut scope_4167 = writer.prefix("DryRun");
    if let Some(var_4168) = &input.dry_run {
        scope_4167.boolean(*var_4168);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_enclave_certificate_iam_role(
    input: &crate::input::DisassociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4169 = writer.prefix("CertificateArn");
    if let Some(var_4170) = &input.certificate_arn {
        scope_4169.string(var_4170);
    }
    #[allow(unused_mut)]
    let mut scope_4171 = writer.prefix("RoleArn");
    if let Some(var_4172) = &input.role_arn {
        scope_4171.string(var_4172);
    }
    #[allow(unused_mut)]
    let mut scope_4173 = writer.prefix("DryRun");
    if let Some(var_4174) = &input.dry_run {
        scope_4173.boolean(*var_4174);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_iam_instance_profile(
    input: &crate::input::DisassociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateIamInstanceProfile",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4175 = writer.prefix("AssociationId");
    if let Some(var_4176) = &input.association_id {
        scope_4175.string(var_4176);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_instance_event_window(
    input: &crate::input::DisassociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateInstanceEventWindow",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4177 = writer.prefix("DryRun");
    if let Some(var_4178) = &input.dry_run {
        scope_4177.boolean(*var_4178);
    }
    #[allow(unused_mut)]
    let mut scope_4179 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4180) = &input.instance_event_window_id {
        scope_4179.string(var_4180);
    }
    #[allow(unused_mut)]
    let mut scope_4181 = writer.prefix("AssociationTarget");
    if let Some(var_4182) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_disassociation_request(scope_4181, var_4182)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_route_table(
    input: &crate::input::DisassociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4183 = writer.prefix("AssociationId");
    if let Some(var_4184) = &input.association_id {
        scope_4183.string(var_4184);
    }
    #[allow(unused_mut)]
    let mut scope_4185 = writer.prefix("DryRun");
    if let Some(var_4186) = &input.dry_run {
        scope_4185.boolean(*var_4186);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_subnet_cidr_block(
    input: &crate::input::DisassociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4187 = writer.prefix("AssociationId");
    if let Some(var_4188) = &input.association_id {
        scope_4187.string(var_4188);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_multicast_domain(
    input: &crate::input::DisassociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4189 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4190) = &input.transit_gateway_multicast_domain_id {
        scope_4189.string(var_4190);
    }
    #[allow(unused_mut)]
    let mut scope_4191 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4192) = &input.transit_gateway_attachment_id {
        scope_4191.string(var_4192);
    }
    #[allow(unused_mut)]
    let mut scope_4193 = writer.prefix("SubnetIds");
    if let Some(var_4194) = &input.subnet_ids {
        let mut list_4196 = scope_4193.start_list(true, Some("item"));
        for item_4195 in var_4194 {
            #[allow(unused_mut)]
            let mut entry_4197 = list_4196.entry();
            entry_4197.string(item_4195);
        }
        list_4196.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4198 = writer.prefix("DryRun");
    if let Some(var_4199) = &input.dry_run {
        scope_4198.boolean(*var_4199);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_policy_table(
    input: &crate::input::DisassociateTransitGatewayPolicyTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayPolicyTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4200 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_4201) = &input.transit_gateway_policy_table_id {
        scope_4200.string(var_4201);
    }
    #[allow(unused_mut)]
    let mut scope_4202 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4203) = &input.transit_gateway_attachment_id {
        scope_4202.string(var_4203);
    }
    #[allow(unused_mut)]
    let mut scope_4204 = writer.prefix("DryRun");
    if let Some(var_4205) = &input.dry_run {
        scope_4204.boolean(*var_4205);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_route_table(
    input: &crate::input::DisassociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4206 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4207) = &input.transit_gateway_route_table_id {
        scope_4206.string(var_4207);
    }
    #[allow(unused_mut)]
    let mut scope_4208 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4209) = &input.transit_gateway_attachment_id {
        scope_4208.string(var_4209);
    }
    #[allow(unused_mut)]
    let mut scope_4210 = writer.prefix("DryRun");
    if let Some(var_4211) = &input.dry_run {
        scope_4210.boolean(*var_4211);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_trunk_interface(
    input: &crate::input::DisassociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4212 = writer.prefix("AssociationId");
    if let Some(var_4213) = &input.association_id {
        scope_4212.string(var_4213);
    }
    #[allow(unused_mut)]
    let mut scope_4214 = writer.prefix("ClientToken");
    if let Some(var_4215) = &input.client_token {
        scope_4214.string(var_4215);
    }
    #[allow(unused_mut)]
    let mut scope_4216 = writer.prefix("DryRun");
    if let Some(var_4217) = &input.dry_run {
        scope_4216.boolean(*var_4217);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_vpc_cidr_block(
    input: &crate::input::DisassociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4218 = writer.prefix("AssociationId");
    if let Some(var_4219) = &input.association_id {
        scope_4218.string(var_4219);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ebs_encryption_by_default(
    input: &crate::input::EnableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4220 = writer.prefix("DryRun");
    if let Some(var_4221) = &input.dry_run {
        scope_4220.boolean(*var_4221);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_launch(
    input: &crate::input::EnableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4222 = writer.prefix("ImageId");
    if let Some(var_4223) = &input.image_id {
        scope_4222.string(var_4223);
    }
    #[allow(unused_mut)]
    let mut scope_4224 = writer.prefix("ResourceType");
    if let Some(var_4225) = &input.resource_type {
        scope_4224.string(var_4225);
    }
    #[allow(unused_mut)]
    let mut scope_4226 = writer.prefix("SnapshotConfiguration");
    if let Some(var_4227) = &input.snapshot_configuration {
        crate::query_ser::serialize_structure_crate_model_fast_launch_snapshot_configuration_request(scope_4226, var_4227)?;
    }
    #[allow(unused_mut)]
    let mut scope_4228 = writer.prefix("LaunchTemplate");
    if let Some(var_4229) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_fast_launch_launch_template_specification_request(scope_4228, var_4229)?;
    }
    #[allow(unused_mut)]
    let mut scope_4230 = writer.prefix("MaxParallelLaunches");
    if let Some(var_4231) = &input.max_parallel_launches {
        scope_4230.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4231).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4232 = writer.prefix("DryRun");
    if let Some(var_4233) = &input.dry_run {
        scope_4232.boolean(*var_4233);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_snapshot_restores(
    input: &crate::input::EnableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4234 = writer.prefix("AvailabilityZone");
    if let Some(var_4235) = &input.availability_zones {
        let mut list_4237 = scope_4234.start_list(true, Some("AvailabilityZone"));
        for item_4236 in var_4235 {
            #[allow(unused_mut)]
            let mut entry_4238 = list_4237.entry();
            entry_4238.string(item_4236);
        }
        list_4237.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4239 = writer.prefix("SourceSnapshotId");
    if let Some(var_4240) = &input.source_snapshot_ids {
        let mut list_4242 = scope_4239.start_list(true, Some("SnapshotId"));
        for item_4241 in var_4240 {
            #[allow(unused_mut)]
            let mut entry_4243 = list_4242.entry();
            entry_4243.string(item_4241);
        }
        list_4242.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4244 = writer.prefix("DryRun");
    if let Some(var_4245) = &input.dry_run {
        scope_4244.boolean(*var_4245);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_image_deprecation(
    input: &crate::input::EnableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4246 = writer.prefix("ImageId");
    if let Some(var_4247) = &input.image_id {
        scope_4246.string(var_4247);
    }
    #[allow(unused_mut)]
    let mut scope_4248 = writer.prefix("DeprecateAt");
    if let Some(var_4249) = &input.deprecate_at {
        scope_4248.date_time(var_4249, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4250 = writer.prefix("DryRun");
    if let Some(var_4251) = &input.dry_run {
        scope_4250.boolean(*var_4251);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ipam_organization_admin_account(
    input: &crate::input::EnableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4252 = writer.prefix("DryRun");
    if let Some(var_4253) = &input.dry_run {
        scope_4252.boolean(*var_4253);
    }
    #[allow(unused_mut)]
    let mut scope_4254 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4255) = &input.delegated_admin_account_id {
        scope_4254.string(var_4255);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_serial_console_access(
    input: &crate::input::EnableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4256 = writer.prefix("DryRun");
    if let Some(var_4257) = &input.dry_run {
        scope_4256.boolean(*var_4257);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_transit_gateway_route_table_propagation(
    input: &crate::input::EnableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4258 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4259) = &input.transit_gateway_route_table_id {
        scope_4258.string(var_4259);
    }
    #[allow(unused_mut)]
    let mut scope_4260 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4261) = &input.transit_gateway_attachment_id {
        scope_4260.string(var_4261);
    }
    #[allow(unused_mut)]
    let mut scope_4262 = writer.prefix("DryRun");
    if let Some(var_4263) = &input.dry_run {
        scope_4262.boolean(*var_4263);
    }
    #[allow(unused_mut)]
    let mut scope_4264 = writer.prefix("TransitGatewayRouteTableAnnouncementId");
    if let Some(var_4265) = &input.transit_gateway_route_table_announcement_id {
        scope_4264.string(var_4265);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vgw_route_propagation(
    input: &crate::input::EnableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4266 = writer.prefix("GatewayId");
    if let Some(var_4267) = &input.gateway_id {
        scope_4266.string(var_4267);
    }
    #[allow(unused_mut)]
    let mut scope_4268 = writer.prefix("RouteTableId");
    if let Some(var_4269) = &input.route_table_id {
        scope_4268.string(var_4269);
    }
    #[allow(unused_mut)]
    let mut scope_4270 = writer.prefix("DryRun");
    if let Some(var_4271) = &input.dry_run {
        scope_4270.boolean(*var_4271);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_volume_io(
    input: &crate::input::EnableVolumeIoInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4272 = writer.prefix("DryRun");
    if let Some(var_4273) = &input.dry_run {
        scope_4272.boolean(*var_4273);
    }
    #[allow(unused_mut)]
    let mut scope_4274 = writer.prefix("VolumeId");
    if let Some(var_4275) = &input.volume_id {
        scope_4274.string(var_4275);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link(
    input: &crate::input::EnableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4276 = writer.prefix("DryRun");
    if let Some(var_4277) = &input.dry_run {
        scope_4276.boolean(*var_4277);
    }
    #[allow(unused_mut)]
    let mut scope_4278 = writer.prefix("VpcId");
    if let Some(var_4279) = &input.vpc_id {
        scope_4278.string(var_4279);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link_dns_support(
    input: &crate::input::EnableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4280 = writer.prefix("VpcId");
    if let Some(var_4281) = &input.vpc_id {
        scope_4280.string(var_4281);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ExportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4282 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4283) = &input.client_vpn_endpoint_id {
        scope_4282.string(var_4283);
    }
    #[allow(unused_mut)]
    let mut scope_4284 = writer.prefix("DryRun");
    if let Some(var_4285) = &input.dry_run {
        scope_4284.boolean(*var_4285);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_configuration(
    input: &crate::input::ExportClientVpnClientConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4286 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4287) = &input.client_vpn_endpoint_id {
        scope_4286.string(var_4287);
    }
    #[allow(unused_mut)]
    let mut scope_4288 = writer.prefix("DryRun");
    if let Some(var_4289) = &input.dry_run {
        scope_4288.boolean(*var_4289);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_image(
    input: &crate::input::ExportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4290 = writer.prefix("ClientToken");
    if let Some(var_4291) = &input.client_token {
        scope_4290.string(var_4291);
    }
    #[allow(unused_mut)]
    let mut scope_4292 = writer.prefix("Description");
    if let Some(var_4293) = &input.description {
        scope_4292.string(var_4293);
    }
    #[allow(unused_mut)]
    let mut scope_4294 = writer.prefix("DiskImageFormat");
    if let Some(var_4295) = &input.disk_image_format {
        scope_4294.string(var_4295.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4296 = writer.prefix("DryRun");
    if let Some(var_4297) = &input.dry_run {
        scope_4296.boolean(*var_4297);
    }
    #[allow(unused_mut)]
    let mut scope_4298 = writer.prefix("ImageId");
    if let Some(var_4299) = &input.image_id {
        scope_4298.string(var_4299);
    }
    #[allow(unused_mut)]
    let mut scope_4300 = writer.prefix("S3ExportLocation");
    if let Some(var_4301) = &input.s3_export_location {
        crate::query_ser::serialize_structure_crate_model_export_task_s3_location_request(
            scope_4300, var_4301,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4302 = writer.prefix("RoleName");
    if let Some(var_4303) = &input.role_name {
        scope_4302.string(var_4303);
    }
    #[allow(unused_mut)]
    let mut scope_4304 = writer.prefix("TagSpecification");
    if let Some(var_4305) = &input.tag_specifications {
        let mut list_4307 = scope_4304.start_list(true, Some("item"));
        for item_4306 in var_4305 {
            #[allow(unused_mut)]
            let mut entry_4308 = list_4307.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4308, item_4306,
            )?;
        }
        list_4307.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_transit_gateway_routes(
    input: &crate::input::ExportTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4309 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4310) = &input.transit_gateway_route_table_id {
        scope_4309.string(var_4310);
    }
    #[allow(unused_mut)]
    let mut scope_4311 = writer.prefix("Filter");
    if let Some(var_4312) = &input.filters {
        let mut list_4314 = scope_4311.start_list(true, Some("Filter"));
        for item_4313 in var_4312 {
            #[allow(unused_mut)]
            let mut entry_4315 = list_4314.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4315, item_4313)?;
        }
        list_4314.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4316 = writer.prefix("S3Bucket");
    if let Some(var_4317) = &input.s3_bucket {
        scope_4316.string(var_4317);
    }
    #[allow(unused_mut)]
    let mut scope_4318 = writer.prefix("DryRun");
    if let Some(var_4319) = &input.dry_run {
        scope_4318.boolean(*var_4319);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_enclave_certificate_iam_roles(
    input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetAssociatedEnclaveCertificateIamRoles",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4320 = writer.prefix("CertificateArn");
    if let Some(var_4321) = &input.certificate_arn {
        scope_4320.string(var_4321);
    }
    #[allow(unused_mut)]
    let mut scope_4322 = writer.prefix("DryRun");
    if let Some(var_4323) = &input.dry_run {
        scope_4322.boolean(*var_4323);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_ipv6_pool_cidrs(
    input: &crate::input::GetAssociatedIpv6PoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4324 = writer.prefix("PoolId");
    if let Some(var_4325) = &input.pool_id {
        scope_4324.string(var_4325);
    }
    #[allow(unused_mut)]
    let mut scope_4326 = writer.prefix("NextToken");
    if let Some(var_4327) = &input.next_token {
        scope_4326.string(var_4327);
    }
    #[allow(unused_mut)]
    let mut scope_4328 = writer.prefix("MaxResults");
    if let Some(var_4329) = &input.max_results {
        scope_4328.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4329).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4330 = writer.prefix("DryRun");
    if let Some(var_4331) = &input.dry_run {
        scope_4330.boolean(*var_4331);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_capacity_reservation_usage(
    input: &crate::input::GetCapacityReservationUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4332 = writer.prefix("CapacityReservationId");
    if let Some(var_4333) = &input.capacity_reservation_id {
        scope_4332.string(var_4333);
    }
    #[allow(unused_mut)]
    let mut scope_4334 = writer.prefix("NextToken");
    if let Some(var_4335) = &input.next_token {
        scope_4334.string(var_4335);
    }
    #[allow(unused_mut)]
    let mut scope_4336 = writer.prefix("MaxResults");
    if let Some(var_4337) = &input.max_results {
        scope_4336.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4337).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4338 = writer.prefix("DryRun");
    if let Some(var_4339) = &input.dry_run {
        scope_4338.boolean(*var_4339);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_coip_pool_usage(
    input: &crate::input::GetCoipPoolUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4340 = writer.prefix("PoolId");
    if let Some(var_4341) = &input.pool_id {
        scope_4340.string(var_4341);
    }
    #[allow(unused_mut)]
    let mut scope_4342 = writer.prefix("Filter");
    if let Some(var_4343) = &input.filters {
        let mut list_4345 = scope_4342.start_list(true, Some("Filter"));
        for item_4344 in var_4343 {
            #[allow(unused_mut)]
            let mut entry_4346 = list_4345.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4346, item_4344)?;
        }
        list_4345.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4347 = writer.prefix("MaxResults");
    if let Some(var_4348) = &input.max_results {
        scope_4347.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4348).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4349 = writer.prefix("NextToken");
    if let Some(var_4350) = &input.next_token {
        scope_4349.string(var_4350);
    }
    #[allow(unused_mut)]
    let mut scope_4351 = writer.prefix("DryRun");
    if let Some(var_4352) = &input.dry_run {
        scope_4351.boolean(*var_4352);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_output(
    input: &crate::input::GetConsoleOutputInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4353 = writer.prefix("InstanceId");
    if let Some(var_4354) = &input.instance_id {
        scope_4353.string(var_4354);
    }
    #[allow(unused_mut)]
    let mut scope_4355 = writer.prefix("DryRun");
    if let Some(var_4356) = &input.dry_run {
        scope_4355.boolean(*var_4356);
    }
    #[allow(unused_mut)]
    let mut scope_4357 = writer.prefix("Latest");
    if let Some(var_4358) = &input.latest {
        scope_4357.boolean(*var_4358);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_screenshot(
    input: &crate::input::GetConsoleScreenshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4359 = writer.prefix("DryRun");
    if let Some(var_4360) = &input.dry_run {
        scope_4359.boolean(*var_4360);
    }
    #[allow(unused_mut)]
    let mut scope_4361 = writer.prefix("InstanceId");
    if let Some(var_4362) = &input.instance_id {
        scope_4361.string(var_4362);
    }
    #[allow(unused_mut)]
    let mut scope_4363 = writer.prefix("WakeUp");
    if let Some(var_4364) = &input.wake_up {
        scope_4363.boolean(*var_4364);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_default_credit_specification(
    input: &crate::input::GetDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4365 = writer.prefix("DryRun");
    if let Some(var_4366) = &input.dry_run {
        scope_4365.boolean(*var_4366);
    }
    #[allow(unused_mut)]
    let mut scope_4367 = writer.prefix("InstanceFamily");
    if let Some(var_4368) = &input.instance_family {
        scope_4367.string(var_4368.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_default_kms_key_id(
    input: &crate::input::GetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4369 = writer.prefix("DryRun");
    if let Some(var_4370) = &input.dry_run {
        scope_4369.boolean(*var_4370);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_encryption_by_default(
    input: &crate::input::GetEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4371 = writer.prefix("DryRun");
    if let Some(var_4372) = &input.dry_run {
        scope_4371.boolean(*var_4372);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_flow_logs_integration_template(
    input: &crate::input::GetFlowLogsIntegrationTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetFlowLogsIntegrationTemplate",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4373 = writer.prefix("DryRun");
    if let Some(var_4374) = &input.dry_run {
        scope_4373.boolean(*var_4374);
    }
    #[allow(unused_mut)]
    let mut scope_4375 = writer.prefix("FlowLogId");
    if let Some(var_4376) = &input.flow_log_id {
        scope_4375.string(var_4376);
    }
    #[allow(unused_mut)]
    let mut scope_4377 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_4378) = &input.config_delivery_s3_destination_arn {
        scope_4377.string(var_4378);
    }
    #[allow(unused_mut)]
    let mut scope_4379 = writer.prefix("IntegrateService");
    if let Some(var_4380) = &input.integrate_services {
        crate::query_ser::serialize_structure_crate_model_integrate_services(scope_4379, var_4380)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_groups_for_capacity_reservation(
    input: &crate::input::GetGroupsForCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetGroupsForCapacityReservation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4381 = writer.prefix("CapacityReservationId");
    if let Some(var_4382) = &input.capacity_reservation_id {
        scope_4381.string(var_4382);
    }
    #[allow(unused_mut)]
    let mut scope_4383 = writer.prefix("NextToken");
    if let Some(var_4384) = &input.next_token {
        scope_4383.string(var_4384);
    }
    #[allow(unused_mut)]
    let mut scope_4385 = writer.prefix("MaxResults");
    if let Some(var_4386) = &input.max_results {
        scope_4385.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4386).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4387 = writer.prefix("DryRun");
    if let Some(var_4388) = &input.dry_run {
        scope_4387.boolean(*var_4388);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_host_reservation_purchase_preview(
    input: &crate::input::GetHostReservationPurchasePreviewInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetHostReservationPurchasePreview",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4389 = writer.prefix("HostIdSet");
    if let Some(var_4390) = &input.host_id_set {
        let mut list_4392 = scope_4389.start_list(true, Some("item"));
        for item_4391 in var_4390 {
            #[allow(unused_mut)]
            let mut entry_4393 = list_4392.entry();
            entry_4393.string(item_4391);
        }
        list_4392.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4394 = writer.prefix("OfferingId");
    if let Some(var_4395) = &input.offering_id {
        scope_4394.string(var_4395);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_types_from_instance_requirements(
    input: &crate::input::GetInstanceTypesFromInstanceRequirementsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetInstanceTypesFromInstanceRequirements",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4396 = writer.prefix("DryRun");
    if let Some(var_4397) = &input.dry_run {
        scope_4396.boolean(*var_4397);
    }
    #[allow(unused_mut)]
    let mut scope_4398 = writer.prefix("ArchitectureType");
    if let Some(var_4399) = &input.architecture_types {
        let mut list_4401 = scope_4398.start_list(true, Some("item"));
        for item_4400 in var_4399 {
            #[allow(unused_mut)]
            let mut entry_4402 = list_4401.entry();
            entry_4402.string(item_4400.as_str());
        }
        list_4401.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4403 = writer.prefix("VirtualizationType");
    if let Some(var_4404) = &input.virtualization_types {
        let mut list_4406 = scope_4403.start_list(true, Some("item"));
        for item_4405 in var_4404 {
            #[allow(unused_mut)]
            let mut entry_4407 = list_4406.entry();
            entry_4407.string(item_4405.as_str());
        }
        list_4406.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4408 = writer.prefix("InstanceRequirements");
    if let Some(var_4409) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_4408, var_4409,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4410 = writer.prefix("MaxResults");
    if let Some(var_4411) = &input.max_results {
        scope_4410.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4411).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4412 = writer.prefix("NextToken");
    if let Some(var_4413) = &input.next_token {
        scope_4412.string(var_4413);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_uefi_data(
    input: &crate::input::GetInstanceUefiDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetInstanceUefiData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4414 = writer.prefix("InstanceId");
    if let Some(var_4415) = &input.instance_id {
        scope_4414.string(var_4415);
    }
    #[allow(unused_mut)]
    let mut scope_4416 = writer.prefix("DryRun");
    if let Some(var_4417) = &input.dry_run {
        scope_4416.boolean(*var_4417);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_address_history(
    input: &crate::input::GetIpamAddressHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamAddressHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4418 = writer.prefix("DryRun");
    if let Some(var_4419) = &input.dry_run {
        scope_4418.boolean(*var_4419);
    }
    #[allow(unused_mut)]
    let mut scope_4420 = writer.prefix("Cidr");
    if let Some(var_4421) = &input.cidr {
        scope_4420.string(var_4421);
    }
    #[allow(unused_mut)]
    let mut scope_4422 = writer.prefix("IpamScopeId");
    if let Some(var_4423) = &input.ipam_scope_id {
        scope_4422.string(var_4423);
    }
    #[allow(unused_mut)]
    let mut scope_4424 = writer.prefix("VpcId");
    if let Some(var_4425) = &input.vpc_id {
        scope_4424.string(var_4425);
    }
    #[allow(unused_mut)]
    let mut scope_4426 = writer.prefix("StartTime");
    if let Some(var_4427) = &input.start_time {
        scope_4426.date_time(var_4427, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4428 = writer.prefix("EndTime");
    if let Some(var_4429) = &input.end_time {
        scope_4428.date_time(var_4429, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4430 = writer.prefix("MaxResults");
    if let Some(var_4431) = &input.max_results {
        scope_4430.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4431).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4432 = writer.prefix("NextToken");
    if let Some(var_4433) = &input.next_token {
        scope_4432.string(var_4433);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_allocations(
    input: &crate::input::GetIpamPoolAllocationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolAllocations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4434 = writer.prefix("DryRun");
    if let Some(var_4435) = &input.dry_run {
        scope_4434.boolean(*var_4435);
    }
    #[allow(unused_mut)]
    let mut scope_4436 = writer.prefix("IpamPoolId");
    if let Some(var_4437) = &input.ipam_pool_id {
        scope_4436.string(var_4437);
    }
    #[allow(unused_mut)]
    let mut scope_4438 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_4439) = &input.ipam_pool_allocation_id {
        scope_4438.string(var_4439);
    }
    #[allow(unused_mut)]
    let mut scope_4440 = writer.prefix("Filter");
    if let Some(var_4441) = &input.filters {
        let mut list_4443 = scope_4440.start_list(true, Some("Filter"));
        for item_4442 in var_4441 {
            #[allow(unused_mut)]
            let mut entry_4444 = list_4443.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4444, item_4442)?;
        }
        list_4443.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4445 = writer.prefix("MaxResults");
    if let Some(var_4446) = &input.max_results {
        scope_4445.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4446).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4447 = writer.prefix("NextToken");
    if let Some(var_4448) = &input.next_token {
        scope_4447.string(var_4448);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_cidrs(
    input: &crate::input::GetIpamPoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4449 = writer.prefix("DryRun");
    if let Some(var_4450) = &input.dry_run {
        scope_4449.boolean(*var_4450);
    }
    #[allow(unused_mut)]
    let mut scope_4451 = writer.prefix("IpamPoolId");
    if let Some(var_4452) = &input.ipam_pool_id {
        scope_4451.string(var_4452);
    }
    #[allow(unused_mut)]
    let mut scope_4453 = writer.prefix("Filter");
    if let Some(var_4454) = &input.filters {
        let mut list_4456 = scope_4453.start_list(true, Some("Filter"));
        for item_4455 in var_4454 {
            #[allow(unused_mut)]
            let mut entry_4457 = list_4456.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4457, item_4455)?;
        }
        list_4456.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4458 = writer.prefix("MaxResults");
    if let Some(var_4459) = &input.max_results {
        scope_4458.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4459).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4460 = writer.prefix("NextToken");
    if let Some(var_4461) = &input.next_token {
        scope_4460.string(var_4461);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_resource_cidrs(
    input: &crate::input::GetIpamResourceCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamResourceCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4462 = writer.prefix("DryRun");
    if let Some(var_4463) = &input.dry_run {
        scope_4462.boolean(*var_4463);
    }
    #[allow(unused_mut)]
    let mut scope_4464 = writer.prefix("Filter");
    if let Some(var_4465) = &input.filters {
        let mut list_4467 = scope_4464.start_list(true, Some("Filter"));
        for item_4466 in var_4465 {
            #[allow(unused_mut)]
            let mut entry_4468 = list_4467.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4468, item_4466)?;
        }
        list_4467.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4469 = writer.prefix("MaxResults");
    if let Some(var_4470) = &input.max_results {
        scope_4469.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4470).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4471 = writer.prefix("NextToken");
    if let Some(var_4472) = &input.next_token {
        scope_4471.string(var_4472);
    }
    #[allow(unused_mut)]
    let mut scope_4473 = writer.prefix("IpamScopeId");
    if let Some(var_4474) = &input.ipam_scope_id {
        scope_4473.string(var_4474);
    }
    #[allow(unused_mut)]
    let mut scope_4475 = writer.prefix("IpamPoolId");
    if let Some(var_4476) = &input.ipam_pool_id {
        scope_4475.string(var_4476);
    }
    #[allow(unused_mut)]
    let mut scope_4477 = writer.prefix("ResourceId");
    if let Some(var_4478) = &input.resource_id {
        scope_4477.string(var_4478);
    }
    #[allow(unused_mut)]
    let mut scope_4479 = writer.prefix("ResourceType");
    if let Some(var_4480) = &input.resource_type {
        scope_4479.string(var_4480.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4481 = writer.prefix("ResourceTag");
    if let Some(var_4482) = &input.resource_tag {
        crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
            scope_4481, var_4482,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4483 = writer.prefix("ResourceOwner");
    if let Some(var_4484) = &input.resource_owner {
        scope_4483.string(var_4484);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_launch_template_data(
    input: &crate::input::GetLaunchTemplateDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4485 = writer.prefix("DryRun");
    if let Some(var_4486) = &input.dry_run {
        scope_4485.boolean(*var_4486);
    }
    #[allow(unused_mut)]
    let mut scope_4487 = writer.prefix("InstanceId");
    if let Some(var_4488) = &input.instance_id {
        scope_4487.string(var_4488);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_associations(
    input: &crate::input::GetManagedPrefixListAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetManagedPrefixListAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4489 = writer.prefix("DryRun");
    if let Some(var_4490) = &input.dry_run {
        scope_4489.boolean(*var_4490);
    }
    #[allow(unused_mut)]
    let mut scope_4491 = writer.prefix("PrefixListId");
    if let Some(var_4492) = &input.prefix_list_id {
        scope_4491.string(var_4492);
    }
    #[allow(unused_mut)]
    let mut scope_4493 = writer.prefix("MaxResults");
    if let Some(var_4494) = &input.max_results {
        scope_4493.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4494).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4495 = writer.prefix("NextToken");
    if let Some(var_4496) = &input.next_token {
        scope_4495.string(var_4496);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_entries(
    input: &crate::input::GetManagedPrefixListEntriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4497 = writer.prefix("DryRun");
    if let Some(var_4498) = &input.dry_run {
        scope_4497.boolean(*var_4498);
    }
    #[allow(unused_mut)]
    let mut scope_4499 = writer.prefix("PrefixListId");
    if let Some(var_4500) = &input.prefix_list_id {
        scope_4499.string(var_4500);
    }
    #[allow(unused_mut)]
    let mut scope_4501 = writer.prefix("TargetVersion");
    if let Some(var_4502) = &input.target_version {
        scope_4501.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4502).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4503 = writer.prefix("MaxResults");
    if let Some(var_4504) = &input.max_results {
        scope_4503.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4504).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4505 = writer.prefix("NextToken");
    if let Some(var_4506) = &input.next_token {
        scope_4505.string(var_4506);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_analysis_findings(
    input: &crate::input::GetNetworkInsightsAccessScopeAnalysisFindingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeAnalysisFindings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4507 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_4508) = &input.network_insights_access_scope_analysis_id {
        scope_4507.string(var_4508);
    }
    #[allow(unused_mut)]
    let mut scope_4509 = writer.prefix("MaxResults");
    if let Some(var_4510) = &input.max_results {
        scope_4509.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4510).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4511 = writer.prefix("NextToken");
    if let Some(var_4512) = &input.next_token {
        scope_4511.string(var_4512);
    }
    #[allow(unused_mut)]
    let mut scope_4513 = writer.prefix("DryRun");
    if let Some(var_4514) = &input.dry_run {
        scope_4513.boolean(*var_4514);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_content(
    input: &crate::input::GetNetworkInsightsAccessScopeContentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeContent",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4515 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_4516) = &input.network_insights_access_scope_id {
        scope_4515.string(var_4516);
    }
    #[allow(unused_mut)]
    let mut scope_4517 = writer.prefix("DryRun");
    if let Some(var_4518) = &input.dry_run {
        scope_4517.boolean(*var_4518);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_password_data(
    input: &crate::input::GetPasswordDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4519 = writer.prefix("InstanceId");
    if let Some(var_4520) = &input.instance_id {
        scope_4519.string(var_4520);
    }
    #[allow(unused_mut)]
    let mut scope_4521 = writer.prefix("DryRun");
    if let Some(var_4522) = &input.dry_run {
        scope_4521.boolean(*var_4522);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_instances_exchange_quote(
    input: &crate::input::GetReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4523 = writer.prefix("DryRun");
    if let Some(var_4524) = &input.dry_run {
        scope_4523.boolean(*var_4524);
    }
    #[allow(unused_mut)]
    let mut scope_4525 = writer.prefix("ReservedInstanceId");
    if let Some(var_4526) = &input.reserved_instance_ids {
        let mut list_4528 = scope_4525.start_list(true, Some("ReservedInstanceId"));
        for item_4527 in var_4526 {
            #[allow(unused_mut)]
            let mut entry_4529 = list_4528.entry();
            entry_4529.string(item_4527);
        }
        list_4528.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4530 = writer.prefix("TargetConfiguration");
    if let Some(var_4531) = &input.target_configurations {
        let mut list_4533 = scope_4530.start_list(true, Some("TargetConfigurationRequest"));
        for item_4532 in var_4531 {
            #[allow(unused_mut)]
            let mut entry_4534 = list_4533.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_4534, item_4532,
            )?;
        }
        list_4533.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_serial_console_access_status(
    input: &crate::input::GetSerialConsoleAccessStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4535 = writer.prefix("DryRun");
    if let Some(var_4536) = &input.dry_run {
        scope_4535.boolean(*var_4536);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_spot_placement_scores(
    input: &crate::input::GetSpotPlacementScoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSpotPlacementScores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4537 = writer.prefix("InstanceType");
    if let Some(var_4538) = &input.instance_types {
        let mut list_4540 = scope_4537.start_list(true, None);
        for item_4539 in var_4538 {
            #[allow(unused_mut)]
            let mut entry_4541 = list_4540.entry();
            entry_4541.string(item_4539);
        }
        list_4540.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4542 = writer.prefix("TargetCapacity");
    if let Some(var_4543) = &input.target_capacity {
        scope_4542.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4543).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4544 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_4545) = &input.target_capacity_unit_type {
        scope_4544.string(var_4545.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4546 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_4547) = &input.single_availability_zone {
        scope_4546.boolean(*var_4547);
    }
    #[allow(unused_mut)]
    let mut scope_4548 = writer.prefix("RegionName");
    if let Some(var_4549) = &input.region_names {
        let mut list_4551 = scope_4548.start_list(true, None);
        for item_4550 in var_4549 {
            #[allow(unused_mut)]
            let mut entry_4552 = list_4551.entry();
            entry_4552.string(item_4550);
        }
        list_4551.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4553 = writer.prefix("InstanceRequirementsWithMetadata");
    if let Some(var_4554) = &input.instance_requirements_with_metadata {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_with_metadata_request(scope_4553, var_4554)?;
    }
    #[allow(unused_mut)]
    let mut scope_4555 = writer.prefix("DryRun");
    if let Some(var_4556) = &input.dry_run {
        scope_4555.boolean(*var_4556);
    }
    #[allow(unused_mut)]
    let mut scope_4557 = writer.prefix("MaxResults");
    if let Some(var_4558) = &input.max_results {
        scope_4557.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4558).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4559 = writer.prefix("NextToken");
    if let Some(var_4560) = &input.next_token {
        scope_4559.string(var_4560);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_subnet_cidr_reservations(
    input: &crate::input::GetSubnetCidrReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSubnetCidrReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4561 = writer.prefix("Filter");
    if let Some(var_4562) = &input.filters {
        let mut list_4564 = scope_4561.start_list(true, Some("Filter"));
        for item_4563 in var_4562 {
            #[allow(unused_mut)]
            let mut entry_4565 = list_4564.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4565, item_4563)?;
        }
        list_4564.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4566 = writer.prefix("SubnetId");
    if let Some(var_4567) = &input.subnet_id {
        scope_4566.string(var_4567);
    }
    #[allow(unused_mut)]
    let mut scope_4568 = writer.prefix("DryRun");
    if let Some(var_4569) = &input.dry_run {
        scope_4568.boolean(*var_4569);
    }
    #[allow(unused_mut)]
    let mut scope_4570 = writer.prefix("NextToken");
    if let Some(var_4571) = &input.next_token {
        scope_4570.string(var_4571);
    }
    #[allow(unused_mut)]
    let mut scope_4572 = writer.prefix("MaxResults");
    if let Some(var_4573) = &input.max_results {
        scope_4572.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4573).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_attachment_propagations(
    input: &crate::input::GetTransitGatewayAttachmentPropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayAttachmentPropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4574 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4575) = &input.transit_gateway_attachment_id {
        scope_4574.string(var_4575);
    }
    #[allow(unused_mut)]
    let mut scope_4576 = writer.prefix("Filter");
    if let Some(var_4577) = &input.filters {
        let mut list_4579 = scope_4576.start_list(true, Some("Filter"));
        for item_4578 in var_4577 {
            #[allow(unused_mut)]
            let mut entry_4580 = list_4579.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4580, item_4578)?;
        }
        list_4579.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4581 = writer.prefix("MaxResults");
    if let Some(var_4582) = &input.max_results {
        scope_4581.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4582).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4583 = writer.prefix("NextToken");
    if let Some(var_4584) = &input.next_token {
        scope_4583.string(var_4584);
    }
    #[allow(unused_mut)]
    let mut scope_4585 = writer.prefix("DryRun");
    if let Some(var_4586) = &input.dry_run {
        scope_4585.boolean(*var_4586);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_multicast_domain_associations(
    input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4587 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4588) = &input.transit_gateway_multicast_domain_id {
        scope_4587.string(var_4588);
    }
    #[allow(unused_mut)]
    let mut scope_4589 = writer.prefix("Filter");
    if let Some(var_4590) = &input.filters {
        let mut list_4592 = scope_4589.start_list(true, Some("Filter"));
        for item_4591 in var_4590 {
            #[allow(unused_mut)]
            let mut entry_4593 = list_4592.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4593, item_4591)?;
        }
        list_4592.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4594 = writer.prefix("MaxResults");
    if let Some(var_4595) = &input.max_results {
        scope_4594.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4595).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4596 = writer.prefix("NextToken");
    if let Some(var_4597) = &input.next_token {
        scope_4596.string(var_4597);
    }
    #[allow(unused_mut)]
    let mut scope_4598 = writer.prefix("DryRun");
    if let Some(var_4599) = &input.dry_run {
        scope_4598.boolean(*var_4599);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_policy_table_associations(
    input: &crate::input::GetTransitGatewayPolicyTableAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPolicyTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4600 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_4601) = &input.transit_gateway_policy_table_id {
        scope_4600.string(var_4601);
    }
    #[allow(unused_mut)]
    let mut scope_4602 = writer.prefix("Filter");
    if let Some(var_4603) = &input.filters {
        let mut list_4605 = scope_4602.start_list(true, Some("Filter"));
        for item_4604 in var_4603 {
            #[allow(unused_mut)]
            let mut entry_4606 = list_4605.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4606, item_4604)?;
        }
        list_4605.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4607 = writer.prefix("MaxResults");
    if let Some(var_4608) = &input.max_results {
        scope_4607.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4608).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4609 = writer.prefix("NextToken");
    if let Some(var_4610) = &input.next_token {
        scope_4609.string(var_4610);
    }
    #[allow(unused_mut)]
    let mut scope_4611 = writer.prefix("DryRun");
    if let Some(var_4612) = &input.dry_run {
        scope_4611.boolean(*var_4612);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_policy_table_entries(
    input: &crate::input::GetTransitGatewayPolicyTableEntriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPolicyTableEntries",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4613 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_4614) = &input.transit_gateway_policy_table_id {
        scope_4613.string(var_4614);
    }
    #[allow(unused_mut)]
    let mut scope_4615 = writer.prefix("Filter");
    if let Some(var_4616) = &input.filters {
        let mut list_4618 = scope_4615.start_list(true, Some("Filter"));
        for item_4617 in var_4616 {
            #[allow(unused_mut)]
            let mut entry_4619 = list_4618.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4619, item_4617)?;
        }
        list_4618.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4620 = writer.prefix("MaxResults");
    if let Some(var_4621) = &input.max_results {
        scope_4620.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4621).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4622 = writer.prefix("NextToken");
    if let Some(var_4623) = &input.next_token {
        scope_4622.string(var_4623);
    }
    #[allow(unused_mut)]
    let mut scope_4624 = writer.prefix("DryRun");
    if let Some(var_4625) = &input.dry_run {
        scope_4624.boolean(*var_4625);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_prefix_list_references(
    input: &crate::input::GetTransitGatewayPrefixListReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPrefixListReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4626 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4627) = &input.transit_gateway_route_table_id {
        scope_4626.string(var_4627);
    }
    #[allow(unused_mut)]
    let mut scope_4628 = writer.prefix("Filter");
    if let Some(var_4629) = &input.filters {
        let mut list_4631 = scope_4628.start_list(true, Some("Filter"));
        for item_4630 in var_4629 {
            #[allow(unused_mut)]
            let mut entry_4632 = list_4631.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4632, item_4630)?;
        }
        list_4631.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4633 = writer.prefix("MaxResults");
    if let Some(var_4634) = &input.max_results {
        scope_4633.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4634).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4635 = writer.prefix("NextToken");
    if let Some(var_4636) = &input.next_token {
        scope_4635.string(var_4636);
    }
    #[allow(unused_mut)]
    let mut scope_4637 = writer.prefix("DryRun");
    if let Some(var_4638) = &input.dry_run {
        scope_4637.boolean(*var_4638);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_associations(
    input: &crate::input::GetTransitGatewayRouteTableAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4639 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4640) = &input.transit_gateway_route_table_id {
        scope_4639.string(var_4640);
    }
    #[allow(unused_mut)]
    let mut scope_4641 = writer.prefix("Filter");
    if let Some(var_4642) = &input.filters {
        let mut list_4644 = scope_4641.start_list(true, Some("Filter"));
        for item_4643 in var_4642 {
            #[allow(unused_mut)]
            let mut entry_4645 = list_4644.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4645, item_4643)?;
        }
        list_4644.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4646 = writer.prefix("MaxResults");
    if let Some(var_4647) = &input.max_results {
        scope_4646.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4647).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4648 = writer.prefix("NextToken");
    if let Some(var_4649) = &input.next_token {
        scope_4648.string(var_4649);
    }
    #[allow(unused_mut)]
    let mut scope_4650 = writer.prefix("DryRun");
    if let Some(var_4651) = &input.dry_run {
        scope_4650.boolean(*var_4651);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_propagations(
    input: &crate::input::GetTransitGatewayRouteTablePropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTablePropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4652 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4653) = &input.transit_gateway_route_table_id {
        scope_4652.string(var_4653);
    }
    #[allow(unused_mut)]
    let mut scope_4654 = writer.prefix("Filter");
    if let Some(var_4655) = &input.filters {
        let mut list_4657 = scope_4654.start_list(true, Some("Filter"));
        for item_4656 in var_4655 {
            #[allow(unused_mut)]
            let mut entry_4658 = list_4657.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4658, item_4656)?;
        }
        list_4657.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4659 = writer.prefix("MaxResults");
    if let Some(var_4660) = &input.max_results {
        scope_4659.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4660).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4661 = writer.prefix("NextToken");
    if let Some(var_4662) = &input.next_token {
        scope_4661.string(var_4662);
    }
    #[allow(unused_mut)]
    let mut scope_4663 = writer.prefix("DryRun");
    if let Some(var_4664) = &input.dry_run {
        scope_4663.boolean(*var_4664);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_sample_configuration(
    input: &crate::input::GetVpnConnectionDeviceSampleConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetVpnConnectionDeviceSampleConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4665 = writer.prefix("VpnConnectionId");
    if let Some(var_4666) = &input.vpn_connection_id {
        scope_4665.string(var_4666);
    }
    #[allow(unused_mut)]
    let mut scope_4667 = writer.prefix("VpnConnectionDeviceTypeId");
    if let Some(var_4668) = &input.vpn_connection_device_type_id {
        scope_4667.string(var_4668);
    }
    #[allow(unused_mut)]
    let mut scope_4669 = writer.prefix("InternetKeyExchangeVersion");
    if let Some(var_4670) = &input.internet_key_exchange_version {
        scope_4669.string(var_4670);
    }
    #[allow(unused_mut)]
    let mut scope_4671 = writer.prefix("DryRun");
    if let Some(var_4672) = &input.dry_run {
        scope_4671.boolean(*var_4672);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_types(
    input: &crate::input::GetVpnConnectionDeviceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetVpnConnectionDeviceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4673 = writer.prefix("MaxResults");
    if let Some(var_4674) = &input.max_results {
        scope_4673.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4674).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4675 = writer.prefix("NextToken");
    if let Some(var_4676) = &input.next_token {
        scope_4675.string(var_4676);
    }
    #[allow(unused_mut)]
    let mut scope_4677 = writer.prefix("DryRun");
    if let Some(var_4678) = &input.dry_run {
        scope_4677.boolean(*var_4678);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ImportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ImportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4679 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4680) = &input.client_vpn_endpoint_id {
        scope_4679.string(var_4680);
    }
    #[allow(unused_mut)]
    let mut scope_4681 = writer.prefix("CertificateRevocationList");
    if let Some(var_4682) = &input.certificate_revocation_list {
        scope_4681.string(var_4682);
    }
    #[allow(unused_mut)]
    let mut scope_4683 = writer.prefix("DryRun");
    if let Some(var_4684) = &input.dry_run {
        scope_4683.boolean(*var_4684);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_image(
    input: &crate::input::ImportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4685 = writer.prefix("Architecture");
    if let Some(var_4686) = &input.architecture {
        scope_4685.string(var_4686);
    }
    #[allow(unused_mut)]
    let mut scope_4687 = writer.prefix("ClientData");
    if let Some(var_4688) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4687, var_4688)?;
    }
    #[allow(unused_mut)]
    let mut scope_4689 = writer.prefix("ClientToken");
    if let Some(var_4690) = &input.client_token {
        scope_4689.string(var_4690);
    }
    #[allow(unused_mut)]
    let mut scope_4691 = writer.prefix("Description");
    if let Some(var_4692) = &input.description {
        scope_4691.string(var_4692);
    }
    #[allow(unused_mut)]
    let mut scope_4693 = writer.prefix("DiskContainer");
    if let Some(var_4694) = &input.disk_containers {
        let mut list_4696 = scope_4693.start_list(true, Some("item"));
        for item_4695 in var_4694 {
            #[allow(unused_mut)]
            let mut entry_4697 = list_4696.entry();
            crate::query_ser::serialize_structure_crate_model_image_disk_container(
                entry_4697, item_4695,
            )?;
        }
        list_4696.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4698 = writer.prefix("DryRun");
    if let Some(var_4699) = &input.dry_run {
        scope_4698.boolean(*var_4699);
    }
    #[allow(unused_mut)]
    let mut scope_4700 = writer.prefix("Encrypted");
    if let Some(var_4701) = &input.encrypted {
        scope_4700.boolean(*var_4701);
    }
    #[allow(unused_mut)]
    let mut scope_4702 = writer.prefix("Hypervisor");
    if let Some(var_4703) = &input.hypervisor {
        scope_4702.string(var_4703);
    }
    #[allow(unused_mut)]
    let mut scope_4704 = writer.prefix("KmsKeyId");
    if let Some(var_4705) = &input.kms_key_id {
        scope_4704.string(var_4705);
    }
    #[allow(unused_mut)]
    let mut scope_4706 = writer.prefix("LicenseType");
    if let Some(var_4707) = &input.license_type {
        scope_4706.string(var_4707);
    }
    #[allow(unused_mut)]
    let mut scope_4708 = writer.prefix("Platform");
    if let Some(var_4709) = &input.platform {
        scope_4708.string(var_4709);
    }
    #[allow(unused_mut)]
    let mut scope_4710 = writer.prefix("RoleName");
    if let Some(var_4711) = &input.role_name {
        scope_4710.string(var_4711);
    }
    #[allow(unused_mut)]
    let mut scope_4712 = writer.prefix("LicenseSpecifications");
    if let Some(var_4713) = &input.license_specifications {
        let mut list_4715 = scope_4712.start_list(true, Some("item"));
        for item_4714 in var_4713 {
            #[allow(unused_mut)]
            let mut entry_4716 = list_4715.entry();
            crate::query_ser::serialize_structure_crate_model_import_image_license_configuration_request(entry_4716, item_4714)?;
        }
        list_4715.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4717 = writer.prefix("TagSpecification");
    if let Some(var_4718) = &input.tag_specifications {
        let mut list_4720 = scope_4717.start_list(true, Some("item"));
        for item_4719 in var_4718 {
            #[allow(unused_mut)]
            let mut entry_4721 = list_4720.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4721, item_4719,
            )?;
        }
        list_4720.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4722 = writer.prefix("UsageOperation");
    if let Some(var_4723) = &input.usage_operation {
        scope_4722.string(var_4723);
    }
    #[allow(unused_mut)]
    let mut scope_4724 = writer.prefix("BootMode");
    if let Some(var_4725) = &input.boot_mode {
        scope_4724.string(var_4725.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_instance(
    input: &crate::input::ImportInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4726 = writer.prefix("Description");
    if let Some(var_4727) = &input.description {
        scope_4726.string(var_4727);
    }
    #[allow(unused_mut)]
    let mut scope_4728 = writer.prefix("DiskImage");
    if let Some(var_4729) = &input.disk_images {
        let mut list_4731 = scope_4728.start_list(true, None);
        for item_4730 in var_4729 {
            #[allow(unused_mut)]
            let mut entry_4732 = list_4731.entry();
            crate::query_ser::serialize_structure_crate_model_disk_image(entry_4732, item_4730)?;
        }
        list_4731.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4733 = writer.prefix("DryRun");
    if let Some(var_4734) = &input.dry_run {
        scope_4733.boolean(*var_4734);
    }
    #[allow(unused_mut)]
    let mut scope_4735 = writer.prefix("LaunchSpecification");
    if let Some(var_4736) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_import_instance_launch_specification(
            scope_4735, var_4736,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4737 = writer.prefix("Platform");
    if let Some(var_4738) = &input.platform {
        scope_4737.string(var_4738.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_key_pair(
    input: &crate::input::ImportKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4739 = writer.prefix("DryRun");
    if let Some(var_4740) = &input.dry_run {
        scope_4739.boolean(*var_4740);
    }
    #[allow(unused_mut)]
    let mut scope_4741 = writer.prefix("KeyName");
    if let Some(var_4742) = &input.key_name {
        scope_4741.string(var_4742);
    }
    #[allow(unused_mut)]
    let mut scope_4743 = writer.prefix("PublicKeyMaterial");
    if let Some(var_4744) = &input.public_key_material {
        scope_4743.string(&aws_smithy_types::base64::encode(var_4744));
    }
    #[allow(unused_mut)]
    let mut scope_4745 = writer.prefix("TagSpecification");
    if let Some(var_4746) = &input.tag_specifications {
        let mut list_4748 = scope_4745.start_list(true, Some("item"));
        for item_4747 in var_4746 {
            #[allow(unused_mut)]
            let mut entry_4749 = list_4748.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4749, item_4747,
            )?;
        }
        list_4748.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_snapshot(
    input: &crate::input::ImportSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4750 = writer.prefix("ClientData");
    if let Some(var_4751) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4750, var_4751)?;
    }
    #[allow(unused_mut)]
    let mut scope_4752 = writer.prefix("ClientToken");
    if let Some(var_4753) = &input.client_token {
        scope_4752.string(var_4753);
    }
    #[allow(unused_mut)]
    let mut scope_4754 = writer.prefix("Description");
    if let Some(var_4755) = &input.description {
        scope_4754.string(var_4755);
    }
    #[allow(unused_mut)]
    let mut scope_4756 = writer.prefix("DiskContainer");
    if let Some(var_4757) = &input.disk_container {
        crate::query_ser::serialize_structure_crate_model_snapshot_disk_container(
            scope_4756, var_4757,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4758 = writer.prefix("DryRun");
    if let Some(var_4759) = &input.dry_run {
        scope_4758.boolean(*var_4759);
    }
    #[allow(unused_mut)]
    let mut scope_4760 = writer.prefix("Encrypted");
    if let Some(var_4761) = &input.encrypted {
        scope_4760.boolean(*var_4761);
    }
    #[allow(unused_mut)]
    let mut scope_4762 = writer.prefix("KmsKeyId");
    if let Some(var_4763) = &input.kms_key_id {
        scope_4762.string(var_4763);
    }
    #[allow(unused_mut)]
    let mut scope_4764 = writer.prefix("RoleName");
    if let Some(var_4765) = &input.role_name {
        scope_4764.string(var_4765);
    }
    #[allow(unused_mut)]
    let mut scope_4766 = writer.prefix("TagSpecification");
    if let Some(var_4767) = &input.tag_specifications {
        let mut list_4769 = scope_4766.start_list(true, Some("item"));
        for item_4768 in var_4767 {
            #[allow(unused_mut)]
            let mut entry_4770 = list_4769.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4770, item_4768,
            )?;
        }
        list_4769.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_volume(
    input: &crate::input::ImportVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4771 = writer.prefix("AvailabilityZone");
    if let Some(var_4772) = &input.availability_zone {
        scope_4771.string(var_4772);
    }
    #[allow(unused_mut)]
    let mut scope_4773 = writer.prefix("Description");
    if let Some(var_4774) = &input.description {
        scope_4773.string(var_4774);
    }
    #[allow(unused_mut)]
    let mut scope_4775 = writer.prefix("DryRun");
    if let Some(var_4776) = &input.dry_run {
        scope_4775.boolean(*var_4776);
    }
    #[allow(unused_mut)]
    let mut scope_4777 = writer.prefix("Image");
    if let Some(var_4778) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_4777, var_4778)?;
    }
    #[allow(unused_mut)]
    let mut scope_4779 = writer.prefix("Volume");
    if let Some(var_4780) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_4779, var_4780)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_images_in_recycle_bin(
    input: &crate::input::ListImagesInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListImagesInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4781 = writer.prefix("ImageId");
    if let Some(var_4782) = &input.image_ids {
        let mut list_4784 = scope_4781.start_list(true, Some("ImageId"));
        for item_4783 in var_4782 {
            #[allow(unused_mut)]
            let mut entry_4785 = list_4784.entry();
            entry_4785.string(item_4783);
        }
        list_4784.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4786 = writer.prefix("NextToken");
    if let Some(var_4787) = &input.next_token {
        scope_4786.string(var_4787);
    }
    #[allow(unused_mut)]
    let mut scope_4788 = writer.prefix("MaxResults");
    if let Some(var_4789) = &input.max_results {
        scope_4788.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4789).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4790 = writer.prefix("DryRun");
    if let Some(var_4791) = &input.dry_run {
        scope_4790.boolean(*var_4791);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_snapshots_in_recycle_bin(
    input: &crate::input::ListSnapshotsInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListSnapshotsInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4792 = writer.prefix("MaxResults");
    if let Some(var_4793) = &input.max_results {
        scope_4792.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4793).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4794 = writer.prefix("NextToken");
    if let Some(var_4795) = &input.next_token {
        scope_4794.string(var_4795);
    }
    #[allow(unused_mut)]
    let mut scope_4796 = writer.prefix("SnapshotId");
    if let Some(var_4797) = &input.snapshot_ids {
        let mut list_4799 = scope_4796.start_list(true, Some("SnapshotId"));
        for item_4798 in var_4797 {
            #[allow(unused_mut)]
            let mut entry_4800 = list_4799.entry();
            entry_4800.string(item_4798);
        }
        list_4799.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4801 = writer.prefix("DryRun");
    if let Some(var_4802) = &input.dry_run {
        scope_4801.boolean(*var_4802);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_address_attribute(
    input: &crate::input::ModifyAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4803 = writer.prefix("AllocationId");
    if let Some(var_4804) = &input.allocation_id {
        scope_4803.string(var_4804);
    }
    #[allow(unused_mut)]
    let mut scope_4805 = writer.prefix("DomainName");
    if let Some(var_4806) = &input.domain_name {
        scope_4805.string(var_4806);
    }
    #[allow(unused_mut)]
    let mut scope_4807 = writer.prefix("DryRun");
    if let Some(var_4808) = &input.dry_run {
        scope_4807.boolean(*var_4808);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_availability_zone_group(
    input: &crate::input::ModifyAvailabilityZoneGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4809 = writer.prefix("GroupName");
    if let Some(var_4810) = &input.group_name {
        scope_4809.string(var_4810);
    }
    #[allow(unused_mut)]
    let mut scope_4811 = writer.prefix("OptInStatus");
    if let Some(var_4812) = &input.opt_in_status {
        scope_4811.string(var_4812.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4813 = writer.prefix("DryRun");
    if let Some(var_4814) = &input.dry_run {
        scope_4813.boolean(*var_4814);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation(
    input: &crate::input::ModifyCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4815 = writer.prefix("CapacityReservationId");
    if let Some(var_4816) = &input.capacity_reservation_id {
        scope_4815.string(var_4816);
    }
    #[allow(unused_mut)]
    let mut scope_4817 = writer.prefix("InstanceCount");
    if let Some(var_4818) = &input.instance_count {
        scope_4817.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4818).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4819 = writer.prefix("EndDate");
    if let Some(var_4820) = &input.end_date {
        scope_4819.date_time(var_4820, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4821 = writer.prefix("EndDateType");
    if let Some(var_4822) = &input.end_date_type {
        scope_4821.string(var_4822.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4823 = writer.prefix("Accept");
    if let Some(var_4824) = &input.accept {
        scope_4823.boolean(*var_4824);
    }
    #[allow(unused_mut)]
    let mut scope_4825 = writer.prefix("DryRun");
    if let Some(var_4826) = &input.dry_run {
        scope_4825.boolean(*var_4826);
    }
    #[allow(unused_mut)]
    let mut scope_4827 = writer.prefix("AdditionalInfo");
    if let Some(var_4828) = &input.additional_info {
        scope_4827.string(var_4828);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation_fleet(
    input: &crate::input::ModifyCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4829 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_4830) = &input.capacity_reservation_fleet_id {
        scope_4829.string(var_4830);
    }
    #[allow(unused_mut)]
    let mut scope_4831 = writer.prefix("TotalTargetCapacity");
    if let Some(var_4832) = &input.total_target_capacity {
        scope_4831.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4832).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4833 = writer.prefix("EndDate");
    if let Some(var_4834) = &input.end_date {
        scope_4833.date_time(var_4834, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4835 = writer.prefix("DryRun");
    if let Some(var_4836) = &input.dry_run {
        scope_4835.boolean(*var_4836);
    }
    #[allow(unused_mut)]
    let mut scope_4837 = writer.prefix("RemoveEndDate");
    if let Some(var_4838) = &input.remove_end_date {
        scope_4837.boolean(*var_4838);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_client_vpn_endpoint(
    input: &crate::input::ModifyClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4839 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4840) = &input.client_vpn_endpoint_id {
        scope_4839.string(var_4840);
    }
    #[allow(unused_mut)]
    let mut scope_4841 = writer.prefix("ServerCertificateArn");
    if let Some(var_4842) = &input.server_certificate_arn {
        scope_4841.string(var_4842);
    }
    #[allow(unused_mut)]
    let mut scope_4843 = writer.prefix("ConnectionLogOptions");
    if let Some(var_4844) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_4843, var_4844,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4845 = writer.prefix("DnsServers");
    if let Some(var_4846) = &input.dns_servers {
        crate::query_ser::serialize_structure_crate_model_dns_servers_options_modify_structure(
            scope_4845, var_4846,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4847 = writer.prefix("VpnPort");
    if let Some(var_4848) = &input.vpn_port {
        scope_4847.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4848).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4849 = writer.prefix("Description");
    if let Some(var_4850) = &input.description {
        scope_4849.string(var_4850);
    }
    #[allow(unused_mut)]
    let mut scope_4851 = writer.prefix("SplitTunnel");
    if let Some(var_4852) = &input.split_tunnel {
        scope_4851.boolean(*var_4852);
    }
    #[allow(unused_mut)]
    let mut scope_4853 = writer.prefix("DryRun");
    if let Some(var_4854) = &input.dry_run {
        scope_4853.boolean(*var_4854);
    }
    #[allow(unused_mut)]
    let mut scope_4855 = writer.prefix("SecurityGroupId");
    if let Some(var_4856) = &input.security_group_ids {
        let mut list_4858 = scope_4855.start_list(true, Some("item"));
        for item_4857 in var_4856 {
            #[allow(unused_mut)]
            let mut entry_4859 = list_4858.entry();
            entry_4859.string(item_4857);
        }
        list_4858.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4860 = writer.prefix("VpcId");
    if let Some(var_4861) = &input.vpc_id {
        scope_4860.string(var_4861);
    }
    #[allow(unused_mut)]
    let mut scope_4862 = writer.prefix("SelfServicePortal");
    if let Some(var_4863) = &input.self_service_portal {
        scope_4862.string(var_4863.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4864 = writer.prefix("ClientConnectOptions");
    if let Some(var_4865) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_4864, var_4865,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4866 = writer.prefix("SessionTimeoutHours");
    if let Some(var_4867) = &input.session_timeout_hours {
        scope_4866.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4867).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4868 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_4869) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_4868, var_4869,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_default_credit_specification(
    input: &crate::input::ModifyDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDefaultCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4870 = writer.prefix("DryRun");
    if let Some(var_4871) = &input.dry_run {
        scope_4870.boolean(*var_4871);
    }
    #[allow(unused_mut)]
    let mut scope_4872 = writer.prefix("InstanceFamily");
    if let Some(var_4873) = &input.instance_family {
        scope_4872.string(var_4873.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4874 = writer.prefix("CpuCredits");
    if let Some(var_4875) = &input.cpu_credits {
        scope_4874.string(var_4875);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ebs_default_kms_key_id(
    input: &crate::input::ModifyEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4876 = writer.prefix("KmsKeyId");
    if let Some(var_4877) = &input.kms_key_id {
        scope_4876.string(var_4877);
    }
    #[allow(unused_mut)]
    let mut scope_4878 = writer.prefix("DryRun");
    if let Some(var_4879) = &input.dry_run {
        scope_4878.boolean(*var_4879);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fleet(
    input: &crate::input::ModifyFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4880 = writer.prefix("DryRun");
    if let Some(var_4881) = &input.dry_run {
        scope_4880.boolean(*var_4881);
    }
    #[allow(unused_mut)]
    let mut scope_4882 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4883) = &input.excess_capacity_termination_policy {
        scope_4882.string(var_4883.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4884 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4885) = &input.launch_template_configs {
        let mut list_4887 = scope_4884.start_list(true, Some("item"));
        for item_4886 in var_4885 {
            #[allow(unused_mut)]
            let mut entry_4888 = list_4887.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_4888, item_4886,
            )?;
        }
        list_4887.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4889 = writer.prefix("FleetId");
    if let Some(var_4890) = &input.fleet_id {
        scope_4889.string(var_4890);
    }
    #[allow(unused_mut)]
    let mut scope_4891 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_4892) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_4891, var_4892,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4893 = writer.prefix("Context");
    if let Some(var_4894) = &input.context {
        scope_4893.string(var_4894);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fpga_image_attribute(
    input: &crate::input::ModifyFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4895 = writer.prefix("DryRun");
    if let Some(var_4896) = &input.dry_run {
        scope_4895.boolean(*var_4896);
    }
    #[allow(unused_mut)]
    let mut scope_4897 = writer.prefix("FpgaImageId");
    if let Some(var_4898) = &input.fpga_image_id {
        scope_4897.string(var_4898);
    }
    #[allow(unused_mut)]
    let mut scope_4899 = writer.prefix("Attribute");
    if let Some(var_4900) = &input.attribute {
        scope_4899.string(var_4900.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4901 = writer.prefix("OperationType");
    if let Some(var_4902) = &input.operation_type {
        scope_4901.string(var_4902.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4903 = writer.prefix("UserId");
    if let Some(var_4904) = &input.user_ids {
        let mut list_4906 = scope_4903.start_list(true, Some("UserId"));
        for item_4905 in var_4904 {
            #[allow(unused_mut)]
            let mut entry_4907 = list_4906.entry();
            entry_4907.string(item_4905);
        }
        list_4906.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4908 = writer.prefix("UserGroup");
    if let Some(var_4909) = &input.user_groups {
        let mut list_4911 = scope_4908.start_list(true, Some("UserGroup"));
        for item_4910 in var_4909 {
            #[allow(unused_mut)]
            let mut entry_4912 = list_4911.entry();
            entry_4912.string(item_4910);
        }
        list_4911.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4913 = writer.prefix("ProductCode");
    if let Some(var_4914) = &input.product_codes {
        let mut list_4916 = scope_4913.start_list(true, Some("ProductCode"));
        for item_4915 in var_4914 {
            #[allow(unused_mut)]
            let mut entry_4917 = list_4916.entry();
            entry_4917.string(item_4915);
        }
        list_4916.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4918 = writer.prefix("LoadPermission");
    if let Some(var_4919) = &input.load_permission {
        crate::query_ser::serialize_structure_crate_model_load_permission_modifications(
            scope_4918, var_4919,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4920 = writer.prefix("Description");
    if let Some(var_4921) = &input.description {
        scope_4920.string(var_4921);
    }
    #[allow(unused_mut)]
    let mut scope_4922 = writer.prefix("Name");
    if let Some(var_4923) = &input.name {
        scope_4922.string(var_4923);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_hosts(
    input: &crate::input::ModifyHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4924 = writer.prefix("AutoPlacement");
    if let Some(var_4925) = &input.auto_placement {
        scope_4924.string(var_4925.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4926 = writer.prefix("HostId");
    if let Some(var_4927) = &input.host_ids {
        let mut list_4929 = scope_4926.start_list(true, Some("item"));
        for item_4928 in var_4927 {
            #[allow(unused_mut)]
            let mut entry_4930 = list_4929.entry();
            entry_4930.string(item_4928);
        }
        list_4929.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4931 = writer.prefix("HostRecovery");
    if let Some(var_4932) = &input.host_recovery {
        scope_4931.string(var_4932.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4933 = writer.prefix("InstanceType");
    if let Some(var_4934) = &input.instance_type {
        scope_4933.string(var_4934);
    }
    #[allow(unused_mut)]
    let mut scope_4935 = writer.prefix("InstanceFamily");
    if let Some(var_4936) = &input.instance_family {
        scope_4935.string(var_4936);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_identity_id_format(
    input: &crate::input::ModifyIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4937 = writer.prefix("PrincipalArn");
    if let Some(var_4938) = &input.principal_arn {
        scope_4937.string(var_4938);
    }
    #[allow(unused_mut)]
    let mut scope_4939 = writer.prefix("Resource");
    if let Some(var_4940) = &input.resource {
        scope_4939.string(var_4940);
    }
    #[allow(unused_mut)]
    let mut scope_4941 = writer.prefix("UseLongIds");
    if let Some(var_4942) = &input.use_long_ids {
        scope_4941.boolean(*var_4942);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_id_format(
    input: &crate::input::ModifyIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4943 = writer.prefix("Resource");
    if let Some(var_4944) = &input.resource {
        scope_4943.string(var_4944);
    }
    #[allow(unused_mut)]
    let mut scope_4945 = writer.prefix("UseLongIds");
    if let Some(var_4946) = &input.use_long_ids {
        scope_4945.boolean(*var_4946);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_image_attribute(
    input: &crate::input::ModifyImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4947 = writer.prefix("Attribute");
    if let Some(var_4948) = &input.attribute {
        scope_4947.string(var_4948);
    }
    #[allow(unused_mut)]
    let mut scope_4949 = writer.prefix("Description");
    if let Some(var_4950) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4949, var_4950)?;
    }
    #[allow(unused_mut)]
    let mut scope_4951 = writer.prefix("ImageId");
    if let Some(var_4952) = &input.image_id {
        scope_4951.string(var_4952);
    }
    #[allow(unused_mut)]
    let mut scope_4953 = writer.prefix("LaunchPermission");
    if let Some(var_4954) = &input.launch_permission {
        crate::query_ser::serialize_structure_crate_model_launch_permission_modifications(
            scope_4953, var_4954,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4955 = writer.prefix("OperationType");
    if let Some(var_4956) = &input.operation_type {
        scope_4955.string(var_4956.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4957 = writer.prefix("ProductCode");
    if let Some(var_4958) = &input.product_codes {
        let mut list_4960 = scope_4957.start_list(true, Some("ProductCode"));
        for item_4959 in var_4958 {
            #[allow(unused_mut)]
            let mut entry_4961 = list_4960.entry();
            entry_4961.string(item_4959);
        }
        list_4960.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4962 = writer.prefix("UserGroup");
    if let Some(var_4963) = &input.user_groups {
        let mut list_4965 = scope_4962.start_list(true, Some("UserGroup"));
        for item_4964 in var_4963 {
            #[allow(unused_mut)]
            let mut entry_4966 = list_4965.entry();
            entry_4966.string(item_4964);
        }
        list_4965.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4967 = writer.prefix("UserId");
    if let Some(var_4968) = &input.user_ids {
        let mut list_4970 = scope_4967.start_list(true, Some("UserId"));
        for item_4969 in var_4968 {
            #[allow(unused_mut)]
            let mut entry_4971 = list_4970.entry();
            entry_4971.string(item_4969);
        }
        list_4970.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4972 = writer.prefix("Value");
    if let Some(var_4973) = &input.value {
        scope_4972.string(var_4973);
    }
    #[allow(unused_mut)]
    let mut scope_4974 = writer.prefix("DryRun");
    if let Some(var_4975) = &input.dry_run {
        scope_4974.boolean(*var_4975);
    }
    #[allow(unused_mut)]
    let mut scope_4976 = writer.prefix("OrganizationArn");
    if let Some(var_4977) = &input.organization_arns {
        let mut list_4979 = scope_4976.start_list(true, Some("OrganizationArn"));
        for item_4978 in var_4977 {
            #[allow(unused_mut)]
            let mut entry_4980 = list_4979.entry();
            entry_4980.string(item_4978);
        }
        list_4979.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4981 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_4982) = &input.organizational_unit_arns {
        let mut list_4984 = scope_4981.start_list(true, Some("OrganizationalUnitArn"));
        for item_4983 in var_4982 {
            #[allow(unused_mut)]
            let mut entry_4985 = list_4984.entry();
            entry_4985.string(item_4983);
        }
        list_4984.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_attribute(
    input: &crate::input::ModifyInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4986 = writer.prefix("SourceDestCheck");
    if let Some(var_4987) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4986, var_4987,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4988 = writer.prefix("Attribute");
    if let Some(var_4989) = &input.attribute {
        scope_4988.string(var_4989.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4990 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4991) = &input.block_device_mappings {
        let mut list_4993 = scope_4990.start_list(true, Some("item"));
        for item_4992 in var_4991 {
            #[allow(unused_mut)]
            let mut entry_4994 = list_4993.entry();
            crate::query_ser::serialize_structure_crate_model_instance_block_device_mapping_specification(entry_4994, item_4992)?;
        }
        list_4993.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4995 = writer.prefix("DisableApiTermination");
    if let Some(var_4996) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4995, var_4996,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4997 = writer.prefix("DryRun");
    if let Some(var_4998) = &input.dry_run {
        scope_4997.boolean(*var_4998);
    }
    #[allow(unused_mut)]
    let mut scope_4999 = writer.prefix("EbsOptimized");
    if let Some(var_5000) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4999, var_5000,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5001 = writer.prefix("EnaSupport");
    if let Some(var_5002) = &input.ena_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5001, var_5002,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5003 = writer.prefix("GroupId");
    if let Some(var_5004) = &input.groups {
        let mut list_5006 = scope_5003.start_list(true, Some("groupId"));
        for item_5005 in var_5004 {
            #[allow(unused_mut)]
            let mut entry_5007 = list_5006.entry();
            entry_5007.string(item_5005);
        }
        list_5006.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5008 = writer.prefix("InstanceId");
    if let Some(var_5009) = &input.instance_id {
        scope_5008.string(var_5009);
    }
    #[allow(unused_mut)]
    let mut scope_5010 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_5011) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5010, var_5011)?;
    }
    #[allow(unused_mut)]
    let mut scope_5012 = writer.prefix("InstanceType");
    if let Some(var_5013) = &input.instance_type {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5012, var_5013)?;
    }
    #[allow(unused_mut)]
    let mut scope_5014 = writer.prefix("Kernel");
    if let Some(var_5015) = &input.kernel {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5014, var_5015)?;
    }
    #[allow(unused_mut)]
    let mut scope_5016 = writer.prefix("Ramdisk");
    if let Some(var_5017) = &input.ramdisk {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5016, var_5017)?;
    }
    #[allow(unused_mut)]
    let mut scope_5018 = writer.prefix("SriovNetSupport");
    if let Some(var_5019) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5018, var_5019)?;
    }
    #[allow(unused_mut)]
    let mut scope_5020 = writer.prefix("UserData");
    if let Some(var_5021) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_blob_attribute_value(
            scope_5020, var_5021,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5022 = writer.prefix("Value");
    if let Some(var_5023) = &input.value {
        scope_5022.string(var_5023);
    }
    #[allow(unused_mut)]
    let mut scope_5024 = writer.prefix("DisableApiStop");
    if let Some(var_5025) = &input.disable_api_stop {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5024, var_5025,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_capacity_reservation_attributes(
    input: &crate::input::ModifyInstanceCapacityReservationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCapacityReservationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5026 = writer.prefix("InstanceId");
    if let Some(var_5027) = &input.instance_id {
        scope_5026.string(var_5027);
    }
    #[allow(unused_mut)]
    let mut scope_5028 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_5029) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_5028, var_5029,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5030 = writer.prefix("DryRun");
    if let Some(var_5031) = &input.dry_run {
        scope_5030.boolean(*var_5031);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_credit_specification(
    input: &crate::input::ModifyInstanceCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5032 = writer.prefix("DryRun");
    if let Some(var_5033) = &input.dry_run {
        scope_5032.boolean(*var_5033);
    }
    #[allow(unused_mut)]
    let mut scope_5034 = writer.prefix("ClientToken");
    if let Some(var_5035) = &input.client_token {
        scope_5034.string(var_5035);
    }
    #[allow(unused_mut)]
    let mut scope_5036 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_5037) = &input.instance_credit_specifications {
        let mut list_5039 = scope_5036.start_list(true, Some("item"));
        for item_5038 in var_5037 {
            #[allow(unused_mut)]
            let mut entry_5040 = list_5039.entry();
            crate::query_ser::serialize_structure_crate_model_instance_credit_specification_request(entry_5040, item_5038)?;
        }
        list_5039.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_start_time(
    input: &crate::input::ModifyInstanceEventStartTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5041 = writer.prefix("DryRun");
    if let Some(var_5042) = &input.dry_run {
        scope_5041.boolean(*var_5042);
    }
    #[allow(unused_mut)]
    let mut scope_5043 = writer.prefix("InstanceId");
    if let Some(var_5044) = &input.instance_id {
        scope_5043.string(var_5044);
    }
    #[allow(unused_mut)]
    let mut scope_5045 = writer.prefix("InstanceEventId");
    if let Some(var_5046) = &input.instance_event_id {
        scope_5045.string(var_5046);
    }
    #[allow(unused_mut)]
    let mut scope_5047 = writer.prefix("NotBefore");
    if let Some(var_5048) = &input.not_before {
        scope_5047.date_time(var_5048, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_window(
    input: &crate::input::ModifyInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5049 = writer.prefix("DryRun");
    if let Some(var_5050) = &input.dry_run {
        scope_5049.boolean(*var_5050);
    }
    #[allow(unused_mut)]
    let mut scope_5051 = writer.prefix("Name");
    if let Some(var_5052) = &input.name {
        scope_5051.string(var_5052);
    }
    #[allow(unused_mut)]
    let mut scope_5053 = writer.prefix("InstanceEventWindowId");
    if let Some(var_5054) = &input.instance_event_window_id {
        scope_5053.string(var_5054);
    }
    #[allow(unused_mut)]
    let mut scope_5055 = writer.prefix("TimeRange");
    if let Some(var_5056) = &input.time_ranges {
        let mut list_5058 = scope_5055.start_list(true, None);
        for item_5057 in var_5056 {
            #[allow(unused_mut)]
            let mut entry_5059 = list_5058.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_5059, item_5057)?;
        }
        list_5058.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5060 = writer.prefix("CronExpression");
    if let Some(var_5061) = &input.cron_expression {
        scope_5060.string(var_5061);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_maintenance_options(
    input: &crate::input::ModifyInstanceMaintenanceOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceMaintenanceOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5062 = writer.prefix("InstanceId");
    if let Some(var_5063) = &input.instance_id {
        scope_5062.string(var_5063);
    }
    #[allow(unused_mut)]
    let mut scope_5064 = writer.prefix("AutoRecovery");
    if let Some(var_5065) = &input.auto_recovery {
        scope_5064.string(var_5065.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5066 = writer.prefix("DryRun");
    if let Some(var_5067) = &input.dry_run {
        scope_5066.boolean(*var_5067);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_metadata_options(
    input: &crate::input::ModifyInstanceMetadataOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5068 = writer.prefix("InstanceId");
    if let Some(var_5069) = &input.instance_id {
        scope_5068.string(var_5069);
    }
    #[allow(unused_mut)]
    let mut scope_5070 = writer.prefix("HttpTokens");
    if let Some(var_5071) = &input.http_tokens {
        scope_5070.string(var_5071.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5072 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_5073) = &input.http_put_response_hop_limit {
        scope_5072.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5073).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5074 = writer.prefix("HttpEndpoint");
    if let Some(var_5075) = &input.http_endpoint {
        scope_5074.string(var_5075.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5076 = writer.prefix("DryRun");
    if let Some(var_5077) = &input.dry_run {
        scope_5076.boolean(*var_5077);
    }
    #[allow(unused_mut)]
    let mut scope_5078 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_5079) = &input.http_protocol_ipv6 {
        scope_5078.string(var_5079.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5080 = writer.prefix("InstanceMetadataTags");
    if let Some(var_5081) = &input.instance_metadata_tags {
        scope_5080.string(var_5081.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_placement(
    input: &crate::input::ModifyInstancePlacementInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5082 = writer.prefix("Affinity");
    if let Some(var_5083) = &input.affinity {
        scope_5082.string(var_5083.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5084 = writer.prefix("GroupName");
    if let Some(var_5085) = &input.group_name {
        scope_5084.string(var_5085);
    }
    #[allow(unused_mut)]
    let mut scope_5086 = writer.prefix("HostId");
    if let Some(var_5087) = &input.host_id {
        scope_5086.string(var_5087);
    }
    #[allow(unused_mut)]
    let mut scope_5088 = writer.prefix("InstanceId");
    if let Some(var_5089) = &input.instance_id {
        scope_5088.string(var_5089);
    }
    #[allow(unused_mut)]
    let mut scope_5090 = writer.prefix("Tenancy");
    if let Some(var_5091) = &input.tenancy {
        scope_5090.string(var_5091.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5092 = writer.prefix("PartitionNumber");
    if let Some(var_5093) = &input.partition_number {
        scope_5092.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5093).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5094 = writer.prefix("HostResourceGroupArn");
    if let Some(var_5095) = &input.host_resource_group_arn {
        scope_5094.string(var_5095);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam(
    input: &crate::input::ModifyIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5096 = writer.prefix("DryRun");
    if let Some(var_5097) = &input.dry_run {
        scope_5096.boolean(*var_5097);
    }
    #[allow(unused_mut)]
    let mut scope_5098 = writer.prefix("IpamId");
    if let Some(var_5099) = &input.ipam_id {
        scope_5098.string(var_5099);
    }
    #[allow(unused_mut)]
    let mut scope_5100 = writer.prefix("Description");
    if let Some(var_5101) = &input.description {
        scope_5100.string(var_5101);
    }
    #[allow(unused_mut)]
    let mut scope_5102 = writer.prefix("AddOperatingRegion");
    if let Some(var_5103) = &input.add_operating_regions {
        let mut list_5105 = scope_5102.start_list(true, None);
        for item_5104 in var_5103 {
            #[allow(unused_mut)]
            let mut entry_5106 = list_5105.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_5106, item_5104,
            )?;
        }
        list_5105.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5107 = writer.prefix("RemoveOperatingRegion");
    if let Some(var_5108) = &input.remove_operating_regions {
        let mut list_5110 = scope_5107.start_list(true, None);
        for item_5109 in var_5108 {
            #[allow(unused_mut)]
            let mut entry_5111 = list_5110.entry();
            crate::query_ser::serialize_structure_crate_model_remove_ipam_operating_region(
                entry_5111, item_5109,
            )?;
        }
        list_5110.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_pool(
    input: &crate::input::ModifyIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5112 = writer.prefix("DryRun");
    if let Some(var_5113) = &input.dry_run {
        scope_5112.boolean(*var_5113);
    }
    #[allow(unused_mut)]
    let mut scope_5114 = writer.prefix("IpamPoolId");
    if let Some(var_5115) = &input.ipam_pool_id {
        scope_5114.string(var_5115);
    }
    #[allow(unused_mut)]
    let mut scope_5116 = writer.prefix("Description");
    if let Some(var_5117) = &input.description {
        scope_5116.string(var_5117);
    }
    #[allow(unused_mut)]
    let mut scope_5118 = writer.prefix("AutoImport");
    if let Some(var_5119) = &input.auto_import {
        scope_5118.boolean(*var_5119);
    }
    #[allow(unused_mut)]
    let mut scope_5120 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_5121) = &input.allocation_min_netmask_length {
        scope_5120.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5121).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5122 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_5123) = &input.allocation_max_netmask_length {
        scope_5122.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5123).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5124 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_5125) = &input.allocation_default_netmask_length {
        scope_5124.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5125).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5126 = writer.prefix("ClearAllocationDefaultNetmaskLength");
    if let Some(var_5127) = &input.clear_allocation_default_netmask_length {
        scope_5126.boolean(*var_5127);
    }
    #[allow(unused_mut)]
    let mut scope_5128 = writer.prefix("AddAllocationResourceTag");
    if let Some(var_5129) = &input.add_allocation_resource_tags {
        let mut list_5131 = scope_5128.start_list(true, Some("item"));
        for item_5130 in var_5129 {
            #[allow(unused_mut)]
            let mut entry_5132 = list_5131.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_5132, item_5130,
            )?;
        }
        list_5131.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5133 = writer.prefix("RemoveAllocationResourceTag");
    if let Some(var_5134) = &input.remove_allocation_resource_tags {
        let mut list_5136 = scope_5133.start_list(true, Some("item"));
        for item_5135 in var_5134 {
            #[allow(unused_mut)]
            let mut entry_5137 = list_5136.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_5137, item_5135,
            )?;
        }
        list_5136.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_resource_cidr(
    input: &crate::input::ModifyIpamResourceCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamResourceCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5138 = writer.prefix("DryRun");
    if let Some(var_5139) = &input.dry_run {
        scope_5138.boolean(*var_5139);
    }
    #[allow(unused_mut)]
    let mut scope_5140 = writer.prefix("ResourceId");
    if let Some(var_5141) = &input.resource_id {
        scope_5140.string(var_5141);
    }
    #[allow(unused_mut)]
    let mut scope_5142 = writer.prefix("ResourceCidr");
    if let Some(var_5143) = &input.resource_cidr {
        scope_5142.string(var_5143);
    }
    #[allow(unused_mut)]
    let mut scope_5144 = writer.prefix("ResourceRegion");
    if let Some(var_5145) = &input.resource_region {
        scope_5144.string(var_5145);
    }
    #[allow(unused_mut)]
    let mut scope_5146 = writer.prefix("CurrentIpamScopeId");
    if let Some(var_5147) = &input.current_ipam_scope_id {
        scope_5146.string(var_5147);
    }
    #[allow(unused_mut)]
    let mut scope_5148 = writer.prefix("DestinationIpamScopeId");
    if let Some(var_5149) = &input.destination_ipam_scope_id {
        scope_5148.string(var_5149);
    }
    #[allow(unused_mut)]
    let mut scope_5150 = writer.prefix("Monitored");
    if let Some(var_5151) = &input.monitored {
        scope_5150.boolean(*var_5151);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_scope(
    input: &crate::input::ModifyIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5152 = writer.prefix("DryRun");
    if let Some(var_5153) = &input.dry_run {
        scope_5152.boolean(*var_5153);
    }
    #[allow(unused_mut)]
    let mut scope_5154 = writer.prefix("IpamScopeId");
    if let Some(var_5155) = &input.ipam_scope_id {
        scope_5154.string(var_5155);
    }
    #[allow(unused_mut)]
    let mut scope_5156 = writer.prefix("Description");
    if let Some(var_5157) = &input.description {
        scope_5156.string(var_5157);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_launch_template(
    input: &crate::input::ModifyLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5158 = writer.prefix("DryRun");
    if let Some(var_5159) = &input.dry_run {
        scope_5158.boolean(*var_5159);
    }
    #[allow(unused_mut)]
    let mut scope_5160 = writer.prefix("ClientToken");
    if let Some(var_5161) = &input.client_token {
        scope_5160.string(var_5161);
    }
    #[allow(unused_mut)]
    let mut scope_5162 = writer.prefix("LaunchTemplateId");
    if let Some(var_5163) = &input.launch_template_id {
        scope_5162.string(var_5163);
    }
    #[allow(unused_mut)]
    let mut scope_5164 = writer.prefix("LaunchTemplateName");
    if let Some(var_5165) = &input.launch_template_name {
        scope_5164.string(var_5165);
    }
    #[allow(unused_mut)]
    let mut scope_5166 = writer.prefix("SetDefaultVersion");
    if let Some(var_5167) = &input.default_version {
        scope_5166.string(var_5167);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_local_gateway_route(
    input: &crate::input::ModifyLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5168 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5169) = &input.destination_cidr_block {
        scope_5168.string(var_5169);
    }
    #[allow(unused_mut)]
    let mut scope_5170 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_5171) = &input.local_gateway_route_table_id {
        scope_5170.string(var_5171);
    }
    #[allow(unused_mut)]
    let mut scope_5172 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_5173) = &input.local_gateway_virtual_interface_group_id {
        scope_5172.string(var_5173);
    }
    #[allow(unused_mut)]
    let mut scope_5174 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5175) = &input.network_interface_id {
        scope_5174.string(var_5175);
    }
    #[allow(unused_mut)]
    let mut scope_5176 = writer.prefix("DryRun");
    if let Some(var_5177) = &input.dry_run {
        scope_5176.boolean(*var_5177);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_managed_prefix_list(
    input: &crate::input::ModifyManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5178 = writer.prefix("DryRun");
    if let Some(var_5179) = &input.dry_run {
        scope_5178.boolean(*var_5179);
    }
    #[allow(unused_mut)]
    let mut scope_5180 = writer.prefix("PrefixListId");
    if let Some(var_5181) = &input.prefix_list_id {
        scope_5180.string(var_5181);
    }
    #[allow(unused_mut)]
    let mut scope_5182 = writer.prefix("CurrentVersion");
    if let Some(var_5183) = &input.current_version {
        scope_5182.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5183).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5184 = writer.prefix("PrefixListName");
    if let Some(var_5185) = &input.prefix_list_name {
        scope_5184.string(var_5185);
    }
    #[allow(unused_mut)]
    let mut scope_5186 = writer.prefix("AddEntry");
    if let Some(var_5187) = &input.add_entries {
        let mut list_5189 = scope_5186.start_list(true, None);
        for item_5188 in var_5187 {
            #[allow(unused_mut)]
            let mut entry_5190 = list_5189.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_5190, item_5188,
            )?;
        }
        list_5189.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5191 = writer.prefix("RemoveEntry");
    if let Some(var_5192) = &input.remove_entries {
        let mut list_5194 = scope_5191.start_list(true, None);
        for item_5193 in var_5192 {
            #[allow(unused_mut)]
            let mut entry_5195 = list_5194.entry();
            crate::query_ser::serialize_structure_crate_model_remove_prefix_list_entry(
                entry_5195, item_5193,
            )?;
        }
        list_5194.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5196 = writer.prefix("MaxEntries");
    if let Some(var_5197) = &input.max_entries {
        scope_5196.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5197).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_network_interface_attribute(
    input: &crate::input::ModifyNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5198 = writer.prefix("Attachment");
    if let Some(var_5199) = &input.attachment {
        crate::query_ser::serialize_structure_crate_model_network_interface_attachment_changes(
            scope_5198, var_5199,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5200 = writer.prefix("Description");
    if let Some(var_5201) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5200, var_5201)?;
    }
    #[allow(unused_mut)]
    let mut scope_5202 = writer.prefix("DryRun");
    if let Some(var_5203) = &input.dry_run {
        scope_5202.boolean(*var_5203);
    }
    #[allow(unused_mut)]
    let mut scope_5204 = writer.prefix("SecurityGroupId");
    if let Some(var_5205) = &input.groups {
        let mut list_5207 = scope_5204.start_list(true, Some("SecurityGroupId"));
        for item_5206 in var_5205 {
            #[allow(unused_mut)]
            let mut entry_5208 = list_5207.entry();
            entry_5208.string(item_5206);
        }
        list_5207.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5209 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5210) = &input.network_interface_id {
        scope_5209.string(var_5210);
    }
    #[allow(unused_mut)]
    let mut scope_5211 = writer.prefix("SourceDestCheck");
    if let Some(var_5212) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5211, var_5212,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_private_dns_name_options(
    input: &crate::input::ModifyPrivateDnsNameOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyPrivateDnsNameOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5213 = writer.prefix("DryRun");
    if let Some(var_5214) = &input.dry_run {
        scope_5213.boolean(*var_5214);
    }
    #[allow(unused_mut)]
    let mut scope_5215 = writer.prefix("InstanceId");
    if let Some(var_5216) = &input.instance_id {
        scope_5215.string(var_5216);
    }
    #[allow(unused_mut)]
    let mut scope_5217 = writer.prefix("PrivateDnsHostnameType");
    if let Some(var_5218) = &input.private_dns_hostname_type {
        scope_5217.string(var_5218.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5219 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_5220) = &input.enable_resource_name_dns_a_record {
        scope_5219.boolean(*var_5220);
    }
    #[allow(unused_mut)]
    let mut scope_5221 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_5222) = &input.enable_resource_name_dns_aaaa_record {
        scope_5221.boolean(*var_5222);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_reserved_instances(
    input: &crate::input::ModifyReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5223 = writer.prefix("ReservedInstancesId");
    if let Some(var_5224) = &input.reserved_instances_ids {
        let mut list_5226 = scope_5223.start_list(true, Some("ReservedInstancesId"));
        for item_5225 in var_5224 {
            #[allow(unused_mut)]
            let mut entry_5227 = list_5226.entry();
            entry_5227.string(item_5225);
        }
        list_5226.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5228 = writer.prefix("ClientToken");
    if let Some(var_5229) = &input.client_token {
        scope_5228.string(var_5229);
    }
    #[allow(unused_mut)]
    let mut scope_5230 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_5231) = &input.target_configurations {
        let mut list_5233 = scope_5230.start_list(true, Some("item"));
        for item_5232 in var_5231 {
            #[allow(unused_mut)]
            let mut entry_5234 = list_5233.entry();
            crate::query_ser::serialize_structure_crate_model_reserved_instances_configuration(
                entry_5234, item_5232,
            )?;
        }
        list_5233.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_security_group_rules(
    input: &crate::input::ModifySecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5235 = writer.prefix("GroupId");
    if let Some(var_5236) = &input.group_id {
        scope_5235.string(var_5236);
    }
    #[allow(unused_mut)]
    let mut scope_5237 = writer.prefix("SecurityGroupRule");
    if let Some(var_5238) = &input.security_group_rules {
        let mut list_5240 = scope_5237.start_list(true, Some("item"));
        for item_5239 in var_5238 {
            #[allow(unused_mut)]
            let mut entry_5241 = list_5240.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_update(
                entry_5241, item_5239,
            )?;
        }
        list_5240.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5242 = writer.prefix("DryRun");
    if let Some(var_5243) = &input.dry_run {
        scope_5242.boolean(*var_5243);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_attribute(
    input: &crate::input::ModifySnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5244 = writer.prefix("Attribute");
    if let Some(var_5245) = &input.attribute {
        scope_5244.string(var_5245.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5246 = writer.prefix("CreateVolumePermission");
    if let Some(var_5247) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_crate_model_create_volume_permission_modifications(
            scope_5246, var_5247,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5248 = writer.prefix("UserGroup");
    if let Some(var_5249) = &input.group_names {
        let mut list_5251 = scope_5248.start_list(true, Some("GroupName"));
        for item_5250 in var_5249 {
            #[allow(unused_mut)]
            let mut entry_5252 = list_5251.entry();
            entry_5252.string(item_5250);
        }
        list_5251.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5253 = writer.prefix("OperationType");
    if let Some(var_5254) = &input.operation_type {
        scope_5253.string(var_5254.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5255 = writer.prefix("SnapshotId");
    if let Some(var_5256) = &input.snapshot_id {
        scope_5255.string(var_5256);
    }
    #[allow(unused_mut)]
    let mut scope_5257 = writer.prefix("UserId");
    if let Some(var_5258) = &input.user_ids {
        let mut list_5260 = scope_5257.start_list(true, Some("UserId"));
        for item_5259 in var_5258 {
            #[allow(unused_mut)]
            let mut entry_5261 = list_5260.entry();
            entry_5261.string(item_5259);
        }
        list_5260.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5262 = writer.prefix("DryRun");
    if let Some(var_5263) = &input.dry_run {
        scope_5262.boolean(*var_5263);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_tier(
    input: &crate::input::ModifySnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5264 = writer.prefix("SnapshotId");
    if let Some(var_5265) = &input.snapshot_id {
        scope_5264.string(var_5265);
    }
    #[allow(unused_mut)]
    let mut scope_5266 = writer.prefix("StorageTier");
    if let Some(var_5267) = &input.storage_tier {
        scope_5266.string(var_5267.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5268 = writer.prefix("DryRun");
    if let Some(var_5269) = &input.dry_run {
        scope_5268.boolean(*var_5269);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_spot_fleet_request(
    input: &crate::input::ModifySpotFleetRequestInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5270 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_5271) = &input.excess_capacity_termination_policy {
        scope_5270.string(var_5271.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5272 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_5273) = &input.launch_template_configs {
        let mut list_5275 = scope_5272.start_list(true, Some("item"));
        for item_5274 in var_5273 {
            #[allow(unused_mut)]
            let mut entry_5276 = list_5275.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_5276, item_5274,
            )?;
        }
        list_5275.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5277 = writer.prefix("SpotFleetRequestId");
    if let Some(var_5278) = &input.spot_fleet_request_id {
        scope_5277.string(var_5278);
    }
    #[allow(unused_mut)]
    let mut scope_5279 = writer.prefix("TargetCapacity");
    if let Some(var_5280) = &input.target_capacity {
        scope_5279.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5280).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5281 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_5282) = &input.on_demand_target_capacity {
        scope_5281.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5282).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5283 = writer.prefix("Context");
    if let Some(var_5284) = &input.context {
        scope_5283.string(var_5284);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_subnet_attribute(
    input: &crate::input::ModifySubnetAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5285 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_5286) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5285, var_5286,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5287 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_5288) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5287, var_5288,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5289 = writer.prefix("SubnetId");
    if let Some(var_5290) = &input.subnet_id {
        scope_5289.string(var_5290);
    }
    #[allow(unused_mut)]
    let mut scope_5291 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_5292) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5291, var_5292,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5293 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_5294) = &input.customer_owned_ipv4_pool {
        scope_5293.string(var_5294);
    }
    #[allow(unused_mut)]
    let mut scope_5295 = writer.prefix("EnableDns64");
    if let Some(var_5296) = &input.enable_dns64 {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5295, var_5296,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5297 = writer.prefix("PrivateDnsHostnameTypeOnLaunch");
    if let Some(var_5298) = &input.private_dns_hostname_type_on_launch {
        scope_5297.string(var_5298.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5299 = writer.prefix("EnableResourceNameDnsARecordOnLaunch");
    if let Some(var_5300) = &input.enable_resource_name_dns_a_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5299, var_5300,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5301 = writer.prefix("EnableResourceNameDnsAAAARecordOnLaunch");
    if let Some(var_5302) = &input.enable_resource_name_dns_aaaa_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5301, var_5302,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5303 = writer.prefix("EnableLniAtDeviceIndex");
    if let Some(var_5304) = &input.enable_lni_at_device_index {
        scope_5303.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5304).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5305 = writer.prefix("DisableLniAtDeviceIndex");
    if let Some(var_5306) = &input.disable_lni_at_device_index {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5305, var_5306,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_network_services(
    input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTrafficMirrorFilterNetworkServices",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5307 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5308) = &input.traffic_mirror_filter_id {
        scope_5307.string(var_5308);
    }
    #[allow(unused_mut)]
    let mut scope_5309 = writer.prefix("AddNetworkService");
    if let Some(var_5310) = &input.add_network_services {
        let mut list_5312 = scope_5309.start_list(true, Some("item"));
        for item_5311 in var_5310 {
            #[allow(unused_mut)]
            let mut entry_5313 = list_5312.entry();
            entry_5313.string(item_5311.as_str());
        }
        list_5312.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5314 = writer.prefix("RemoveNetworkService");
    if let Some(var_5315) = &input.remove_network_services {
        let mut list_5317 = scope_5314.start_list(true, Some("item"));
        for item_5316 in var_5315 {
            #[allow(unused_mut)]
            let mut entry_5318 = list_5317.entry();
            entry_5318.string(item_5316.as_str());
        }
        list_5317.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5319 = writer.prefix("DryRun");
    if let Some(var_5320) = &input.dry_run {
        scope_5319.boolean(*var_5320);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_rule(
    input: &crate::input::ModifyTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5321 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_5322) = &input.traffic_mirror_filter_rule_id {
        scope_5321.string(var_5322);
    }
    #[allow(unused_mut)]
    let mut scope_5323 = writer.prefix("TrafficDirection");
    if let Some(var_5324) = &input.traffic_direction {
        scope_5323.string(var_5324.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5325 = writer.prefix("RuleNumber");
    if let Some(var_5326) = &input.rule_number {
        scope_5325.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5326).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5327 = writer.prefix("RuleAction");
    if let Some(var_5328) = &input.rule_action {
        scope_5327.string(var_5328.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5329 = writer.prefix("DestinationPortRange");
    if let Some(var_5330) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5329, var_5330,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5331 = writer.prefix("SourcePortRange");
    if let Some(var_5332) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5331, var_5332,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5333 = writer.prefix("Protocol");
    if let Some(var_5334) = &input.protocol {
        scope_5333.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5334).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5335 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5336) = &input.destination_cidr_block {
        scope_5335.string(var_5336);
    }
    #[allow(unused_mut)]
    let mut scope_5337 = writer.prefix("SourceCidrBlock");
    if let Some(var_5338) = &input.source_cidr_block {
        scope_5337.string(var_5338);
    }
    #[allow(unused_mut)]
    let mut scope_5339 = writer.prefix("Description");
    if let Some(var_5340) = &input.description {
        scope_5339.string(var_5340);
    }
    #[allow(unused_mut)]
    let mut scope_5341 = writer.prefix("RemoveField");
    if let Some(var_5342) = &input.remove_fields {
        let mut list_5344 = scope_5341.start_list(true, None);
        for item_5343 in var_5342 {
            #[allow(unused_mut)]
            let mut entry_5345 = list_5344.entry();
            entry_5345.string(item_5343.as_str());
        }
        list_5344.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5346 = writer.prefix("DryRun");
    if let Some(var_5347) = &input.dry_run {
        scope_5346.boolean(*var_5347);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_session(
    input: &crate::input::ModifyTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5348 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_5349) = &input.traffic_mirror_session_id {
        scope_5348.string(var_5349);
    }
    #[allow(unused_mut)]
    let mut scope_5350 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_5351) = &input.traffic_mirror_target_id {
        scope_5350.string(var_5351);
    }
    #[allow(unused_mut)]
    let mut scope_5352 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5353) = &input.traffic_mirror_filter_id {
        scope_5352.string(var_5353);
    }
    #[allow(unused_mut)]
    let mut scope_5354 = writer.prefix("PacketLength");
    if let Some(var_5355) = &input.packet_length {
        scope_5354.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5355).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5356 = writer.prefix("SessionNumber");
    if let Some(var_5357) = &input.session_number {
        scope_5356.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5357).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5358 = writer.prefix("VirtualNetworkId");
    if let Some(var_5359) = &input.virtual_network_id {
        scope_5358.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5359).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5360 = writer.prefix("Description");
    if let Some(var_5361) = &input.description {
        scope_5360.string(var_5361);
    }
    #[allow(unused_mut)]
    let mut scope_5362 = writer.prefix("RemoveField");
    if let Some(var_5363) = &input.remove_fields {
        let mut list_5365 = scope_5362.start_list(true, None);
        for item_5364 in var_5363 {
            #[allow(unused_mut)]
            let mut entry_5366 = list_5365.entry();
            entry_5366.string(item_5364.as_str());
        }
        list_5365.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5367 = writer.prefix("DryRun");
    if let Some(var_5368) = &input.dry_run {
        scope_5367.boolean(*var_5368);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway(
    input: &crate::input::ModifyTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5369 = writer.prefix("TransitGatewayId");
    if let Some(var_5370) = &input.transit_gateway_id {
        scope_5369.string(var_5370);
    }
    #[allow(unused_mut)]
    let mut scope_5371 = writer.prefix("Description");
    if let Some(var_5372) = &input.description {
        scope_5371.string(var_5372);
    }
    #[allow(unused_mut)]
    let mut scope_5373 = writer.prefix("Options");
    if let Some(var_5374) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_options(
            scope_5373, var_5374,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5375 = writer.prefix("DryRun");
    if let Some(var_5376) = &input.dry_run {
        scope_5375.boolean(*var_5376);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_prefix_list_reference(
    input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5377 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5378) = &input.transit_gateway_route_table_id {
        scope_5377.string(var_5378);
    }
    #[allow(unused_mut)]
    let mut scope_5379 = writer.prefix("PrefixListId");
    if let Some(var_5380) = &input.prefix_list_id {
        scope_5379.string(var_5380);
    }
    #[allow(unused_mut)]
    let mut scope_5381 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5382) = &input.transit_gateway_attachment_id {
        scope_5381.string(var_5382);
    }
    #[allow(unused_mut)]
    let mut scope_5383 = writer.prefix("Blackhole");
    if let Some(var_5384) = &input.blackhole {
        scope_5383.boolean(*var_5384);
    }
    #[allow(unused_mut)]
    let mut scope_5385 = writer.prefix("DryRun");
    if let Some(var_5386) = &input.dry_run {
        scope_5385.boolean(*var_5386);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_vpc_attachment(
    input: &crate::input::ModifyTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5387 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5388) = &input.transit_gateway_attachment_id {
        scope_5387.string(var_5388);
    }
    #[allow(unused_mut)]
    let mut scope_5389 = writer.prefix("AddSubnetIds");
    if let Some(var_5390) = &input.add_subnet_ids {
        let mut list_5392 = scope_5389.start_list(true, Some("item"));
        for item_5391 in var_5390 {
            #[allow(unused_mut)]
            let mut entry_5393 = list_5392.entry();
            entry_5393.string(item_5391);
        }
        list_5392.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5394 = writer.prefix("RemoveSubnetIds");
    if let Some(var_5395) = &input.remove_subnet_ids {
        let mut list_5397 = scope_5394.start_list(true, Some("item"));
        for item_5396 in var_5395 {
            #[allow(unused_mut)]
            let mut entry_5398 = list_5397.entry();
            entry_5398.string(item_5396);
        }
        list_5397.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5399 = writer.prefix("Options");
    if let Some(var_5400) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(scope_5399, var_5400)?;
    }
    #[allow(unused_mut)]
    let mut scope_5401 = writer.prefix("DryRun");
    if let Some(var_5402) = &input.dry_run {
        scope_5401.boolean(*var_5402);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume(
    input: &crate::input::ModifyVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5403 = writer.prefix("DryRun");
    if let Some(var_5404) = &input.dry_run {
        scope_5403.boolean(*var_5404);
    }
    #[allow(unused_mut)]
    let mut scope_5405 = writer.prefix("VolumeId");
    if let Some(var_5406) = &input.volume_id {
        scope_5405.string(var_5406);
    }
    #[allow(unused_mut)]
    let mut scope_5407 = writer.prefix("Size");
    if let Some(var_5408) = &input.size {
        scope_5407.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5408).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5409 = writer.prefix("VolumeType");
    if let Some(var_5410) = &input.volume_type {
        scope_5409.string(var_5410.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5411 = writer.prefix("Iops");
    if let Some(var_5412) = &input.iops {
        scope_5411.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5412).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5413 = writer.prefix("Throughput");
    if let Some(var_5414) = &input.throughput {
        scope_5413.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5414).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5415 = writer.prefix("MultiAttachEnabled");
    if let Some(var_5416) = &input.multi_attach_enabled {
        scope_5415.boolean(*var_5416);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume_attribute(
    input: &crate::input::ModifyVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5417 = writer.prefix("AutoEnableIO");
    if let Some(var_5418) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5417, var_5418,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5419 = writer.prefix("VolumeId");
    if let Some(var_5420) = &input.volume_id {
        scope_5419.string(var_5420);
    }
    #[allow(unused_mut)]
    let mut scope_5421 = writer.prefix("DryRun");
    if let Some(var_5422) = &input.dry_run {
        scope_5421.boolean(*var_5422);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_attribute(
    input: &crate::input::ModifyVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5423 = writer.prefix("EnableDnsHostnames");
    if let Some(var_5424) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5423, var_5424,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5425 = writer.prefix("EnableDnsSupport");
    if let Some(var_5426) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5425, var_5426,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5427 = writer.prefix("VpcId");
    if let Some(var_5428) = &input.vpc_id {
        scope_5427.string(var_5428);
    }
    #[allow(unused_mut)]
    let mut scope_5429 = writer.prefix("EnableNetworkAddressUsageMetrics");
    if let Some(var_5430) = &input.enable_network_address_usage_metrics {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5429, var_5430,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint(
    input: &crate::input::ModifyVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5431 = writer.prefix("DryRun");
    if let Some(var_5432) = &input.dry_run {
        scope_5431.boolean(*var_5432);
    }
    #[allow(unused_mut)]
    let mut scope_5433 = writer.prefix("VpcEndpointId");
    if let Some(var_5434) = &input.vpc_endpoint_id {
        scope_5433.string(var_5434);
    }
    #[allow(unused_mut)]
    let mut scope_5435 = writer.prefix("ResetPolicy");
    if let Some(var_5436) = &input.reset_policy {
        scope_5435.boolean(*var_5436);
    }
    #[allow(unused_mut)]
    let mut scope_5437 = writer.prefix("PolicyDocument");
    if let Some(var_5438) = &input.policy_document {
        scope_5437.string(var_5438);
    }
    #[allow(unused_mut)]
    let mut scope_5439 = writer.prefix("AddRouteTableId");
    if let Some(var_5440) = &input.add_route_table_ids {
        let mut list_5442 = scope_5439.start_list(true, Some("item"));
        for item_5441 in var_5440 {
            #[allow(unused_mut)]
            let mut entry_5443 = list_5442.entry();
            entry_5443.string(item_5441);
        }
        list_5442.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5444 = writer.prefix("RemoveRouteTableId");
    if let Some(var_5445) = &input.remove_route_table_ids {
        let mut list_5447 = scope_5444.start_list(true, Some("item"));
        for item_5446 in var_5445 {
            #[allow(unused_mut)]
            let mut entry_5448 = list_5447.entry();
            entry_5448.string(item_5446);
        }
        list_5447.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5449 = writer.prefix("AddSubnetId");
    if let Some(var_5450) = &input.add_subnet_ids {
        let mut list_5452 = scope_5449.start_list(true, Some("item"));
        for item_5451 in var_5450 {
            #[allow(unused_mut)]
            let mut entry_5453 = list_5452.entry();
            entry_5453.string(item_5451);
        }
        list_5452.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5454 = writer.prefix("RemoveSubnetId");
    if let Some(var_5455) = &input.remove_subnet_ids {
        let mut list_5457 = scope_5454.start_list(true, Some("item"));
        for item_5456 in var_5455 {
            #[allow(unused_mut)]
            let mut entry_5458 = list_5457.entry();
            entry_5458.string(item_5456);
        }
        list_5457.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5459 = writer.prefix("AddSecurityGroupId");
    if let Some(var_5460) = &input.add_security_group_ids {
        let mut list_5462 = scope_5459.start_list(true, Some("item"));
        for item_5461 in var_5460 {
            #[allow(unused_mut)]
            let mut entry_5463 = list_5462.entry();
            entry_5463.string(item_5461);
        }
        list_5462.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5464 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_5465) = &input.remove_security_group_ids {
        let mut list_5467 = scope_5464.start_list(true, Some("item"));
        for item_5466 in var_5465 {
            #[allow(unused_mut)]
            let mut entry_5468 = list_5467.entry();
            entry_5468.string(item_5466);
        }
        list_5467.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5469 = writer.prefix("IpAddressType");
    if let Some(var_5470) = &input.ip_address_type {
        scope_5469.string(var_5470.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5471 = writer.prefix("DnsOptions");
    if let Some(var_5472) = &input.dns_options {
        crate::query_ser::serialize_structure_crate_model_dns_options_specification(
            scope_5471, var_5472,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5473 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_5474) = &input.private_dns_enabled {
        scope_5473.boolean(*var_5474);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_connection_notification(
    input: &crate::input::ModifyVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5475 = writer.prefix("DryRun");
    if let Some(var_5476) = &input.dry_run {
        scope_5475.boolean(*var_5476);
    }
    #[allow(unused_mut)]
    let mut scope_5477 = writer.prefix("ConnectionNotificationId");
    if let Some(var_5478) = &input.connection_notification_id {
        scope_5477.string(var_5478);
    }
    #[allow(unused_mut)]
    let mut scope_5479 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_5480) = &input.connection_notification_arn {
        scope_5479.string(var_5480);
    }
    #[allow(unused_mut)]
    let mut scope_5481 = writer.prefix("ConnectionEvents");
    if let Some(var_5482) = &input.connection_events {
        let mut list_5484 = scope_5481.start_list(true, Some("item"));
        for item_5483 in var_5482 {
            #[allow(unused_mut)]
            let mut entry_5485 = list_5484.entry();
            entry_5485.string(item_5483);
        }
        list_5484.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_configuration(
    input: &crate::input::ModifyVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5486 = writer.prefix("DryRun");
    if let Some(var_5487) = &input.dry_run {
        scope_5486.boolean(*var_5487);
    }
    #[allow(unused_mut)]
    let mut scope_5488 = writer.prefix("ServiceId");
    if let Some(var_5489) = &input.service_id {
        scope_5488.string(var_5489);
    }
    #[allow(unused_mut)]
    let mut scope_5490 = writer.prefix("PrivateDnsName");
    if let Some(var_5491) = &input.private_dns_name {
        scope_5490.string(var_5491);
    }
    #[allow(unused_mut)]
    let mut scope_5492 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_5493) = &input.remove_private_dns_name {
        scope_5492.boolean(*var_5493);
    }
    #[allow(unused_mut)]
    let mut scope_5494 = writer.prefix("AcceptanceRequired");
    if let Some(var_5495) = &input.acceptance_required {
        scope_5494.boolean(*var_5495);
    }
    #[allow(unused_mut)]
    let mut scope_5496 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_5497) = &input.add_network_load_balancer_arns {
        let mut list_5499 = scope_5496.start_list(true, Some("item"));
        for item_5498 in var_5497 {
            #[allow(unused_mut)]
            let mut entry_5500 = list_5499.entry();
            entry_5500.string(item_5498);
        }
        list_5499.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5501 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_5502) = &input.remove_network_load_balancer_arns {
        let mut list_5504 = scope_5501.start_list(true, Some("item"));
        for item_5503 in var_5502 {
            #[allow(unused_mut)]
            let mut entry_5505 = list_5504.entry();
            entry_5505.string(item_5503);
        }
        list_5504.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5506 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_5507) = &input.add_gateway_load_balancer_arns {
        let mut list_5509 = scope_5506.start_list(true, Some("item"));
        for item_5508 in var_5507 {
            #[allow(unused_mut)]
            let mut entry_5510 = list_5509.entry();
            entry_5510.string(item_5508);
        }
        list_5509.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5511 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_5512) = &input.remove_gateway_load_balancer_arns {
        let mut list_5514 = scope_5511.start_list(true, Some("item"));
        for item_5513 in var_5512 {
            #[allow(unused_mut)]
            let mut entry_5515 = list_5514.entry();
            entry_5515.string(item_5513);
        }
        list_5514.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5516 = writer.prefix("AddSupportedIpAddressType");
    if let Some(var_5517) = &input.add_supported_ip_address_types {
        let mut list_5519 = scope_5516.start_list(true, Some("item"));
        for item_5518 in var_5517 {
            #[allow(unused_mut)]
            let mut entry_5520 = list_5519.entry();
            entry_5520.string(item_5518);
        }
        list_5519.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5521 = writer.prefix("RemoveSupportedIpAddressType");
    if let Some(var_5522) = &input.remove_supported_ip_address_types {
        let mut list_5524 = scope_5521.start_list(true, Some("item"));
        for item_5523 in var_5522 {
            #[allow(unused_mut)]
            let mut entry_5525 = list_5524.entry();
            entry_5525.string(item_5523);
        }
        list_5524.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_payer_responsibility(
    input: &crate::input::ModifyVpcEndpointServicePayerResponsibilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePayerResponsibility",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5526 = writer.prefix("DryRun");
    if let Some(var_5527) = &input.dry_run {
        scope_5526.boolean(*var_5527);
    }
    #[allow(unused_mut)]
    let mut scope_5528 = writer.prefix("ServiceId");
    if let Some(var_5529) = &input.service_id {
        scope_5528.string(var_5529);
    }
    #[allow(unused_mut)]
    let mut scope_5530 = writer.prefix("PayerResponsibility");
    if let Some(var_5531) = &input.payer_responsibility {
        scope_5530.string(var_5531.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_permissions(
    input: &crate::input::ModifyVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5532 = writer.prefix("DryRun");
    if let Some(var_5533) = &input.dry_run {
        scope_5532.boolean(*var_5533);
    }
    #[allow(unused_mut)]
    let mut scope_5534 = writer.prefix("ServiceId");
    if let Some(var_5535) = &input.service_id {
        scope_5534.string(var_5535);
    }
    #[allow(unused_mut)]
    let mut scope_5536 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_5537) = &input.add_allowed_principals {
        let mut list_5539 = scope_5536.start_list(true, Some("item"));
        for item_5538 in var_5537 {
            #[allow(unused_mut)]
            let mut entry_5540 = list_5539.entry();
            entry_5540.string(item_5538);
        }
        list_5539.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5541 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_5542) = &input.remove_allowed_principals {
        let mut list_5544 = scope_5541.start_list(true, Some("item"));
        for item_5543 in var_5542 {
            #[allow(unused_mut)]
            let mut entry_5545 = list_5544.entry();
            entry_5545.string(item_5543);
        }
        list_5544.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_peering_connection_options(
    input: &crate::input::ModifyVpcPeeringConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcPeeringConnectionOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5546 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_5547) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5546, var_5547,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5548 = writer.prefix("DryRun");
    if let Some(var_5549) = &input.dry_run {
        scope_5548.boolean(*var_5549);
    }
    #[allow(unused_mut)]
    let mut scope_5550 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_5551) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5550, var_5551,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5552 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5553) = &input.vpc_peering_connection_id {
        scope_5552.string(var_5553);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_tenancy(
    input: &crate::input::ModifyVpcTenancyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5554 = writer.prefix("VpcId");
    if let Some(var_5555) = &input.vpc_id {
        scope_5554.string(var_5555);
    }
    #[allow(unused_mut)]
    let mut scope_5556 = writer.prefix("InstanceTenancy");
    if let Some(var_5557) = &input.instance_tenancy {
        scope_5556.string(var_5557.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5558 = writer.prefix("DryRun");
    if let Some(var_5559) = &input.dry_run {
        scope_5558.boolean(*var_5559);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection(
    input: &crate::input::ModifyVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5560 = writer.prefix("VpnConnectionId");
    if let Some(var_5561) = &input.vpn_connection_id {
        scope_5560.string(var_5561);
    }
    #[allow(unused_mut)]
    let mut scope_5562 = writer.prefix("TransitGatewayId");
    if let Some(var_5563) = &input.transit_gateway_id {
        scope_5562.string(var_5563);
    }
    #[allow(unused_mut)]
    let mut scope_5564 = writer.prefix("CustomerGatewayId");
    if let Some(var_5565) = &input.customer_gateway_id {
        scope_5564.string(var_5565);
    }
    #[allow(unused_mut)]
    let mut scope_5566 = writer.prefix("VpnGatewayId");
    if let Some(var_5567) = &input.vpn_gateway_id {
        scope_5566.string(var_5567);
    }
    #[allow(unused_mut)]
    let mut scope_5568 = writer.prefix("DryRun");
    if let Some(var_5569) = &input.dry_run {
        scope_5568.boolean(*var_5569);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection_options(
    input: &crate::input::ModifyVpnConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5570 = writer.prefix("VpnConnectionId");
    if let Some(var_5571) = &input.vpn_connection_id {
        scope_5570.string(var_5571);
    }
    #[allow(unused_mut)]
    let mut scope_5572 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_5573) = &input.local_ipv4_network_cidr {
        scope_5572.string(var_5573);
    }
    #[allow(unused_mut)]
    let mut scope_5574 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_5575) = &input.remote_ipv4_network_cidr {
        scope_5574.string(var_5575);
    }
    #[allow(unused_mut)]
    let mut scope_5576 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_5577) = &input.local_ipv6_network_cidr {
        scope_5576.string(var_5577);
    }
    #[allow(unused_mut)]
    let mut scope_5578 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_5579) = &input.remote_ipv6_network_cidr {
        scope_5578.string(var_5579);
    }
    #[allow(unused_mut)]
    let mut scope_5580 = writer.prefix("DryRun");
    if let Some(var_5581) = &input.dry_run {
        scope_5580.boolean(*var_5581);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_certificate(
    input: &crate::input::ModifyVpnTunnelCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5582 = writer.prefix("VpnConnectionId");
    if let Some(var_5583) = &input.vpn_connection_id {
        scope_5582.string(var_5583);
    }
    #[allow(unused_mut)]
    let mut scope_5584 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5585) = &input.vpn_tunnel_outside_ip_address {
        scope_5584.string(var_5585);
    }
    #[allow(unused_mut)]
    let mut scope_5586 = writer.prefix("DryRun");
    if let Some(var_5587) = &input.dry_run {
        scope_5586.boolean(*var_5587);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_options(
    input: &crate::input::ModifyVpnTunnelOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5588 = writer.prefix("VpnConnectionId");
    if let Some(var_5589) = &input.vpn_connection_id {
        scope_5588.string(var_5589);
    }
    #[allow(unused_mut)]
    let mut scope_5590 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5591) = &input.vpn_tunnel_outside_ip_address {
        scope_5590.string(var_5591);
    }
    #[allow(unused_mut)]
    let mut scope_5592 = writer.prefix("TunnelOptions");
    if let Some(var_5593) = &input.tunnel_options {
        crate::query_ser::serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
            scope_5592, var_5593,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5594 = writer.prefix("DryRun");
    if let Some(var_5595) = &input.dry_run {
        scope_5594.boolean(*var_5595);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_monitor_instances(
    input: &crate::input::MonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5596 = writer.prefix("InstanceId");
    if let Some(var_5597) = &input.instance_ids {
        let mut list_5599 = scope_5596.start_list(true, Some("InstanceId"));
        for item_5598 in var_5597 {
            #[allow(unused_mut)]
            let mut entry_5600 = list_5599.entry();
            entry_5600.string(item_5598);
        }
        list_5599.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5601 = writer.prefix("DryRun");
    if let Some(var_5602) = &input.dry_run {
        scope_5601.boolean(*var_5602);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_address_to_vpc(
    input: &crate::input::MoveAddressToVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5603 = writer.prefix("DryRun");
    if let Some(var_5604) = &input.dry_run {
        scope_5603.boolean(*var_5604);
    }
    #[allow(unused_mut)]
    let mut scope_5605 = writer.prefix("PublicIp");
    if let Some(var_5606) = &input.public_ip {
        scope_5605.string(var_5606);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_byoip_cidr_to_ipam(
    input: &crate::input::MoveByoipCidrToIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "MoveByoipCidrToIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5607 = writer.prefix("DryRun");
    if let Some(var_5608) = &input.dry_run {
        scope_5607.boolean(*var_5608);
    }
    #[allow(unused_mut)]
    let mut scope_5609 = writer.prefix("Cidr");
    if let Some(var_5610) = &input.cidr {
        scope_5609.string(var_5610);
    }
    #[allow(unused_mut)]
    let mut scope_5611 = writer.prefix("IpamPoolId");
    if let Some(var_5612) = &input.ipam_pool_id {
        scope_5611.string(var_5612);
    }
    #[allow(unused_mut)]
    let mut scope_5613 = writer.prefix("IpamPoolOwner");
    if let Some(var_5614) = &input.ipam_pool_owner {
        scope_5613.string(var_5614);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_byoip_cidr(
    input: &crate::input::ProvisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5615 = writer.prefix("Cidr");
    if let Some(var_5616) = &input.cidr {
        scope_5615.string(var_5616);
    }
    #[allow(unused_mut)]
    let mut scope_5617 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5618) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_cidr_authorization_context(
            scope_5617, var_5618,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5619 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_5620) = &input.publicly_advertisable {
        scope_5619.boolean(*var_5620);
    }
    #[allow(unused_mut)]
    let mut scope_5621 = writer.prefix("Description");
    if let Some(var_5622) = &input.description {
        scope_5621.string(var_5622);
    }
    #[allow(unused_mut)]
    let mut scope_5623 = writer.prefix("DryRun");
    if let Some(var_5624) = &input.dry_run {
        scope_5623.boolean(*var_5624);
    }
    #[allow(unused_mut)]
    let mut scope_5625 = writer.prefix("PoolTagSpecification");
    if let Some(var_5626) = &input.pool_tag_specifications {
        let mut list_5628 = scope_5625.start_list(true, Some("item"));
        for item_5627 in var_5626 {
            #[allow(unused_mut)]
            let mut entry_5629 = list_5628.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5629, item_5627,
            )?;
        }
        list_5628.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5630 = writer.prefix("MultiRegion");
    if let Some(var_5631) = &input.multi_region {
        scope_5630.boolean(*var_5631);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_ipam_pool_cidr(
    input: &crate::input::ProvisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5632 = writer.prefix("DryRun");
    if let Some(var_5633) = &input.dry_run {
        scope_5632.boolean(*var_5633);
    }
    #[allow(unused_mut)]
    let mut scope_5634 = writer.prefix("IpamPoolId");
    if let Some(var_5635) = &input.ipam_pool_id {
        scope_5634.string(var_5635);
    }
    #[allow(unused_mut)]
    let mut scope_5636 = writer.prefix("Cidr");
    if let Some(var_5637) = &input.cidr {
        scope_5636.string(var_5637);
    }
    #[allow(unused_mut)]
    let mut scope_5638 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5639) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_ipam_cidr_authorization_context(
            scope_5638, var_5639,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_public_ipv4_pool_cidr(
    input: &crate::input::ProvisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5640 = writer.prefix("DryRun");
    if let Some(var_5641) = &input.dry_run {
        scope_5640.boolean(*var_5641);
    }
    #[allow(unused_mut)]
    let mut scope_5642 = writer.prefix("IpamPoolId");
    if let Some(var_5643) = &input.ipam_pool_id {
        scope_5642.string(var_5643);
    }
    #[allow(unused_mut)]
    let mut scope_5644 = writer.prefix("PoolId");
    if let Some(var_5645) = &input.pool_id {
        scope_5644.string(var_5645);
    }
    #[allow(unused_mut)]
    let mut scope_5646 = writer.prefix("NetmaskLength");
    if let Some(var_5647) = &input.netmask_length {
        scope_5646.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5647).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_host_reservation(
    input: &crate::input::PurchaseHostReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5648 = writer.prefix("ClientToken");
    if let Some(var_5649) = &input.client_token {
        scope_5648.string(var_5649);
    }
    #[allow(unused_mut)]
    let mut scope_5650 = writer.prefix("CurrencyCode");
    if let Some(var_5651) = &input.currency_code {
        scope_5650.string(var_5651.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5652 = writer.prefix("HostIdSet");
    if let Some(var_5653) = &input.host_id_set {
        let mut list_5655 = scope_5652.start_list(true, Some("item"));
        for item_5654 in var_5653 {
            #[allow(unused_mut)]
            let mut entry_5656 = list_5655.entry();
            entry_5656.string(item_5654);
        }
        list_5655.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5657 = writer.prefix("LimitPrice");
    if let Some(var_5658) = &input.limit_price {
        scope_5657.string(var_5658);
    }
    #[allow(unused_mut)]
    let mut scope_5659 = writer.prefix("OfferingId");
    if let Some(var_5660) = &input.offering_id {
        scope_5659.string(var_5660);
    }
    #[allow(unused_mut)]
    let mut scope_5661 = writer.prefix("TagSpecification");
    if let Some(var_5662) = &input.tag_specifications {
        let mut list_5664 = scope_5661.start_list(true, Some("item"));
        for item_5663 in var_5662 {
            #[allow(unused_mut)]
            let mut entry_5665 = list_5664.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5665, item_5663,
            )?;
        }
        list_5664.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_instances_offering(
    input: &crate::input::PurchaseReservedInstancesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedInstancesOffering",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5666 = writer.prefix("InstanceCount");
    if let Some(var_5667) = &input.instance_count {
        scope_5666.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5667).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5668 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_5669) = &input.reserved_instances_offering_id {
        scope_5668.string(var_5669);
    }
    #[allow(unused_mut)]
    let mut scope_5670 = writer.prefix("DryRun");
    if let Some(var_5671) = &input.dry_run {
        scope_5670.boolean(*var_5671);
    }
    #[allow(unused_mut)]
    let mut scope_5672 = writer.prefix("LimitPrice");
    if let Some(var_5673) = &input.limit_price {
        crate::query_ser::serialize_structure_crate_model_reserved_instance_limit_price(
            scope_5672, var_5673,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5674 = writer.prefix("PurchaseTime");
    if let Some(var_5675) = &input.purchase_time {
        scope_5674.date_time(var_5675, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_scheduled_instances(
    input: &crate::input::PurchaseScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5676 = writer.prefix("ClientToken");
    if let Some(var_5677) = &input.client_token {
        scope_5676.string(var_5677);
    }
    #[allow(unused_mut)]
    let mut scope_5678 = writer.prefix("DryRun");
    if let Some(var_5679) = &input.dry_run {
        scope_5678.boolean(*var_5679);
    }
    #[allow(unused_mut)]
    let mut scope_5680 = writer.prefix("PurchaseRequest");
    if let Some(var_5681) = &input.purchase_requests {
        let mut list_5683 = scope_5680.start_list(true, Some("PurchaseRequest"));
        for item_5682 in var_5681 {
            #[allow(unused_mut)]
            let mut entry_5684 = list_5683.entry();
            crate::query_ser::serialize_structure_crate_model_purchase_request(
                entry_5684, item_5682,
            )?;
        }
        list_5683.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_instances(
    input: &crate::input::RebootInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5685 = writer.prefix("InstanceId");
    if let Some(var_5686) = &input.instance_ids {
        let mut list_5688 = scope_5685.start_list(true, Some("InstanceId"));
        for item_5687 in var_5686 {
            #[allow(unused_mut)]
            let mut entry_5689 = list_5688.entry();
            entry_5689.string(item_5687);
        }
        list_5688.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5690 = writer.prefix("DryRun");
    if let Some(var_5691) = &input.dry_run {
        scope_5690.boolean(*var_5691);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_image(
    input: &crate::input::RegisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5692 = writer.prefix("ImageLocation");
    if let Some(var_5693) = &input.image_location {
        scope_5692.string(var_5693);
    }
    #[allow(unused_mut)]
    let mut scope_5694 = writer.prefix("Architecture");
    if let Some(var_5695) = &input.architecture {
        scope_5694.string(var_5695.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5696 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5697) = &input.block_device_mappings {
        let mut list_5699 = scope_5696.start_list(true, Some("BlockDeviceMapping"));
        for item_5698 in var_5697 {
            #[allow(unused_mut)]
            let mut entry_5700 = list_5699.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5700, item_5698,
            )?;
        }
        list_5699.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5701 = writer.prefix("Description");
    if let Some(var_5702) = &input.description {
        scope_5701.string(var_5702);
    }
    #[allow(unused_mut)]
    let mut scope_5703 = writer.prefix("DryRun");
    if let Some(var_5704) = &input.dry_run {
        scope_5703.boolean(*var_5704);
    }
    #[allow(unused_mut)]
    let mut scope_5705 = writer.prefix("EnaSupport");
    if let Some(var_5706) = &input.ena_support {
        scope_5705.boolean(*var_5706);
    }
    #[allow(unused_mut)]
    let mut scope_5707 = writer.prefix("KernelId");
    if let Some(var_5708) = &input.kernel_id {
        scope_5707.string(var_5708);
    }
    #[allow(unused_mut)]
    let mut scope_5709 = writer.prefix("Name");
    if let Some(var_5710) = &input.name {
        scope_5709.string(var_5710);
    }
    #[allow(unused_mut)]
    let mut scope_5711 = writer.prefix("BillingProduct");
    if let Some(var_5712) = &input.billing_products {
        let mut list_5714 = scope_5711.start_list(true, Some("item"));
        for item_5713 in var_5712 {
            #[allow(unused_mut)]
            let mut entry_5715 = list_5714.entry();
            entry_5715.string(item_5713);
        }
        list_5714.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5716 = writer.prefix("RamdiskId");
    if let Some(var_5717) = &input.ramdisk_id {
        scope_5716.string(var_5717);
    }
    #[allow(unused_mut)]
    let mut scope_5718 = writer.prefix("RootDeviceName");
    if let Some(var_5719) = &input.root_device_name {
        scope_5718.string(var_5719);
    }
    #[allow(unused_mut)]
    let mut scope_5720 = writer.prefix("SriovNetSupport");
    if let Some(var_5721) = &input.sriov_net_support {
        scope_5720.string(var_5721);
    }
    #[allow(unused_mut)]
    let mut scope_5722 = writer.prefix("VirtualizationType");
    if let Some(var_5723) = &input.virtualization_type {
        scope_5722.string(var_5723);
    }
    #[allow(unused_mut)]
    let mut scope_5724 = writer.prefix("BootMode");
    if let Some(var_5725) = &input.boot_mode {
        scope_5724.string(var_5725.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5726 = writer.prefix("TpmSupport");
    if let Some(var_5727) = &input.tpm_support {
        scope_5726.string(var_5727.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5728 = writer.prefix("UefiData");
    if let Some(var_5729) = &input.uefi_data {
        scope_5728.string(var_5729);
    }
    #[allow(unused_mut)]
    let mut scope_5730 = writer.prefix("ImdsSupport");
    if let Some(var_5731) = &input.imds_support {
        scope_5730.string(var_5731.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_instance_event_notification_attributes(
    input: &crate::input::RegisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5732 = writer.prefix("DryRun");
    if let Some(var_5733) = &input.dry_run {
        scope_5732.boolean(*var_5733);
    }
    #[allow(unused_mut)]
    let mut scope_5734 = writer.prefix("InstanceTagAttribute");
    if let Some(var_5735) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_register_instance_tag_attribute_request(
            scope_5734, var_5735,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_members(
    input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5736 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5737) = &input.transit_gateway_multicast_domain_id {
        scope_5736.string(var_5737);
    }
    #[allow(unused_mut)]
    let mut scope_5738 = writer.prefix("GroupIpAddress");
    if let Some(var_5739) = &input.group_ip_address {
        scope_5738.string(var_5739);
    }
    #[allow(unused_mut)]
    let mut scope_5740 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5741) = &input.network_interface_ids {
        let mut list_5743 = scope_5740.start_list(true, Some("item"));
        for item_5742 in var_5741 {
            #[allow(unused_mut)]
            let mut entry_5744 = list_5743.entry();
            entry_5744.string(item_5742);
        }
        list_5743.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5745 = writer.prefix("DryRun");
    if let Some(var_5746) = &input.dry_run {
        scope_5745.boolean(*var_5746);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_sources(
    input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5747 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5748) = &input.transit_gateway_multicast_domain_id {
        scope_5747.string(var_5748);
    }
    #[allow(unused_mut)]
    let mut scope_5749 = writer.prefix("GroupIpAddress");
    if let Some(var_5750) = &input.group_ip_address {
        scope_5749.string(var_5750);
    }
    #[allow(unused_mut)]
    let mut scope_5751 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5752) = &input.network_interface_ids {
        let mut list_5754 = scope_5751.start_list(true, Some("item"));
        for item_5753 in var_5752 {
            #[allow(unused_mut)]
            let mut entry_5755 = list_5754.entry();
            entry_5755.string(item_5753);
        }
        list_5754.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5756 = writer.prefix("DryRun");
    if let Some(var_5757) = &input.dry_run {
        scope_5756.boolean(*var_5757);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_multicast_domain_associations(
    input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5758 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5759) = &input.transit_gateway_multicast_domain_id {
        scope_5758.string(var_5759);
    }
    #[allow(unused_mut)]
    let mut scope_5760 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5761) = &input.transit_gateway_attachment_id {
        scope_5760.string(var_5761);
    }
    #[allow(unused_mut)]
    let mut scope_5762 = writer.prefix("SubnetIds");
    if let Some(var_5763) = &input.subnet_ids {
        let mut list_5765 = scope_5762.start_list(true, Some("item"));
        for item_5764 in var_5763 {
            #[allow(unused_mut)]
            let mut entry_5766 = list_5765.entry();
            entry_5766.string(item_5764);
        }
        list_5765.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5767 = writer.prefix("DryRun");
    if let Some(var_5768) = &input.dry_run {
        scope_5767.boolean(*var_5768);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_peering_attachment(
    input: &crate::input::RejectTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5769 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5770) = &input.transit_gateway_attachment_id {
        scope_5769.string(var_5770);
    }
    #[allow(unused_mut)]
    let mut scope_5771 = writer.prefix("DryRun");
    if let Some(var_5772) = &input.dry_run {
        scope_5771.boolean(*var_5772);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_vpc_attachment(
    input: &crate::input::RejectTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5773 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5774) = &input.transit_gateway_attachment_id {
        scope_5773.string(var_5774);
    }
    #[allow(unused_mut)]
    let mut scope_5775 = writer.prefix("DryRun");
    if let Some(var_5776) = &input.dry_run {
        scope_5775.boolean(*var_5776);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_endpoint_connections(
    input: &crate::input::RejectVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5777 = writer.prefix("DryRun");
    if let Some(var_5778) = &input.dry_run {
        scope_5777.boolean(*var_5778);
    }
    #[allow(unused_mut)]
    let mut scope_5779 = writer.prefix("ServiceId");
    if let Some(var_5780) = &input.service_id {
        scope_5779.string(var_5780);
    }
    #[allow(unused_mut)]
    let mut scope_5781 = writer.prefix("VpcEndpointId");
    if let Some(var_5782) = &input.vpc_endpoint_ids {
        let mut list_5784 = scope_5781.start_list(true, Some("item"));
        for item_5783 in var_5782 {
            #[allow(unused_mut)]
            let mut entry_5785 = list_5784.entry();
            entry_5785.string(item_5783);
        }
        list_5784.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_peering_connection(
    input: &crate::input::RejectVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5786 = writer.prefix("DryRun");
    if let Some(var_5787) = &input.dry_run {
        scope_5786.boolean(*var_5787);
    }
    #[allow(unused_mut)]
    let mut scope_5788 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5789) = &input.vpc_peering_connection_id {
        scope_5788.string(var_5789);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_address(
    input: &crate::input::ReleaseAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5790 = writer.prefix("AllocationId");
    if let Some(var_5791) = &input.allocation_id {
        scope_5790.string(var_5791);
    }
    #[allow(unused_mut)]
    let mut scope_5792 = writer.prefix("PublicIp");
    if let Some(var_5793) = &input.public_ip {
        scope_5792.string(var_5793);
    }
    #[allow(unused_mut)]
    let mut scope_5794 = writer.prefix("NetworkBorderGroup");
    if let Some(var_5795) = &input.network_border_group {
        scope_5794.string(var_5795);
    }
    #[allow(unused_mut)]
    let mut scope_5796 = writer.prefix("DryRun");
    if let Some(var_5797) = &input.dry_run {
        scope_5796.boolean(*var_5797);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_hosts(
    input: &crate::input::ReleaseHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5798 = writer.prefix("HostId");
    if let Some(var_5799) = &input.host_ids {
        let mut list_5801 = scope_5798.start_list(true, Some("item"));
        for item_5800 in var_5799 {
            #[allow(unused_mut)]
            let mut entry_5802 = list_5801.entry();
            entry_5802.string(item_5800);
        }
        list_5801.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_ipam_pool_allocation(
    input: &crate::input::ReleaseIpamPoolAllocationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReleaseIpamPoolAllocation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5803 = writer.prefix("DryRun");
    if let Some(var_5804) = &input.dry_run {
        scope_5803.boolean(*var_5804);
    }
    #[allow(unused_mut)]
    let mut scope_5805 = writer.prefix("IpamPoolId");
    if let Some(var_5806) = &input.ipam_pool_id {
        scope_5805.string(var_5806);
    }
    #[allow(unused_mut)]
    let mut scope_5807 = writer.prefix("Cidr");
    if let Some(var_5808) = &input.cidr {
        scope_5807.string(var_5808);
    }
    #[allow(unused_mut)]
    let mut scope_5809 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_5810) = &input.ipam_pool_allocation_id {
        scope_5809.string(var_5810);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_iam_instance_profile_association(
    input: &crate::input::ReplaceIamInstanceProfileAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ReplaceIamInstanceProfileAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5811 = writer.prefix("IamInstanceProfile");
    if let Some(var_5812) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5811, var_5812,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5813 = writer.prefix("AssociationId");
    if let Some(var_5814) = &input.association_id {
        scope_5813.string(var_5814);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_association(
    input: &crate::input::ReplaceNetworkAclAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5815 = writer.prefix("AssociationId");
    if let Some(var_5816) = &input.association_id {
        scope_5815.string(var_5816);
    }
    #[allow(unused_mut)]
    let mut scope_5817 = writer.prefix("DryRun");
    if let Some(var_5818) = &input.dry_run {
        scope_5817.boolean(*var_5818);
    }
    #[allow(unused_mut)]
    let mut scope_5819 = writer.prefix("NetworkAclId");
    if let Some(var_5820) = &input.network_acl_id {
        scope_5819.string(var_5820);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_entry(
    input: &crate::input::ReplaceNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5821 = writer.prefix("CidrBlock");
    if let Some(var_5822) = &input.cidr_block {
        scope_5821.string(var_5822);
    }
    #[allow(unused_mut)]
    let mut scope_5823 = writer.prefix("DryRun");
    if let Some(var_5824) = &input.dry_run {
        scope_5823.boolean(*var_5824);
    }
    #[allow(unused_mut)]
    let mut scope_5825 = writer.prefix("Egress");
    if let Some(var_5826) = &input.egress {
        scope_5825.boolean(*var_5826);
    }
    #[allow(unused_mut)]
    let mut scope_5827 = writer.prefix("Icmp");
    if let Some(var_5828) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_5827, var_5828)?;
    }
    #[allow(unused_mut)]
    let mut scope_5829 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_5830) = &input.ipv6_cidr_block {
        scope_5829.string(var_5830);
    }
    #[allow(unused_mut)]
    let mut scope_5831 = writer.prefix("NetworkAclId");
    if let Some(var_5832) = &input.network_acl_id {
        scope_5831.string(var_5832);
    }
    #[allow(unused_mut)]
    let mut scope_5833 = writer.prefix("PortRange");
    if let Some(var_5834) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_5833, var_5834)?;
    }
    #[allow(unused_mut)]
    let mut scope_5835 = writer.prefix("Protocol");
    if let Some(var_5836) = &input.protocol {
        scope_5835.string(var_5836);
    }
    #[allow(unused_mut)]
    let mut scope_5837 = writer.prefix("RuleAction");
    if let Some(var_5838) = &input.rule_action {
        scope_5837.string(var_5838.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5839 = writer.prefix("RuleNumber");
    if let Some(var_5840) = &input.rule_number {
        scope_5839.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5840).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route(
    input: &crate::input::ReplaceRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5841 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5842) = &input.destination_cidr_block {
        scope_5841.string(var_5842);
    }
    #[allow(unused_mut)]
    let mut scope_5843 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_5844) = &input.destination_ipv6_cidr_block {
        scope_5843.string(var_5844);
    }
    #[allow(unused_mut)]
    let mut scope_5845 = writer.prefix("DestinationPrefixListId");
    if let Some(var_5846) = &input.destination_prefix_list_id {
        scope_5845.string(var_5846);
    }
    #[allow(unused_mut)]
    let mut scope_5847 = writer.prefix("DryRun");
    if let Some(var_5848) = &input.dry_run {
        scope_5847.boolean(*var_5848);
    }
    #[allow(unused_mut)]
    let mut scope_5849 = writer.prefix("VpcEndpointId");
    if let Some(var_5850) = &input.vpc_endpoint_id {
        scope_5849.string(var_5850);
    }
    #[allow(unused_mut)]
    let mut scope_5851 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_5852) = &input.egress_only_internet_gateway_id {
        scope_5851.string(var_5852);
    }
    #[allow(unused_mut)]
    let mut scope_5853 = writer.prefix("GatewayId");
    if let Some(var_5854) = &input.gateway_id {
        scope_5853.string(var_5854);
    }
    #[allow(unused_mut)]
    let mut scope_5855 = writer.prefix("InstanceId");
    if let Some(var_5856) = &input.instance_id {
        scope_5855.string(var_5856);
    }
    #[allow(unused_mut)]
    let mut scope_5857 = writer.prefix("LocalTarget");
    if let Some(var_5858) = &input.local_target {
        scope_5857.boolean(*var_5858);
    }
    #[allow(unused_mut)]
    let mut scope_5859 = writer.prefix("NatGatewayId");
    if let Some(var_5860) = &input.nat_gateway_id {
        scope_5859.string(var_5860);
    }
    #[allow(unused_mut)]
    let mut scope_5861 = writer.prefix("TransitGatewayId");
    if let Some(var_5862) = &input.transit_gateway_id {
        scope_5861.string(var_5862);
    }
    #[allow(unused_mut)]
    let mut scope_5863 = writer.prefix("LocalGatewayId");
    if let Some(var_5864) = &input.local_gateway_id {
        scope_5863.string(var_5864);
    }
    #[allow(unused_mut)]
    let mut scope_5865 = writer.prefix("CarrierGatewayId");
    if let Some(var_5866) = &input.carrier_gateway_id {
        scope_5865.string(var_5866);
    }
    #[allow(unused_mut)]
    let mut scope_5867 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5868) = &input.network_interface_id {
        scope_5867.string(var_5868);
    }
    #[allow(unused_mut)]
    let mut scope_5869 = writer.prefix("RouteTableId");
    if let Some(var_5870) = &input.route_table_id {
        scope_5869.string(var_5870);
    }
    #[allow(unused_mut)]
    let mut scope_5871 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5872) = &input.vpc_peering_connection_id {
        scope_5871.string(var_5872);
    }
    #[allow(unused_mut)]
    let mut scope_5873 = writer.prefix("CoreNetworkArn");
    if let Some(var_5874) = &input.core_network_arn {
        scope_5873.string(var_5874);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route_table_association(
    input: &crate::input::ReplaceRouteTableAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5875 = writer.prefix("AssociationId");
    if let Some(var_5876) = &input.association_id {
        scope_5875.string(var_5876);
    }
    #[allow(unused_mut)]
    let mut scope_5877 = writer.prefix("DryRun");
    if let Some(var_5878) = &input.dry_run {
        scope_5877.boolean(*var_5878);
    }
    #[allow(unused_mut)]
    let mut scope_5879 = writer.prefix("RouteTableId");
    if let Some(var_5880) = &input.route_table_id {
        scope_5879.string(var_5880);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_transit_gateway_route(
    input: &crate::input::ReplaceTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5881 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5882) = &input.destination_cidr_block {
        scope_5881.string(var_5882);
    }
    #[allow(unused_mut)]
    let mut scope_5883 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5884) = &input.transit_gateway_route_table_id {
        scope_5883.string(var_5884);
    }
    #[allow(unused_mut)]
    let mut scope_5885 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5886) = &input.transit_gateway_attachment_id {
        scope_5885.string(var_5886);
    }
    #[allow(unused_mut)]
    let mut scope_5887 = writer.prefix("Blackhole");
    if let Some(var_5888) = &input.blackhole {
        scope_5887.boolean(*var_5888);
    }
    #[allow(unused_mut)]
    let mut scope_5889 = writer.prefix("DryRun");
    if let Some(var_5890) = &input.dry_run {
        scope_5889.boolean(*var_5890);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_report_instance_status(
    input: &crate::input::ReportInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5891 = writer.prefix("Description");
    if let Some(var_5892) = &input.description {
        scope_5891.string(var_5892);
    }
    #[allow(unused_mut)]
    let mut scope_5893 = writer.prefix("DryRun");
    if let Some(var_5894) = &input.dry_run {
        scope_5893.boolean(*var_5894);
    }
    #[allow(unused_mut)]
    let mut scope_5895 = writer.prefix("EndTime");
    if let Some(var_5896) = &input.end_time {
        scope_5895.date_time(var_5896, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5897 = writer.prefix("InstanceId");
    if let Some(var_5898) = &input.instances {
        let mut list_5900 = scope_5897.start_list(true, Some("InstanceId"));
        for item_5899 in var_5898 {
            #[allow(unused_mut)]
            let mut entry_5901 = list_5900.entry();
            entry_5901.string(item_5899);
        }
        list_5900.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5902 = writer.prefix("ReasonCode");
    if let Some(var_5903) = &input.reason_codes {
        let mut list_5905 = scope_5902.start_list(true, Some("item"));
        for item_5904 in var_5903 {
            #[allow(unused_mut)]
            let mut entry_5906 = list_5905.entry();
            entry_5906.string(item_5904.as_str());
        }
        list_5905.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5907 = writer.prefix("StartTime");
    if let Some(var_5908) = &input.start_time {
        scope_5907.date_time(var_5908, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5909 = writer.prefix("Status");
    if let Some(var_5910) = &input.status {
        scope_5909.string(var_5910.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_fleet(
    input: &crate::input::RequestSpotFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5911 = writer.prefix("DryRun");
    if let Some(var_5912) = &input.dry_run {
        scope_5911.boolean(*var_5912);
    }
    #[allow(unused_mut)]
    let mut scope_5913 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_5914) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_request_config_data(
            scope_5913, var_5914,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_instances(
    input: &crate::input::RequestSpotInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5915 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_5916) = &input.availability_zone_group {
        scope_5915.string(var_5916);
    }
    #[allow(unused_mut)]
    let mut scope_5917 = writer.prefix("BlockDurationMinutes");
    if let Some(var_5918) = &input.block_duration_minutes {
        scope_5917.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5918).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5919 = writer.prefix("ClientToken");
    if let Some(var_5920) = &input.client_token {
        scope_5919.string(var_5920);
    }
    #[allow(unused_mut)]
    let mut scope_5921 = writer.prefix("DryRun");
    if let Some(var_5922) = &input.dry_run {
        scope_5921.boolean(*var_5922);
    }
    #[allow(unused_mut)]
    let mut scope_5923 = writer.prefix("InstanceCount");
    if let Some(var_5924) = &input.instance_count {
        scope_5923.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5924).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5925 = writer.prefix("LaunchGroup");
    if let Some(var_5926) = &input.launch_group {
        scope_5925.string(var_5926);
    }
    #[allow(unused_mut)]
    let mut scope_5927 = writer.prefix("LaunchSpecification");
    if let Some(var_5928) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_request_spot_launch_specification(
            scope_5927, var_5928,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5929 = writer.prefix("SpotPrice");
    if let Some(var_5930) = &input.spot_price {
        scope_5929.string(var_5930);
    }
    #[allow(unused_mut)]
    let mut scope_5931 = writer.prefix("Type");
    if let Some(var_5932) = &input.r#type {
        scope_5931.string(var_5932.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5933 = writer.prefix("ValidFrom");
    if let Some(var_5934) = &input.valid_from {
        scope_5933.date_time(var_5934, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5935 = writer.prefix("ValidUntil");
    if let Some(var_5936) = &input.valid_until {
        scope_5935.date_time(var_5936, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5937 = writer.prefix("TagSpecification");
    if let Some(var_5938) = &input.tag_specifications {
        let mut list_5940 = scope_5937.start_list(true, Some("item"));
        for item_5939 in var_5938 {
            #[allow(unused_mut)]
            let mut entry_5941 = list_5940.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5941, item_5939,
            )?;
        }
        list_5940.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5942 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_5943) = &input.instance_interruption_behavior {
        scope_5942.string(var_5943.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_address_attribute(
    input: &crate::input::ResetAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5944 = writer.prefix("AllocationId");
    if let Some(var_5945) = &input.allocation_id {
        scope_5944.string(var_5945);
    }
    #[allow(unused_mut)]
    let mut scope_5946 = writer.prefix("Attribute");
    if let Some(var_5947) = &input.attribute {
        scope_5946.string(var_5947.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5948 = writer.prefix("DryRun");
    if let Some(var_5949) = &input.dry_run {
        scope_5948.boolean(*var_5949);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_ebs_default_kms_key_id(
    input: &crate::input::ResetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5950 = writer.prefix("DryRun");
    if let Some(var_5951) = &input.dry_run {
        scope_5950.boolean(*var_5951);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_fpga_image_attribute(
    input: &crate::input::ResetFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5952 = writer.prefix("DryRun");
    if let Some(var_5953) = &input.dry_run {
        scope_5952.boolean(*var_5953);
    }
    #[allow(unused_mut)]
    let mut scope_5954 = writer.prefix("FpgaImageId");
    if let Some(var_5955) = &input.fpga_image_id {
        scope_5954.string(var_5955);
    }
    #[allow(unused_mut)]
    let mut scope_5956 = writer.prefix("Attribute");
    if let Some(var_5957) = &input.attribute {
        scope_5956.string(var_5957.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_image_attribute(
    input: &crate::input::ResetImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5958 = writer.prefix("Attribute");
    if let Some(var_5959) = &input.attribute {
        scope_5958.string(var_5959.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5960 = writer.prefix("ImageId");
    if let Some(var_5961) = &input.image_id {
        scope_5960.string(var_5961);
    }
    #[allow(unused_mut)]
    let mut scope_5962 = writer.prefix("DryRun");
    if let Some(var_5963) = &input.dry_run {
        scope_5962.boolean(*var_5963);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_instance_attribute(
    input: &crate::input::ResetInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5964 = writer.prefix("Attribute");
    if let Some(var_5965) = &input.attribute {
        scope_5964.string(var_5965.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5966 = writer.prefix("DryRun");
    if let Some(var_5967) = &input.dry_run {
        scope_5966.boolean(*var_5967);
    }
    #[allow(unused_mut)]
    let mut scope_5968 = writer.prefix("InstanceId");
    if let Some(var_5969) = &input.instance_id {
        scope_5968.string(var_5969);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_network_interface_attribute(
    input: &crate::input::ResetNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ResetNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5970 = writer.prefix("DryRun");
    if let Some(var_5971) = &input.dry_run {
        scope_5970.boolean(*var_5971);
    }
    #[allow(unused_mut)]
    let mut scope_5972 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5973) = &input.network_interface_id {
        scope_5972.string(var_5973);
    }
    #[allow(unused_mut)]
    let mut scope_5974 = writer.prefix("SourceDestCheck");
    if let Some(var_5975) = &input.source_dest_check {
        scope_5974.string(var_5975);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_snapshot_attribute(
    input: &crate::input::ResetSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5976 = writer.prefix("Attribute");
    if let Some(var_5977) = &input.attribute {
        scope_5976.string(var_5977.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5978 = writer.prefix("SnapshotId");
    if let Some(var_5979) = &input.snapshot_id {
        scope_5978.string(var_5979);
    }
    #[allow(unused_mut)]
    let mut scope_5980 = writer.prefix("DryRun");
    if let Some(var_5981) = &input.dry_run {
        scope_5980.boolean(*var_5981);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_address_to_classic(
    input: &crate::input::RestoreAddressToClassicInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5982 = writer.prefix("DryRun");
    if let Some(var_5983) = &input.dry_run {
        scope_5982.boolean(*var_5983);
    }
    #[allow(unused_mut)]
    let mut scope_5984 = writer.prefix("PublicIp");
    if let Some(var_5985) = &input.public_ip {
        scope_5984.string(var_5985);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_image_from_recycle_bin(
    input: &crate::input::RestoreImageFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreImageFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5986 = writer.prefix("ImageId");
    if let Some(var_5987) = &input.image_id {
        scope_5986.string(var_5987);
    }
    #[allow(unused_mut)]
    let mut scope_5988 = writer.prefix("DryRun");
    if let Some(var_5989) = &input.dry_run {
        scope_5988.boolean(*var_5989);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_managed_prefix_list_version(
    input: &crate::input::RestoreManagedPrefixListVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreManagedPrefixListVersion",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5990 = writer.prefix("DryRun");
    if let Some(var_5991) = &input.dry_run {
        scope_5990.boolean(*var_5991);
    }
    #[allow(unused_mut)]
    let mut scope_5992 = writer.prefix("PrefixListId");
    if let Some(var_5993) = &input.prefix_list_id {
        scope_5992.string(var_5993);
    }
    #[allow(unused_mut)]
    let mut scope_5994 = writer.prefix("PreviousVersion");
    if let Some(var_5995) = &input.previous_version {
        scope_5994.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5995).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5996 = writer.prefix("CurrentVersion");
    if let Some(var_5997) = &input.current_version {
        scope_5996.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5997).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_from_recycle_bin(
    input: &crate::input::RestoreSnapshotFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5998 = writer.prefix("SnapshotId");
    if let Some(var_5999) = &input.snapshot_id {
        scope_5998.string(var_5999);
    }
    #[allow(unused_mut)]
    let mut scope_6000 = writer.prefix("DryRun");
    if let Some(var_6001) = &input.dry_run {
        scope_6000.boolean(*var_6001);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_tier(
    input: &crate::input::RestoreSnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6002 = writer.prefix("SnapshotId");
    if let Some(var_6003) = &input.snapshot_id {
        scope_6002.string(var_6003);
    }
    #[allow(unused_mut)]
    let mut scope_6004 = writer.prefix("TemporaryRestoreDays");
    if let Some(var_6005) = &input.temporary_restore_days {
        scope_6004.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6005).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6006 = writer.prefix("PermanentRestore");
    if let Some(var_6007) = &input.permanent_restore {
        scope_6006.boolean(*var_6007);
    }
    #[allow(unused_mut)]
    let mut scope_6008 = writer.prefix("DryRun");
    if let Some(var_6009) = &input.dry_run {
        scope_6008.boolean(*var_6009);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_client_vpn_ingress(
    input: &crate::input::RevokeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6010 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_6011) = &input.client_vpn_endpoint_id {
        scope_6010.string(var_6011);
    }
    #[allow(unused_mut)]
    let mut scope_6012 = writer.prefix("TargetNetworkCidr");
    if let Some(var_6013) = &input.target_network_cidr {
        scope_6012.string(var_6013);
    }
    #[allow(unused_mut)]
    let mut scope_6014 = writer.prefix("AccessGroupId");
    if let Some(var_6015) = &input.access_group_id {
        scope_6014.string(var_6015);
    }
    #[allow(unused_mut)]
    let mut scope_6016 = writer.prefix("RevokeAllGroups");
    if let Some(var_6017) = &input.revoke_all_groups {
        scope_6016.boolean(*var_6017);
    }
    #[allow(unused_mut)]
    let mut scope_6018 = writer.prefix("DryRun");
    if let Some(var_6019) = &input.dry_run {
        scope_6018.boolean(*var_6019);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_egress(
    input: &crate::input::RevokeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6020 = writer.prefix("DryRun");
    if let Some(var_6021) = &input.dry_run {
        scope_6020.boolean(*var_6021);
    }
    #[allow(unused_mut)]
    let mut scope_6022 = writer.prefix("GroupId");
    if let Some(var_6023) = &input.group_id {
        scope_6022.string(var_6023);
    }
    #[allow(unused_mut)]
    let mut scope_6024 = writer.prefix("IpPermissions");
    if let Some(var_6025) = &input.ip_permissions {
        let mut list_6027 = scope_6024.start_list(true, Some("item"));
        for item_6026 in var_6025 {
            #[allow(unused_mut)]
            let mut entry_6028 = list_6027.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6028, item_6026)?;
        }
        list_6027.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6029 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_6030) = &input.security_group_rule_ids {
        let mut list_6032 = scope_6029.start_list(true, Some("item"));
        for item_6031 in var_6030 {
            #[allow(unused_mut)]
            let mut entry_6033 = list_6032.entry();
            entry_6033.string(item_6031);
        }
        list_6032.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6034 = writer.prefix("CidrIp");
    if let Some(var_6035) = &input.cidr_ip {
        scope_6034.string(var_6035);
    }
    #[allow(unused_mut)]
    let mut scope_6036 = writer.prefix("FromPort");
    if let Some(var_6037) = &input.from_port {
        scope_6036.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6037).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6038 = writer.prefix("IpProtocol");
    if let Some(var_6039) = &input.ip_protocol {
        scope_6038.string(var_6039);
    }
    #[allow(unused_mut)]
    let mut scope_6040 = writer.prefix("ToPort");
    if let Some(var_6041) = &input.to_port {
        scope_6040.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6041).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6042 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_6043) = &input.source_security_group_name {
        scope_6042.string(var_6043);
    }
    #[allow(unused_mut)]
    let mut scope_6044 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_6045) = &input.source_security_group_owner_id {
        scope_6044.string(var_6045);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_ingress(
    input: &crate::input::RevokeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6046 = writer.prefix("CidrIp");
    if let Some(var_6047) = &input.cidr_ip {
        scope_6046.string(var_6047);
    }
    #[allow(unused_mut)]
    let mut scope_6048 = writer.prefix("FromPort");
    if let Some(var_6049) = &input.from_port {
        scope_6048.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6049).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6050 = writer.prefix("GroupId");
    if let Some(var_6051) = &input.group_id {
        scope_6050.string(var_6051);
    }
    #[allow(unused_mut)]
    let mut scope_6052 = writer.prefix("GroupName");
    if let Some(var_6053) = &input.group_name {
        scope_6052.string(var_6053);
    }
    #[allow(unused_mut)]
    let mut scope_6054 = writer.prefix("IpPermissions");
    if let Some(var_6055) = &input.ip_permissions {
        let mut list_6057 = scope_6054.start_list(true, Some("item"));
        for item_6056 in var_6055 {
            #[allow(unused_mut)]
            let mut entry_6058 = list_6057.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6058, item_6056)?;
        }
        list_6057.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6059 = writer.prefix("IpProtocol");
    if let Some(var_6060) = &input.ip_protocol {
        scope_6059.string(var_6060);
    }
    #[allow(unused_mut)]
    let mut scope_6061 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_6062) = &input.source_security_group_name {
        scope_6061.string(var_6062);
    }
    #[allow(unused_mut)]
    let mut scope_6063 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_6064) = &input.source_security_group_owner_id {
        scope_6063.string(var_6064);
    }
    #[allow(unused_mut)]
    let mut scope_6065 = writer.prefix("ToPort");
    if let Some(var_6066) = &input.to_port {
        scope_6065.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6066).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6067 = writer.prefix("DryRun");
    if let Some(var_6068) = &input.dry_run {
        scope_6067.boolean(*var_6068);
    }
    #[allow(unused_mut)]
    let mut scope_6069 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_6070) = &input.security_group_rule_ids {
        let mut list_6072 = scope_6069.start_list(true, Some("item"));
        for item_6071 in var_6070 {
            #[allow(unused_mut)]
            let mut entry_6073 = list_6072.entry();
            entry_6073.string(item_6071);
        }
        list_6072.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_instances(
    input: &crate::input::RunInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6074 = writer.prefix("BlockDeviceMapping");
    if let Some(var_6075) = &input.block_device_mappings {
        let mut list_6077 = scope_6074.start_list(true, Some("BlockDeviceMapping"));
        for item_6076 in var_6075 {
            #[allow(unused_mut)]
            let mut entry_6078 = list_6077.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_6078, item_6076,
            )?;
        }
        list_6077.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6079 = writer.prefix("ImageId");
    if let Some(var_6080) = &input.image_id {
        scope_6079.string(var_6080);
    }
    #[allow(unused_mut)]
    let mut scope_6081 = writer.prefix("InstanceType");
    if let Some(var_6082) = &input.instance_type {
        scope_6081.string(var_6082.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_6083 = writer.prefix("Ipv6AddressCount");
    if let Some(var_6084) = &input.ipv6_address_count {
        scope_6083.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6084).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6085 = writer.prefix("Ipv6Address");
    if let Some(var_6086) = &input.ipv6_addresses {
        let mut list_6088 = scope_6085.start_list(true, Some("item"));
        for item_6087 in var_6086 {
            #[allow(unused_mut)]
            let mut entry_6089 = list_6088.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_6089, item_6087,
            )?;
        }
        list_6088.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6090 = writer.prefix("KernelId");
    if let Some(var_6091) = &input.kernel_id {
        scope_6090.string(var_6091);
    }
    #[allow(unused_mut)]
    let mut scope_6092 = writer.prefix("KeyName");
    if let Some(var_6093) = &input.key_name {
        scope_6092.string(var_6093);
    }
    #[allow(unused_mut)]
    let mut scope_6094 = writer.prefix("MaxCount");
    if let Some(var_6095) = &input.max_count {
        scope_6094.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6095).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6096 = writer.prefix("MinCount");
    if let Some(var_6097) = &input.min_count {
        scope_6096.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6097).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6098 = writer.prefix("Monitoring");
    if let Some(var_6099) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_6098, var_6099,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6100 = writer.prefix("Placement");
    if let Some(var_6101) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_6100, var_6101)?;
    }
    #[allow(unused_mut)]
    let mut scope_6102 = writer.prefix("RamdiskId");
    if let Some(var_6103) = &input.ramdisk_id {
        scope_6102.string(var_6103);
    }
    #[allow(unused_mut)]
    let mut scope_6104 = writer.prefix("SecurityGroupId");
    if let Some(var_6105) = &input.security_group_ids {
        let mut list_6107 = scope_6104.start_list(true, Some("SecurityGroupId"));
        for item_6106 in var_6105 {
            #[allow(unused_mut)]
            let mut entry_6108 = list_6107.entry();
            entry_6108.string(item_6106);
        }
        list_6107.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6109 = writer.prefix("SecurityGroup");
    if let Some(var_6110) = &input.security_groups {
        let mut list_6112 = scope_6109.start_list(true, Some("SecurityGroup"));
        for item_6111 in var_6110 {
            #[allow(unused_mut)]
            let mut entry_6113 = list_6112.entry();
            entry_6113.string(item_6111);
        }
        list_6112.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6114 = writer.prefix("SubnetId");
    if let Some(var_6115) = &input.subnet_id {
        scope_6114.string(var_6115);
    }
    #[allow(unused_mut)]
    let mut scope_6116 = writer.prefix("UserData");
    if let Some(var_6117) = &input.user_data {
        scope_6116.string(var_6117);
    }
    #[allow(unused_mut)]
    let mut scope_6118 = writer.prefix("AdditionalInfo");
    if let Some(var_6119) = &input.additional_info {
        scope_6118.string(var_6119);
    }
    #[allow(unused_mut)]
    let mut scope_6120 = writer.prefix("ClientToken");
    if let Some(var_6121) = &input.client_token {
        scope_6120.string(var_6121);
    }
    #[allow(unused_mut)]
    let mut scope_6122 = writer.prefix("DisableApiTermination");
    if let Some(var_6123) = &input.disable_api_termination {
        scope_6122.boolean(*var_6123);
    }
    #[allow(unused_mut)]
    let mut scope_6124 = writer.prefix("DryRun");
    if let Some(var_6125) = &input.dry_run {
        scope_6124.boolean(*var_6125);
    }
    #[allow(unused_mut)]
    let mut scope_6126 = writer.prefix("EbsOptimized");
    if let Some(var_6127) = &input.ebs_optimized {
        scope_6126.boolean(*var_6127);
    }
    #[allow(unused_mut)]
    let mut scope_6128 = writer.prefix("IamInstanceProfile");
    if let Some(var_6129) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_6128, var_6129,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6130 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_6131) = &input.instance_initiated_shutdown_behavior {
        scope_6130.string(var_6131.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_6132 = writer.prefix("NetworkInterface");
    if let Some(var_6133) = &input.network_interfaces {
        let mut list_6135 = scope_6132.start_list(true, Some("item"));
        for item_6134 in var_6133 {
            #[allow(unused_mut)]
            let mut entry_6136 = list_6135.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_6136, item_6134)?;
        }
        list_6135.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6137 = writer.prefix("PrivateIpAddress");
    if let Some(var_6138) = &input.private_ip_address {
        scope_6137.string(var_6138);
    }
    #[allow(unused_mut)]
    let mut scope_6139 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_6140) = &input.elastic_gpu_specification {
        let mut list_6142 = scope_6139.start_list(true, Some("item"));
        for item_6141 in var_6140 {
            #[allow(unused_mut)]
            let mut entry_6143 = list_6142.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_6143, item_6141,
            )?;
        }
        list_6142.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6144 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_6145) = &input.elastic_inference_accelerators {
        let mut list_6147 = scope_6144.start_list(true, Some("item"));
        for item_6146 in var_6145 {
            #[allow(unused_mut)]
            let mut entry_6148 = list_6147.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_inference_accelerator(
                entry_6148, item_6146,
            )?;
        }
        list_6147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6149 = writer.prefix("TagSpecification");
    if let Some(var_6150) = &input.tag_specifications {
        let mut list_6152 = scope_6149.start_list(true, Some("item"));
        for item_6151 in var_6150 {
            #[allow(unused_mut)]
            let mut entry_6153 = list_6152.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6153, item_6151,
            )?;
        }
        list_6152.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6154 = writer.prefix("LaunchTemplate");
    if let Some(var_6155) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_6154, var_6155,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6156 = writer.prefix("InstanceMarketOptions");
    if let Some(var_6157) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_instance_market_options_request(
            scope_6156, var_6157,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6158 = writer.prefix("CreditSpecification");
    if let Some(var_6159) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_6158, var_6159,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6160 = writer.prefix("CpuOptions");
    if let Some(var_6161) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_cpu_options_request(
            scope_6160, var_6161,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6162 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_6163) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_6162, var_6163,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6164 = writer.prefix("HibernationOptions");
    if let Some(var_6165) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_hibernation_options_request(
            scope_6164, var_6165,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6166 = writer.prefix("LicenseSpecification");
    if let Some(var_6167) = &input.license_specifications {
        let mut list_6169 = scope_6166.start_list(true, Some("item"));
        for item_6168 in var_6167 {
            #[allow(unused_mut)]
            let mut entry_6170 = list_6169.entry();
            crate::query_ser::serialize_structure_crate_model_license_configuration_request(
                entry_6170, item_6168,
            )?;
        }
        list_6169.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6171 = writer.prefix("MetadataOptions");
    if let Some(var_6172) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options_request(
            scope_6171, var_6172,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6173 = writer.prefix("EnclaveOptions");
    if let Some(var_6174) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_enclave_options_request(
            scope_6173, var_6174,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6175 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_6176) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_private_dns_name_options_request(
            scope_6175, var_6176,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6177 = writer.prefix("MaintenanceOptions");
    if let Some(var_6178) = &input.maintenance_options {
        crate::query_ser::serialize_structure_crate_model_instance_maintenance_options_request(
            scope_6177, var_6178,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6179 = writer.prefix("DisableApiStop");
    if let Some(var_6180) = &input.disable_api_stop {
        scope_6179.boolean(*var_6180);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_scheduled_instances(
    input: &crate::input::RunScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6181 = writer.prefix("ClientToken");
    if let Some(var_6182) = &input.client_token {
        scope_6181.string(var_6182);
    }
    #[allow(unused_mut)]
    let mut scope_6183 = writer.prefix("DryRun");
    if let Some(var_6184) = &input.dry_run {
        scope_6183.boolean(*var_6184);
    }
    #[allow(unused_mut)]
    let mut scope_6185 = writer.prefix("InstanceCount");
    if let Some(var_6186) = &input.instance_count {
        scope_6185.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6186).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6187 = writer.prefix("LaunchSpecification");
    if let Some(var_6188) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_launch_specification(
            scope_6187, var_6188,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6189 = writer.prefix("ScheduledInstanceId");
    if let Some(var_6190) = &input.scheduled_instance_id {
        scope_6189.string(var_6190);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_local_gateway_routes(
    input: &crate::input::SearchLocalGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6191 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_6192) = &input.local_gateway_route_table_id {
        scope_6191.string(var_6192);
    }
    #[allow(unused_mut)]
    let mut scope_6193 = writer.prefix("Filter");
    if let Some(var_6194) = &input.filters {
        let mut list_6196 = scope_6193.start_list(true, Some("Filter"));
        for item_6195 in var_6194 {
            #[allow(unused_mut)]
            let mut entry_6197 = list_6196.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6197, item_6195)?;
        }
        list_6196.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6198 = writer.prefix("MaxResults");
    if let Some(var_6199) = &input.max_results {
        scope_6198.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6199).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6200 = writer.prefix("NextToken");
    if let Some(var_6201) = &input.next_token {
        scope_6200.string(var_6201);
    }
    #[allow(unused_mut)]
    let mut scope_6202 = writer.prefix("DryRun");
    if let Some(var_6203) = &input.dry_run {
        scope_6202.boolean(*var_6203);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_multicast_groups(
    input: &crate::input::SearchTransitGatewayMulticastGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "SearchTransitGatewayMulticastGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6204 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_6205) = &input.transit_gateway_multicast_domain_id {
        scope_6204.string(var_6205);
    }
    #[allow(unused_mut)]
    let mut scope_6206 = writer.prefix("Filter");
    if let Some(var_6207) = &input.filters {
        let mut list_6209 = scope_6206.start_list(true, Some("Filter"));
        for item_6208 in var_6207 {
            #[allow(unused_mut)]
            let mut entry_6210 = list_6209.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6210, item_6208)?;
        }
        list_6209.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6211 = writer.prefix("MaxResults");
    if let Some(var_6212) = &input.max_results {
        scope_6211.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6212).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6213 = writer.prefix("NextToken");
    if let Some(var_6214) = &input.next_token {
        scope_6213.string(var_6214);
    }
    #[allow(unused_mut)]
    let mut scope_6215 = writer.prefix("DryRun");
    if let Some(var_6216) = &input.dry_run {
        scope_6215.boolean(*var_6216);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_routes(
    input: &crate::input::SearchTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6217 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_6218) = &input.transit_gateway_route_table_id {
        scope_6217.string(var_6218);
    }
    #[allow(unused_mut)]
    let mut scope_6219 = writer.prefix("Filter");
    if let Some(var_6220) = &input.filters {
        let mut list_6222 = scope_6219.start_list(true, Some("Filter"));
        for item_6221 in var_6220 {
            #[allow(unused_mut)]
            let mut entry_6223 = list_6222.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6223, item_6221)?;
        }
        list_6222.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6224 = writer.prefix("MaxResults");
    if let Some(var_6225) = &input.max_results {
        scope_6224.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6225).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6226 = writer.prefix("DryRun");
    if let Some(var_6227) = &input.dry_run {
        scope_6226.boolean(*var_6227);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_send_diagnostic_interrupt(
    input: &crate::input::SendDiagnosticInterruptInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6228 = writer.prefix("InstanceId");
    if let Some(var_6229) = &input.instance_id {
        scope_6228.string(var_6229);
    }
    #[allow(unused_mut)]
    let mut scope_6230 = writer.prefix("DryRun");
    if let Some(var_6231) = &input.dry_run {
        scope_6230.boolean(*var_6231);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instances(
    input: &crate::input::StartInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6232 = writer.prefix("InstanceId");
    if let Some(var_6233) = &input.instance_ids {
        let mut list_6235 = scope_6232.start_list(true, Some("InstanceId"));
        for item_6234 in var_6233 {
            #[allow(unused_mut)]
            let mut entry_6236 = list_6235.entry();
            entry_6236.string(item_6234);
        }
        list_6235.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6237 = writer.prefix("AdditionalInfo");
    if let Some(var_6238) = &input.additional_info {
        scope_6237.string(var_6238);
    }
    #[allow(unused_mut)]
    let mut scope_6239 = writer.prefix("DryRun");
    if let Some(var_6240) = &input.dry_run {
        scope_6239.boolean(*var_6240);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_access_scope_analysis(
    input: &crate::input::StartNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6241 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_6242) = &input.network_insights_access_scope_id {
        scope_6241.string(var_6242);
    }
    #[allow(unused_mut)]
    let mut scope_6243 = writer.prefix("DryRun");
    if let Some(var_6244) = &input.dry_run {
        scope_6243.boolean(*var_6244);
    }
    #[allow(unused_mut)]
    let mut scope_6245 = writer.prefix("TagSpecification");
    if let Some(var_6246) = &input.tag_specifications {
        let mut list_6248 = scope_6245.start_list(true, Some("item"));
        for item_6247 in var_6246 {
            #[allow(unused_mut)]
            let mut entry_6249 = list_6248.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6249, item_6247,
            )?;
        }
        list_6248.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6250 = writer.prefix("ClientToken");
    if let Some(var_6251) = &input.client_token {
        scope_6250.string(var_6251);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_analysis(
    input: &crate::input::StartNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6252 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_6253) = &input.network_insights_path_id {
        scope_6252.string(var_6253);
    }
    #[allow(unused_mut)]
    let mut scope_6254 = writer.prefix("FilterInArn");
    if let Some(var_6255) = &input.filter_in_arns {
        let mut list_6257 = scope_6254.start_list(true, Some("item"));
        for item_6256 in var_6255 {
            #[allow(unused_mut)]
            let mut entry_6258 = list_6257.entry();
            entry_6258.string(item_6256);
        }
        list_6257.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6259 = writer.prefix("DryRun");
    if let Some(var_6260) = &input.dry_run {
        scope_6259.boolean(*var_6260);
    }
    #[allow(unused_mut)]
    let mut scope_6261 = writer.prefix("TagSpecification");
    if let Some(var_6262) = &input.tag_specifications {
        let mut list_6264 = scope_6261.start_list(true, Some("item"));
        for item_6263 in var_6262 {
            #[allow(unused_mut)]
            let mut entry_6265 = list_6264.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6265, item_6263,
            )?;
        }
        list_6264.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6266 = writer.prefix("ClientToken");
    if let Some(var_6267) = &input.client_token {
        scope_6266.string(var_6267);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_vpc_endpoint_service_private_dns_verification(
    input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartVpcEndpointServicePrivateDnsVerification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6268 = writer.prefix("DryRun");
    if let Some(var_6269) = &input.dry_run {
        scope_6268.boolean(*var_6269);
    }
    #[allow(unused_mut)]
    let mut scope_6270 = writer.prefix("ServiceId");
    if let Some(var_6271) = &input.service_id {
        scope_6270.string(var_6271);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_instances(
    input: &crate::input::StopInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6272 = writer.prefix("InstanceId");
    if let Some(var_6273) = &input.instance_ids {
        let mut list_6275 = scope_6272.start_list(true, Some("InstanceId"));
        for item_6274 in var_6273 {
            #[allow(unused_mut)]
            let mut entry_6276 = list_6275.entry();
            entry_6276.string(item_6274);
        }
        list_6275.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6277 = writer.prefix("Hibernate");
    if let Some(var_6278) = &input.hibernate {
        scope_6277.boolean(*var_6278);
    }
    #[allow(unused_mut)]
    let mut scope_6279 = writer.prefix("DryRun");
    if let Some(var_6280) = &input.dry_run {
        scope_6279.boolean(*var_6280);
    }
    #[allow(unused_mut)]
    let mut scope_6281 = writer.prefix("Force");
    if let Some(var_6282) = &input.force {
        scope_6281.boolean(*var_6282);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_client_vpn_connections(
    input: &crate::input::TerminateClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6283 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_6284) = &input.client_vpn_endpoint_id {
        scope_6283.string(var_6284);
    }
    #[allow(unused_mut)]
    let mut scope_6285 = writer.prefix("ConnectionId");
    if let Some(var_6286) = &input.connection_id {
        scope_6285.string(var_6286);
    }
    #[allow(unused_mut)]
    let mut scope_6287 = writer.prefix("Username");
    if let Some(var_6288) = &input.username {
        scope_6287.string(var_6288);
    }
    #[allow(unused_mut)]
    let mut scope_6289 = writer.prefix("DryRun");
    if let Some(var_6290) = &input.dry_run {
        scope_6289.boolean(*var_6290);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instances(
    input: &crate::input::TerminateInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6291 = writer.prefix("InstanceId");
    if let Some(var_6292) = &input.instance_ids {
        let mut list_6294 = scope_6291.start_list(true, Some("InstanceId"));
        for item_6293 in var_6292 {
            #[allow(unused_mut)]
            let mut entry_6295 = list_6294.entry();
            entry_6295.string(item_6293);
        }
        list_6294.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6296 = writer.prefix("DryRun");
    if let Some(var_6297) = &input.dry_run {
        scope_6296.boolean(*var_6297);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_ipv6_addresses(
    input: &crate::input::UnassignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6298 = writer.prefix("Ipv6Addresses");
    if let Some(var_6299) = &input.ipv6_addresses {
        let mut list_6301 = scope_6298.start_list(true, Some("item"));
        for item_6300 in var_6299 {
            #[allow(unused_mut)]
            let mut entry_6302 = list_6301.entry();
            entry_6302.string(item_6300);
        }
        list_6301.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6303 = writer.prefix("Ipv6Prefix");
    if let Some(var_6304) = &input.ipv6_prefixes {
        let mut list_6306 = scope_6303.start_list(true, Some("item"));
        for item_6305 in var_6304 {
            #[allow(unused_mut)]
            let mut entry_6307 = list_6306.entry();
            entry_6307.string(item_6305);
        }
        list_6306.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6308 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6309) = &input.network_interface_id {
        scope_6308.string(var_6309);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_private_ip_addresses(
    input: &crate::input::UnassignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6310 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6311) = &input.network_interface_id {
        scope_6310.string(var_6311);
    }
    #[allow(unused_mut)]
    let mut scope_6312 = writer.prefix("PrivateIpAddress");
    if let Some(var_6313) = &input.private_ip_addresses {
        let mut list_6315 = scope_6312.start_list(true, Some("PrivateIpAddress"));
        for item_6314 in var_6313 {
            #[allow(unused_mut)]
            let mut entry_6316 = list_6315.entry();
            entry_6316.string(item_6314);
        }
        list_6315.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6317 = writer.prefix("Ipv4Prefix");
    if let Some(var_6318) = &input.ipv4_prefixes {
        let mut list_6320 = scope_6317.start_list(true, Some("item"));
        for item_6319 in var_6318 {
            #[allow(unused_mut)]
            let mut entry_6321 = list_6320.entry();
            entry_6321.string(item_6319);
        }
        list_6320.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unmonitor_instances(
    input: &crate::input::UnmonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6322 = writer.prefix("InstanceId");
    if let Some(var_6323) = &input.instance_ids {
        let mut list_6325 = scope_6322.start_list(true, Some("InstanceId"));
        for item_6324 in var_6323 {
            #[allow(unused_mut)]
            let mut entry_6326 = list_6325.entry();
            entry_6326.string(item_6324);
        }
        list_6325.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6327 = writer.prefix("DryRun");
    if let Some(var_6328) = &input.dry_run {
        scope_6327.boolean(*var_6328);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_egress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsEgress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6329 = writer.prefix("DryRun");
    if let Some(var_6330) = &input.dry_run {
        scope_6329.boolean(*var_6330);
    }
    #[allow(unused_mut)]
    let mut scope_6331 = writer.prefix("GroupId");
    if let Some(var_6332) = &input.group_id {
        scope_6331.string(var_6332);
    }
    #[allow(unused_mut)]
    let mut scope_6333 = writer.prefix("GroupName");
    if let Some(var_6334) = &input.group_name {
        scope_6333.string(var_6334);
    }
    #[allow(unused_mut)]
    let mut scope_6335 = writer.prefix("IpPermissions");
    if let Some(var_6336) = &input.ip_permissions {
        let mut list_6338 = scope_6335.start_list(true, Some("item"));
        for item_6337 in var_6336 {
            #[allow(unused_mut)]
            let mut entry_6339 = list_6338.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6339, item_6337)?;
        }
        list_6338.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6340 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6341) = &input.security_group_rule_descriptions {
        let mut list_6343 = scope_6340.start_list(true, Some("item"));
        for item_6342 in var_6341 {
            #[allow(unused_mut)]
            let mut entry_6344 = list_6343.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6344, item_6342,
            )?;
        }
        list_6343.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_ingress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsIngress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6345 = writer.prefix("DryRun");
    if let Some(var_6346) = &input.dry_run {
        scope_6345.boolean(*var_6346);
    }
    #[allow(unused_mut)]
    let mut scope_6347 = writer.prefix("GroupId");
    if let Some(var_6348) = &input.group_id {
        scope_6347.string(var_6348);
    }
    #[allow(unused_mut)]
    let mut scope_6349 = writer.prefix("GroupName");
    if let Some(var_6350) = &input.group_name {
        scope_6349.string(var_6350);
    }
    #[allow(unused_mut)]
    let mut scope_6351 = writer.prefix("IpPermissions");
    if let Some(var_6352) = &input.ip_permissions {
        let mut list_6354 = scope_6351.start_list(true, Some("item"));
        for item_6353 in var_6352 {
            #[allow(unused_mut)]
            let mut entry_6355 = list_6354.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6355, item_6353)?;
        }
        list_6354.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6356 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6357) = &input.security_group_rule_descriptions {
        let mut list_6359 = scope_6356.start_list(true, Some("item"));
        for item_6358 in var_6357 {
            #[allow(unused_mut)]
            let mut entry_6360 = list_6359.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6360, item_6358,
            )?;
        }
        list_6359.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_withdraw_byoip_cidr(
    input: &crate::input::WithdrawByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6361 = writer.prefix("Cidr");
    if let Some(var_6362) = &input.cidr {
        scope_6361.string(var_6362);
    }
    #[allow(unused_mut)]
    let mut scope_6363 = writer.prefix("DryRun");
    if let Some(var_6364) = &input.dry_run {
        scope_6363.boolean(*var_6364);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
