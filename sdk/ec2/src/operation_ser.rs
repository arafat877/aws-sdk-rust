// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_address_transfer(input: &crate::input::AcceptAddressTransferInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AcceptAddressTransfer", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Address");
    if let Some(var_2) = &input.address {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("TagSpecification");
    if let Some(var_4) = &input.tag_specifications {
        let mut list_6 = scope_3.start_list(true, Some("item"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_7, item_5)?;
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("DryRun");
    if let Some(var_9) = &input.dry_run {
        scope_8.boolean(*var_9);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_reserved_instances_exchange_quote(input: &crate::input::AcceptReservedInstancesExchangeQuoteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AcceptReservedInstancesExchangeQuote", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("DryRun");
    if let Some(var_11) = &input.dry_run {
        scope_10.boolean(*var_11);
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("ReservedInstanceId");
    if let Some(var_13) = &input.reserved_instance_ids {
        let mut list_15 = scope_12.start_list(true, Some("ReservedInstanceId"));
        for item_14 in var_13 {
            #[allow(unused_mut)]
            let mut entry_16 = list_15.entry();
            entry_16.string(item_14);
        }
        list_15.finish();
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("TargetConfiguration");
    if let Some(var_18) = &input.target_configurations {
        let mut list_20 = scope_17.start_list(true, Some("TargetConfigurationRequest"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(entry_21, item_19)?;
        }
        list_20.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_multicast_domain_associations(input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AcceptTransitGatewayMulticastDomainAssociations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_23) = &input.transit_gateway_multicast_domain_id {
        scope_22.string(var_23);
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("SubnetIds");
    if let Some(var_27) = &input.subnet_ids {
        let mut list_29 = scope_26.start_list(true, Some("item"));
        for item_28 in var_27 {
            #[allow(unused_mut)]
            let mut entry_30 = list_29.entry();
            entry_30.string(item_28);
        }
        list_29.finish();
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("DryRun");
    if let Some(var_32) = &input.dry_run {
        scope_31.boolean(*var_32);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_peering_attachment(input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AcceptTransitGatewayPeeringAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_34) = &input.transit_gateway_attachment_id {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("DryRun");
    if let Some(var_36) = &input.dry_run {
        scope_35.boolean(*var_36);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_vpc_attachment(input: &crate::input::AcceptTransitGatewayVpcAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AcceptTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_38) = &input.transit_gateway_attachment_id {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("DryRun");
    if let Some(var_40) = &input.dry_run {
        scope_39.boolean(*var_40);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_endpoint_connections(input: &crate::input::AcceptVpcEndpointConnectionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("ServiceId");
    if let Some(var_44) = &input.service_id {
        scope_43.string(var_44);
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("VpcEndpointId");
    if let Some(var_46) = &input.vpc_endpoint_ids {
        let mut list_48 = scope_45.start_list(true, Some("item"));
        for item_47 in var_46 {
            #[allow(unused_mut)]
            let mut entry_49 = list_48.entry();
            entry_49.string(item_47);
        }
        list_48.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_peering_connection(input: &crate::input::AcceptVpcPeeringConnectionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("DryRun");
    if let Some(var_51) = &input.dry_run {
        scope_50.boolean(*var_51);
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_53) = &input.vpc_peering_connection_id {
        scope_52.string(var_53);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_advertise_byoip_cidr(input: &crate::input::AdvertiseByoipCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("Cidr");
    if let Some(var_55) = &input.cidr {
        scope_54.string(var_55);
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("DryRun");
    if let Some(var_57) = &input.dry_run {
        scope_56.boolean(*var_57);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_address(input: &crate::input::AllocateAddressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("Domain");
    if let Some(var_59) = &input.domain {
        scope_58.string(var_59.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("Address");
    if let Some(var_61) = &input.address {
        scope_60.string(var_61);
    }
    #[allow(unused_mut)]
    let mut scope_62 = writer.prefix("PublicIpv4Pool");
    if let Some(var_63) = &input.public_ipv4_pool {
        scope_62.string(var_63);
    }
    #[allow(unused_mut)]
    let mut scope_64 = writer.prefix("NetworkBorderGroup");
    if let Some(var_65) = &input.network_border_group {
        scope_64.string(var_65);
    }
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_67) = &input.customer_owned_ipv4_pool {
        scope_66.string(var_67);
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("DryRun");
    if let Some(var_69) = &input.dry_run {
        scope_68.boolean(*var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("TagSpecification");
    if let Some(var_71) = &input.tag_specifications {
        let mut list_73 = scope_70.start_list(true, Some("item"));
        for item_72 in var_71 {
            #[allow(unused_mut)]
            let mut entry_74 = list_73.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_74, item_72)?;
        }
        list_73.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_hosts(input: &crate::input::AllocateHostsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("AutoPlacement");
    if let Some(var_76) = &input.auto_placement {
        scope_75.string(var_76.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("AvailabilityZone");
    if let Some(var_78) = &input.availability_zone {
        scope_77.string(var_78);
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("ClientToken");
    if let Some(var_80) = &input.client_token {
        scope_79.string(var_80);
    }
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("InstanceType");
    if let Some(var_82) = &input.instance_type {
        scope_81.string(var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("InstanceFamily");
    if let Some(var_84) = &input.instance_family {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("Quantity");
    if let Some(var_86) = &input.quantity {
        scope_85.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_86).into()));
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("TagSpecification");
    if let Some(var_88) = &input.tag_specifications {
        let mut list_90 = scope_87.start_list(true, Some("item"));
        for item_89 in var_88 {
            #[allow(unused_mut)]
            let mut entry_91 = list_90.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_91, item_89)?;
        }
        list_90.finish();
    }
    #[allow(unused_mut)]
    let mut scope_92 = writer.prefix("HostRecovery");
    if let Some(var_93) = &input.host_recovery {
        scope_92.string(var_93.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("OutpostArn");
    if let Some(var_95) = &input.outpost_arn {
        scope_94.string(var_95);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_ipam_pool_cidr(input: &crate::input::AllocateIpamPoolCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_96 = writer.prefix("DryRun");
    if let Some(var_97) = &input.dry_run {
        scope_96.boolean(*var_97);
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("IpamPoolId");
    if let Some(var_99) = &input.ipam_pool_id {
        scope_98.string(var_99);
    }
    #[allow(unused_mut)]
    let mut scope_100 = writer.prefix("Cidr");
    if let Some(var_101) = &input.cidr {
        scope_100.string(var_101);
    }
    #[allow(unused_mut)]
    let mut scope_102 = writer.prefix("NetmaskLength");
    if let Some(var_103) = &input.netmask_length {
        scope_102.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_103).into()));
    }
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("ClientToken");
    if let Some(var_105) = &input.client_token {
        scope_104.string(var_105);
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("Description");
    if let Some(var_107) = &input.description {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("PreviewNextCidr");
    if let Some(var_109) = &input.preview_next_cidr {
        scope_108.boolean(*var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("DisallowedCidr");
    if let Some(var_111) = &input.disallowed_cidrs {
        let mut list_113 = scope_110.start_list(true, Some("item"));
        for item_112 in var_111 {
            #[allow(unused_mut)]
            let mut entry_114 = list_113.entry();
            entry_114.string(item_112);
        }
        list_113.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_security_groups_to_client_vpn_target_network(input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ApplySecurityGroupsToClientVpnTargetNetwork", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_116) = &input.client_vpn_endpoint_id {
        scope_115.string(var_116);
    }
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("VpcId");
    if let Some(var_118) = &input.vpc_id {
        scope_117.string(var_118);
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("SecurityGroupId");
    if let Some(var_120) = &input.security_group_ids {
        let mut list_122 = scope_119.start_list(true, Some("item"));
        for item_121 in var_120 {
            #[allow(unused_mut)]
            let mut entry_123 = list_122.entry();
            entry_123.string(item_121);
        }
        list_122.finish();
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("DryRun");
    if let Some(var_125) = &input.dry_run {
        scope_124.boolean(*var_125);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_ipv6_addresses(input: &crate::input::AssignIpv6AddressesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("Ipv6AddressCount");
    if let Some(var_127) = &input.ipv6_address_count {
        scope_126.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_127).into()));
    }
    #[allow(unused_mut)]
    let mut scope_128 = writer.prefix("Ipv6Addresses");
    if let Some(var_129) = &input.ipv6_addresses {
        let mut list_131 = scope_128.start_list(true, Some("item"));
        for item_130 in var_129 {
            #[allow(unused_mut)]
            let mut entry_132 = list_131.entry();
            entry_132.string(item_130);
        }
        list_131.finish();
    }
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_134) = &input.ipv6_prefix_count {
        scope_133.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_134).into()));
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("Ipv6Prefix");
    if let Some(var_136) = &input.ipv6_prefixes {
        let mut list_138 = scope_135.start_list(true, Some("item"));
        for item_137 in var_136 {
            #[allow(unused_mut)]
            let mut entry_139 = list_138.entry();
            entry_139.string(item_137);
        }
        list_138.finish();
    }
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("NetworkInterfaceId");
    if let Some(var_141) = &input.network_interface_id {
        scope_140.string(var_141);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_private_ip_addresses(input: &crate::input::AssignPrivateIpAddressesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("AllowReassignment");
    if let Some(var_143) = &input.allow_reassignment {
        scope_142.boolean(*var_143);
    }
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("NetworkInterfaceId");
    if let Some(var_145) = &input.network_interface_id {
        scope_144.string(var_145);
    }
    #[allow(unused_mut)]
    let mut scope_146 = writer.prefix("PrivateIpAddress");
    if let Some(var_147) = &input.private_ip_addresses {
        let mut list_149 = scope_146.start_list(true, Some("PrivateIpAddress"));
        for item_148 in var_147 {
            #[allow(unused_mut)]
            let mut entry_150 = list_149.entry();
            entry_150.string(item_148);
        }
        list_149.finish();
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_152) = &input.secondary_private_ip_address_count {
        scope_151.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_152).into()));
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("Ipv4Prefix");
    if let Some(var_154) = &input.ipv4_prefixes {
        let mut list_156 = scope_153.start_list(true, Some("item"));
        for item_155 in var_154 {
            #[allow(unused_mut)]
            let mut entry_157 = list_156.entry();
            entry_157.string(item_155);
        }
        list_156.finish();
    }
    #[allow(unused_mut)]
    let mut scope_158 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_159) = &input.ipv4_prefix_count {
        scope_158.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_159).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_address(input: &crate::input::AssociateAddressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_160 = writer.prefix("AllocationId");
    if let Some(var_161) = &input.allocation_id {
        scope_160.string(var_161);
    }
    #[allow(unused_mut)]
    let mut scope_162 = writer.prefix("InstanceId");
    if let Some(var_163) = &input.instance_id {
        scope_162.string(var_163);
    }
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("PublicIp");
    if let Some(var_165) = &input.public_ip {
        scope_164.string(var_165);
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("AllowReassociation");
    if let Some(var_167) = &input.allow_reassociation {
        scope_166.boolean(*var_167);
    }
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("DryRun");
    if let Some(var_169) = &input.dry_run {
        scope_168.boolean(*var_169);
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("NetworkInterfaceId");
    if let Some(var_171) = &input.network_interface_id {
        scope_170.string(var_171);
    }
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("PrivateIpAddress");
    if let Some(var_173) = &input.private_ip_address {
        scope_172.string(var_173);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_client_vpn_target_network(input: &crate::input::AssociateClientVpnTargetNetworkInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateClientVpnTargetNetwork", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_174 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_175) = &input.client_vpn_endpoint_id {
        scope_174.string(var_175);
    }
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("SubnetId");
    if let Some(var_177) = &input.subnet_id {
        scope_176.string(var_177);
    }
    #[allow(unused_mut)]
    let mut scope_178 = writer.prefix("ClientToken");
    if let Some(var_179) = &input.client_token {
        scope_178.string(var_179);
    }
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("DryRun");
    if let Some(var_181) = &input.dry_run {
        scope_180.boolean(*var_181);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_dhcp_options(input: &crate::input::AssociateDhcpOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("DhcpOptionsId");
    if let Some(var_183) = &input.dhcp_options_id {
        scope_182.string(var_183);
    }
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("VpcId");
    if let Some(var_185) = &input.vpc_id {
        scope_184.string(var_185);
    }
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("DryRun");
    if let Some(var_187) = &input.dry_run {
        scope_186.boolean(*var_187);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_enclave_certificate_iam_role(input: &crate::input::AssociateEnclaveCertificateIamRoleInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateEnclaveCertificateIamRole", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("CertificateArn");
    if let Some(var_189) = &input.certificate_arn {
        scope_188.string(var_189);
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("RoleArn");
    if let Some(var_191) = &input.role_arn {
        scope_190.string(var_191);
    }
    #[allow(unused_mut)]
    let mut scope_192 = writer.prefix("DryRun");
    if let Some(var_193) = &input.dry_run {
        scope_192.boolean(*var_193);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_iam_instance_profile(input: &crate::input::AssociateIamInstanceProfileInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_194 = writer.prefix("IamInstanceProfile");
    if let Some(var_195) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(scope_194, var_195)?;
    }
    #[allow(unused_mut)]
    let mut scope_196 = writer.prefix("InstanceId");
    if let Some(var_197) = &input.instance_id {
        scope_196.string(var_197);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_instance_event_window(input: &crate::input::AssociateInstanceEventWindowInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("DryRun");
    if let Some(var_199) = &input.dry_run {
        scope_198.boolean(*var_199);
    }
    #[allow(unused_mut)]
    let mut scope_200 = writer.prefix("InstanceEventWindowId");
    if let Some(var_201) = &input.instance_event_window_id {
        scope_200.string(var_201);
    }
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("AssociationTarget");
    if let Some(var_203) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_association_request(scope_202, var_203)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_route_table(input: &crate::input::AssociateRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("DryRun");
    if let Some(var_205) = &input.dry_run {
        scope_204.boolean(*var_205);
    }
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("RouteTableId");
    if let Some(var_207) = &input.route_table_id {
        scope_206.string(var_207);
    }
    #[allow(unused_mut)]
    let mut scope_208 = writer.prefix("SubnetId");
    if let Some(var_209) = &input.subnet_id {
        scope_208.string(var_209);
    }
    #[allow(unused_mut)]
    let mut scope_210 = writer.prefix("GatewayId");
    if let Some(var_211) = &input.gateway_id {
        scope_210.string(var_211);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_subnet_cidr_block(input: &crate::input::AssociateSubnetCidrBlockInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_212 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_213) = &input.ipv6_cidr_block {
        scope_212.string(var_213);
    }
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("SubnetId");
    if let Some(var_215) = &input.subnet_id {
        scope_214.string(var_215);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_multicast_domain(input: &crate::input::AssociateTransitGatewayMulticastDomainInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateTransitGatewayMulticastDomain", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_217) = &input.transit_gateway_multicast_domain_id {
        scope_216.string(var_217);
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_219) = &input.transit_gateway_attachment_id {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("SubnetIds");
    if let Some(var_221) = &input.subnet_ids {
        let mut list_223 = scope_220.start_list(true, Some("item"));
        for item_222 in var_221 {
            #[allow(unused_mut)]
            let mut entry_224 = list_223.entry();
            entry_224.string(item_222);
        }
        list_223.finish();
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("DryRun");
    if let Some(var_226) = &input.dry_run {
        scope_225.boolean(*var_226);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_policy_table(input: &crate::input::AssociateTransitGatewayPolicyTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateTransitGatewayPolicyTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_228) = &input.transit_gateway_policy_table_id {
        scope_227.string(var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_230) = &input.transit_gateway_attachment_id {
        scope_229.string(var_230);
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("DryRun");
    if let Some(var_232) = &input.dry_run {
        scope_231.boolean(*var_232);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_route_table(input: &crate::input::AssociateTransitGatewayRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_233 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_234) = &input.transit_gateway_route_table_id {
        scope_233.string(var_234);
    }
    #[allow(unused_mut)]
    let mut scope_235 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_236) = &input.transit_gateway_attachment_id {
        scope_235.string(var_236);
    }
    #[allow(unused_mut)]
    let mut scope_237 = writer.prefix("DryRun");
    if let Some(var_238) = &input.dry_run {
        scope_237.boolean(*var_238);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_trunk_interface(input: &crate::input::AssociateTrunkInterfaceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_239 = writer.prefix("BranchInterfaceId");
    if let Some(var_240) = &input.branch_interface_id {
        scope_239.string(var_240);
    }
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("TrunkInterfaceId");
    if let Some(var_242) = &input.trunk_interface_id {
        scope_241.string(var_242);
    }
    #[allow(unused_mut)]
    let mut scope_243 = writer.prefix("VlanId");
    if let Some(var_244) = &input.vlan_id {
        scope_243.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_244).into()));
    }
    #[allow(unused_mut)]
    let mut scope_245 = writer.prefix("GreKey");
    if let Some(var_246) = &input.gre_key {
        scope_245.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_246).into()));
    }
    #[allow(unused_mut)]
    let mut scope_247 = writer.prefix("ClientToken");
    if let Some(var_248) = &input.client_token {
        scope_247.string(var_248);
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("DryRun");
    if let Some(var_250) = &input.dry_run {
        scope_249.boolean(*var_250);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_vpc_cidr_block(input: &crate::input::AssociateVpcCidrBlockInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_251 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_252) = &input.amazon_provided_ipv6_cidr_block {
        scope_251.boolean(*var_252);
    }
    #[allow(unused_mut)]
    let mut scope_253 = writer.prefix("CidrBlock");
    if let Some(var_254) = &input.cidr_block {
        scope_253.string(var_254);
    }
    #[allow(unused_mut)]
    let mut scope_255 = writer.prefix("VpcId");
    if let Some(var_256) = &input.vpc_id {
        scope_255.string(var_256);
    }
    #[allow(unused_mut)]
    let mut scope_257 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_258) = &input.ipv6_cidr_block_network_border_group {
        scope_257.string(var_258);
    }
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("Ipv6Pool");
    if let Some(var_260) = &input.ipv6_pool {
        scope_259.string(var_260);
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_262) = &input.ipv6_cidr_block {
        scope_261.string(var_262);
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_264) = &input.ipv4_ipam_pool_id {
        scope_263.string(var_264);
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_266) = &input.ipv4_netmask_length {
        scope_265.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_266).into()));
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_268) = &input.ipv6_ipam_pool_id {
        scope_267.string(var_268);
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_270) = &input.ipv6_netmask_length {
        scope_269.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_270).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_classic_link_vpc(input: &crate::input::AttachClassicLinkVpcInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("DryRun");
    if let Some(var_272) = &input.dry_run {
        scope_271.boolean(*var_272);
    }
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("SecurityGroupId");
    if let Some(var_274) = &input.groups {
        let mut list_276 = scope_273.start_list(true, Some("groupId"));
        for item_275 in var_274 {
            #[allow(unused_mut)]
            let mut entry_277 = list_276.entry();
            entry_277.string(item_275);
        }
        list_276.finish();
    }
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("InstanceId");
    if let Some(var_279) = &input.instance_id {
        scope_278.string(var_279);
    }
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("VpcId");
    if let Some(var_281) = &input.vpc_id {
        scope_280.string(var_281);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_internet_gateway(input: &crate::input::AttachInternetGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("DryRun");
    if let Some(var_283) = &input.dry_run {
        scope_282.boolean(*var_283);
    }
    #[allow(unused_mut)]
    let mut scope_284 = writer.prefix("InternetGatewayId");
    if let Some(var_285) = &input.internet_gateway_id {
        scope_284.string(var_285);
    }
    #[allow(unused_mut)]
    let mut scope_286 = writer.prefix("VpcId");
    if let Some(var_287) = &input.vpc_id {
        scope_286.string(var_287);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_network_interface(input: &crate::input::AttachNetworkInterfaceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_288 = writer.prefix("DeviceIndex");
    if let Some(var_289) = &input.device_index {
        scope_288.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_289).into()));
    }
    #[allow(unused_mut)]
    let mut scope_290 = writer.prefix("DryRun");
    if let Some(var_291) = &input.dry_run {
        scope_290.boolean(*var_291);
    }
    #[allow(unused_mut)]
    let mut scope_292 = writer.prefix("InstanceId");
    if let Some(var_293) = &input.instance_id {
        scope_292.string(var_293);
    }
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("NetworkInterfaceId");
    if let Some(var_295) = &input.network_interface_id {
        scope_294.string(var_295);
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("NetworkCardIndex");
    if let Some(var_297) = &input.network_card_index {
        scope_296.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_297).into()));
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("EnaSrdSpecification");
    if let Some(var_299) = &input.ena_srd_specification {
        crate::query_ser::serialize_structure_crate_model_ena_srd_specification(scope_298, var_299)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_verified_access_trust_provider(input: &crate::input::AttachVerifiedAccessTrustProviderInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVerifiedAccessTrustProvider", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("VerifiedAccessInstanceId");
    if let Some(var_301) = &input.verified_access_instance_id {
        scope_300.string(var_301);
    }
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("VerifiedAccessTrustProviderId");
    if let Some(var_303) = &input.verified_access_trust_provider_id {
        scope_302.string(var_303);
    }
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("ClientToken");
    if let Some(var_305) = &input.client_token {
        scope_304.string(var_305);
    }
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("DryRun");
    if let Some(var_307) = &input.dry_run {
        scope_306.boolean(*var_307);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_volume(input: &crate::input::AttachVolumeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("Device");
    if let Some(var_309) = &input.device {
        scope_308.string(var_309);
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("InstanceId");
    if let Some(var_311) = &input.instance_id {
        scope_310.string(var_311);
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("VolumeId");
    if let Some(var_313) = &input.volume_id {
        scope_312.string(var_313);
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("DryRun");
    if let Some(var_315) = &input.dry_run {
        scope_314.boolean(*var_315);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_vpn_gateway(input: &crate::input::AttachVpnGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("VpcId");
    if let Some(var_317) = &input.vpc_id {
        scope_316.string(var_317);
    }
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("VpnGatewayId");
    if let Some(var_319) = &input.vpn_gateway_id {
        scope_318.string(var_319);
    }
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("DryRun");
    if let Some(var_321) = &input.dry_run {
        scope_320.boolean(*var_321);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_client_vpn_ingress(input: &crate::input::AuthorizeClientVpnIngressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_323) = &input.client_vpn_endpoint_id {
        scope_322.string(var_323);
    }
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("TargetNetworkCidr");
    if let Some(var_325) = &input.target_network_cidr {
        scope_324.string(var_325);
    }
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("AccessGroupId");
    if let Some(var_327) = &input.access_group_id {
        scope_326.string(var_327);
    }
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_329) = &input.authorize_all_groups {
        scope_328.boolean(*var_329);
    }
    #[allow(unused_mut)]
    let mut scope_330 = writer.prefix("Description");
    if let Some(var_331) = &input.description {
        scope_330.string(var_331);
    }
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("ClientToken");
    if let Some(var_333) = &input.client_token {
        scope_332.string(var_333);
    }
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("DryRun");
    if let Some(var_335) = &input.dry_run {
        scope_334.boolean(*var_335);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_egress(input: &crate::input::AuthorizeSecurityGroupEgressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("DryRun");
    if let Some(var_337) = &input.dry_run {
        scope_336.boolean(*var_337);
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("GroupId");
    if let Some(var_339) = &input.group_id {
        scope_338.string(var_339);
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("IpPermissions");
    if let Some(var_341) = &input.ip_permissions {
        let mut list_343 = scope_340.start_list(true, Some("item"));
        for item_342 in var_341 {
            #[allow(unused_mut)]
            let mut entry_344 = list_343.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_344, item_342)?;
        }
        list_343.finish();
    }
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("TagSpecification");
    if let Some(var_346) = &input.tag_specifications {
        let mut list_348 = scope_345.start_list(true, Some("item"));
        for item_347 in var_346 {
            #[allow(unused_mut)]
            let mut entry_349 = list_348.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_349, item_347)?;
        }
        list_348.finish();
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("CidrIp");
    if let Some(var_351) = &input.cidr_ip {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("FromPort");
    if let Some(var_353) = &input.from_port {
        scope_352.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_353).into()));
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("IpProtocol");
    if let Some(var_355) = &input.ip_protocol {
        scope_354.string(var_355);
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("ToPort");
    if let Some(var_357) = &input.to_port {
        scope_356.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_357).into()));
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_359) = &input.source_security_group_name {
        scope_358.string(var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_361) = &input.source_security_group_owner_id {
        scope_360.string(var_361);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_ingress(input: &crate::input::AuthorizeSecurityGroupIngressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_362 = writer.prefix("CidrIp");
    if let Some(var_363) = &input.cidr_ip {
        scope_362.string(var_363);
    }
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("FromPort");
    if let Some(var_365) = &input.from_port {
        scope_364.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_365).into()));
    }
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("GroupId");
    if let Some(var_367) = &input.group_id {
        scope_366.string(var_367);
    }
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("GroupName");
    if let Some(var_369) = &input.group_name {
        scope_368.string(var_369);
    }
    #[allow(unused_mut)]
    let mut scope_370 = writer.prefix("IpPermissions");
    if let Some(var_371) = &input.ip_permissions {
        let mut list_373 = scope_370.start_list(true, Some("item"));
        for item_372 in var_371 {
            #[allow(unused_mut)]
            let mut entry_374 = list_373.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_374, item_372)?;
        }
        list_373.finish();
    }
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("IpProtocol");
    if let Some(var_376) = &input.ip_protocol {
        scope_375.string(var_376);
    }
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_378) = &input.source_security_group_name {
        scope_377.string(var_378);
    }
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_380) = &input.source_security_group_owner_id {
        scope_379.string(var_380);
    }
    #[allow(unused_mut)]
    let mut scope_381 = writer.prefix("ToPort");
    if let Some(var_382) = &input.to_port {
        scope_381.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_382).into()));
    }
    #[allow(unused_mut)]
    let mut scope_383 = writer.prefix("DryRun");
    if let Some(var_384) = &input.dry_run {
        scope_383.boolean(*var_384);
    }
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("TagSpecification");
    if let Some(var_386) = &input.tag_specifications {
        let mut list_388 = scope_385.start_list(true, Some("item"));
        for item_387 in var_386 {
            #[allow(unused_mut)]
            let mut entry_389 = list_388.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_389, item_387)?;
        }
        list_388.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_bundle_instance(input: &crate::input::BundleInstanceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("InstanceId");
    if let Some(var_391) = &input.instance_id {
        scope_390.string(var_391);
    }
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("Storage");
    if let Some(var_393) = &input.storage {
        crate::query_ser::serialize_structure_crate_model_storage(scope_392, var_393)?;
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("DryRun");
    if let Some(var_395) = &input.dry_run {
        scope_394.boolean(*var_395);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_bundle_task(input: &crate::input::CancelBundleTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("BundleId");
    if let Some(var_397) = &input.bundle_id {
        scope_396.string(var_397);
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("DryRun");
    if let Some(var_399) = &input.dry_run {
        scope_398.boolean(*var_399);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation(input: &crate::input::CancelCapacityReservationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("CapacityReservationId");
    if let Some(var_401) = &input.capacity_reservation_id {
        scope_400.string(var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("DryRun");
    if let Some(var_403) = &input.dry_run {
        scope_402.boolean(*var_403);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation_fleets(input: &crate::input::CancelCapacityReservationFleetsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservationFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("DryRun");
    if let Some(var_405) = &input.dry_run {
        scope_404.boolean(*var_405);
    }
    #[allow(unused_mut)]
    let mut scope_406 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_407) = &input.capacity_reservation_fleet_ids {
        let mut list_409 = scope_406.start_list(true, Some("item"));
        for item_408 in var_407 {
            #[allow(unused_mut)]
            let mut entry_410 = list_409.entry();
            entry_410.string(item_408);
        }
        list_409.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_conversion_task(input: &crate::input::CancelConversionTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("ConversionTaskId");
    if let Some(var_412) = &input.conversion_task_id {
        scope_411.string(var_412);
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("DryRun");
    if let Some(var_414) = &input.dry_run {
        scope_413.boolean(*var_414);
    }
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("ReasonMessage");
    if let Some(var_416) = &input.reason_message {
        scope_415.string(var_416);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(input: &crate::input::CancelExportTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("ExportTaskId");
    if let Some(var_418) = &input.export_task_id {
        scope_417.string(var_418);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_image_launch_permission(input: &crate::input::CancelImageLaunchPermissionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelImageLaunchPermission", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("ImageId");
    if let Some(var_420) = &input.image_id {
        scope_419.string(var_420);
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("DryRun");
    if let Some(var_422) = &input.dry_run {
        scope_421.boolean(*var_422);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_import_task(input: &crate::input::CancelImportTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("CancelReason");
    if let Some(var_424) = &input.cancel_reason {
        scope_423.string(var_424);
    }
    #[allow(unused_mut)]
    let mut scope_425 = writer.prefix("DryRun");
    if let Some(var_426) = &input.dry_run {
        scope_425.boolean(*var_426);
    }
    #[allow(unused_mut)]
    let mut scope_427 = writer.prefix("ImportTaskId");
    if let Some(var_428) = &input.import_task_id {
        scope_427.string(var_428);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_reserved_instances_listing(input: &crate::input::CancelReservedInstancesListingInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelReservedInstancesListing", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_429 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_430) = &input.reserved_instances_listing_id {
        scope_429.string(var_430);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_fleet_requests(input: &crate::input::CancelSpotFleetRequestsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_431 = writer.prefix("DryRun");
    if let Some(var_432) = &input.dry_run {
        scope_431.boolean(*var_432);
    }
    #[allow(unused_mut)]
    let mut scope_433 = writer.prefix("SpotFleetRequestId");
    if let Some(var_434) = &input.spot_fleet_request_ids {
        let mut list_436 = scope_433.start_list(true, Some("item"));
        for item_435 in var_434 {
            #[allow(unused_mut)]
            let mut entry_437 = list_436.entry();
            entry_437.string(item_435);
        }
        list_436.finish();
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("TerminateInstances");
    if let Some(var_439) = &input.terminate_instances {
        scope_438.boolean(*var_439);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_instance_requests(input: &crate::input::CancelSpotInstanceRequestsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("DryRun");
    if let Some(var_441) = &input.dry_run {
        scope_440.boolean(*var_441);
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_443) = &input.spot_instance_request_ids {
        let mut list_445 = scope_442.start_list(true, Some("SpotInstanceRequestId"));
        for item_444 in var_443 {
            #[allow(unused_mut)]
            let mut entry_446 = list_445.entry();
            entry_446.string(item_444);
        }
        list_445.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_confirm_product_instance(input: &crate::input::ConfirmProductInstanceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_447 = writer.prefix("InstanceId");
    if let Some(var_448) = &input.instance_id {
        scope_447.string(var_448);
    }
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("ProductCode");
    if let Some(var_450) = &input.product_code {
        scope_449.string(var_450);
    }
    #[allow(unused_mut)]
    let mut scope_451 = writer.prefix("DryRun");
    if let Some(var_452) = &input.dry_run {
        scope_451.boolean(*var_452);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_fpga_image(input: &crate::input::CopyFpgaImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_453 = writer.prefix("DryRun");
    if let Some(var_454) = &input.dry_run {
        scope_453.boolean(*var_454);
    }
    #[allow(unused_mut)]
    let mut scope_455 = writer.prefix("SourceFpgaImageId");
    if let Some(var_456) = &input.source_fpga_image_id {
        scope_455.string(var_456);
    }
    #[allow(unused_mut)]
    let mut scope_457 = writer.prefix("Description");
    if let Some(var_458) = &input.description {
        scope_457.string(var_458);
    }
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("Name");
    if let Some(var_460) = &input.name {
        scope_459.string(var_460);
    }
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("SourceRegion");
    if let Some(var_462) = &input.source_region {
        scope_461.string(var_462);
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("ClientToken");
    if let Some(var_464) = &input.client_token {
        scope_463.string(var_464);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_image(input: &crate::input::CopyImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("ClientToken");
    if let Some(var_466) = &input.client_token {
        scope_465.string(var_466);
    }
    #[allow(unused_mut)]
    let mut scope_467 = writer.prefix("Description");
    if let Some(var_468) = &input.description {
        scope_467.string(var_468);
    }
    #[allow(unused_mut)]
    let mut scope_469 = writer.prefix("Encrypted");
    if let Some(var_470) = &input.encrypted {
        scope_469.boolean(*var_470);
    }
    #[allow(unused_mut)]
    let mut scope_471 = writer.prefix("KmsKeyId");
    if let Some(var_472) = &input.kms_key_id {
        scope_471.string(var_472);
    }
    #[allow(unused_mut)]
    let mut scope_473 = writer.prefix("Name");
    if let Some(var_474) = &input.name {
        scope_473.string(var_474);
    }
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("SourceImageId");
    if let Some(var_476) = &input.source_image_id {
        scope_475.string(var_476);
    }
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("SourceRegion");
    if let Some(var_478) = &input.source_region {
        scope_477.string(var_478);
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("DestinationOutpostArn");
    if let Some(var_480) = &input.destination_outpost_arn {
        scope_479.string(var_480);
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("DryRun");
    if let Some(var_482) = &input.dry_run {
        scope_481.boolean(*var_482);
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("CopyImageTags");
    if let Some(var_484) = &input.copy_image_tags {
        scope_483.boolean(*var_484);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(input: &crate::input::CopySnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("Description");
    if let Some(var_486) = &input.description {
        scope_485.string(var_486);
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("DestinationOutpostArn");
    if let Some(var_488) = &input.destination_outpost_arn {
        scope_487.string(var_488);
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("DestinationRegion");
    if let Some(var_490) = &input.destination_region {
        scope_489.string(var_490);
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("Encrypted");
    if let Some(var_492) = &input.encrypted {
        scope_491.boolean(*var_492);
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("KmsKeyId");
    if let Some(var_494) = &input.kms_key_id {
        scope_493.string(var_494);
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("PresignedUrl");
    if let Some(var_496) = &input.presigned_url {
        scope_495.string(var_496);
    }
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("SourceRegion");
    if let Some(var_498) = &input.source_region {
        scope_497.string(var_498);
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("SourceSnapshotId");
    if let Some(var_500) = &input.source_snapshot_id {
        scope_499.string(var_500);
    }
    #[allow(unused_mut)]
    let mut scope_501 = writer.prefix("TagSpecification");
    if let Some(var_502) = &input.tag_specifications {
        let mut list_504 = scope_501.start_list(true, Some("item"));
        for item_503 in var_502 {
            #[allow(unused_mut)]
            let mut entry_505 = list_504.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_505, item_503)?;
        }
        list_504.finish();
    }
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("DryRun");
    if let Some(var_507) = &input.dry_run {
        scope_506.boolean(*var_507);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation(input: &crate::input::CreateCapacityReservationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("ClientToken");
    if let Some(var_509) = &input.client_token {
        scope_508.string(var_509);
    }
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("InstanceType");
    if let Some(var_511) = &input.instance_type {
        scope_510.string(var_511);
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("InstancePlatform");
    if let Some(var_513) = &input.instance_platform {
        scope_512.string(var_513.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("AvailabilityZone");
    if let Some(var_515) = &input.availability_zone {
        scope_514.string(var_515);
    }
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("AvailabilityZoneId");
    if let Some(var_517) = &input.availability_zone_id {
        scope_516.string(var_517);
    }
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("Tenancy");
    if let Some(var_519) = &input.tenancy {
        scope_518.string(var_519.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("InstanceCount");
    if let Some(var_521) = &input.instance_count {
        scope_520.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_521).into()));
    }
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("EbsOptimized");
    if let Some(var_523) = &input.ebs_optimized {
        scope_522.boolean(*var_523);
    }
    #[allow(unused_mut)]
    let mut scope_524 = writer.prefix("EphemeralStorage");
    if let Some(var_525) = &input.ephemeral_storage {
        scope_524.boolean(*var_525);
    }
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("EndDate");
    if let Some(var_527) = &input.end_date {
        scope_526.date_time(var_527, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("EndDateType");
    if let Some(var_529) = &input.end_date_type {
        scope_528.string(var_529.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_531) = &input.instance_match_criteria {
        scope_530.string(var_531.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("TagSpecifications");
    if let Some(var_533) = &input.tag_specifications {
        let mut list_535 = scope_532.start_list(true, Some("item"));
        for item_534 in var_533 {
            #[allow(unused_mut)]
            let mut entry_536 = list_535.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_536, item_534)?;
        }
        list_535.finish();
    }
    #[allow(unused_mut)]
    let mut scope_537 = writer.prefix("DryRun");
    if let Some(var_538) = &input.dry_run {
        scope_537.boolean(*var_538);
    }
    #[allow(unused_mut)]
    let mut scope_539 = writer.prefix("OutpostArn");
    if let Some(var_540) = &input.outpost_arn {
        scope_539.string(var_540);
    }
    #[allow(unused_mut)]
    let mut scope_541 = writer.prefix("PlacementGroupArn");
    if let Some(var_542) = &input.placement_group_arn {
        scope_541.string(var_542);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation_fleet(input: &crate::input::CreateCapacityReservationFleetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservationFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("AllocationStrategy");
    if let Some(var_544) = &input.allocation_strategy {
        scope_543.string(var_544);
    }
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("ClientToken");
    if let Some(var_546) = &input.client_token {
        scope_545.string(var_546);
    }
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("InstanceTypeSpecification");
    if let Some(var_548) = &input.instance_type_specifications {
        let mut list_550 = scope_547.start_list(true, None);
        for item_549 in var_548 {
            #[allow(unused_mut)]
            let mut entry_551 = list_550.entry();
            crate::query_ser::serialize_structure_crate_model_reservation_fleet_instance_specification(entry_551, item_549)?;
        }
        list_550.finish();
    }
    #[allow(unused_mut)]
    let mut scope_552 = writer.prefix("Tenancy");
    if let Some(var_553) = &input.tenancy {
        scope_552.string(var_553.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("TotalTargetCapacity");
    if let Some(var_555) = &input.total_target_capacity {
        scope_554.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_555).into()));
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("EndDate");
    if let Some(var_557) = &input.end_date {
        scope_556.date_time(var_557, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_559) = &input.instance_match_criteria {
        scope_558.string(var_559.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("TagSpecification");
    if let Some(var_561) = &input.tag_specifications {
        let mut list_563 = scope_560.start_list(true, Some("item"));
        for item_562 in var_561 {
            #[allow(unused_mut)]
            let mut entry_564 = list_563.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_564, item_562)?;
        }
        list_563.finish();
    }
    #[allow(unused_mut)]
    let mut scope_565 = writer.prefix("DryRun");
    if let Some(var_566) = &input.dry_run {
        scope_565.boolean(*var_566);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_carrier_gateway(input: &crate::input::CreateCarrierGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_567 = writer.prefix("VpcId");
    if let Some(var_568) = &input.vpc_id {
        scope_567.string(var_568);
    }
    #[allow(unused_mut)]
    let mut scope_569 = writer.prefix("TagSpecification");
    if let Some(var_570) = &input.tag_specifications {
        let mut list_572 = scope_569.start_list(true, Some("item"));
        for item_571 in var_570 {
            #[allow(unused_mut)]
            let mut entry_573 = list_572.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_573, item_571)?;
        }
        list_572.finish();
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("DryRun");
    if let Some(var_575) = &input.dry_run {
        scope_574.boolean(*var_575);
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("ClientToken");
    if let Some(var_577) = &input.client_token {
        scope_576.string(var_577);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_endpoint(input: &crate::input::CreateClientVpnEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("ClientCidrBlock");
    if let Some(var_579) = &input.client_cidr_block {
        scope_578.string(var_579);
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("ServerCertificateArn");
    if let Some(var_581) = &input.server_certificate_arn {
        scope_580.string(var_581);
    }
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("Authentication");
    if let Some(var_583) = &input.authentication_options {
        let mut list_585 = scope_582.start_list(true, None);
        for item_584 in var_583 {
            #[allow(unused_mut)]
            let mut entry_586 = list_585.entry();
            crate::query_ser::serialize_structure_crate_model_client_vpn_authentication_request(entry_586, item_584)?;
        }
        list_585.finish();
    }
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("ConnectionLogOptions");
    if let Some(var_588) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(scope_587, var_588)?;
    }
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("DnsServers");
    if let Some(var_590) = &input.dns_servers {
        let mut list_592 = scope_589.start_list(true, Some("item"));
        for item_591 in var_590 {
            #[allow(unused_mut)]
            let mut entry_593 = list_592.entry();
            entry_593.string(item_591);
        }
        list_592.finish();
    }
    #[allow(unused_mut)]
    let mut scope_594 = writer.prefix("TransportProtocol");
    if let Some(var_595) = &input.transport_protocol {
        scope_594.string(var_595.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_596 = writer.prefix("VpnPort");
    if let Some(var_597) = &input.vpn_port {
        scope_596.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_597).into()));
    }
    #[allow(unused_mut)]
    let mut scope_598 = writer.prefix("Description");
    if let Some(var_599) = &input.description {
        scope_598.string(var_599);
    }
    #[allow(unused_mut)]
    let mut scope_600 = writer.prefix("SplitTunnel");
    if let Some(var_601) = &input.split_tunnel {
        scope_600.boolean(*var_601);
    }
    #[allow(unused_mut)]
    let mut scope_602 = writer.prefix("DryRun");
    if let Some(var_603) = &input.dry_run {
        scope_602.boolean(*var_603);
    }
    #[allow(unused_mut)]
    let mut scope_604 = writer.prefix("ClientToken");
    if let Some(var_605) = &input.client_token {
        scope_604.string(var_605);
    }
    #[allow(unused_mut)]
    let mut scope_606 = writer.prefix("TagSpecification");
    if let Some(var_607) = &input.tag_specifications {
        let mut list_609 = scope_606.start_list(true, Some("item"));
        for item_608 in var_607 {
            #[allow(unused_mut)]
            let mut entry_610 = list_609.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_610, item_608)?;
        }
        list_609.finish();
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("SecurityGroupId");
    if let Some(var_612) = &input.security_group_ids {
        let mut list_614 = scope_611.start_list(true, Some("item"));
        for item_613 in var_612 {
            #[allow(unused_mut)]
            let mut entry_615 = list_614.entry();
            entry_615.string(item_613);
        }
        list_614.finish();
    }
    #[allow(unused_mut)]
    let mut scope_616 = writer.prefix("VpcId");
    if let Some(var_617) = &input.vpc_id {
        scope_616.string(var_617);
    }
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("SelfServicePortal");
    if let Some(var_619) = &input.self_service_portal {
        scope_618.string(var_619.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("ClientConnectOptions");
    if let Some(var_621) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(scope_620, var_621)?;
    }
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("SessionTimeoutHours");
    if let Some(var_623) = &input.session_timeout_hours {
        scope_622.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_623).into()));
    }
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_625) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(scope_624, var_625)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_route(input: &crate::input::CreateClientVpnRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_627) = &input.client_vpn_endpoint_id {
        scope_626.string(var_627);
    }
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("DestinationCidrBlock");
    if let Some(var_629) = &input.destination_cidr_block {
        scope_628.string(var_629);
    }
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_631) = &input.target_vpc_subnet_id {
        scope_630.string(var_631);
    }
    #[allow(unused_mut)]
    let mut scope_632 = writer.prefix("Description");
    if let Some(var_633) = &input.description {
        scope_632.string(var_633);
    }
    #[allow(unused_mut)]
    let mut scope_634 = writer.prefix("ClientToken");
    if let Some(var_635) = &input.client_token {
        scope_634.string(var_635);
    }
    #[allow(unused_mut)]
    let mut scope_636 = writer.prefix("DryRun");
    if let Some(var_637) = &input.dry_run {
        scope_636.boolean(*var_637);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_coip_cidr(input: &crate::input::CreateCoipCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_638 = writer.prefix("Cidr");
    if let Some(var_639) = &input.cidr {
        scope_638.string(var_639);
    }
    #[allow(unused_mut)]
    let mut scope_640 = writer.prefix("CoipPoolId");
    if let Some(var_641) = &input.coip_pool_id {
        scope_640.string(var_641);
    }
    #[allow(unused_mut)]
    let mut scope_642 = writer.prefix("DryRun");
    if let Some(var_643) = &input.dry_run {
        scope_642.boolean(*var_643);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_coip_pool(input: &crate::input::CreateCoipPoolInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCoipPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_645) = &input.local_gateway_route_table_id {
        scope_644.string(var_645);
    }
    #[allow(unused_mut)]
    let mut scope_646 = writer.prefix("TagSpecification");
    if let Some(var_647) = &input.tag_specifications {
        let mut list_649 = scope_646.start_list(true, Some("item"));
        for item_648 in var_647 {
            #[allow(unused_mut)]
            let mut entry_650 = list_649.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_650, item_648)?;
        }
        list_649.finish();
    }
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("DryRun");
    if let Some(var_652) = &input.dry_run {
        scope_651.boolean(*var_652);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_customer_gateway(input: &crate::input::CreateCustomerGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("BgpAsn");
    if let Some(var_654) = &input.bgp_asn {
        scope_653.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_654).into()));
    }
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("PublicIp");
    if let Some(var_656) = &input.public_ip {
        scope_655.string(var_656);
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("CertificateArn");
    if let Some(var_658) = &input.certificate_arn {
        scope_657.string(var_658);
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("Type");
    if let Some(var_660) = &input.r#type {
        scope_659.string(var_660.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("TagSpecification");
    if let Some(var_662) = &input.tag_specifications {
        let mut list_664 = scope_661.start_list(true, Some("item"));
        for item_663 in var_662 {
            #[allow(unused_mut)]
            let mut entry_665 = list_664.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_665, item_663)?;
        }
        list_664.finish();
    }
    #[allow(unused_mut)]
    let mut scope_666 = writer.prefix("DeviceName");
    if let Some(var_667) = &input.device_name {
        scope_666.string(var_667);
    }
    #[allow(unused_mut)]
    let mut scope_668 = writer.prefix("IpAddress");
    if let Some(var_669) = &input.ip_address {
        scope_668.string(var_669);
    }
    #[allow(unused_mut)]
    let mut scope_670 = writer.prefix("DryRun");
    if let Some(var_671) = &input.dry_run {
        scope_670.boolean(*var_671);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_subnet(input: &crate::input::CreateDefaultSubnetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_672 = writer.prefix("AvailabilityZone");
    if let Some(var_673) = &input.availability_zone {
        scope_672.string(var_673);
    }
    #[allow(unused_mut)]
    let mut scope_674 = writer.prefix("DryRun");
    if let Some(var_675) = &input.dry_run {
        scope_674.boolean(*var_675);
    }
    #[allow(unused_mut)]
    let mut scope_676 = writer.prefix("Ipv6Native");
    if let Some(var_677) = &input.ipv6_native {
        scope_676.boolean(*var_677);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_vpc(input: &crate::input::CreateDefaultVpcInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_678 = writer.prefix("DryRun");
    if let Some(var_679) = &input.dry_run {
        scope_678.boolean(*var_679);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_dhcp_options(input: &crate::input::CreateDhcpOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("DhcpConfiguration");
    if let Some(var_681) = &input.dhcp_configurations {
        let mut list_683 = scope_680.start_list(true, Some("item"));
        for item_682 in var_681 {
            #[allow(unused_mut)]
            let mut entry_684 = list_683.entry();
            crate::query_ser::serialize_structure_crate_model_new_dhcp_configuration(entry_684, item_682)?;
        }
        list_683.finish();
    }
    #[allow(unused_mut)]
    let mut scope_685 = writer.prefix("TagSpecification");
    if let Some(var_686) = &input.tag_specifications {
        let mut list_688 = scope_685.start_list(true, Some("item"));
        for item_687 in var_686 {
            #[allow(unused_mut)]
            let mut entry_689 = list_688.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_689, item_687)?;
        }
        list_688.finish();
    }
    #[allow(unused_mut)]
    let mut scope_690 = writer.prefix("DryRun");
    if let Some(var_691) = &input.dry_run {
        scope_690.boolean(*var_691);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_egress_only_internet_gateway(input: &crate::input::CreateEgressOnlyInternetGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateEgressOnlyInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("ClientToken");
    if let Some(var_693) = &input.client_token {
        scope_692.string(var_693);
    }
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("DryRun");
    if let Some(var_695) = &input.dry_run {
        scope_694.boolean(*var_695);
    }
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("VpcId");
    if let Some(var_697) = &input.vpc_id {
        scope_696.string(var_697);
    }
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("TagSpecification");
    if let Some(var_699) = &input.tag_specifications {
        let mut list_701 = scope_698.start_list(true, Some("item"));
        for item_700 in var_699 {
            #[allow(unused_mut)]
            let mut entry_702 = list_701.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_702, item_700)?;
        }
        list_701.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fleet(input: &crate::input::CreateFleetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_703 = writer.prefix("DryRun");
    if let Some(var_704) = &input.dry_run {
        scope_703.boolean(*var_704);
    }
    #[allow(unused_mut)]
    let mut scope_705 = writer.prefix("ClientToken");
    if let Some(var_706) = &input.client_token {
        scope_705.string(var_706);
    }
    #[allow(unused_mut)]
    let mut scope_707 = writer.prefix("SpotOptions");
    if let Some(var_708) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_options_request(scope_707, var_708)?;
    }
    #[allow(unused_mut)]
    let mut scope_709 = writer.prefix("OnDemandOptions");
    if let Some(var_710) = &input.on_demand_options {
        crate::query_ser::serialize_structure_crate_model_on_demand_options_request(scope_709, var_710)?;
    }
    #[allow(unused_mut)]
    let mut scope_711 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_712) = &input.excess_capacity_termination_policy {
        scope_711.string(var_712.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_713 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_714) = &input.launch_template_configs {
        let mut list_716 = scope_713.start_list(true, Some("item"));
        for item_715 in var_714 {
            #[allow(unused_mut)]
            let mut entry_717 = list_716.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(entry_717, item_715)?;
        }
        list_716.finish();
    }
    #[allow(unused_mut)]
    let mut scope_718 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_719) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(scope_718, var_719)?;
    }
    #[allow(unused_mut)]
    let mut scope_720 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_721) = &input.terminate_instances_with_expiration {
        scope_720.boolean(*var_721);
    }
    #[allow(unused_mut)]
    let mut scope_722 = writer.prefix("Type");
    if let Some(var_723) = &input.r#type {
        scope_722.string(var_723.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_724 = writer.prefix("ValidFrom");
    if let Some(var_725) = &input.valid_from {
        scope_724.date_time(var_725, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_726 = writer.prefix("ValidUntil");
    if let Some(var_727) = &input.valid_until {
        scope_726.date_time(var_727, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_729) = &input.replace_unhealthy_instances {
        scope_728.boolean(*var_729);
    }
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("TagSpecification");
    if let Some(var_731) = &input.tag_specifications {
        let mut list_733 = scope_730.start_list(true, Some("item"));
        for item_732 in var_731 {
            #[allow(unused_mut)]
            let mut entry_734 = list_733.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_734, item_732)?;
        }
        list_733.finish();
    }
    #[allow(unused_mut)]
    let mut scope_735 = writer.prefix("Context");
    if let Some(var_736) = &input.context {
        scope_735.string(var_736);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_flow_logs(input: &crate::input::CreateFlowLogsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_737 = writer.prefix("DryRun");
    if let Some(var_738) = &input.dry_run {
        scope_737.boolean(*var_738);
    }
    #[allow(unused_mut)]
    let mut scope_739 = writer.prefix("ClientToken");
    if let Some(var_740) = &input.client_token {
        scope_739.string(var_740);
    }
    #[allow(unused_mut)]
    let mut scope_741 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_742) = &input.deliver_logs_permission_arn {
        scope_741.string(var_742);
    }
    #[allow(unused_mut)]
    let mut scope_743 = writer.prefix("DeliverCrossAccountRole");
    if let Some(var_744) = &input.deliver_cross_account_role {
        scope_743.string(var_744);
    }
    #[allow(unused_mut)]
    let mut scope_745 = writer.prefix("LogGroupName");
    if let Some(var_746) = &input.log_group_name {
        scope_745.string(var_746);
    }
    #[allow(unused_mut)]
    let mut scope_747 = writer.prefix("ResourceId");
    if let Some(var_748) = &input.resource_ids {
        let mut list_750 = scope_747.start_list(true, Some("item"));
        for item_749 in var_748 {
            #[allow(unused_mut)]
            let mut entry_751 = list_750.entry();
            entry_751.string(item_749);
        }
        list_750.finish();
    }
    #[allow(unused_mut)]
    let mut scope_752 = writer.prefix("ResourceType");
    if let Some(var_753) = &input.resource_type {
        scope_752.string(var_753.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_754 = writer.prefix("TrafficType");
    if let Some(var_755) = &input.traffic_type {
        scope_754.string(var_755.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_756 = writer.prefix("LogDestinationType");
    if let Some(var_757) = &input.log_destination_type {
        scope_756.string(var_757.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_758 = writer.prefix("LogDestination");
    if let Some(var_759) = &input.log_destination {
        scope_758.string(var_759);
    }
    #[allow(unused_mut)]
    let mut scope_760 = writer.prefix("LogFormat");
    if let Some(var_761) = &input.log_format {
        scope_760.string(var_761);
    }
    #[allow(unused_mut)]
    let mut scope_762 = writer.prefix("TagSpecification");
    if let Some(var_763) = &input.tag_specifications {
        let mut list_765 = scope_762.start_list(true, Some("item"));
        for item_764 in var_763 {
            #[allow(unused_mut)]
            let mut entry_766 = list_765.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_766, item_764)?;
        }
        list_765.finish();
    }
    #[allow(unused_mut)]
    let mut scope_767 = writer.prefix("MaxAggregationInterval");
    if let Some(var_768) = &input.max_aggregation_interval {
        scope_767.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_768).into()));
    }
    #[allow(unused_mut)]
    let mut scope_769 = writer.prefix("DestinationOptions");
    if let Some(var_770) = &input.destination_options {
        crate::query_ser::serialize_structure_crate_model_destination_options_request(scope_769, var_770)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fpga_image(input: &crate::input::CreateFpgaImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_771 = writer.prefix("DryRun");
    if let Some(var_772) = &input.dry_run {
        scope_771.boolean(*var_772);
    }
    #[allow(unused_mut)]
    let mut scope_773 = writer.prefix("InputStorageLocation");
    if let Some(var_774) = &input.input_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_773, var_774)?;
    }
    #[allow(unused_mut)]
    let mut scope_775 = writer.prefix("LogsStorageLocation");
    if let Some(var_776) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_775, var_776)?;
    }
    #[allow(unused_mut)]
    let mut scope_777 = writer.prefix("Description");
    if let Some(var_778) = &input.description {
        scope_777.string(var_778);
    }
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("Name");
    if let Some(var_780) = &input.name {
        scope_779.string(var_780);
    }
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("ClientToken");
    if let Some(var_782) = &input.client_token {
        scope_781.string(var_782);
    }
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("TagSpecification");
    if let Some(var_784) = &input.tag_specifications {
        let mut list_786 = scope_783.start_list(true, Some("item"));
        for item_785 in var_784 {
            #[allow(unused_mut)]
            let mut entry_787 = list_786.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_787, item_785)?;
        }
        list_786.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_image(input: &crate::input::CreateImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_788 = writer.prefix("BlockDeviceMapping");
    if let Some(var_789) = &input.block_device_mappings {
        let mut list_791 = scope_788.start_list(true, Some("BlockDeviceMapping"));
        for item_790 in var_789 {
            #[allow(unused_mut)]
            let mut entry_792 = list_791.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(entry_792, item_790)?;
        }
        list_791.finish();
    }
    #[allow(unused_mut)]
    let mut scope_793 = writer.prefix("Description");
    if let Some(var_794) = &input.description {
        scope_793.string(var_794);
    }
    #[allow(unused_mut)]
    let mut scope_795 = writer.prefix("DryRun");
    if let Some(var_796) = &input.dry_run {
        scope_795.boolean(*var_796);
    }
    #[allow(unused_mut)]
    let mut scope_797 = writer.prefix("InstanceId");
    if let Some(var_798) = &input.instance_id {
        scope_797.string(var_798);
    }
    #[allow(unused_mut)]
    let mut scope_799 = writer.prefix("Name");
    if let Some(var_800) = &input.name {
        scope_799.string(var_800);
    }
    #[allow(unused_mut)]
    let mut scope_801 = writer.prefix("NoReboot");
    if let Some(var_802) = &input.no_reboot {
        scope_801.boolean(*var_802);
    }
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("TagSpecification");
    if let Some(var_804) = &input.tag_specifications {
        let mut list_806 = scope_803.start_list(true, Some("item"));
        for item_805 in var_804 {
            #[allow(unused_mut)]
            let mut entry_807 = list_806.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_807, item_805)?;
        }
        list_806.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_event_window(input: &crate::input::CreateInstanceEventWindowInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("DryRun");
    if let Some(var_809) = &input.dry_run {
        scope_808.boolean(*var_809);
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("Name");
    if let Some(var_811) = &input.name {
        scope_810.string(var_811);
    }
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("TimeRange");
    if let Some(var_813) = &input.time_ranges {
        let mut list_815 = scope_812.start_list(true, None);
        for item_814 in var_813 {
            #[allow(unused_mut)]
            let mut entry_816 = list_815.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_816, item_814)?;
        }
        list_815.finish();
    }
    #[allow(unused_mut)]
    let mut scope_817 = writer.prefix("CronExpression");
    if let Some(var_818) = &input.cron_expression {
        scope_817.string(var_818);
    }
    #[allow(unused_mut)]
    let mut scope_819 = writer.prefix("TagSpecification");
    if let Some(var_820) = &input.tag_specifications {
        let mut list_822 = scope_819.start_list(true, Some("item"));
        for item_821 in var_820 {
            #[allow(unused_mut)]
            let mut entry_823 = list_822.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_823, item_821)?;
        }
        list_822.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_export_task(input: &crate::input::CreateInstanceExportTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("Description");
    if let Some(var_825) = &input.description {
        scope_824.string(var_825);
    }
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("ExportToS3");
    if let Some(var_827) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_crate_model_export_to_s3_task_specification(scope_826, var_827)?;
    }
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("InstanceId");
    if let Some(var_829) = &input.instance_id {
        scope_828.string(var_829);
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("TargetEnvironment");
    if let Some(var_831) = &input.target_environment {
        scope_830.string(var_831.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("TagSpecification");
    if let Some(var_833) = &input.tag_specifications {
        let mut list_835 = scope_832.start_list(true, Some("item"));
        for item_834 in var_833 {
            #[allow(unused_mut)]
            let mut entry_836 = list_835.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_836, item_834)?;
        }
        list_835.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_internet_gateway(input: &crate::input::CreateInternetGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_837 = writer.prefix("TagSpecification");
    if let Some(var_838) = &input.tag_specifications {
        let mut list_840 = scope_837.start_list(true, Some("item"));
        for item_839 in var_838 {
            #[allow(unused_mut)]
            let mut entry_841 = list_840.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_841, item_839)?;
        }
        list_840.finish();
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("DryRun");
    if let Some(var_843) = &input.dry_run {
        scope_842.boolean(*var_843);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam(input: &crate::input::CreateIpamInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("DryRun");
    if let Some(var_845) = &input.dry_run {
        scope_844.boolean(*var_845);
    }
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("Description");
    if let Some(var_847) = &input.description {
        scope_846.string(var_847);
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("OperatingRegion");
    if let Some(var_849) = &input.operating_regions {
        let mut list_851 = scope_848.start_list(true, None);
        for item_850 in var_849 {
            #[allow(unused_mut)]
            let mut entry_852 = list_851.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(entry_852, item_850)?;
        }
        list_851.finish();
    }
    #[allow(unused_mut)]
    let mut scope_853 = writer.prefix("TagSpecification");
    if let Some(var_854) = &input.tag_specifications {
        let mut list_856 = scope_853.start_list(true, Some("item"));
        for item_855 in var_854 {
            #[allow(unused_mut)]
            let mut entry_857 = list_856.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_857, item_855)?;
        }
        list_856.finish();
    }
    #[allow(unused_mut)]
    let mut scope_858 = writer.prefix("ClientToken");
    if let Some(var_859) = &input.client_token {
        scope_858.string(var_859);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_pool(input: &crate::input::CreateIpamPoolInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_860 = writer.prefix("DryRun");
    if let Some(var_861) = &input.dry_run {
        scope_860.boolean(*var_861);
    }
    #[allow(unused_mut)]
    let mut scope_862 = writer.prefix("IpamScopeId");
    if let Some(var_863) = &input.ipam_scope_id {
        scope_862.string(var_863);
    }
    #[allow(unused_mut)]
    let mut scope_864 = writer.prefix("Locale");
    if let Some(var_865) = &input.locale {
        scope_864.string(var_865);
    }
    #[allow(unused_mut)]
    let mut scope_866 = writer.prefix("SourceIpamPoolId");
    if let Some(var_867) = &input.source_ipam_pool_id {
        scope_866.string(var_867);
    }
    #[allow(unused_mut)]
    let mut scope_868 = writer.prefix("Description");
    if let Some(var_869) = &input.description {
        scope_868.string(var_869);
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("AddressFamily");
    if let Some(var_871) = &input.address_family {
        scope_870.string(var_871.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("AutoImport");
    if let Some(var_873) = &input.auto_import {
        scope_872.boolean(*var_873);
    }
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_875) = &input.publicly_advertisable {
        scope_874.boolean(*var_875);
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_877) = &input.allocation_min_netmask_length {
        scope_876.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_877).into()));
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_879) = &input.allocation_max_netmask_length {
        scope_878.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_879).into()));
    }
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_881) = &input.allocation_default_netmask_length {
        scope_880.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_881).into()));
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("AllocationResourceTag");
    if let Some(var_883) = &input.allocation_resource_tags {
        let mut list_885 = scope_882.start_list(true, Some("item"));
        for item_884 in var_883 {
            #[allow(unused_mut)]
            let mut entry_886 = list_885.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(entry_886, item_884)?;
        }
        list_885.finish();
    }
    #[allow(unused_mut)]
    let mut scope_887 = writer.prefix("TagSpecification");
    if let Some(var_888) = &input.tag_specifications {
        let mut list_890 = scope_887.start_list(true, Some("item"));
        for item_889 in var_888 {
            #[allow(unused_mut)]
            let mut entry_891 = list_890.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_891, item_889)?;
        }
        list_890.finish();
    }
    #[allow(unused_mut)]
    let mut scope_892 = writer.prefix("ClientToken");
    if let Some(var_893) = &input.client_token {
        scope_892.string(var_893);
    }
    #[allow(unused_mut)]
    let mut scope_894 = writer.prefix("AwsService");
    if let Some(var_895) = &input.aws_service {
        scope_894.string(var_895.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_scope(input: &crate::input::CreateIpamScopeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_896 = writer.prefix("DryRun");
    if let Some(var_897) = &input.dry_run {
        scope_896.boolean(*var_897);
    }
    #[allow(unused_mut)]
    let mut scope_898 = writer.prefix("IpamId");
    if let Some(var_899) = &input.ipam_id {
        scope_898.string(var_899);
    }
    #[allow(unused_mut)]
    let mut scope_900 = writer.prefix("Description");
    if let Some(var_901) = &input.description {
        scope_900.string(var_901);
    }
    #[allow(unused_mut)]
    let mut scope_902 = writer.prefix("TagSpecification");
    if let Some(var_903) = &input.tag_specifications {
        let mut list_905 = scope_902.start_list(true, Some("item"));
        for item_904 in var_903 {
            #[allow(unused_mut)]
            let mut entry_906 = list_905.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_906, item_904)?;
        }
        list_905.finish();
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("ClientToken");
    if let Some(var_908) = &input.client_token {
        scope_907.string(var_908);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_key_pair(input: &crate::input::CreateKeyPairInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("KeyName");
    if let Some(var_910) = &input.key_name {
        scope_909.string(var_910);
    }
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("DryRun");
    if let Some(var_912) = &input.dry_run {
        scope_911.boolean(*var_912);
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("KeyType");
    if let Some(var_914) = &input.key_type {
        scope_913.string(var_914.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_915 = writer.prefix("TagSpecification");
    if let Some(var_916) = &input.tag_specifications {
        let mut list_918 = scope_915.start_list(true, Some("item"));
        for item_917 in var_916 {
            #[allow(unused_mut)]
            let mut entry_919 = list_918.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_919, item_917)?;
        }
        list_918.finish();
    }
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("KeyFormat");
    if let Some(var_921) = &input.key_format {
        scope_920.string(var_921.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template(input: &crate::input::CreateLaunchTemplateInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_922 = writer.prefix("DryRun");
    if let Some(var_923) = &input.dry_run {
        scope_922.boolean(*var_923);
    }
    #[allow(unused_mut)]
    let mut scope_924 = writer.prefix("ClientToken");
    if let Some(var_925) = &input.client_token {
        scope_924.string(var_925);
    }
    #[allow(unused_mut)]
    let mut scope_926 = writer.prefix("LaunchTemplateName");
    if let Some(var_927) = &input.launch_template_name {
        scope_926.string(var_927);
    }
    #[allow(unused_mut)]
    let mut scope_928 = writer.prefix("VersionDescription");
    if let Some(var_929) = &input.version_description {
        scope_928.string(var_929);
    }
    #[allow(unused_mut)]
    let mut scope_930 = writer.prefix("LaunchTemplateData");
    if let Some(var_931) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(scope_930, var_931)?;
    }
    #[allow(unused_mut)]
    let mut scope_932 = writer.prefix("TagSpecification");
    if let Some(var_933) = &input.tag_specifications {
        let mut list_935 = scope_932.start_list(true, Some("item"));
        for item_934 in var_933 {
            #[allow(unused_mut)]
            let mut entry_936 = list_935.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_936, item_934)?;
        }
        list_935.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template_version(input: &crate::input::CreateLaunchTemplateVersionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_937 = writer.prefix("DryRun");
    if let Some(var_938) = &input.dry_run {
        scope_937.boolean(*var_938);
    }
    #[allow(unused_mut)]
    let mut scope_939 = writer.prefix("ClientToken");
    if let Some(var_940) = &input.client_token {
        scope_939.string(var_940);
    }
    #[allow(unused_mut)]
    let mut scope_941 = writer.prefix("LaunchTemplateId");
    if let Some(var_942) = &input.launch_template_id {
        scope_941.string(var_942);
    }
    #[allow(unused_mut)]
    let mut scope_943 = writer.prefix("LaunchTemplateName");
    if let Some(var_944) = &input.launch_template_name {
        scope_943.string(var_944);
    }
    #[allow(unused_mut)]
    let mut scope_945 = writer.prefix("SourceVersion");
    if let Some(var_946) = &input.source_version {
        scope_945.string(var_946);
    }
    #[allow(unused_mut)]
    let mut scope_947 = writer.prefix("VersionDescription");
    if let Some(var_948) = &input.version_description {
        scope_947.string(var_948);
    }
    #[allow(unused_mut)]
    let mut scope_949 = writer.prefix("LaunchTemplateData");
    if let Some(var_950) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(scope_949, var_950)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route(input: &crate::input::CreateLocalGatewayRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_951 = writer.prefix("DestinationCidrBlock");
    if let Some(var_952) = &input.destination_cidr_block {
        scope_951.string(var_952);
    }
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_954) = &input.local_gateway_route_table_id {
        scope_953.string(var_954);
    }
    #[allow(unused_mut)]
    let mut scope_955 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_956) = &input.local_gateway_virtual_interface_group_id {
        scope_955.string(var_956);
    }
    #[allow(unused_mut)]
    let mut scope_957 = writer.prefix("DryRun");
    if let Some(var_958) = &input.dry_run {
        scope_957.boolean(*var_958);
    }
    #[allow(unused_mut)]
    let mut scope_959 = writer.prefix("NetworkInterfaceId");
    if let Some(var_960) = &input.network_interface_id {
        scope_959.string(var_960);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table(input: &crate::input::CreateLocalGatewayRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_961 = writer.prefix("LocalGatewayId");
    if let Some(var_962) = &input.local_gateway_id {
        scope_961.string(var_962);
    }
    #[allow(unused_mut)]
    let mut scope_963 = writer.prefix("Mode");
    if let Some(var_964) = &input.mode {
        scope_963.string(var_964.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_965 = writer.prefix("TagSpecification");
    if let Some(var_966) = &input.tag_specifications {
        let mut list_968 = scope_965.start_list(true, Some("item"));
        for item_967 in var_966 {
            #[allow(unused_mut)]
            let mut entry_969 = list_968.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_969, item_967)?;
        }
        list_968.finish();
    }
    #[allow(unused_mut)]
    let mut scope_970 = writer.prefix("DryRun");
    if let Some(var_971) = &input.dry_run {
        scope_970.boolean(*var_971);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_virtual_interface_group_association(input: &crate::input::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_973) = &input.local_gateway_route_table_id {
        scope_972.string(var_973);
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_975) = &input.local_gateway_virtual_interface_group_id {
        scope_974.string(var_975);
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("TagSpecification");
    if let Some(var_977) = &input.tag_specifications {
        let mut list_979 = scope_976.start_list(true, Some("item"));
        for item_978 in var_977 {
            #[allow(unused_mut)]
            let mut entry_980 = list_979.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_980, item_978)?;
        }
        list_979.finish();
    }
    #[allow(unused_mut)]
    let mut scope_981 = writer.prefix("DryRun");
    if let Some(var_982) = &input.dry_run {
        scope_981.boolean(*var_982);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_vpc_association(input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRouteTableVpcAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_983 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_984) = &input.local_gateway_route_table_id {
        scope_983.string(var_984);
    }
    #[allow(unused_mut)]
    let mut scope_985 = writer.prefix("VpcId");
    if let Some(var_986) = &input.vpc_id {
        scope_985.string(var_986);
    }
    #[allow(unused_mut)]
    let mut scope_987 = writer.prefix("TagSpecification");
    if let Some(var_988) = &input.tag_specifications {
        let mut list_990 = scope_987.start_list(true, Some("item"));
        for item_989 in var_988 {
            #[allow(unused_mut)]
            let mut entry_991 = list_990.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_991, item_989)?;
        }
        list_990.finish();
    }
    #[allow(unused_mut)]
    let mut scope_992 = writer.prefix("DryRun");
    if let Some(var_993) = &input.dry_run {
        scope_992.boolean(*var_993);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_managed_prefix_list(input: &crate::input::CreateManagedPrefixListInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("DryRun");
    if let Some(var_995) = &input.dry_run {
        scope_994.boolean(*var_995);
    }
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("PrefixListName");
    if let Some(var_997) = &input.prefix_list_name {
        scope_996.string(var_997);
    }
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("Entry");
    if let Some(var_999) = &input.entries {
        let mut list_1001 = scope_998.start_list(true, None);
        for item_1000 in var_999 {
            #[allow(unused_mut)]
            let mut entry_1002 = list_1001.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(entry_1002, item_1000)?;
        }
        list_1001.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1003 = writer.prefix("MaxEntries");
    if let Some(var_1004) = &input.max_entries {
        scope_1003.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1004).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1005 = writer.prefix("TagSpecification");
    if let Some(var_1006) = &input.tag_specifications {
        let mut list_1008 = scope_1005.start_list(true, Some("item"));
        for item_1007 in var_1006 {
            #[allow(unused_mut)]
            let mut entry_1009 = list_1008.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1009, item_1007)?;
        }
        list_1008.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1010 = writer.prefix("AddressFamily");
    if let Some(var_1011) = &input.address_family {
        scope_1010.string(var_1011);
    }
    #[allow(unused_mut)]
    let mut scope_1012 = writer.prefix("ClientToken");
    if let Some(var_1013) = &input.client_token {
        scope_1012.string(var_1013);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_nat_gateway(input: &crate::input::CreateNatGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1014 = writer.prefix("AllocationId");
    if let Some(var_1015) = &input.allocation_id {
        scope_1014.string(var_1015);
    }
    #[allow(unused_mut)]
    let mut scope_1016 = writer.prefix("ClientToken");
    if let Some(var_1017) = &input.client_token {
        scope_1016.string(var_1017);
    }
    #[allow(unused_mut)]
    let mut scope_1018 = writer.prefix("DryRun");
    if let Some(var_1019) = &input.dry_run {
        scope_1018.boolean(*var_1019);
    }
    #[allow(unused_mut)]
    let mut scope_1020 = writer.prefix("SubnetId");
    if let Some(var_1021) = &input.subnet_id {
        scope_1020.string(var_1021);
    }
    #[allow(unused_mut)]
    let mut scope_1022 = writer.prefix("TagSpecification");
    if let Some(var_1023) = &input.tag_specifications {
        let mut list_1025 = scope_1022.start_list(true, Some("item"));
        for item_1024 in var_1023 {
            #[allow(unused_mut)]
            let mut entry_1026 = list_1025.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1026, item_1024)?;
        }
        list_1025.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1027 = writer.prefix("ConnectivityType");
    if let Some(var_1028) = &input.connectivity_type {
        scope_1027.string(var_1028.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1029 = writer.prefix("PrivateIpAddress");
    if let Some(var_1030) = &input.private_ip_address {
        scope_1029.string(var_1030);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl(input: &crate::input::CreateNetworkAclInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("DryRun");
    if let Some(var_1032) = &input.dry_run {
        scope_1031.boolean(*var_1032);
    }
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("VpcId");
    if let Some(var_1034) = &input.vpc_id {
        scope_1033.string(var_1034);
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("TagSpecification");
    if let Some(var_1036) = &input.tag_specifications {
        let mut list_1038 = scope_1035.start_list(true, Some("item"));
        for item_1037 in var_1036 {
            #[allow(unused_mut)]
            let mut entry_1039 = list_1038.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1039, item_1037)?;
        }
        list_1038.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl_entry(input: &crate::input::CreateNetworkAclEntryInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1040 = writer.prefix("CidrBlock");
    if let Some(var_1041) = &input.cidr_block {
        scope_1040.string(var_1041);
    }
    #[allow(unused_mut)]
    let mut scope_1042 = writer.prefix("DryRun");
    if let Some(var_1043) = &input.dry_run {
        scope_1042.boolean(*var_1043);
    }
    #[allow(unused_mut)]
    let mut scope_1044 = writer.prefix("Egress");
    if let Some(var_1045) = &input.egress {
        scope_1044.boolean(*var_1045);
    }
    #[allow(unused_mut)]
    let mut scope_1046 = writer.prefix("Icmp");
    if let Some(var_1047) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_1046, var_1047)?;
    }
    #[allow(unused_mut)]
    let mut scope_1048 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1049) = &input.ipv6_cidr_block {
        scope_1048.string(var_1049);
    }
    #[allow(unused_mut)]
    let mut scope_1050 = writer.prefix("NetworkAclId");
    if let Some(var_1051) = &input.network_acl_id {
        scope_1050.string(var_1051);
    }
    #[allow(unused_mut)]
    let mut scope_1052 = writer.prefix("PortRange");
    if let Some(var_1053) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_1052, var_1053)?;
    }
    #[allow(unused_mut)]
    let mut scope_1054 = writer.prefix("Protocol");
    if let Some(var_1055) = &input.protocol {
        scope_1054.string(var_1055);
    }
    #[allow(unused_mut)]
    let mut scope_1056 = writer.prefix("RuleAction");
    if let Some(var_1057) = &input.rule_action {
        scope_1056.string(var_1057.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1058 = writer.prefix("RuleNumber");
    if let Some(var_1059) = &input.rule_number {
        scope_1058.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1059).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_access_scope(input: &crate::input::CreateNetworkInsightsAccessScopeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsAccessScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1060 = writer.prefix("MatchPath");
    if let Some(var_1061) = &input.match_paths {
        let mut list_1063 = scope_1060.start_list(true, Some("item"));
        for item_1062 in var_1061 {
            #[allow(unused_mut)]
            let mut entry_1064 = list_1063.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(entry_1064, item_1062)?;
        }
        list_1063.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("ExcludePath");
    if let Some(var_1066) = &input.exclude_paths {
        let mut list_1068 = scope_1065.start_list(true, Some("item"));
        for item_1067 in var_1066 {
            #[allow(unused_mut)]
            let mut entry_1069 = list_1068.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(entry_1069, item_1067)?;
        }
        list_1068.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1070 = writer.prefix("ClientToken");
    if let Some(var_1071) = &input.client_token {
        scope_1070.string(var_1071);
    }
    #[allow(unused_mut)]
    let mut scope_1072 = writer.prefix("TagSpecification");
    if let Some(var_1073) = &input.tag_specifications {
        let mut list_1075 = scope_1072.start_list(true, Some("item"));
        for item_1074 in var_1073 {
            #[allow(unused_mut)]
            let mut entry_1076 = list_1075.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1076, item_1074)?;
        }
        list_1075.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1077 = writer.prefix("DryRun");
    if let Some(var_1078) = &input.dry_run {
        scope_1077.boolean(*var_1078);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_path(input: &crate::input::CreateNetworkInsightsPathInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1079 = writer.prefix("SourceIp");
    if let Some(var_1080) = &input.source_ip {
        scope_1079.string(var_1080);
    }
    #[allow(unused_mut)]
    let mut scope_1081 = writer.prefix("DestinationIp");
    if let Some(var_1082) = &input.destination_ip {
        scope_1081.string(var_1082);
    }
    #[allow(unused_mut)]
    let mut scope_1083 = writer.prefix("Source");
    if let Some(var_1084) = &input.source {
        scope_1083.string(var_1084);
    }
    #[allow(unused_mut)]
    let mut scope_1085 = writer.prefix("Destination");
    if let Some(var_1086) = &input.destination {
        scope_1085.string(var_1086);
    }
    #[allow(unused_mut)]
    let mut scope_1087 = writer.prefix("Protocol");
    if let Some(var_1088) = &input.protocol {
        scope_1087.string(var_1088.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1089 = writer.prefix("DestinationPort");
    if let Some(var_1090) = &input.destination_port {
        scope_1089.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1090).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1091 = writer.prefix("TagSpecification");
    if let Some(var_1092) = &input.tag_specifications {
        let mut list_1094 = scope_1091.start_list(true, Some("item"));
        for item_1093 in var_1092 {
            #[allow(unused_mut)]
            let mut entry_1095 = list_1094.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1095, item_1093)?;
        }
        list_1094.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1096 = writer.prefix("DryRun");
    if let Some(var_1097) = &input.dry_run {
        scope_1096.boolean(*var_1097);
    }
    #[allow(unused_mut)]
    let mut scope_1098 = writer.prefix("ClientToken");
    if let Some(var_1099) = &input.client_token {
        scope_1098.string(var_1099);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface(input: &crate::input::CreateNetworkInterfaceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1100 = writer.prefix("Description");
    if let Some(var_1101) = &input.description {
        scope_1100.string(var_1101);
    }
    #[allow(unused_mut)]
    let mut scope_1102 = writer.prefix("DryRun");
    if let Some(var_1103) = &input.dry_run {
        scope_1102.boolean(*var_1103);
    }
    #[allow(unused_mut)]
    let mut scope_1104 = writer.prefix("SecurityGroupId");
    if let Some(var_1105) = &input.groups {
        let mut list_1107 = scope_1104.start_list(true, Some("SecurityGroupId"));
        for item_1106 in var_1105 {
            #[allow(unused_mut)]
            let mut entry_1108 = list_1107.entry();
            entry_1108.string(item_1106);
        }
        list_1107.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1109 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1110) = &input.ipv6_address_count {
        scope_1109.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1110).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1111 = writer.prefix("Ipv6Addresses");
    if let Some(var_1112) = &input.ipv6_addresses {
        let mut list_1114 = scope_1111.start_list(true, Some("item"));
        for item_1113 in var_1112 {
            #[allow(unused_mut)]
            let mut entry_1115 = list_1114.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(entry_1115, item_1113)?;
        }
        list_1114.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1116 = writer.prefix("PrivateIpAddress");
    if let Some(var_1117) = &input.private_ip_address {
        scope_1116.string(var_1117);
    }
    #[allow(unused_mut)]
    let mut scope_1118 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1119) = &input.private_ip_addresses {
        let mut list_1121 = scope_1118.start_list(true, Some("item"));
        for item_1120 in var_1119 {
            #[allow(unused_mut)]
            let mut entry_1122 = list_1121.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(entry_1122, item_1120)?;
        }
        list_1121.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1124) = &input.secondary_private_ip_address_count {
        scope_1123.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1124).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("Ipv4Prefix");
    if let Some(var_1126) = &input.ipv4_prefixes {
        let mut list_1128 = scope_1125.start_list(true, Some("item"));
        for item_1127 in var_1126 {
            #[allow(unused_mut)]
            let mut entry_1129 = list_1128.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(entry_1129, item_1127)?;
        }
        list_1128.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1130 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1131) = &input.ipv4_prefix_count {
        scope_1130.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1131).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1132 = writer.prefix("Ipv6Prefix");
    if let Some(var_1133) = &input.ipv6_prefixes {
        let mut list_1135 = scope_1132.start_list(true, Some("item"));
        for item_1134 in var_1133 {
            #[allow(unused_mut)]
            let mut entry_1136 = list_1135.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(entry_1136, item_1134)?;
        }
        list_1135.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1137 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1138) = &input.ipv6_prefix_count {
        scope_1137.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1138).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1139 = writer.prefix("InterfaceType");
    if let Some(var_1140) = &input.interface_type {
        scope_1139.string(var_1140.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1141 = writer.prefix("SubnetId");
    if let Some(var_1142) = &input.subnet_id {
        scope_1141.string(var_1142);
    }
    #[allow(unused_mut)]
    let mut scope_1143 = writer.prefix("TagSpecification");
    if let Some(var_1144) = &input.tag_specifications {
        let mut list_1146 = scope_1143.start_list(true, Some("item"));
        for item_1145 in var_1144 {
            #[allow(unused_mut)]
            let mut entry_1147 = list_1146.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1147, item_1145)?;
        }
        list_1146.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1148 = writer.prefix("ClientToken");
    if let Some(var_1149) = &input.client_token {
        scope_1148.string(var_1149);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface_permission(input: &crate::input::CreateNetworkInterfacePermissionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterfacePermission", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1150 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1151) = &input.network_interface_id {
        scope_1150.string(var_1151);
    }
    #[allow(unused_mut)]
    let mut scope_1152 = writer.prefix("AwsAccountId");
    if let Some(var_1153) = &input.aws_account_id {
        scope_1152.string(var_1153);
    }
    #[allow(unused_mut)]
    let mut scope_1154 = writer.prefix("AwsService");
    if let Some(var_1155) = &input.aws_service {
        scope_1154.string(var_1155);
    }
    #[allow(unused_mut)]
    let mut scope_1156 = writer.prefix("Permission");
    if let Some(var_1157) = &input.permission {
        scope_1156.string(var_1157.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1158 = writer.prefix("DryRun");
    if let Some(var_1159) = &input.dry_run {
        scope_1158.boolean(*var_1159);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_placement_group(input: &crate::input::CreatePlacementGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1160 = writer.prefix("DryRun");
    if let Some(var_1161) = &input.dry_run {
        scope_1160.boolean(*var_1161);
    }
    #[allow(unused_mut)]
    let mut scope_1162 = writer.prefix("GroupName");
    if let Some(var_1163) = &input.group_name {
        scope_1162.string(var_1163);
    }
    #[allow(unused_mut)]
    let mut scope_1164 = writer.prefix("Strategy");
    if let Some(var_1165) = &input.strategy {
        scope_1164.string(var_1165.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1166 = writer.prefix("PartitionCount");
    if let Some(var_1167) = &input.partition_count {
        scope_1166.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1167).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1168 = writer.prefix("TagSpecification");
    if let Some(var_1169) = &input.tag_specifications {
        let mut list_1171 = scope_1168.start_list(true, Some("item"));
        for item_1170 in var_1169 {
            #[allow(unused_mut)]
            let mut entry_1172 = list_1171.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1172, item_1170)?;
        }
        list_1171.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("SpreadLevel");
    if let Some(var_1174) = &input.spread_level {
        scope_1173.string(var_1174.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_public_ipv4_pool(input: &crate::input::CreatePublicIpv4PoolInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreatePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("DryRun");
    if let Some(var_1176) = &input.dry_run {
        scope_1175.boolean(*var_1176);
    }
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("TagSpecification");
    if let Some(var_1178) = &input.tag_specifications {
        let mut list_1180 = scope_1177.start_list(true, Some("item"));
        for item_1179 in var_1178 {
            #[allow(unused_mut)]
            let mut entry_1181 = list_1180.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1181, item_1179)?;
        }
        list_1180.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replace_root_volume_task(input: &crate::input::CreateReplaceRootVolumeTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1182 = writer.prefix("InstanceId");
    if let Some(var_1183) = &input.instance_id {
        scope_1182.string(var_1183);
    }
    #[allow(unused_mut)]
    let mut scope_1184 = writer.prefix("SnapshotId");
    if let Some(var_1185) = &input.snapshot_id {
        scope_1184.string(var_1185);
    }
    #[allow(unused_mut)]
    let mut scope_1186 = writer.prefix("ClientToken");
    if let Some(var_1187) = &input.client_token {
        scope_1186.string(var_1187);
    }
    #[allow(unused_mut)]
    let mut scope_1188 = writer.prefix("DryRun");
    if let Some(var_1189) = &input.dry_run {
        scope_1188.boolean(*var_1189);
    }
    #[allow(unused_mut)]
    let mut scope_1190 = writer.prefix("TagSpecification");
    if let Some(var_1191) = &input.tag_specifications {
        let mut list_1193 = scope_1190.start_list(true, Some("item"));
        for item_1192 in var_1191 {
            #[allow(unused_mut)]
            let mut entry_1194 = list_1193.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1194, item_1192)?;
        }
        list_1193.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1195 = writer.prefix("ImageId");
    if let Some(var_1196) = &input.image_id {
        scope_1195.string(var_1196);
    }
    #[allow(unused_mut)]
    let mut scope_1197 = writer.prefix("DeleteReplacedRootVolume");
    if let Some(var_1198) = &input.delete_replaced_root_volume {
        scope_1197.boolean(*var_1198);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_reserved_instances_listing(input: &crate::input::CreateReservedInstancesListingInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateReservedInstancesListing", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1199 = writer.prefix("ClientToken");
    if let Some(var_1200) = &input.client_token {
        scope_1199.string(var_1200);
    }
    #[allow(unused_mut)]
    let mut scope_1201 = writer.prefix("InstanceCount");
    if let Some(var_1202) = &input.instance_count {
        scope_1201.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1202).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1203 = writer.prefix("PriceSchedules");
    if let Some(var_1204) = &input.price_schedules {
        let mut list_1206 = scope_1203.start_list(true, Some("item"));
        for item_1205 in var_1204 {
            #[allow(unused_mut)]
            let mut entry_1207 = list_1206.entry();
            crate::query_ser::serialize_structure_crate_model_price_schedule_specification(entry_1207, item_1205)?;
        }
        list_1206.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1208 = writer.prefix("ReservedInstancesId");
    if let Some(var_1209) = &input.reserved_instances_id {
        scope_1208.string(var_1209);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_restore_image_task(input: &crate::input::CreateRestoreImageTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("Bucket");
    if let Some(var_1211) = &input.bucket {
        scope_1210.string(var_1211);
    }
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("ObjectKey");
    if let Some(var_1213) = &input.object_key {
        scope_1212.string(var_1213);
    }
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("Name");
    if let Some(var_1215) = &input.name {
        scope_1214.string(var_1215);
    }
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("TagSpecification");
    if let Some(var_1217) = &input.tag_specifications {
        let mut list_1219 = scope_1216.start_list(true, Some("item"));
        for item_1218 in var_1217 {
            #[allow(unused_mut)]
            let mut entry_1220 = list_1219.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1220, item_1218)?;
        }
        list_1219.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1221 = writer.prefix("DryRun");
    if let Some(var_1222) = &input.dry_run {
        scope_1221.boolean(*var_1222);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route(input: &crate::input::CreateRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1223 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1224) = &input.destination_cidr_block {
        scope_1223.string(var_1224);
    }
    #[allow(unused_mut)]
    let mut scope_1225 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1226) = &input.destination_ipv6_cidr_block {
        scope_1225.string(var_1226);
    }
    #[allow(unused_mut)]
    let mut scope_1227 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1228) = &input.destination_prefix_list_id {
        scope_1227.string(var_1228);
    }
    #[allow(unused_mut)]
    let mut scope_1229 = writer.prefix("DryRun");
    if let Some(var_1230) = &input.dry_run {
        scope_1229.boolean(*var_1230);
    }
    #[allow(unused_mut)]
    let mut scope_1231 = writer.prefix("VpcEndpointId");
    if let Some(var_1232) = &input.vpc_endpoint_id {
        scope_1231.string(var_1232);
    }
    #[allow(unused_mut)]
    let mut scope_1233 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1234) = &input.egress_only_internet_gateway_id {
        scope_1233.string(var_1234);
    }
    #[allow(unused_mut)]
    let mut scope_1235 = writer.prefix("GatewayId");
    if let Some(var_1236) = &input.gateway_id {
        scope_1235.string(var_1236);
    }
    #[allow(unused_mut)]
    let mut scope_1237 = writer.prefix("InstanceId");
    if let Some(var_1238) = &input.instance_id {
        scope_1237.string(var_1238);
    }
    #[allow(unused_mut)]
    let mut scope_1239 = writer.prefix("NatGatewayId");
    if let Some(var_1240) = &input.nat_gateway_id {
        scope_1239.string(var_1240);
    }
    #[allow(unused_mut)]
    let mut scope_1241 = writer.prefix("TransitGatewayId");
    if let Some(var_1242) = &input.transit_gateway_id {
        scope_1241.string(var_1242);
    }
    #[allow(unused_mut)]
    let mut scope_1243 = writer.prefix("LocalGatewayId");
    if let Some(var_1244) = &input.local_gateway_id {
        scope_1243.string(var_1244);
    }
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("CarrierGatewayId");
    if let Some(var_1246) = &input.carrier_gateway_id {
        scope_1245.string(var_1246);
    }
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1248) = &input.network_interface_id {
        scope_1247.string(var_1248);
    }
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("RouteTableId");
    if let Some(var_1250) = &input.route_table_id {
        scope_1249.string(var_1250);
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1252) = &input.vpc_peering_connection_id {
        scope_1251.string(var_1252);
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("CoreNetworkArn");
    if let Some(var_1254) = &input.core_network_arn {
        scope_1253.string(var_1254);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route_table(input: &crate::input::CreateRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("DryRun");
    if let Some(var_1256) = &input.dry_run {
        scope_1255.boolean(*var_1256);
    }
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("VpcId");
    if let Some(var_1258) = &input.vpc_id {
        scope_1257.string(var_1258);
    }
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("TagSpecification");
    if let Some(var_1260) = &input.tag_specifications {
        let mut list_1262 = scope_1259.start_list(true, Some("item"));
        for item_1261 in var_1260 {
            #[allow(unused_mut)]
            let mut entry_1263 = list_1262.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1263, item_1261)?;
        }
        list_1262.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_security_group(input: &crate::input::CreateSecurityGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1264 = writer.prefix("GroupDescription");
    if let Some(var_1265) = &input.description {
        scope_1264.string(var_1265);
    }
    #[allow(unused_mut)]
    let mut scope_1266 = writer.prefix("GroupName");
    if let Some(var_1267) = &input.group_name {
        scope_1266.string(var_1267);
    }
    #[allow(unused_mut)]
    let mut scope_1268 = writer.prefix("VpcId");
    if let Some(var_1269) = &input.vpc_id {
        scope_1268.string(var_1269);
    }
    #[allow(unused_mut)]
    let mut scope_1270 = writer.prefix("TagSpecification");
    if let Some(var_1271) = &input.tag_specifications {
        let mut list_1273 = scope_1270.start_list(true, Some("item"));
        for item_1272 in var_1271 {
            #[allow(unused_mut)]
            let mut entry_1274 = list_1273.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1274, item_1272)?;
        }
        list_1273.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1275 = writer.prefix("DryRun");
    if let Some(var_1276) = &input.dry_run {
        scope_1275.boolean(*var_1276);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(input: &crate::input::CreateSnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1277 = writer.prefix("Description");
    if let Some(var_1278) = &input.description {
        scope_1277.string(var_1278);
    }
    #[allow(unused_mut)]
    let mut scope_1279 = writer.prefix("OutpostArn");
    if let Some(var_1280) = &input.outpost_arn {
        scope_1279.string(var_1280);
    }
    #[allow(unused_mut)]
    let mut scope_1281 = writer.prefix("VolumeId");
    if let Some(var_1282) = &input.volume_id {
        scope_1281.string(var_1282);
    }
    #[allow(unused_mut)]
    let mut scope_1283 = writer.prefix("TagSpecification");
    if let Some(var_1284) = &input.tag_specifications {
        let mut list_1286 = scope_1283.start_list(true, Some("item"));
        for item_1285 in var_1284 {
            #[allow(unused_mut)]
            let mut entry_1287 = list_1286.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1287, item_1285)?;
        }
        list_1286.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1288 = writer.prefix("DryRun");
    if let Some(var_1289) = &input.dry_run {
        scope_1288.boolean(*var_1289);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshots(input: &crate::input::CreateSnapshotsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1290 = writer.prefix("Description");
    if let Some(var_1291) = &input.description {
        scope_1290.string(var_1291);
    }
    #[allow(unused_mut)]
    let mut scope_1292 = writer.prefix("InstanceSpecification");
    if let Some(var_1293) = &input.instance_specification {
        crate::query_ser::serialize_structure_crate_model_instance_specification(scope_1292, var_1293)?;
    }
    #[allow(unused_mut)]
    let mut scope_1294 = writer.prefix("OutpostArn");
    if let Some(var_1295) = &input.outpost_arn {
        scope_1294.string(var_1295);
    }
    #[allow(unused_mut)]
    let mut scope_1296 = writer.prefix("TagSpecification");
    if let Some(var_1297) = &input.tag_specifications {
        let mut list_1299 = scope_1296.start_list(true, Some("item"));
        for item_1298 in var_1297 {
            #[allow(unused_mut)]
            let mut entry_1300 = list_1299.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1300, item_1298)?;
        }
        list_1299.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("DryRun");
    if let Some(var_1302) = &input.dry_run {
        scope_1301.boolean(*var_1302);
    }
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("CopyTagsFromSource");
    if let Some(var_1304) = &input.copy_tags_from_source {
        scope_1303.string(var_1304.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_spot_datafeed_subscription(input: &crate::input::CreateSpotDatafeedSubscriptionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("Bucket");
    if let Some(var_1306) = &input.bucket {
        scope_1305.string(var_1306);
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("DryRun");
    if let Some(var_1308) = &input.dry_run {
        scope_1307.boolean(*var_1308);
    }
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("Prefix");
    if let Some(var_1310) = &input.prefix {
        scope_1309.string(var_1310);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_store_image_task(input: &crate::input::CreateStoreImageTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("ImageId");
    if let Some(var_1312) = &input.image_id {
        scope_1311.string(var_1312);
    }
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("Bucket");
    if let Some(var_1314) = &input.bucket {
        scope_1313.string(var_1314);
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("S3ObjectTag");
    if let Some(var_1316) = &input.s3_object_tags {
        let mut list_1318 = scope_1315.start_list(true, Some("item"));
        for item_1317 in var_1316 {
            #[allow(unused_mut)]
            let mut entry_1319 = list_1318.entry();
            crate::query_ser::serialize_structure_crate_model_s3_object_tag(entry_1319, item_1317)?;
        }
        list_1318.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1320 = writer.prefix("DryRun");
    if let Some(var_1321) = &input.dry_run {
        scope_1320.boolean(*var_1321);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet(input: &crate::input::CreateSubnetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1322 = writer.prefix("TagSpecification");
    if let Some(var_1323) = &input.tag_specifications {
        let mut list_1325 = scope_1322.start_list(true, Some("item"));
        for item_1324 in var_1323 {
            #[allow(unused_mut)]
            let mut entry_1326 = list_1325.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1326, item_1324)?;
        }
        list_1325.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("AvailabilityZone");
    if let Some(var_1328) = &input.availability_zone {
        scope_1327.string(var_1328);
    }
    #[allow(unused_mut)]
    let mut scope_1329 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1330) = &input.availability_zone_id {
        scope_1329.string(var_1330);
    }
    #[allow(unused_mut)]
    let mut scope_1331 = writer.prefix("CidrBlock");
    if let Some(var_1332) = &input.cidr_block {
        scope_1331.string(var_1332);
    }
    #[allow(unused_mut)]
    let mut scope_1333 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1334) = &input.ipv6_cidr_block {
        scope_1333.string(var_1334);
    }
    #[allow(unused_mut)]
    let mut scope_1335 = writer.prefix("OutpostArn");
    if let Some(var_1336) = &input.outpost_arn {
        scope_1335.string(var_1336);
    }
    #[allow(unused_mut)]
    let mut scope_1337 = writer.prefix("VpcId");
    if let Some(var_1338) = &input.vpc_id {
        scope_1337.string(var_1338);
    }
    #[allow(unused_mut)]
    let mut scope_1339 = writer.prefix("DryRun");
    if let Some(var_1340) = &input.dry_run {
        scope_1339.boolean(*var_1340);
    }
    #[allow(unused_mut)]
    let mut scope_1341 = writer.prefix("Ipv6Native");
    if let Some(var_1342) = &input.ipv6_native {
        scope_1341.boolean(*var_1342);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet_cidr_reservation(input: &crate::input::CreateSubnetCidrReservationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1343 = writer.prefix("SubnetId");
    if let Some(var_1344) = &input.subnet_id {
        scope_1343.string(var_1344);
    }
    #[allow(unused_mut)]
    let mut scope_1345 = writer.prefix("Cidr");
    if let Some(var_1346) = &input.cidr {
        scope_1345.string(var_1346);
    }
    #[allow(unused_mut)]
    let mut scope_1347 = writer.prefix("ReservationType");
    if let Some(var_1348) = &input.reservation_type {
        scope_1347.string(var_1348.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1349 = writer.prefix("Description");
    if let Some(var_1350) = &input.description {
        scope_1349.string(var_1350);
    }
    #[allow(unused_mut)]
    let mut scope_1351 = writer.prefix("DryRun");
    if let Some(var_1352) = &input.dry_run {
        scope_1351.boolean(*var_1352);
    }
    #[allow(unused_mut)]
    let mut scope_1353 = writer.prefix("TagSpecification");
    if let Some(var_1354) = &input.tag_specifications {
        let mut list_1356 = scope_1353.start_list(true, Some("item"));
        for item_1355 in var_1354 {
            #[allow(unused_mut)]
            let mut entry_1357 = list_1356.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1357, item_1355)?;
        }
        list_1356.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(input: &crate::input::CreateTagsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1358 = writer.prefix("DryRun");
    if let Some(var_1359) = &input.dry_run {
        scope_1358.boolean(*var_1359);
    }
    #[allow(unused_mut)]
    let mut scope_1360 = writer.prefix("ResourceId");
    if let Some(var_1361) = &input.resources {
        let mut list_1363 = scope_1360.start_list(true, None);
        for item_1362 in var_1361 {
            #[allow(unused_mut)]
            let mut entry_1364 = list_1363.entry();
            entry_1364.string(item_1362);
        }
        list_1363.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1365 = writer.prefix("Tag");
    if let Some(var_1366) = &input.tags {
        let mut list_1368 = scope_1365.start_list(true, Some("item"));
        for item_1367 in var_1366 {
            #[allow(unused_mut)]
            let mut entry_1369 = list_1368.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1369, item_1367)?;
        }
        list_1368.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter(input: &crate::input::CreateTrafficMirrorFilterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1370 = writer.prefix("Description");
    if let Some(var_1371) = &input.description {
        scope_1370.string(var_1371);
    }
    #[allow(unused_mut)]
    let mut scope_1372 = writer.prefix("TagSpecification");
    if let Some(var_1373) = &input.tag_specifications {
        let mut list_1375 = scope_1372.start_list(true, Some("item"));
        for item_1374 in var_1373 {
            #[allow(unused_mut)]
            let mut entry_1376 = list_1375.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1376, item_1374)?;
        }
        list_1375.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1377 = writer.prefix("DryRun");
    if let Some(var_1378) = &input.dry_run {
        scope_1377.boolean(*var_1378);
    }
    #[allow(unused_mut)]
    let mut scope_1379 = writer.prefix("ClientToken");
    if let Some(var_1380) = &input.client_token {
        scope_1379.string(var_1380);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter_rule(input: &crate::input::CreateTrafficMirrorFilterRuleInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1381 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1382) = &input.traffic_mirror_filter_id {
        scope_1381.string(var_1382);
    }
    #[allow(unused_mut)]
    let mut scope_1383 = writer.prefix("TrafficDirection");
    if let Some(var_1384) = &input.traffic_direction {
        scope_1383.string(var_1384.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1385 = writer.prefix("RuleNumber");
    if let Some(var_1386) = &input.rule_number {
        scope_1385.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1386).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1387 = writer.prefix("RuleAction");
    if let Some(var_1388) = &input.rule_action {
        scope_1387.string(var_1388.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1389 = writer.prefix("DestinationPortRange");
    if let Some(var_1390) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(scope_1389, var_1390)?;
    }
    #[allow(unused_mut)]
    let mut scope_1391 = writer.prefix("SourcePortRange");
    if let Some(var_1392) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(scope_1391, var_1392)?;
    }
    #[allow(unused_mut)]
    let mut scope_1393 = writer.prefix("Protocol");
    if let Some(var_1394) = &input.protocol {
        scope_1393.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1394).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1395 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1396) = &input.destination_cidr_block {
        scope_1395.string(var_1396);
    }
    #[allow(unused_mut)]
    let mut scope_1397 = writer.prefix("SourceCidrBlock");
    if let Some(var_1398) = &input.source_cidr_block {
        scope_1397.string(var_1398);
    }
    #[allow(unused_mut)]
    let mut scope_1399 = writer.prefix("Description");
    if let Some(var_1400) = &input.description {
        scope_1399.string(var_1400);
    }
    #[allow(unused_mut)]
    let mut scope_1401 = writer.prefix("DryRun");
    if let Some(var_1402) = &input.dry_run {
        scope_1401.boolean(*var_1402);
    }
    #[allow(unused_mut)]
    let mut scope_1403 = writer.prefix("ClientToken");
    if let Some(var_1404) = &input.client_token {
        scope_1403.string(var_1404);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_session(input: &crate::input::CreateTrafficMirrorSessionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1405 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1406) = &input.network_interface_id {
        scope_1405.string(var_1406);
    }
    #[allow(unused_mut)]
    let mut scope_1407 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1408) = &input.traffic_mirror_target_id {
        scope_1407.string(var_1408);
    }
    #[allow(unused_mut)]
    let mut scope_1409 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1410) = &input.traffic_mirror_filter_id {
        scope_1409.string(var_1410);
    }
    #[allow(unused_mut)]
    let mut scope_1411 = writer.prefix("PacketLength");
    if let Some(var_1412) = &input.packet_length {
        scope_1411.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1412).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1413 = writer.prefix("SessionNumber");
    if let Some(var_1414) = &input.session_number {
        scope_1413.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1414).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1415 = writer.prefix("VirtualNetworkId");
    if let Some(var_1416) = &input.virtual_network_id {
        scope_1415.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1416).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1417 = writer.prefix("Description");
    if let Some(var_1418) = &input.description {
        scope_1417.string(var_1418);
    }
    #[allow(unused_mut)]
    let mut scope_1419 = writer.prefix("TagSpecification");
    if let Some(var_1420) = &input.tag_specifications {
        let mut list_1422 = scope_1419.start_list(true, Some("item"));
        for item_1421 in var_1420 {
            #[allow(unused_mut)]
            let mut entry_1423 = list_1422.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1423, item_1421)?;
        }
        list_1422.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1424 = writer.prefix("DryRun");
    if let Some(var_1425) = &input.dry_run {
        scope_1424.boolean(*var_1425);
    }
    #[allow(unused_mut)]
    let mut scope_1426 = writer.prefix("ClientToken");
    if let Some(var_1427) = &input.client_token {
        scope_1426.string(var_1427);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_target(input: &crate::input::CreateTrafficMirrorTargetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1428 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1429) = &input.network_interface_id {
        scope_1428.string(var_1429);
    }
    #[allow(unused_mut)]
    let mut scope_1430 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1431) = &input.network_load_balancer_arn {
        scope_1430.string(var_1431);
    }
    #[allow(unused_mut)]
    let mut scope_1432 = writer.prefix("Description");
    if let Some(var_1433) = &input.description {
        scope_1432.string(var_1433);
    }
    #[allow(unused_mut)]
    let mut scope_1434 = writer.prefix("TagSpecification");
    if let Some(var_1435) = &input.tag_specifications {
        let mut list_1437 = scope_1434.start_list(true, Some("item"));
        for item_1436 in var_1435 {
            #[allow(unused_mut)]
            let mut entry_1438 = list_1437.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1438, item_1436)?;
        }
        list_1437.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1439 = writer.prefix("DryRun");
    if let Some(var_1440) = &input.dry_run {
        scope_1439.boolean(*var_1440);
    }
    #[allow(unused_mut)]
    let mut scope_1441 = writer.prefix("ClientToken");
    if let Some(var_1442) = &input.client_token {
        scope_1441.string(var_1442);
    }
    #[allow(unused_mut)]
    let mut scope_1443 = writer.prefix("GatewayLoadBalancerEndpointId");
    if let Some(var_1444) = &input.gateway_load_balancer_endpoint_id {
        scope_1443.string(var_1444);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway(input: &crate::input::CreateTransitGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1445 = writer.prefix("Description");
    if let Some(var_1446) = &input.description {
        scope_1445.string(var_1446);
    }
    #[allow(unused_mut)]
    let mut scope_1447 = writer.prefix("Options");
    if let Some(var_1448) = &input.options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_request_options(scope_1447, var_1448)?;
    }
    #[allow(unused_mut)]
    let mut scope_1449 = writer.prefix("TagSpecification");
    if let Some(var_1450) = &input.tag_specifications {
        let mut list_1452 = scope_1449.start_list(true, Some("item"));
        for item_1451 in var_1450 {
            #[allow(unused_mut)]
            let mut entry_1453 = list_1452.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1453, item_1451)?;
        }
        list_1452.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1454 = writer.prefix("DryRun");
    if let Some(var_1455) = &input.dry_run {
        scope_1454.boolean(*var_1455);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect(input: &crate::input::CreateTransitGatewayConnectInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1456 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1457) = &input.transport_transit_gateway_attachment_id {
        scope_1456.string(var_1457);
    }
    #[allow(unused_mut)]
    let mut scope_1458 = writer.prefix("Options");
    if let Some(var_1459) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_connect_request_options(scope_1458, var_1459)?;
    }
    #[allow(unused_mut)]
    let mut scope_1460 = writer.prefix("TagSpecification");
    if let Some(var_1461) = &input.tag_specifications {
        let mut list_1463 = scope_1460.start_list(true, Some("item"));
        for item_1462 in var_1461 {
            #[allow(unused_mut)]
            let mut entry_1464 = list_1463.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1464, item_1462)?;
        }
        list_1463.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1465 = writer.prefix("DryRun");
    if let Some(var_1466) = &input.dry_run {
        scope_1465.boolean(*var_1466);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect_peer(input: &crate::input::CreateTransitGatewayConnectPeerInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnectPeer", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1467 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1468) = &input.transit_gateway_attachment_id {
        scope_1467.string(var_1468);
    }
    #[allow(unused_mut)]
    let mut scope_1469 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1470) = &input.transit_gateway_address {
        scope_1469.string(var_1470);
    }
    #[allow(unused_mut)]
    let mut scope_1471 = writer.prefix("PeerAddress");
    if let Some(var_1472) = &input.peer_address {
        scope_1471.string(var_1472);
    }
    #[allow(unused_mut)]
    let mut scope_1473 = writer.prefix("BgpOptions");
    if let Some(var_1474) = &input.bgp_options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(scope_1473, var_1474)?;
    }
    #[allow(unused_mut)]
    let mut scope_1475 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1476) = &input.inside_cidr_blocks {
        let mut list_1478 = scope_1475.start_list(true, Some("item"));
        for item_1477 in var_1476 {
            #[allow(unused_mut)]
            let mut entry_1479 = list_1478.entry();
            entry_1479.string(item_1477);
        }
        list_1478.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("TagSpecification");
    if let Some(var_1481) = &input.tag_specifications {
        let mut list_1483 = scope_1480.start_list(true, Some("item"));
        for item_1482 in var_1481 {
            #[allow(unused_mut)]
            let mut entry_1484 = list_1483.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1484, item_1482)?;
        }
        list_1483.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1485 = writer.prefix("DryRun");
    if let Some(var_1486) = &input.dry_run {
        scope_1485.boolean(*var_1486);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_multicast_domain(input: &crate::input::CreateTransitGatewayMulticastDomainInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayMulticastDomain", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1487 = writer.prefix("TransitGatewayId");
    if let Some(var_1488) = &input.transit_gateway_id {
        scope_1487.string(var_1488);
    }
    #[allow(unused_mut)]
    let mut scope_1489 = writer.prefix("Options");
    if let Some(var_1490) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(scope_1489, var_1490)?;
    }
    #[allow(unused_mut)]
    let mut scope_1491 = writer.prefix("TagSpecification");
    if let Some(var_1492) = &input.tag_specifications {
        let mut list_1494 = scope_1491.start_list(true, Some("item"));
        for item_1493 in var_1492 {
            #[allow(unused_mut)]
            let mut entry_1495 = list_1494.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1495, item_1493)?;
        }
        list_1494.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1496 = writer.prefix("DryRun");
    if let Some(var_1497) = &input.dry_run {
        scope_1496.boolean(*var_1497);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_peering_attachment(input: &crate::input::CreateTransitGatewayPeeringAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayPeeringAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1498 = writer.prefix("TransitGatewayId");
    if let Some(var_1499) = &input.transit_gateway_id {
        scope_1498.string(var_1499);
    }
    #[allow(unused_mut)]
    let mut scope_1500 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1501) = &input.peer_transit_gateway_id {
        scope_1500.string(var_1501);
    }
    #[allow(unused_mut)]
    let mut scope_1502 = writer.prefix("PeerAccountId");
    if let Some(var_1503) = &input.peer_account_id {
        scope_1502.string(var_1503);
    }
    #[allow(unused_mut)]
    let mut scope_1504 = writer.prefix("PeerRegion");
    if let Some(var_1505) = &input.peer_region {
        scope_1504.string(var_1505);
    }
    #[allow(unused_mut)]
    let mut scope_1506 = writer.prefix("Options");
    if let Some(var_1507) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_peering_attachment_request_options(scope_1506, var_1507)?;
    }
    #[allow(unused_mut)]
    let mut scope_1508 = writer.prefix("TagSpecification");
    if let Some(var_1509) = &input.tag_specifications {
        let mut list_1511 = scope_1508.start_list(true, Some("item"));
        for item_1510 in var_1509 {
            #[allow(unused_mut)]
            let mut entry_1512 = list_1511.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1512, item_1510)?;
        }
        list_1511.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1513 = writer.prefix("DryRun");
    if let Some(var_1514) = &input.dry_run {
        scope_1513.boolean(*var_1514);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_policy_table(input: &crate::input::CreateTransitGatewayPolicyTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayPolicyTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1515 = writer.prefix("TransitGatewayId");
    if let Some(var_1516) = &input.transit_gateway_id {
        scope_1515.string(var_1516);
    }
    #[allow(unused_mut)]
    let mut scope_1517 = writer.prefix("TagSpecifications");
    if let Some(var_1518) = &input.tag_specifications {
        let mut list_1520 = scope_1517.start_list(true, Some("item"));
        for item_1519 in var_1518 {
            #[allow(unused_mut)]
            let mut entry_1521 = list_1520.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1521, item_1519)?;
        }
        list_1520.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1522 = writer.prefix("DryRun");
    if let Some(var_1523) = &input.dry_run {
        scope_1522.boolean(*var_1523);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_prefix_list_reference(input: &crate::input::CreateTransitGatewayPrefixListReferenceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayPrefixListReference", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1524 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1525) = &input.transit_gateway_route_table_id {
        scope_1524.string(var_1525);
    }
    #[allow(unused_mut)]
    let mut scope_1526 = writer.prefix("PrefixListId");
    if let Some(var_1527) = &input.prefix_list_id {
        scope_1526.string(var_1527);
    }
    #[allow(unused_mut)]
    let mut scope_1528 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1529) = &input.transit_gateway_attachment_id {
        scope_1528.string(var_1529);
    }
    #[allow(unused_mut)]
    let mut scope_1530 = writer.prefix("Blackhole");
    if let Some(var_1531) = &input.blackhole {
        scope_1530.boolean(*var_1531);
    }
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("DryRun");
    if let Some(var_1533) = &input.dry_run {
        scope_1532.boolean(*var_1533);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route(input: &crate::input::CreateTransitGatewayRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1534 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1535) = &input.destination_cidr_block {
        scope_1534.string(var_1535);
    }
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1537) = &input.transit_gateway_route_table_id {
        scope_1536.string(var_1537);
    }
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1539) = &input.transit_gateway_attachment_id {
        scope_1538.string(var_1539);
    }
    #[allow(unused_mut)]
    let mut scope_1540 = writer.prefix("Blackhole");
    if let Some(var_1541) = &input.blackhole {
        scope_1540.boolean(*var_1541);
    }
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("DryRun");
    if let Some(var_1543) = &input.dry_run {
        scope_1542.boolean(*var_1543);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table(input: &crate::input::CreateTransitGatewayRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1544 = writer.prefix("TransitGatewayId");
    if let Some(var_1545) = &input.transit_gateway_id {
        scope_1544.string(var_1545);
    }
    #[allow(unused_mut)]
    let mut scope_1546 = writer.prefix("TagSpecifications");
    if let Some(var_1547) = &input.tag_specifications {
        let mut list_1549 = scope_1546.start_list(true, Some("item"));
        for item_1548 in var_1547 {
            #[allow(unused_mut)]
            let mut entry_1550 = list_1549.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1550, item_1548)?;
        }
        list_1549.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1551 = writer.prefix("DryRun");
    if let Some(var_1552) = &input.dry_run {
        scope_1551.boolean(*var_1552);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table_announcement(input: &crate::input::CreateTransitGatewayRouteTableAnnouncementInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRouteTableAnnouncement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1553 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1554) = &input.transit_gateway_route_table_id {
        scope_1553.string(var_1554);
    }
    #[allow(unused_mut)]
    let mut scope_1555 = writer.prefix("PeeringAttachmentId");
    if let Some(var_1556) = &input.peering_attachment_id {
        scope_1555.string(var_1556);
    }
    #[allow(unused_mut)]
    let mut scope_1557 = writer.prefix("TagSpecification");
    if let Some(var_1558) = &input.tag_specifications {
        let mut list_1560 = scope_1557.start_list(true, Some("item"));
        for item_1559 in var_1558 {
            #[allow(unused_mut)]
            let mut entry_1561 = list_1560.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1561, item_1559)?;
        }
        list_1560.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1562 = writer.prefix("DryRun");
    if let Some(var_1563) = &input.dry_run {
        scope_1562.boolean(*var_1563);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_vpc_attachment(input: &crate::input::CreateTransitGatewayVpcAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1564 = writer.prefix("TransitGatewayId");
    if let Some(var_1565) = &input.transit_gateway_id {
        scope_1564.string(var_1565);
    }
    #[allow(unused_mut)]
    let mut scope_1566 = writer.prefix("VpcId");
    if let Some(var_1567) = &input.vpc_id {
        scope_1566.string(var_1567);
    }
    #[allow(unused_mut)]
    let mut scope_1568 = writer.prefix("SubnetIds");
    if let Some(var_1569) = &input.subnet_ids {
        let mut list_1571 = scope_1568.start_list(true, Some("item"));
        for item_1570 in var_1569 {
            #[allow(unused_mut)]
            let mut entry_1572 = list_1571.entry();
            entry_1572.string(item_1570);
        }
        list_1571.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1573 = writer.prefix("Options");
    if let Some(var_1574) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(scope_1573, var_1574)?;
    }
    #[allow(unused_mut)]
    let mut scope_1575 = writer.prefix("TagSpecifications");
    if let Some(var_1576) = &input.tag_specifications {
        let mut list_1578 = scope_1575.start_list(true, Some("item"));
        for item_1577 in var_1576 {
            #[allow(unused_mut)]
            let mut entry_1579 = list_1578.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1579, item_1577)?;
        }
        list_1578.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1580 = writer.prefix("DryRun");
    if let Some(var_1581) = &input.dry_run {
        scope_1580.boolean(*var_1581);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_verified_access_endpoint(input: &crate::input::CreateVerifiedAccessEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVerifiedAccessEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1582 = writer.prefix("VerifiedAccessGroupId");
    if let Some(var_1583) = &input.verified_access_group_id {
        scope_1582.string(var_1583);
    }
    #[allow(unused_mut)]
    let mut scope_1584 = writer.prefix("EndpointType");
    if let Some(var_1585) = &input.endpoint_type {
        scope_1584.string(var_1585.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1586 = writer.prefix("AttachmentType");
    if let Some(var_1587) = &input.attachment_type {
        scope_1586.string(var_1587.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1588 = writer.prefix("DomainCertificateArn");
    if let Some(var_1589) = &input.domain_certificate_arn {
        scope_1588.string(var_1589);
    }
    #[allow(unused_mut)]
    let mut scope_1590 = writer.prefix("ApplicationDomain");
    if let Some(var_1591) = &input.application_domain {
        scope_1590.string(var_1591);
    }
    #[allow(unused_mut)]
    let mut scope_1592 = writer.prefix("EndpointDomainPrefix");
    if let Some(var_1593) = &input.endpoint_domain_prefix {
        scope_1592.string(var_1593);
    }
    #[allow(unused_mut)]
    let mut scope_1594 = writer.prefix("SecurityGroupId");
    if let Some(var_1595) = &input.security_group_ids {
        let mut list_1597 = scope_1594.start_list(true, Some("item"));
        for item_1596 in var_1595 {
            #[allow(unused_mut)]
            let mut entry_1598 = list_1597.entry();
            entry_1598.string(item_1596);
        }
        list_1597.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1599 = writer.prefix("LoadBalancerOptions");
    if let Some(var_1600) = &input.load_balancer_options {
        crate::query_ser::serialize_structure_crate_model_create_verified_access_endpoint_load_balancer_options(scope_1599, var_1600)?;
    }
    #[allow(unused_mut)]
    let mut scope_1601 = writer.prefix("NetworkInterfaceOptions");
    if let Some(var_1602) = &input.network_interface_options {
        crate::query_ser::serialize_structure_crate_model_create_verified_access_endpoint_eni_options(scope_1601, var_1602)?;
    }
    #[allow(unused_mut)]
    let mut scope_1603 = writer.prefix("Description");
    if let Some(var_1604) = &input.description {
        scope_1603.string(var_1604);
    }
    #[allow(unused_mut)]
    let mut scope_1605 = writer.prefix("PolicyDocument");
    if let Some(var_1606) = &input.policy_document {
        scope_1605.string(var_1606);
    }
    #[allow(unused_mut)]
    let mut scope_1607 = writer.prefix("TagSpecification");
    if let Some(var_1608) = &input.tag_specifications {
        let mut list_1610 = scope_1607.start_list(true, Some("item"));
        for item_1609 in var_1608 {
            #[allow(unused_mut)]
            let mut entry_1611 = list_1610.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1611, item_1609)?;
        }
        list_1610.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1612 = writer.prefix("ClientToken");
    if let Some(var_1613) = &input.client_token {
        scope_1612.string(var_1613);
    }
    #[allow(unused_mut)]
    let mut scope_1614 = writer.prefix("DryRun");
    if let Some(var_1615) = &input.dry_run {
        scope_1614.boolean(*var_1615);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_verified_access_group(input: &crate::input::CreateVerifiedAccessGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVerifiedAccessGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1616 = writer.prefix("VerifiedAccessInstanceId");
    if let Some(var_1617) = &input.verified_access_instance_id {
        scope_1616.string(var_1617);
    }
    #[allow(unused_mut)]
    let mut scope_1618 = writer.prefix("Description");
    if let Some(var_1619) = &input.description {
        scope_1618.string(var_1619);
    }
    #[allow(unused_mut)]
    let mut scope_1620 = writer.prefix("PolicyDocument");
    if let Some(var_1621) = &input.policy_document {
        scope_1620.string(var_1621);
    }
    #[allow(unused_mut)]
    let mut scope_1622 = writer.prefix("TagSpecification");
    if let Some(var_1623) = &input.tag_specifications {
        let mut list_1625 = scope_1622.start_list(true, Some("item"));
        for item_1624 in var_1623 {
            #[allow(unused_mut)]
            let mut entry_1626 = list_1625.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1626, item_1624)?;
        }
        list_1625.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1627 = writer.prefix("ClientToken");
    if let Some(var_1628) = &input.client_token {
        scope_1627.string(var_1628);
    }
    #[allow(unused_mut)]
    let mut scope_1629 = writer.prefix("DryRun");
    if let Some(var_1630) = &input.dry_run {
        scope_1629.boolean(*var_1630);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_verified_access_instance(input: &crate::input::CreateVerifiedAccessInstanceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVerifiedAccessInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1631 = writer.prefix("Description");
    if let Some(var_1632) = &input.description {
        scope_1631.string(var_1632);
    }
    #[allow(unused_mut)]
    let mut scope_1633 = writer.prefix("TagSpecification");
    if let Some(var_1634) = &input.tag_specifications {
        let mut list_1636 = scope_1633.start_list(true, Some("item"));
        for item_1635 in var_1634 {
            #[allow(unused_mut)]
            let mut entry_1637 = list_1636.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1637, item_1635)?;
        }
        list_1636.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("ClientToken");
    if let Some(var_1639) = &input.client_token {
        scope_1638.string(var_1639);
    }
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("DryRun");
    if let Some(var_1641) = &input.dry_run {
        scope_1640.boolean(*var_1641);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_verified_access_trust_provider(input: &crate::input::CreateVerifiedAccessTrustProviderInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVerifiedAccessTrustProvider", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1642 = writer.prefix("TrustProviderType");
    if let Some(var_1643) = &input.trust_provider_type {
        scope_1642.string(var_1643.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1644 = writer.prefix("UserTrustProviderType");
    if let Some(var_1645) = &input.user_trust_provider_type {
        scope_1644.string(var_1645.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1646 = writer.prefix("DeviceTrustProviderType");
    if let Some(var_1647) = &input.device_trust_provider_type {
        scope_1646.string(var_1647.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1648 = writer.prefix("OidcOptions");
    if let Some(var_1649) = &input.oidc_options {
        crate::query_ser::serialize_structure_crate_model_create_verified_access_trust_provider_oidc_options(scope_1648, var_1649)?;
    }
    #[allow(unused_mut)]
    let mut scope_1650 = writer.prefix("DeviceOptions");
    if let Some(var_1651) = &input.device_options {
        crate::query_ser::serialize_structure_crate_model_create_verified_access_trust_provider_device_options(scope_1650, var_1651)?;
    }
    #[allow(unused_mut)]
    let mut scope_1652 = writer.prefix("PolicyReferenceName");
    if let Some(var_1653) = &input.policy_reference_name {
        scope_1652.string(var_1653);
    }
    #[allow(unused_mut)]
    let mut scope_1654 = writer.prefix("Description");
    if let Some(var_1655) = &input.description {
        scope_1654.string(var_1655);
    }
    #[allow(unused_mut)]
    let mut scope_1656 = writer.prefix("TagSpecification");
    if let Some(var_1657) = &input.tag_specifications {
        let mut list_1659 = scope_1656.start_list(true, Some("item"));
        for item_1658 in var_1657 {
            #[allow(unused_mut)]
            let mut entry_1660 = list_1659.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1660, item_1658)?;
        }
        list_1659.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1661 = writer.prefix("ClientToken");
    if let Some(var_1662) = &input.client_token {
        scope_1661.string(var_1662);
    }
    #[allow(unused_mut)]
    let mut scope_1663 = writer.prefix("DryRun");
    if let Some(var_1664) = &input.dry_run {
        scope_1663.boolean(*var_1664);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_volume(input: &crate::input::CreateVolumeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1665 = writer.prefix("AvailabilityZone");
    if let Some(var_1666) = &input.availability_zone {
        scope_1665.string(var_1666);
    }
    #[allow(unused_mut)]
    let mut scope_1667 = writer.prefix("Encrypted");
    if let Some(var_1668) = &input.encrypted {
        scope_1667.boolean(*var_1668);
    }
    #[allow(unused_mut)]
    let mut scope_1669 = writer.prefix("Iops");
    if let Some(var_1670) = &input.iops {
        scope_1669.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1670).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1671 = writer.prefix("KmsKeyId");
    if let Some(var_1672) = &input.kms_key_id {
        scope_1671.string(var_1672);
    }
    #[allow(unused_mut)]
    let mut scope_1673 = writer.prefix("OutpostArn");
    if let Some(var_1674) = &input.outpost_arn {
        scope_1673.string(var_1674);
    }
    #[allow(unused_mut)]
    let mut scope_1675 = writer.prefix("Size");
    if let Some(var_1676) = &input.size {
        scope_1675.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1676).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1677 = writer.prefix("SnapshotId");
    if let Some(var_1678) = &input.snapshot_id {
        scope_1677.string(var_1678);
    }
    #[allow(unused_mut)]
    let mut scope_1679 = writer.prefix("VolumeType");
    if let Some(var_1680) = &input.volume_type {
        scope_1679.string(var_1680.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1681 = writer.prefix("DryRun");
    if let Some(var_1682) = &input.dry_run {
        scope_1681.boolean(*var_1682);
    }
    #[allow(unused_mut)]
    let mut scope_1683 = writer.prefix("TagSpecification");
    if let Some(var_1684) = &input.tag_specifications {
        let mut list_1686 = scope_1683.start_list(true, Some("item"));
        for item_1685 in var_1684 {
            #[allow(unused_mut)]
            let mut entry_1687 = list_1686.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1687, item_1685)?;
        }
        list_1686.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1688 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1689) = &input.multi_attach_enabled {
        scope_1688.boolean(*var_1689);
    }
    #[allow(unused_mut)]
    let mut scope_1690 = writer.prefix("Throughput");
    if let Some(var_1691) = &input.throughput {
        scope_1690.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1691).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1692 = writer.prefix("ClientToken");
    if let Some(var_1693) = &input.client_token {
        scope_1692.string(var_1693);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc(input: &crate::input::CreateVpcInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1694 = writer.prefix("CidrBlock");
    if let Some(var_1695) = &input.cidr_block {
        scope_1694.string(var_1695);
    }
    #[allow(unused_mut)]
    let mut scope_1696 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1697) = &input.amazon_provided_ipv6_cidr_block {
        scope_1696.boolean(*var_1697);
    }
    #[allow(unused_mut)]
    let mut scope_1698 = writer.prefix("Ipv6Pool");
    if let Some(var_1699) = &input.ipv6_pool {
        scope_1698.string(var_1699);
    }
    #[allow(unused_mut)]
    let mut scope_1700 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1701) = &input.ipv6_cidr_block {
        scope_1700.string(var_1701);
    }
    #[allow(unused_mut)]
    let mut scope_1702 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_1703) = &input.ipv4_ipam_pool_id {
        scope_1702.string(var_1703);
    }
    #[allow(unused_mut)]
    let mut scope_1704 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_1705) = &input.ipv4_netmask_length {
        scope_1704.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1705).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1706 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_1707) = &input.ipv6_ipam_pool_id {
        scope_1706.string(var_1707);
    }
    #[allow(unused_mut)]
    let mut scope_1708 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_1709) = &input.ipv6_netmask_length {
        scope_1708.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1709).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1710 = writer.prefix("DryRun");
    if let Some(var_1711) = &input.dry_run {
        scope_1710.boolean(*var_1711);
    }
    #[allow(unused_mut)]
    let mut scope_1712 = writer.prefix("InstanceTenancy");
    if let Some(var_1713) = &input.instance_tenancy {
        scope_1712.string(var_1713.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1714 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1715) = &input.ipv6_cidr_block_network_border_group {
        scope_1714.string(var_1715);
    }
    #[allow(unused_mut)]
    let mut scope_1716 = writer.prefix("TagSpecification");
    if let Some(var_1717) = &input.tag_specifications {
        let mut list_1719 = scope_1716.start_list(true, Some("item"));
        for item_1718 in var_1717 {
            #[allow(unused_mut)]
            let mut entry_1720 = list_1719.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1720, item_1718)?;
        }
        list_1719.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint(input: &crate::input::CreateVpcEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1721 = writer.prefix("DryRun");
    if let Some(var_1722) = &input.dry_run {
        scope_1721.boolean(*var_1722);
    }
    #[allow(unused_mut)]
    let mut scope_1723 = writer.prefix("VpcEndpointType");
    if let Some(var_1724) = &input.vpc_endpoint_type {
        scope_1723.string(var_1724.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1725 = writer.prefix("VpcId");
    if let Some(var_1726) = &input.vpc_id {
        scope_1725.string(var_1726);
    }
    #[allow(unused_mut)]
    let mut scope_1727 = writer.prefix("ServiceName");
    if let Some(var_1728) = &input.service_name {
        scope_1727.string(var_1728);
    }
    #[allow(unused_mut)]
    let mut scope_1729 = writer.prefix("PolicyDocument");
    if let Some(var_1730) = &input.policy_document {
        scope_1729.string(var_1730);
    }
    #[allow(unused_mut)]
    let mut scope_1731 = writer.prefix("RouteTableId");
    if let Some(var_1732) = &input.route_table_ids {
        let mut list_1734 = scope_1731.start_list(true, Some("item"));
        for item_1733 in var_1732 {
            #[allow(unused_mut)]
            let mut entry_1735 = list_1734.entry();
            entry_1735.string(item_1733);
        }
        list_1734.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1736 = writer.prefix("SubnetId");
    if let Some(var_1737) = &input.subnet_ids {
        let mut list_1739 = scope_1736.start_list(true, Some("item"));
        for item_1738 in var_1737 {
            #[allow(unused_mut)]
            let mut entry_1740 = list_1739.entry();
            entry_1740.string(item_1738);
        }
        list_1739.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1741 = writer.prefix("SecurityGroupId");
    if let Some(var_1742) = &input.security_group_ids {
        let mut list_1744 = scope_1741.start_list(true, Some("item"));
        for item_1743 in var_1742 {
            #[allow(unused_mut)]
            let mut entry_1745 = list_1744.entry();
            entry_1745.string(item_1743);
        }
        list_1744.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1746 = writer.prefix("IpAddressType");
    if let Some(var_1747) = &input.ip_address_type {
        scope_1746.string(var_1747.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1748 = writer.prefix("DnsOptions");
    if let Some(var_1749) = &input.dns_options {
        crate::query_ser::serialize_structure_crate_model_dns_options_specification(scope_1748, var_1749)?;
    }
    #[allow(unused_mut)]
    let mut scope_1750 = writer.prefix("ClientToken");
    if let Some(var_1751) = &input.client_token {
        scope_1750.string(var_1751);
    }
    #[allow(unused_mut)]
    let mut scope_1752 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1753) = &input.private_dns_enabled {
        scope_1752.boolean(*var_1753);
    }
    #[allow(unused_mut)]
    let mut scope_1754 = writer.prefix("TagSpecification");
    if let Some(var_1755) = &input.tag_specifications {
        let mut list_1757 = scope_1754.start_list(true, Some("item"));
        for item_1756 in var_1755 {
            #[allow(unused_mut)]
            let mut entry_1758 = list_1757.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1758, item_1756)?;
        }
        list_1757.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_connection_notification(input: &crate::input::CreateVpcEndpointConnectionNotificationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpointConnectionNotification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1759 = writer.prefix("DryRun");
    if let Some(var_1760) = &input.dry_run {
        scope_1759.boolean(*var_1760);
    }
    #[allow(unused_mut)]
    let mut scope_1761 = writer.prefix("ServiceId");
    if let Some(var_1762) = &input.service_id {
        scope_1761.string(var_1762);
    }
    #[allow(unused_mut)]
    let mut scope_1763 = writer.prefix("VpcEndpointId");
    if let Some(var_1764) = &input.vpc_endpoint_id {
        scope_1763.string(var_1764);
    }
    #[allow(unused_mut)]
    let mut scope_1765 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1766) = &input.connection_notification_arn {
        scope_1765.string(var_1766);
    }
    #[allow(unused_mut)]
    let mut scope_1767 = writer.prefix("ConnectionEvents");
    if let Some(var_1768) = &input.connection_events {
        let mut list_1770 = scope_1767.start_list(true, Some("item"));
        for item_1769 in var_1768 {
            #[allow(unused_mut)]
            let mut entry_1771 = list_1770.entry();
            entry_1771.string(item_1769);
        }
        list_1770.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1772 = writer.prefix("ClientToken");
    if let Some(var_1773) = &input.client_token {
        scope_1772.string(var_1773);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_service_configuration(input: &crate::input::CreateVpcEndpointServiceConfigurationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpointServiceConfiguration", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1774 = writer.prefix("DryRun");
    if let Some(var_1775) = &input.dry_run {
        scope_1774.boolean(*var_1775);
    }
    #[allow(unused_mut)]
    let mut scope_1776 = writer.prefix("AcceptanceRequired");
    if let Some(var_1777) = &input.acceptance_required {
        scope_1776.boolean(*var_1777);
    }
    #[allow(unused_mut)]
    let mut scope_1778 = writer.prefix("PrivateDnsName");
    if let Some(var_1779) = &input.private_dns_name {
        scope_1778.string(var_1779);
    }
    #[allow(unused_mut)]
    let mut scope_1780 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1781) = &input.network_load_balancer_arns {
        let mut list_1783 = scope_1780.start_list(true, Some("item"));
        for item_1782 in var_1781 {
            #[allow(unused_mut)]
            let mut entry_1784 = list_1783.entry();
            entry_1784.string(item_1782);
        }
        list_1783.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1785 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1786) = &input.gateway_load_balancer_arns {
        let mut list_1788 = scope_1785.start_list(true, Some("item"));
        for item_1787 in var_1786 {
            #[allow(unused_mut)]
            let mut entry_1789 = list_1788.entry();
            entry_1789.string(item_1787);
        }
        list_1788.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1790 = writer.prefix("SupportedIpAddressType");
    if let Some(var_1791) = &input.supported_ip_address_types {
        let mut list_1793 = scope_1790.start_list(true, Some("item"));
        for item_1792 in var_1791 {
            #[allow(unused_mut)]
            let mut entry_1794 = list_1793.entry();
            entry_1794.string(item_1792);
        }
        list_1793.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1795 = writer.prefix("ClientToken");
    if let Some(var_1796) = &input.client_token {
        scope_1795.string(var_1796);
    }
    #[allow(unused_mut)]
    let mut scope_1797 = writer.prefix("TagSpecification");
    if let Some(var_1798) = &input.tag_specifications {
        let mut list_1800 = scope_1797.start_list(true, Some("item"));
        for item_1799 in var_1798 {
            #[allow(unused_mut)]
            let mut entry_1801 = list_1800.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1801, item_1799)?;
        }
        list_1800.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_peering_connection(input: &crate::input::CreateVpcPeeringConnectionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1802 = writer.prefix("DryRun");
    if let Some(var_1803) = &input.dry_run {
        scope_1802.boolean(*var_1803);
    }
    #[allow(unused_mut)]
    let mut scope_1804 = writer.prefix("PeerOwnerId");
    if let Some(var_1805) = &input.peer_owner_id {
        scope_1804.string(var_1805);
    }
    #[allow(unused_mut)]
    let mut scope_1806 = writer.prefix("PeerVpcId");
    if let Some(var_1807) = &input.peer_vpc_id {
        scope_1806.string(var_1807);
    }
    #[allow(unused_mut)]
    let mut scope_1808 = writer.prefix("VpcId");
    if let Some(var_1809) = &input.vpc_id {
        scope_1808.string(var_1809);
    }
    #[allow(unused_mut)]
    let mut scope_1810 = writer.prefix("PeerRegion");
    if let Some(var_1811) = &input.peer_region {
        scope_1810.string(var_1811);
    }
    #[allow(unused_mut)]
    let mut scope_1812 = writer.prefix("TagSpecification");
    if let Some(var_1813) = &input.tag_specifications {
        let mut list_1815 = scope_1812.start_list(true, Some("item"));
        for item_1814 in var_1813 {
            #[allow(unused_mut)]
            let mut entry_1816 = list_1815.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1816, item_1814)?;
        }
        list_1815.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection(input: &crate::input::CreateVpnConnectionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1817 = writer.prefix("CustomerGatewayId");
    if let Some(var_1818) = &input.customer_gateway_id {
        scope_1817.string(var_1818);
    }
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("Type");
    if let Some(var_1820) = &input.r#type {
        scope_1819.string(var_1820);
    }
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("VpnGatewayId");
    if let Some(var_1822) = &input.vpn_gateway_id {
        scope_1821.string(var_1822);
    }
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("TransitGatewayId");
    if let Some(var_1824) = &input.transit_gateway_id {
        scope_1823.string(var_1824);
    }
    #[allow(unused_mut)]
    let mut scope_1825 = writer.prefix("DryRun");
    if let Some(var_1826) = &input.dry_run {
        scope_1825.boolean(*var_1826);
    }
    #[allow(unused_mut)]
    let mut scope_1827 = writer.prefix("Options");
    if let Some(var_1828) = &input.options {
        crate::query_ser::serialize_structure_crate_model_vpn_connection_options_specification(scope_1827, var_1828)?;
    }
    #[allow(unused_mut)]
    let mut scope_1829 = writer.prefix("TagSpecification");
    if let Some(var_1830) = &input.tag_specifications {
        let mut list_1832 = scope_1829.start_list(true, Some("item"));
        for item_1831 in var_1830 {
            #[allow(unused_mut)]
            let mut entry_1833 = list_1832.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1833, item_1831)?;
        }
        list_1832.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection_route(input: &crate::input::CreateVpnConnectionRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1834 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1835) = &input.destination_cidr_block {
        scope_1834.string(var_1835);
    }
    #[allow(unused_mut)]
    let mut scope_1836 = writer.prefix("VpnConnectionId");
    if let Some(var_1837) = &input.vpn_connection_id {
        scope_1836.string(var_1837);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_gateway(input: &crate::input::CreateVpnGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1838 = writer.prefix("AvailabilityZone");
    if let Some(var_1839) = &input.availability_zone {
        scope_1838.string(var_1839);
    }
    #[allow(unused_mut)]
    let mut scope_1840 = writer.prefix("Type");
    if let Some(var_1841) = &input.r#type {
        scope_1840.string(var_1841.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1842 = writer.prefix("TagSpecification");
    if let Some(var_1843) = &input.tag_specifications {
        let mut list_1845 = scope_1842.start_list(true, Some("item"));
        for item_1844 in var_1843 {
            #[allow(unused_mut)]
            let mut entry_1846 = list_1845.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1846, item_1844)?;
        }
        list_1845.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1847 = writer.prefix("AmazonSideAsn");
    if let Some(var_1848) = &input.amazon_side_asn {
        scope_1847.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1848).into()));
    }
    #[allow(unused_mut)]
    let mut scope_1849 = writer.prefix("DryRun");
    if let Some(var_1850) = &input.dry_run {
        scope_1849.boolean(*var_1850);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_carrier_gateway(input: &crate::input::DeleteCarrierGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1851 = writer.prefix("CarrierGatewayId");
    if let Some(var_1852) = &input.carrier_gateway_id {
        scope_1851.string(var_1852);
    }
    #[allow(unused_mut)]
    let mut scope_1853 = writer.prefix("DryRun");
    if let Some(var_1854) = &input.dry_run {
        scope_1853.boolean(*var_1854);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_endpoint(input: &crate::input::DeleteClientVpnEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1855 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1856) = &input.client_vpn_endpoint_id {
        scope_1855.string(var_1856);
    }
    #[allow(unused_mut)]
    let mut scope_1857 = writer.prefix("DryRun");
    if let Some(var_1858) = &input.dry_run {
        scope_1857.boolean(*var_1858);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_route(input: &crate::input::DeleteClientVpnRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1859 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1860) = &input.client_vpn_endpoint_id {
        scope_1859.string(var_1860);
    }
    #[allow(unused_mut)]
    let mut scope_1861 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1862) = &input.target_vpc_subnet_id {
        scope_1861.string(var_1862);
    }
    #[allow(unused_mut)]
    let mut scope_1863 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1864) = &input.destination_cidr_block {
        scope_1863.string(var_1864);
    }
    #[allow(unused_mut)]
    let mut scope_1865 = writer.prefix("DryRun");
    if let Some(var_1866) = &input.dry_run {
        scope_1865.boolean(*var_1866);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_coip_cidr(input: &crate::input::DeleteCoipCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1867 = writer.prefix("Cidr");
    if let Some(var_1868) = &input.cidr {
        scope_1867.string(var_1868);
    }
    #[allow(unused_mut)]
    let mut scope_1869 = writer.prefix("CoipPoolId");
    if let Some(var_1870) = &input.coip_pool_id {
        scope_1869.string(var_1870);
    }
    #[allow(unused_mut)]
    let mut scope_1871 = writer.prefix("DryRun");
    if let Some(var_1872) = &input.dry_run {
        scope_1871.boolean(*var_1872);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_coip_pool(input: &crate::input::DeleteCoipPoolInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCoipPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1873 = writer.prefix("CoipPoolId");
    if let Some(var_1874) = &input.coip_pool_id {
        scope_1873.string(var_1874);
    }
    #[allow(unused_mut)]
    let mut scope_1875 = writer.prefix("DryRun");
    if let Some(var_1876) = &input.dry_run {
        scope_1875.boolean(*var_1876);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_customer_gateway(input: &crate::input::DeleteCustomerGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1877 = writer.prefix("CustomerGatewayId");
    if let Some(var_1878) = &input.customer_gateway_id {
        scope_1877.string(var_1878);
    }
    #[allow(unused_mut)]
    let mut scope_1879 = writer.prefix("DryRun");
    if let Some(var_1880) = &input.dry_run {
        scope_1879.boolean(*var_1880);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_dhcp_options(input: &crate::input::DeleteDhcpOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1881 = writer.prefix("DhcpOptionsId");
    if let Some(var_1882) = &input.dhcp_options_id {
        scope_1881.string(var_1882);
    }
    #[allow(unused_mut)]
    let mut scope_1883 = writer.prefix("DryRun");
    if let Some(var_1884) = &input.dry_run {
        scope_1883.boolean(*var_1884);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_egress_only_internet_gateway(input: &crate::input::DeleteEgressOnlyInternetGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteEgressOnlyInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1885 = writer.prefix("DryRun");
    if let Some(var_1886) = &input.dry_run {
        scope_1885.boolean(*var_1886);
    }
    #[allow(unused_mut)]
    let mut scope_1887 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1888) = &input.egress_only_internet_gateway_id {
        scope_1887.string(var_1888);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fleets(input: &crate::input::DeleteFleetsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1889 = writer.prefix("DryRun");
    if let Some(var_1890) = &input.dry_run {
        scope_1889.boolean(*var_1890);
    }
    #[allow(unused_mut)]
    let mut scope_1891 = writer.prefix("FleetId");
    if let Some(var_1892) = &input.fleet_ids {
        let mut list_1894 = scope_1891.start_list(true, None);
        for item_1893 in var_1892 {
            #[allow(unused_mut)]
            let mut entry_1895 = list_1894.entry();
            entry_1895.string(item_1893);
        }
        list_1894.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1896 = writer.prefix("TerminateInstances");
    if let Some(var_1897) = &input.terminate_instances {
        scope_1896.boolean(*var_1897);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_flow_logs(input: &crate::input::DeleteFlowLogsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1898 = writer.prefix("DryRun");
    if let Some(var_1899) = &input.dry_run {
        scope_1898.boolean(*var_1899);
    }
    #[allow(unused_mut)]
    let mut scope_1900 = writer.prefix("FlowLogId");
    if let Some(var_1901) = &input.flow_log_ids {
        let mut list_1903 = scope_1900.start_list(true, Some("item"));
        for item_1902 in var_1901 {
            #[allow(unused_mut)]
            let mut entry_1904 = list_1903.entry();
            entry_1904.string(item_1902);
        }
        list_1903.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fpga_image(input: &crate::input::DeleteFpgaImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1905 = writer.prefix("DryRun");
    if let Some(var_1906) = &input.dry_run {
        scope_1905.boolean(*var_1906);
    }
    #[allow(unused_mut)]
    let mut scope_1907 = writer.prefix("FpgaImageId");
    if let Some(var_1908) = &input.fpga_image_id {
        scope_1907.string(var_1908);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_instance_event_window(input: &crate::input::DeleteInstanceEventWindowInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1909 = writer.prefix("DryRun");
    if let Some(var_1910) = &input.dry_run {
        scope_1909.boolean(*var_1910);
    }
    #[allow(unused_mut)]
    let mut scope_1911 = writer.prefix("ForceDelete");
    if let Some(var_1912) = &input.force_delete {
        scope_1911.boolean(*var_1912);
    }
    #[allow(unused_mut)]
    let mut scope_1913 = writer.prefix("InstanceEventWindowId");
    if let Some(var_1914) = &input.instance_event_window_id {
        scope_1913.string(var_1914);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_internet_gateway(input: &crate::input::DeleteInternetGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1915 = writer.prefix("DryRun");
    if let Some(var_1916) = &input.dry_run {
        scope_1915.boolean(*var_1916);
    }
    #[allow(unused_mut)]
    let mut scope_1917 = writer.prefix("InternetGatewayId");
    if let Some(var_1918) = &input.internet_gateway_id {
        scope_1917.string(var_1918);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam(input: &crate::input::DeleteIpamInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1919 = writer.prefix("DryRun");
    if let Some(var_1920) = &input.dry_run {
        scope_1919.boolean(*var_1920);
    }
    #[allow(unused_mut)]
    let mut scope_1921 = writer.prefix("IpamId");
    if let Some(var_1922) = &input.ipam_id {
        scope_1921.string(var_1922);
    }
    #[allow(unused_mut)]
    let mut scope_1923 = writer.prefix("Cascade");
    if let Some(var_1924) = &input.cascade {
        scope_1923.boolean(*var_1924);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_pool(input: &crate::input::DeleteIpamPoolInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1925 = writer.prefix("DryRun");
    if let Some(var_1926) = &input.dry_run {
        scope_1925.boolean(*var_1926);
    }
    #[allow(unused_mut)]
    let mut scope_1927 = writer.prefix("IpamPoolId");
    if let Some(var_1928) = &input.ipam_pool_id {
        scope_1927.string(var_1928);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_scope(input: &crate::input::DeleteIpamScopeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1929 = writer.prefix("DryRun");
    if let Some(var_1930) = &input.dry_run {
        scope_1929.boolean(*var_1930);
    }
    #[allow(unused_mut)]
    let mut scope_1931 = writer.prefix("IpamScopeId");
    if let Some(var_1932) = &input.ipam_scope_id {
        scope_1931.string(var_1932);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_key_pair(input: &crate::input::DeleteKeyPairInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1933 = writer.prefix("KeyName");
    if let Some(var_1934) = &input.key_name {
        scope_1933.string(var_1934);
    }
    #[allow(unused_mut)]
    let mut scope_1935 = writer.prefix("KeyPairId");
    if let Some(var_1936) = &input.key_pair_id {
        scope_1935.string(var_1936);
    }
    #[allow(unused_mut)]
    let mut scope_1937 = writer.prefix("DryRun");
    if let Some(var_1938) = &input.dry_run {
        scope_1937.boolean(*var_1938);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template(input: &crate::input::DeleteLaunchTemplateInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1939 = writer.prefix("DryRun");
    if let Some(var_1940) = &input.dry_run {
        scope_1939.boolean(*var_1940);
    }
    #[allow(unused_mut)]
    let mut scope_1941 = writer.prefix("LaunchTemplateId");
    if let Some(var_1942) = &input.launch_template_id {
        scope_1941.string(var_1942);
    }
    #[allow(unused_mut)]
    let mut scope_1943 = writer.prefix("LaunchTemplateName");
    if let Some(var_1944) = &input.launch_template_name {
        scope_1943.string(var_1944);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template_versions(input: &crate::input::DeleteLaunchTemplateVersionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1945 = writer.prefix("DryRun");
    if let Some(var_1946) = &input.dry_run {
        scope_1945.boolean(*var_1946);
    }
    #[allow(unused_mut)]
    let mut scope_1947 = writer.prefix("LaunchTemplateId");
    if let Some(var_1948) = &input.launch_template_id {
        scope_1947.string(var_1948);
    }
    #[allow(unused_mut)]
    let mut scope_1949 = writer.prefix("LaunchTemplateName");
    if let Some(var_1950) = &input.launch_template_name {
        scope_1949.string(var_1950);
    }
    #[allow(unused_mut)]
    let mut scope_1951 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1952) = &input.versions {
        let mut list_1954 = scope_1951.start_list(true, Some("item"));
        for item_1953 in var_1952 {
            #[allow(unused_mut)]
            let mut entry_1955 = list_1954.entry();
            entry_1955.string(item_1953);
        }
        list_1954.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route(input: &crate::input::DeleteLocalGatewayRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1956 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1957) = &input.destination_cidr_block {
        scope_1956.string(var_1957);
    }
    #[allow(unused_mut)]
    let mut scope_1958 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1959) = &input.local_gateway_route_table_id {
        scope_1958.string(var_1959);
    }
    #[allow(unused_mut)]
    let mut scope_1960 = writer.prefix("DryRun");
    if let Some(var_1961) = &input.dry_run {
        scope_1960.boolean(*var_1961);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table(input: &crate::input::DeleteLocalGatewayRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1962 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1963) = &input.local_gateway_route_table_id {
        scope_1962.string(var_1963);
    }
    #[allow(unused_mut)]
    let mut scope_1964 = writer.prefix("DryRun");
    if let Some(var_1965) = &input.dry_run {
        scope_1964.boolean(*var_1965);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_virtual_interface_group_association(input: &crate::input::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1966 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_1967) = &input.local_gateway_route_table_virtual_interface_group_association_id {
        scope_1966.string(var_1967);
    }
    #[allow(unused_mut)]
    let mut scope_1968 = writer.prefix("DryRun");
    if let Some(var_1969) = &input.dry_run {
        scope_1968.boolean(*var_1969);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_vpc_association(input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRouteTableVpcAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1970 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1971) = &input.local_gateway_route_table_vpc_association_id {
        scope_1970.string(var_1971);
    }
    #[allow(unused_mut)]
    let mut scope_1972 = writer.prefix("DryRun");
    if let Some(var_1973) = &input.dry_run {
        scope_1972.boolean(*var_1973);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_managed_prefix_list(input: &crate::input::DeleteManagedPrefixListInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1974 = writer.prefix("DryRun");
    if let Some(var_1975) = &input.dry_run {
        scope_1974.boolean(*var_1975);
    }
    #[allow(unused_mut)]
    let mut scope_1976 = writer.prefix("PrefixListId");
    if let Some(var_1977) = &input.prefix_list_id {
        scope_1976.string(var_1977);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_nat_gateway(input: &crate::input::DeleteNatGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1978 = writer.prefix("DryRun");
    if let Some(var_1979) = &input.dry_run {
        scope_1978.boolean(*var_1979);
    }
    #[allow(unused_mut)]
    let mut scope_1980 = writer.prefix("NatGatewayId");
    if let Some(var_1981) = &input.nat_gateway_id {
        scope_1980.string(var_1981);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl(input: &crate::input::DeleteNetworkAclInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1982 = writer.prefix("DryRun");
    if let Some(var_1983) = &input.dry_run {
        scope_1982.boolean(*var_1983);
    }
    #[allow(unused_mut)]
    let mut scope_1984 = writer.prefix("NetworkAclId");
    if let Some(var_1985) = &input.network_acl_id {
        scope_1984.string(var_1985);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl_entry(input: &crate::input::DeleteNetworkAclEntryInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1986 = writer.prefix("DryRun");
    if let Some(var_1987) = &input.dry_run {
        scope_1986.boolean(*var_1987);
    }
    #[allow(unused_mut)]
    let mut scope_1988 = writer.prefix("Egress");
    if let Some(var_1989) = &input.egress {
        scope_1988.boolean(*var_1989);
    }
    #[allow(unused_mut)]
    let mut scope_1990 = writer.prefix("NetworkAclId");
    if let Some(var_1991) = &input.network_acl_id {
        scope_1990.string(var_1991);
    }
    #[allow(unused_mut)]
    let mut scope_1992 = writer.prefix("RuleNumber");
    if let Some(var_1993) = &input.rule_number {
        scope_1992.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1993).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope(input: &crate::input::DeleteNetworkInsightsAccessScopeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAccessScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1994 = writer.prefix("DryRun");
    if let Some(var_1995) = &input.dry_run {
        scope_1994.boolean(*var_1995);
    }
    #[allow(unused_mut)]
    let mut scope_1996 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_1997) = &input.network_insights_access_scope_id {
        scope_1996.string(var_1997);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope_analysis(input: &crate::input::DeleteNetworkInsightsAccessScopeAnalysisInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAccessScopeAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1998 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_1999) = &input.network_insights_access_scope_analysis_id {
        scope_1998.string(var_1999);
    }
    #[allow(unused_mut)]
    let mut scope_2000 = writer.prefix("DryRun");
    if let Some(var_2001) = &input.dry_run {
        scope_2000.boolean(*var_2001);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_analysis(input: &crate::input::DeleteNetworkInsightsAnalysisInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2002 = writer.prefix("DryRun");
    if let Some(var_2003) = &input.dry_run {
        scope_2002.boolean(*var_2003);
    }
    #[allow(unused_mut)]
    let mut scope_2004 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_2005) = &input.network_insights_analysis_id {
        scope_2004.string(var_2005);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_path(input: &crate::input::DeleteNetworkInsightsPathInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2006 = writer.prefix("DryRun");
    if let Some(var_2007) = &input.dry_run {
        scope_2006.boolean(*var_2007);
    }
    #[allow(unused_mut)]
    let mut scope_2008 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_2009) = &input.network_insights_path_id {
        scope_2008.string(var_2009);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface(input: &crate::input::DeleteNetworkInterfaceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2010 = writer.prefix("DryRun");
    if let Some(var_2011) = &input.dry_run {
        scope_2010.boolean(*var_2011);
    }
    #[allow(unused_mut)]
    let mut scope_2012 = writer.prefix("NetworkInterfaceId");
    if let Some(var_2013) = &input.network_interface_id {
        scope_2012.string(var_2013);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface_permission(input: &crate::input::DeleteNetworkInterfacePermissionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterfacePermission", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2014 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_2015) = &input.network_interface_permission_id {
        scope_2014.string(var_2015);
    }
    #[allow(unused_mut)]
    let mut scope_2016 = writer.prefix("Force");
    if let Some(var_2017) = &input.force {
        scope_2016.boolean(*var_2017);
    }
    #[allow(unused_mut)]
    let mut scope_2018 = writer.prefix("DryRun");
    if let Some(var_2019) = &input.dry_run {
        scope_2018.boolean(*var_2019);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_placement_group(input: &crate::input::DeletePlacementGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2020 = writer.prefix("DryRun");
    if let Some(var_2021) = &input.dry_run {
        scope_2020.boolean(*var_2021);
    }
    #[allow(unused_mut)]
    let mut scope_2022 = writer.prefix("GroupName");
    if let Some(var_2023) = &input.group_name {
        scope_2022.string(var_2023);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_public_ipv4_pool(input: &crate::input::DeletePublicIpv4PoolInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeletePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2024 = writer.prefix("DryRun");
    if let Some(var_2025) = &input.dry_run {
        scope_2024.boolean(*var_2025);
    }
    #[allow(unused_mut)]
    let mut scope_2026 = writer.prefix("PoolId");
    if let Some(var_2027) = &input.pool_id {
        scope_2026.string(var_2027);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_queued_reserved_instances(input: &crate::input::DeleteQueuedReservedInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2028 = writer.prefix("DryRun");
    if let Some(var_2029) = &input.dry_run {
        scope_2028.boolean(*var_2029);
    }
    #[allow(unused_mut)]
    let mut scope_2030 = writer.prefix("ReservedInstancesId");
    if let Some(var_2031) = &input.reserved_instances_ids {
        let mut list_2033 = scope_2030.start_list(true, Some("item"));
        for item_2032 in var_2031 {
            #[allow(unused_mut)]
            let mut entry_2034 = list_2033.entry();
            entry_2034.string(item_2032);
        }
        list_2033.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route(input: &crate::input::DeleteRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2035 = writer.prefix("DestinationCidrBlock");
    if let Some(var_2036) = &input.destination_cidr_block {
        scope_2035.string(var_2036);
    }
    #[allow(unused_mut)]
    let mut scope_2037 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_2038) = &input.destination_ipv6_cidr_block {
        scope_2037.string(var_2038);
    }
    #[allow(unused_mut)]
    let mut scope_2039 = writer.prefix("DestinationPrefixListId");
    if let Some(var_2040) = &input.destination_prefix_list_id {
        scope_2039.string(var_2040);
    }
    #[allow(unused_mut)]
    let mut scope_2041 = writer.prefix("DryRun");
    if let Some(var_2042) = &input.dry_run {
        scope_2041.boolean(*var_2042);
    }
    #[allow(unused_mut)]
    let mut scope_2043 = writer.prefix("RouteTableId");
    if let Some(var_2044) = &input.route_table_id {
        scope_2043.string(var_2044);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route_table(input: &crate::input::DeleteRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2045 = writer.prefix("DryRun");
    if let Some(var_2046) = &input.dry_run {
        scope_2045.boolean(*var_2046);
    }
    #[allow(unused_mut)]
    let mut scope_2047 = writer.prefix("RouteTableId");
    if let Some(var_2048) = &input.route_table_id {
        scope_2047.string(var_2048);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_security_group(input: &crate::input::DeleteSecurityGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2049 = writer.prefix("GroupId");
    if let Some(var_2050) = &input.group_id {
        scope_2049.string(var_2050);
    }
    #[allow(unused_mut)]
    let mut scope_2051 = writer.prefix("GroupName");
    if let Some(var_2052) = &input.group_name {
        scope_2051.string(var_2052);
    }
    #[allow(unused_mut)]
    let mut scope_2053 = writer.prefix("DryRun");
    if let Some(var_2054) = &input.dry_run {
        scope_2053.boolean(*var_2054);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(input: &crate::input::DeleteSnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2055 = writer.prefix("SnapshotId");
    if let Some(var_2056) = &input.snapshot_id {
        scope_2055.string(var_2056);
    }
    #[allow(unused_mut)]
    let mut scope_2057 = writer.prefix("DryRun");
    if let Some(var_2058) = &input.dry_run {
        scope_2057.boolean(*var_2058);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_spot_datafeed_subscription(input: &crate::input::DeleteSpotDatafeedSubscriptionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2059 = writer.prefix("DryRun");
    if let Some(var_2060) = &input.dry_run {
        scope_2059.boolean(*var_2060);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet(input: &crate::input::DeleteSubnetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2061 = writer.prefix("SubnetId");
    if let Some(var_2062) = &input.subnet_id {
        scope_2061.string(var_2062);
    }
    #[allow(unused_mut)]
    let mut scope_2063 = writer.prefix("DryRun");
    if let Some(var_2064) = &input.dry_run {
        scope_2063.boolean(*var_2064);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet_cidr_reservation(input: &crate::input::DeleteSubnetCidrReservationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2065 = writer.prefix("SubnetCidrReservationId");
    if let Some(var_2066) = &input.subnet_cidr_reservation_id {
        scope_2065.string(var_2066);
    }
    #[allow(unused_mut)]
    let mut scope_2067 = writer.prefix("DryRun");
    if let Some(var_2068) = &input.dry_run {
        scope_2067.boolean(*var_2068);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(input: &crate::input::DeleteTagsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2069 = writer.prefix("DryRun");
    if let Some(var_2070) = &input.dry_run {
        scope_2069.boolean(*var_2070);
    }
    #[allow(unused_mut)]
    let mut scope_2071 = writer.prefix("ResourceId");
    if let Some(var_2072) = &input.resources {
        let mut list_2074 = scope_2071.start_list(true, None);
        for item_2073 in var_2072 {
            #[allow(unused_mut)]
            let mut entry_2075 = list_2074.entry();
            entry_2075.string(item_2073);
        }
        list_2074.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2076 = writer.prefix("Tag");
    if let Some(var_2077) = &input.tags {
        let mut list_2079 = scope_2076.start_list(true, Some("item"));
        for item_2078 in var_2077 {
            #[allow(unused_mut)]
            let mut entry_2080 = list_2079.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_2080, item_2078)?;
        }
        list_2079.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter(input: &crate::input::DeleteTrafficMirrorFilterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2081 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_2082) = &input.traffic_mirror_filter_id {
        scope_2081.string(var_2082);
    }
    #[allow(unused_mut)]
    let mut scope_2083 = writer.prefix("DryRun");
    if let Some(var_2084) = &input.dry_run {
        scope_2083.boolean(*var_2084);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter_rule(input: &crate::input::DeleteTrafficMirrorFilterRuleInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2085 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_2086) = &input.traffic_mirror_filter_rule_id {
        scope_2085.string(var_2086);
    }
    #[allow(unused_mut)]
    let mut scope_2087 = writer.prefix("DryRun");
    if let Some(var_2088) = &input.dry_run {
        scope_2087.boolean(*var_2088);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_session(input: &crate::input::DeleteTrafficMirrorSessionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2089 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_2090) = &input.traffic_mirror_session_id {
        scope_2089.string(var_2090);
    }
    #[allow(unused_mut)]
    let mut scope_2091 = writer.prefix("DryRun");
    if let Some(var_2092) = &input.dry_run {
        scope_2091.boolean(*var_2092);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_target(input: &crate::input::DeleteTrafficMirrorTargetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2093 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_2094) = &input.traffic_mirror_target_id {
        scope_2093.string(var_2094);
    }
    #[allow(unused_mut)]
    let mut scope_2095 = writer.prefix("DryRun");
    if let Some(var_2096) = &input.dry_run {
        scope_2095.boolean(*var_2096);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway(input: &crate::input::DeleteTransitGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2097 = writer.prefix("TransitGatewayId");
    if let Some(var_2098) = &input.transit_gateway_id {
        scope_2097.string(var_2098);
    }
    #[allow(unused_mut)]
    let mut scope_2099 = writer.prefix("DryRun");
    if let Some(var_2100) = &input.dry_run {
        scope_2099.boolean(*var_2100);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect(input: &crate::input::DeleteTransitGatewayConnectInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2101 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_2102) = &input.transit_gateway_attachment_id {
        scope_2101.string(var_2102);
    }
    #[allow(unused_mut)]
    let mut scope_2103 = writer.prefix("DryRun");
    if let Some(var_2104) = &input.dry_run {
        scope_2103.boolean(*var_2104);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect_peer(input: &crate::input::DeleteTransitGatewayConnectPeerInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnectPeer", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2105 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_2106) = &input.transit_gateway_connect_peer_id {
        scope_2105.string(var_2106);
    }
    #[allow(unused_mut)]
    let mut scope_2107 = writer.prefix("DryRun");
    if let Some(var_2108) = &input.dry_run {
        scope_2107.boolean(*var_2108);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_multicast_domain(input: &crate::input::DeleteTransitGatewayMulticastDomainInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayMulticastDomain", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2109 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2110) = &input.transit_gateway_multicast_domain_id {
        scope_2109.string(var_2110);
    }
    #[allow(unused_mut)]
    let mut scope_2111 = writer.prefix("DryRun");
    if let Some(var_2112) = &input.dry_run {
        scope_2111.boolean(*var_2112);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_peering_attachment(input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayPeeringAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2113 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_2114) = &input.transit_gateway_attachment_id {
        scope_2113.string(var_2114);
    }
    #[allow(unused_mut)]
    let mut scope_2115 = writer.prefix("DryRun");
    if let Some(var_2116) = &input.dry_run {
        scope_2115.boolean(*var_2116);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_policy_table(input: &crate::input::DeleteTransitGatewayPolicyTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayPolicyTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2117 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_2118) = &input.transit_gateway_policy_table_id {
        scope_2117.string(var_2118);
    }
    #[allow(unused_mut)]
    let mut scope_2119 = writer.prefix("DryRun");
    if let Some(var_2120) = &input.dry_run {
        scope_2119.boolean(*var_2120);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_prefix_list_reference(input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayPrefixListReference", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2121 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_2122) = &input.transit_gateway_route_table_id {
        scope_2121.string(var_2122);
    }
    #[allow(unused_mut)]
    let mut scope_2123 = writer.prefix("PrefixListId");
    if let Some(var_2124) = &input.prefix_list_id {
        scope_2123.string(var_2124);
    }
    #[allow(unused_mut)]
    let mut scope_2125 = writer.prefix("DryRun");
    if let Some(var_2126) = &input.dry_run {
        scope_2125.boolean(*var_2126);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route(input: &crate::input::DeleteTransitGatewayRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2127 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_2128) = &input.transit_gateway_route_table_id {
        scope_2127.string(var_2128);
    }
    #[allow(unused_mut)]
    let mut scope_2129 = writer.prefix("DestinationCidrBlock");
    if let Some(var_2130) = &input.destination_cidr_block {
        scope_2129.string(var_2130);
    }
    #[allow(unused_mut)]
    let mut scope_2131 = writer.prefix("DryRun");
    if let Some(var_2132) = &input.dry_run {
        scope_2131.boolean(*var_2132);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table(input: &crate::input::DeleteTransitGatewayRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2133 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_2134) = &input.transit_gateway_route_table_id {
        scope_2133.string(var_2134);
    }
    #[allow(unused_mut)]
    let mut scope_2135 = writer.prefix("DryRun");
    if let Some(var_2136) = &input.dry_run {
        scope_2135.boolean(*var_2136);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table_announcement(input: &crate::input::DeleteTransitGatewayRouteTableAnnouncementInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRouteTableAnnouncement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2137 = writer.prefix("TransitGatewayRouteTableAnnouncementId");
    if let Some(var_2138) = &input.transit_gateway_route_table_announcement_id {
        scope_2137.string(var_2138);
    }
    #[allow(unused_mut)]
    let mut scope_2139 = writer.prefix("DryRun");
    if let Some(var_2140) = &input.dry_run {
        scope_2139.boolean(*var_2140);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_vpc_attachment(input: &crate::input::DeleteTransitGatewayVpcAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2141 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_2142) = &input.transit_gateway_attachment_id {
        scope_2141.string(var_2142);
    }
    #[allow(unused_mut)]
    let mut scope_2143 = writer.prefix("DryRun");
    if let Some(var_2144) = &input.dry_run {
        scope_2143.boolean(*var_2144);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_verified_access_endpoint(input: &crate::input::DeleteVerifiedAccessEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVerifiedAccessEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2145 = writer.prefix("VerifiedAccessEndpointId");
    if let Some(var_2146) = &input.verified_access_endpoint_id {
        scope_2145.string(var_2146);
    }
    #[allow(unused_mut)]
    let mut scope_2147 = writer.prefix("ClientToken");
    if let Some(var_2148) = &input.client_token {
        scope_2147.string(var_2148);
    }
    #[allow(unused_mut)]
    let mut scope_2149 = writer.prefix("DryRun");
    if let Some(var_2150) = &input.dry_run {
        scope_2149.boolean(*var_2150);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_verified_access_group(input: &crate::input::DeleteVerifiedAccessGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVerifiedAccessGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2151 = writer.prefix("VerifiedAccessGroupId");
    if let Some(var_2152) = &input.verified_access_group_id {
        scope_2151.string(var_2152);
    }
    #[allow(unused_mut)]
    let mut scope_2153 = writer.prefix("ClientToken");
    if let Some(var_2154) = &input.client_token {
        scope_2153.string(var_2154);
    }
    #[allow(unused_mut)]
    let mut scope_2155 = writer.prefix("DryRun");
    if let Some(var_2156) = &input.dry_run {
        scope_2155.boolean(*var_2156);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_verified_access_instance(input: &crate::input::DeleteVerifiedAccessInstanceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVerifiedAccessInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2157 = writer.prefix("VerifiedAccessInstanceId");
    if let Some(var_2158) = &input.verified_access_instance_id {
        scope_2157.string(var_2158);
    }
    #[allow(unused_mut)]
    let mut scope_2159 = writer.prefix("DryRun");
    if let Some(var_2160) = &input.dry_run {
        scope_2159.boolean(*var_2160);
    }
    #[allow(unused_mut)]
    let mut scope_2161 = writer.prefix("ClientToken");
    if let Some(var_2162) = &input.client_token {
        scope_2161.string(var_2162);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_verified_access_trust_provider(input: &crate::input::DeleteVerifiedAccessTrustProviderInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVerifiedAccessTrustProvider", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2163 = writer.prefix("VerifiedAccessTrustProviderId");
    if let Some(var_2164) = &input.verified_access_trust_provider_id {
        scope_2163.string(var_2164);
    }
    #[allow(unused_mut)]
    let mut scope_2165 = writer.prefix("DryRun");
    if let Some(var_2166) = &input.dry_run {
        scope_2165.boolean(*var_2166);
    }
    #[allow(unused_mut)]
    let mut scope_2167 = writer.prefix("ClientToken");
    if let Some(var_2168) = &input.client_token {
        scope_2167.string(var_2168);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_volume(input: &crate::input::DeleteVolumeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2169 = writer.prefix("VolumeId");
    if let Some(var_2170) = &input.volume_id {
        scope_2169.string(var_2170);
    }
    #[allow(unused_mut)]
    let mut scope_2171 = writer.prefix("DryRun");
    if let Some(var_2172) = &input.dry_run {
        scope_2171.boolean(*var_2172);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc(input: &crate::input::DeleteVpcInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2173 = writer.prefix("VpcId");
    if let Some(var_2174) = &input.vpc_id {
        scope_2173.string(var_2174);
    }
    #[allow(unused_mut)]
    let mut scope_2175 = writer.prefix("DryRun");
    if let Some(var_2176) = &input.dry_run {
        scope_2175.boolean(*var_2176);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_connection_notifications(input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpointConnectionNotifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2177 = writer.prefix("DryRun");
    if let Some(var_2178) = &input.dry_run {
        scope_2177.boolean(*var_2178);
    }
    #[allow(unused_mut)]
    let mut scope_2179 = writer.prefix("ConnectionNotificationId");
    if let Some(var_2180) = &input.connection_notification_ids {
        let mut list_2182 = scope_2179.start_list(true, Some("item"));
        for item_2181 in var_2180 {
            #[allow(unused_mut)]
            let mut entry_2183 = list_2182.entry();
            entry_2183.string(item_2181);
        }
        list_2182.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoints(input: &crate::input::DeleteVpcEndpointsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2184 = writer.prefix("DryRun");
    if let Some(var_2185) = &input.dry_run {
        scope_2184.boolean(*var_2185);
    }
    #[allow(unused_mut)]
    let mut scope_2186 = writer.prefix("VpcEndpointId");
    if let Some(var_2187) = &input.vpc_endpoint_ids {
        let mut list_2189 = scope_2186.start_list(true, Some("item"));
        for item_2188 in var_2187 {
            #[allow(unused_mut)]
            let mut entry_2190 = list_2189.entry();
            entry_2190.string(item_2188);
        }
        list_2189.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_service_configurations(input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpointServiceConfigurations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2191 = writer.prefix("DryRun");
    if let Some(var_2192) = &input.dry_run {
        scope_2191.boolean(*var_2192);
    }
    #[allow(unused_mut)]
    let mut scope_2193 = writer.prefix("ServiceId");
    if let Some(var_2194) = &input.service_ids {
        let mut list_2196 = scope_2193.start_list(true, Some("item"));
        for item_2195 in var_2194 {
            #[allow(unused_mut)]
            let mut entry_2197 = list_2196.entry();
            entry_2197.string(item_2195);
        }
        list_2196.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_peering_connection(input: &crate::input::DeleteVpcPeeringConnectionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2198 = writer.prefix("DryRun");
    if let Some(var_2199) = &input.dry_run {
        scope_2198.boolean(*var_2199);
    }
    #[allow(unused_mut)]
    let mut scope_2200 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_2201) = &input.vpc_peering_connection_id {
        scope_2200.string(var_2201);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection(input: &crate::input::DeleteVpnConnectionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2202 = writer.prefix("VpnConnectionId");
    if let Some(var_2203) = &input.vpn_connection_id {
        scope_2202.string(var_2203);
    }
    #[allow(unused_mut)]
    let mut scope_2204 = writer.prefix("DryRun");
    if let Some(var_2205) = &input.dry_run {
        scope_2204.boolean(*var_2205);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection_route(input: &crate::input::DeleteVpnConnectionRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2206 = writer.prefix("DestinationCidrBlock");
    if let Some(var_2207) = &input.destination_cidr_block {
        scope_2206.string(var_2207);
    }
    #[allow(unused_mut)]
    let mut scope_2208 = writer.prefix("VpnConnectionId");
    if let Some(var_2209) = &input.vpn_connection_id {
        scope_2208.string(var_2209);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_gateway(input: &crate::input::DeleteVpnGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2210 = writer.prefix("VpnGatewayId");
    if let Some(var_2211) = &input.vpn_gateway_id {
        scope_2210.string(var_2211);
    }
    #[allow(unused_mut)]
    let mut scope_2212 = writer.prefix("DryRun");
    if let Some(var_2213) = &input.dry_run {
        scope_2212.boolean(*var_2213);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_byoip_cidr(input: &crate::input::DeprovisionByoipCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2214 = writer.prefix("Cidr");
    if let Some(var_2215) = &input.cidr {
        scope_2214.string(var_2215);
    }
    #[allow(unused_mut)]
    let mut scope_2216 = writer.prefix("DryRun");
    if let Some(var_2217) = &input.dry_run {
        scope_2216.boolean(*var_2217);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_ipam_pool_cidr(input: &crate::input::DeprovisionIpamPoolCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2218 = writer.prefix("DryRun");
    if let Some(var_2219) = &input.dry_run {
        scope_2218.boolean(*var_2219);
    }
    #[allow(unused_mut)]
    let mut scope_2220 = writer.prefix("IpamPoolId");
    if let Some(var_2221) = &input.ipam_pool_id {
        scope_2220.string(var_2221);
    }
    #[allow(unused_mut)]
    let mut scope_2222 = writer.prefix("Cidr");
    if let Some(var_2223) = &input.cidr {
        scope_2222.string(var_2223);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_public_ipv4_pool_cidr(input: &crate::input::DeprovisionPublicIpv4PoolCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2224 = writer.prefix("DryRun");
    if let Some(var_2225) = &input.dry_run {
        scope_2224.boolean(*var_2225);
    }
    #[allow(unused_mut)]
    let mut scope_2226 = writer.prefix("PoolId");
    if let Some(var_2227) = &input.pool_id {
        scope_2226.string(var_2227);
    }
    #[allow(unused_mut)]
    let mut scope_2228 = writer.prefix("Cidr");
    if let Some(var_2229) = &input.cidr {
        scope_2228.string(var_2229);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_image(input: &crate::input::DeregisterImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2230 = writer.prefix("ImageId");
    if let Some(var_2231) = &input.image_id {
        scope_2230.string(var_2231);
    }
    #[allow(unused_mut)]
    let mut scope_2232 = writer.prefix("DryRun");
    if let Some(var_2233) = &input.dry_run {
        scope_2232.boolean(*var_2233);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_instance_event_notification_attributes(input: &crate::input::DeregisterInstanceEventNotificationAttributesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterInstanceEventNotificationAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2234 = writer.prefix("DryRun");
    if let Some(var_2235) = &input.dry_run {
        scope_2234.boolean(*var_2235);
    }
    #[allow(unused_mut)]
    let mut scope_2236 = writer.prefix("InstanceTagAttribute");
    if let Some(var_2237) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_deregister_instance_tag_attribute_request(scope_2236, var_2237)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_members(input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterTransitGatewayMulticastGroupMembers", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2238 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2239) = &input.transit_gateway_multicast_domain_id {
        scope_2238.string(var_2239);
    }
    #[allow(unused_mut)]
    let mut scope_2240 = writer.prefix("GroupIpAddress");
    if let Some(var_2241) = &input.group_ip_address {
        scope_2240.string(var_2241);
    }
    #[allow(unused_mut)]
    let mut scope_2242 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2243) = &input.network_interface_ids {
        let mut list_2245 = scope_2242.start_list(true, Some("item"));
        for item_2244 in var_2243 {
            #[allow(unused_mut)]
            let mut entry_2246 = list_2245.entry();
            entry_2246.string(item_2244);
        }
        list_2245.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2247 = writer.prefix("DryRun");
    if let Some(var_2248) = &input.dry_run {
        scope_2247.boolean(*var_2248);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_sources(input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterTransitGatewayMulticastGroupSources", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2249 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2250) = &input.transit_gateway_multicast_domain_id {
        scope_2249.string(var_2250);
    }
    #[allow(unused_mut)]
    let mut scope_2251 = writer.prefix("GroupIpAddress");
    if let Some(var_2252) = &input.group_ip_address {
        scope_2251.string(var_2252);
    }
    #[allow(unused_mut)]
    let mut scope_2253 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2254) = &input.network_interface_ids {
        let mut list_2256 = scope_2253.start_list(true, Some("item"));
        for item_2255 in var_2254 {
            #[allow(unused_mut)]
            let mut entry_2257 = list_2256.entry();
            entry_2257.string(item_2255);
        }
        list_2256.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2258 = writer.prefix("DryRun");
    if let Some(var_2259) = &input.dry_run {
        scope_2258.boolean(*var_2259);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(input: &crate::input::DescribeAccountAttributesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2260 = writer.prefix("AttributeName");
    if let Some(var_2261) = &input.attribute_names {
        let mut list_2263 = scope_2260.start_list(true, Some("attributeName"));
        for item_2262 in var_2261 {
            #[allow(unused_mut)]
            let mut entry_2264 = list_2263.entry();
            entry_2264.string(item_2262.as_str());
        }
        list_2263.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2265 = writer.prefix("DryRun");
    if let Some(var_2266) = &input.dry_run {
        scope_2265.boolean(*var_2266);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses(input: &crate::input::DescribeAddressesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2267 = writer.prefix("Filter");
    if let Some(var_2268) = &input.filters {
        let mut list_2270 = scope_2267.start_list(true, Some("Filter"));
        for item_2269 in var_2268 {
            #[allow(unused_mut)]
            let mut entry_2271 = list_2270.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2271, item_2269)?;
        }
        list_2270.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2272 = writer.prefix("PublicIp");
    if let Some(var_2273) = &input.public_ips {
        let mut list_2275 = scope_2272.start_list(true, Some("PublicIp"));
        for item_2274 in var_2273 {
            #[allow(unused_mut)]
            let mut entry_2276 = list_2275.entry();
            entry_2276.string(item_2274);
        }
        list_2275.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2277 = writer.prefix("AllocationId");
    if let Some(var_2278) = &input.allocation_ids {
        let mut list_2280 = scope_2277.start_list(true, Some("AllocationId"));
        for item_2279 in var_2278 {
            #[allow(unused_mut)]
            let mut entry_2281 = list_2280.entry();
            entry_2281.string(item_2279);
        }
        list_2280.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2282 = writer.prefix("DryRun");
    if let Some(var_2283) = &input.dry_run {
        scope_2282.boolean(*var_2283);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses_attribute(input: &crate::input::DescribeAddressesAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2284 = writer.prefix("AllocationId");
    if let Some(var_2285) = &input.allocation_ids {
        let mut list_2287 = scope_2284.start_list(true, Some("item"));
        for item_2286 in var_2285 {
            #[allow(unused_mut)]
            let mut entry_2288 = list_2287.entry();
            entry_2288.string(item_2286);
        }
        list_2287.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2289 = writer.prefix("Attribute");
    if let Some(var_2290) = &input.attribute {
        scope_2289.string(var_2290.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2291 = writer.prefix("NextToken");
    if let Some(var_2292) = &input.next_token {
        scope_2291.string(var_2292);
    }
    #[allow(unused_mut)]
    let mut scope_2293 = writer.prefix("MaxResults");
    if let Some(var_2294) = &input.max_results {
        scope_2293.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2294).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2295 = writer.prefix("DryRun");
    if let Some(var_2296) = &input.dry_run {
        scope_2295.boolean(*var_2296);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_address_transfers(input: &crate::input::DescribeAddressTransfersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddressTransfers", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2297 = writer.prefix("AllocationId");
    if let Some(var_2298) = &input.allocation_ids {
        let mut list_2300 = scope_2297.start_list(true, Some("AllocationId"));
        for item_2299 in var_2298 {
            #[allow(unused_mut)]
            let mut entry_2301 = list_2300.entry();
            entry_2301.string(item_2299);
        }
        list_2300.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2302 = writer.prefix("NextToken");
    if let Some(var_2303) = &input.next_token {
        scope_2302.string(var_2303);
    }
    #[allow(unused_mut)]
    let mut scope_2304 = writer.prefix("MaxResults");
    if let Some(var_2305) = &input.max_results {
        scope_2304.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2305).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2306 = writer.prefix("DryRun");
    if let Some(var_2307) = &input.dry_run {
        scope_2306.boolean(*var_2307);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_aggregate_id_format(input: &crate::input::DescribeAggregateIdFormatInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2308 = writer.prefix("DryRun");
    if let Some(var_2309) = &input.dry_run {
        scope_2308.boolean(*var_2309);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_availability_zones(input: &crate::input::DescribeAvailabilityZonesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2310 = writer.prefix("Filter");
    if let Some(var_2311) = &input.filters {
        let mut list_2313 = scope_2310.start_list(true, Some("Filter"));
        for item_2312 in var_2311 {
            #[allow(unused_mut)]
            let mut entry_2314 = list_2313.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2314, item_2312)?;
        }
        list_2313.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2315 = writer.prefix("ZoneName");
    if let Some(var_2316) = &input.zone_names {
        let mut list_2318 = scope_2315.start_list(true, Some("ZoneName"));
        for item_2317 in var_2316 {
            #[allow(unused_mut)]
            let mut entry_2319 = list_2318.entry();
            entry_2319.string(item_2317);
        }
        list_2318.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2320 = writer.prefix("ZoneId");
    if let Some(var_2321) = &input.zone_ids {
        let mut list_2323 = scope_2320.start_list(true, Some("ZoneId"));
        for item_2322 in var_2321 {
            #[allow(unused_mut)]
            let mut entry_2324 = list_2323.entry();
            entry_2324.string(item_2322);
        }
        list_2323.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2325 = writer.prefix("AllAvailabilityZones");
    if let Some(var_2326) = &input.all_availability_zones {
        scope_2325.boolean(*var_2326);
    }
    #[allow(unused_mut)]
    let mut scope_2327 = writer.prefix("DryRun");
    if let Some(var_2328) = &input.dry_run {
        scope_2327.boolean(*var_2328);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_aws_network_performance_metric_subscriptions(input: &crate::input::DescribeAwsNetworkPerformanceMetricSubscriptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeAwsNetworkPerformanceMetricSubscriptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2329 = writer.prefix("MaxResults");
    if let Some(var_2330) = &input.max_results {
        scope_2329.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2330).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2331 = writer.prefix("NextToken");
    if let Some(var_2332) = &input.next_token {
        scope_2331.string(var_2332);
    }
    #[allow(unused_mut)]
    let mut scope_2333 = writer.prefix("Filter");
    if let Some(var_2334) = &input.filters {
        let mut list_2336 = scope_2333.start_list(true, Some("Filter"));
        for item_2335 in var_2334 {
            #[allow(unused_mut)]
            let mut entry_2337 = list_2336.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2337, item_2335)?;
        }
        list_2336.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2338 = writer.prefix("DryRun");
    if let Some(var_2339) = &input.dry_run {
        scope_2338.boolean(*var_2339);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_bundle_tasks(input: &crate::input::DescribeBundleTasksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2340 = writer.prefix("BundleId");
    if let Some(var_2341) = &input.bundle_ids {
        let mut list_2343 = scope_2340.start_list(true, Some("BundleId"));
        for item_2342 in var_2341 {
            #[allow(unused_mut)]
            let mut entry_2344 = list_2343.entry();
            entry_2344.string(item_2342);
        }
        list_2343.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2345 = writer.prefix("Filter");
    if let Some(var_2346) = &input.filters {
        let mut list_2348 = scope_2345.start_list(true, Some("Filter"));
        for item_2347 in var_2346 {
            #[allow(unused_mut)]
            let mut entry_2349 = list_2348.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2349, item_2347)?;
        }
        list_2348.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2350 = writer.prefix("DryRun");
    if let Some(var_2351) = &input.dry_run {
        scope_2350.boolean(*var_2351);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_byoip_cidrs(input: &crate::input::DescribeByoipCidrsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2352 = writer.prefix("DryRun");
    if let Some(var_2353) = &input.dry_run {
        scope_2352.boolean(*var_2353);
    }
    #[allow(unused_mut)]
    let mut scope_2354 = writer.prefix("MaxResults");
    if let Some(var_2355) = &input.max_results {
        scope_2354.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2355).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2356 = writer.prefix("NextToken");
    if let Some(var_2357) = &input.next_token {
        scope_2356.string(var_2357);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservation_fleets(input: &crate::input::DescribeCapacityReservationFleetsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservationFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2358 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_2359) = &input.capacity_reservation_fleet_ids {
        let mut list_2361 = scope_2358.start_list(true, Some("item"));
        for item_2360 in var_2359 {
            #[allow(unused_mut)]
            let mut entry_2362 = list_2361.entry();
            entry_2362.string(item_2360);
        }
        list_2361.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2363 = writer.prefix("NextToken");
    if let Some(var_2364) = &input.next_token {
        scope_2363.string(var_2364);
    }
    #[allow(unused_mut)]
    let mut scope_2365 = writer.prefix("MaxResults");
    if let Some(var_2366) = &input.max_results {
        scope_2365.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2366).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2367 = writer.prefix("Filter");
    if let Some(var_2368) = &input.filters {
        let mut list_2370 = scope_2367.start_list(true, Some("Filter"));
        for item_2369 in var_2368 {
            #[allow(unused_mut)]
            let mut entry_2371 = list_2370.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2371, item_2369)?;
        }
        list_2370.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2372 = writer.prefix("DryRun");
    if let Some(var_2373) = &input.dry_run {
        scope_2372.boolean(*var_2373);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservations(input: &crate::input::DescribeCapacityReservationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2374 = writer.prefix("CapacityReservationId");
    if let Some(var_2375) = &input.capacity_reservation_ids {
        let mut list_2377 = scope_2374.start_list(true, Some("item"));
        for item_2376 in var_2375 {
            #[allow(unused_mut)]
            let mut entry_2378 = list_2377.entry();
            entry_2378.string(item_2376);
        }
        list_2377.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2379 = writer.prefix("NextToken");
    if let Some(var_2380) = &input.next_token {
        scope_2379.string(var_2380);
    }
    #[allow(unused_mut)]
    let mut scope_2381 = writer.prefix("MaxResults");
    if let Some(var_2382) = &input.max_results {
        scope_2381.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2382).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2383 = writer.prefix("Filter");
    if let Some(var_2384) = &input.filters {
        let mut list_2386 = scope_2383.start_list(true, Some("Filter"));
        for item_2385 in var_2384 {
            #[allow(unused_mut)]
            let mut entry_2387 = list_2386.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2387, item_2385)?;
        }
        list_2386.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2388 = writer.prefix("DryRun");
    if let Some(var_2389) = &input.dry_run {
        scope_2388.boolean(*var_2389);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_carrier_gateways(input: &crate::input::DescribeCarrierGatewaysInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2390 = writer.prefix("CarrierGatewayId");
    if let Some(var_2391) = &input.carrier_gateway_ids {
        let mut list_2393 = scope_2390.start_list(true, None);
        for item_2392 in var_2391 {
            #[allow(unused_mut)]
            let mut entry_2394 = list_2393.entry();
            entry_2394.string(item_2392);
        }
        list_2393.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2395 = writer.prefix("Filter");
    if let Some(var_2396) = &input.filters {
        let mut list_2398 = scope_2395.start_list(true, Some("Filter"));
        for item_2397 in var_2396 {
            #[allow(unused_mut)]
            let mut entry_2399 = list_2398.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2399, item_2397)?;
        }
        list_2398.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2400 = writer.prefix("MaxResults");
    if let Some(var_2401) = &input.max_results {
        scope_2400.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2401).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2402 = writer.prefix("NextToken");
    if let Some(var_2403) = &input.next_token {
        scope_2402.string(var_2403);
    }
    #[allow(unused_mut)]
    let mut scope_2404 = writer.prefix("DryRun");
    if let Some(var_2405) = &input.dry_run {
        scope_2404.boolean(*var_2405);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_classic_link_instances(input: &crate::input::DescribeClassicLinkInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2406 = writer.prefix("Filter");
    if let Some(var_2407) = &input.filters {
        let mut list_2409 = scope_2406.start_list(true, Some("Filter"));
        for item_2408 in var_2407 {
            #[allow(unused_mut)]
            let mut entry_2410 = list_2409.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2410, item_2408)?;
        }
        list_2409.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2411 = writer.prefix("DryRun");
    if let Some(var_2412) = &input.dry_run {
        scope_2411.boolean(*var_2412);
    }
    #[allow(unused_mut)]
    let mut scope_2413 = writer.prefix("InstanceId");
    if let Some(var_2414) = &input.instance_ids {
        let mut list_2416 = scope_2413.start_list(true, Some("InstanceId"));
        for item_2415 in var_2414 {
            #[allow(unused_mut)]
            let mut entry_2417 = list_2416.entry();
            entry_2417.string(item_2415);
        }
        list_2416.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2418 = writer.prefix("MaxResults");
    if let Some(var_2419) = &input.max_results {
        scope_2418.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2419).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2420 = writer.prefix("NextToken");
    if let Some(var_2421) = &input.next_token {
        scope_2420.string(var_2421);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_authorization_rules(input: &crate::input::DescribeClientVpnAuthorizationRulesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnAuthorizationRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2422 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2423) = &input.client_vpn_endpoint_id {
        scope_2422.string(var_2423);
    }
    #[allow(unused_mut)]
    let mut scope_2424 = writer.prefix("DryRun");
    if let Some(var_2425) = &input.dry_run {
        scope_2424.boolean(*var_2425);
    }
    #[allow(unused_mut)]
    let mut scope_2426 = writer.prefix("NextToken");
    if let Some(var_2427) = &input.next_token {
        scope_2426.string(var_2427);
    }
    #[allow(unused_mut)]
    let mut scope_2428 = writer.prefix("Filter");
    if let Some(var_2429) = &input.filters {
        let mut list_2431 = scope_2428.start_list(true, Some("Filter"));
        for item_2430 in var_2429 {
            #[allow(unused_mut)]
            let mut entry_2432 = list_2431.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2432, item_2430)?;
        }
        list_2431.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2433 = writer.prefix("MaxResults");
    if let Some(var_2434) = &input.max_results {
        scope_2433.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2434).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_connections(input: &crate::input::DescribeClientVpnConnectionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2435 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2436) = &input.client_vpn_endpoint_id {
        scope_2435.string(var_2436);
    }
    #[allow(unused_mut)]
    let mut scope_2437 = writer.prefix("Filter");
    if let Some(var_2438) = &input.filters {
        let mut list_2440 = scope_2437.start_list(true, Some("Filter"));
        for item_2439 in var_2438 {
            #[allow(unused_mut)]
            let mut entry_2441 = list_2440.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2441, item_2439)?;
        }
        list_2440.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2442 = writer.prefix("NextToken");
    if let Some(var_2443) = &input.next_token {
        scope_2442.string(var_2443);
    }
    #[allow(unused_mut)]
    let mut scope_2444 = writer.prefix("MaxResults");
    if let Some(var_2445) = &input.max_results {
        scope_2444.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2445).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2446 = writer.prefix("DryRun");
    if let Some(var_2447) = &input.dry_run {
        scope_2446.boolean(*var_2447);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_endpoints(input: &crate::input::DescribeClientVpnEndpointsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2448 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2449) = &input.client_vpn_endpoint_ids {
        let mut list_2451 = scope_2448.start_list(true, Some("item"));
        for item_2450 in var_2449 {
            #[allow(unused_mut)]
            let mut entry_2452 = list_2451.entry();
            entry_2452.string(item_2450);
        }
        list_2451.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2453 = writer.prefix("MaxResults");
    if let Some(var_2454) = &input.max_results {
        scope_2453.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2454).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2455 = writer.prefix("NextToken");
    if let Some(var_2456) = &input.next_token {
        scope_2455.string(var_2456);
    }
    #[allow(unused_mut)]
    let mut scope_2457 = writer.prefix("Filter");
    if let Some(var_2458) = &input.filters {
        let mut list_2460 = scope_2457.start_list(true, Some("Filter"));
        for item_2459 in var_2458 {
            #[allow(unused_mut)]
            let mut entry_2461 = list_2460.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2461, item_2459)?;
        }
        list_2460.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2462 = writer.prefix("DryRun");
    if let Some(var_2463) = &input.dry_run {
        scope_2462.boolean(*var_2463);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_routes(input: &crate::input::DescribeClientVpnRoutesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2464 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2465) = &input.client_vpn_endpoint_id {
        scope_2464.string(var_2465);
    }
    #[allow(unused_mut)]
    let mut scope_2466 = writer.prefix("Filter");
    if let Some(var_2467) = &input.filters {
        let mut list_2469 = scope_2466.start_list(true, Some("Filter"));
        for item_2468 in var_2467 {
            #[allow(unused_mut)]
            let mut entry_2470 = list_2469.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2470, item_2468)?;
        }
        list_2469.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2471 = writer.prefix("MaxResults");
    if let Some(var_2472) = &input.max_results {
        scope_2471.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2472).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2473 = writer.prefix("NextToken");
    if let Some(var_2474) = &input.next_token {
        scope_2473.string(var_2474);
    }
    #[allow(unused_mut)]
    let mut scope_2475 = writer.prefix("DryRun");
    if let Some(var_2476) = &input.dry_run {
        scope_2475.boolean(*var_2476);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_target_networks(input: &crate::input::DescribeClientVpnTargetNetworksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnTargetNetworks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2477 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2478) = &input.client_vpn_endpoint_id {
        scope_2477.string(var_2478);
    }
    #[allow(unused_mut)]
    let mut scope_2479 = writer.prefix("AssociationIds");
    if let Some(var_2480) = &input.association_ids {
        let mut list_2482 = scope_2479.start_list(true, Some("item"));
        for item_2481 in var_2480 {
            #[allow(unused_mut)]
            let mut entry_2483 = list_2482.entry();
            entry_2483.string(item_2481);
        }
        list_2482.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2484 = writer.prefix("MaxResults");
    if let Some(var_2485) = &input.max_results {
        scope_2484.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2485).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2486 = writer.prefix("NextToken");
    if let Some(var_2487) = &input.next_token {
        scope_2486.string(var_2487);
    }
    #[allow(unused_mut)]
    let mut scope_2488 = writer.prefix("Filter");
    if let Some(var_2489) = &input.filters {
        let mut list_2491 = scope_2488.start_list(true, Some("Filter"));
        for item_2490 in var_2489 {
            #[allow(unused_mut)]
            let mut entry_2492 = list_2491.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2492, item_2490)?;
        }
        list_2491.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2493 = writer.prefix("DryRun");
    if let Some(var_2494) = &input.dry_run {
        scope_2493.boolean(*var_2494);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_coip_pools(input: &crate::input::DescribeCoipPoolsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2495 = writer.prefix("PoolId");
    if let Some(var_2496) = &input.pool_ids {
        let mut list_2498 = scope_2495.start_list(true, Some("item"));
        for item_2497 in var_2496 {
            #[allow(unused_mut)]
            let mut entry_2499 = list_2498.entry();
            entry_2499.string(item_2497);
        }
        list_2498.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2500 = writer.prefix("Filter");
    if let Some(var_2501) = &input.filters {
        let mut list_2503 = scope_2500.start_list(true, Some("Filter"));
        for item_2502 in var_2501 {
            #[allow(unused_mut)]
            let mut entry_2504 = list_2503.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2504, item_2502)?;
        }
        list_2503.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2505 = writer.prefix("MaxResults");
    if let Some(var_2506) = &input.max_results {
        scope_2505.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2506).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2507 = writer.prefix("NextToken");
    if let Some(var_2508) = &input.next_token {
        scope_2507.string(var_2508);
    }
    #[allow(unused_mut)]
    let mut scope_2509 = writer.prefix("DryRun");
    if let Some(var_2510) = &input.dry_run {
        scope_2509.boolean(*var_2510);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_conversion_tasks(input: &crate::input::DescribeConversionTasksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2511 = writer.prefix("ConversionTaskId");
    if let Some(var_2512) = &input.conversion_task_ids {
        let mut list_2514 = scope_2511.start_list(true, Some("item"));
        for item_2513 in var_2512 {
            #[allow(unused_mut)]
            let mut entry_2515 = list_2514.entry();
            entry_2515.string(item_2513);
        }
        list_2514.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2516 = writer.prefix("DryRun");
    if let Some(var_2517) = &input.dry_run {
        scope_2516.boolean(*var_2517);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_customer_gateways(input: &crate::input::DescribeCustomerGatewaysInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2518 = writer.prefix("CustomerGatewayId");
    if let Some(var_2519) = &input.customer_gateway_ids {
        let mut list_2521 = scope_2518.start_list(true, Some("CustomerGatewayId"));
        for item_2520 in var_2519 {
            #[allow(unused_mut)]
            let mut entry_2522 = list_2521.entry();
            entry_2522.string(item_2520);
        }
        list_2521.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2523 = writer.prefix("Filter");
    if let Some(var_2524) = &input.filters {
        let mut list_2526 = scope_2523.start_list(true, Some("Filter"));
        for item_2525 in var_2524 {
            #[allow(unused_mut)]
            let mut entry_2527 = list_2526.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2527, item_2525)?;
        }
        list_2526.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2528 = writer.prefix("DryRun");
    if let Some(var_2529) = &input.dry_run {
        scope_2528.boolean(*var_2529);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_dhcp_options(input: &crate::input::DescribeDhcpOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2530 = writer.prefix("DhcpOptionsId");
    if let Some(var_2531) = &input.dhcp_options_ids {
        let mut list_2533 = scope_2530.start_list(true, Some("DhcpOptionsId"));
        for item_2532 in var_2531 {
            #[allow(unused_mut)]
            let mut entry_2534 = list_2533.entry();
            entry_2534.string(item_2532);
        }
        list_2533.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2535 = writer.prefix("Filter");
    if let Some(var_2536) = &input.filters {
        let mut list_2538 = scope_2535.start_list(true, Some("Filter"));
        for item_2537 in var_2536 {
            #[allow(unused_mut)]
            let mut entry_2539 = list_2538.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2539, item_2537)?;
        }
        list_2538.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2540 = writer.prefix("DryRun");
    if let Some(var_2541) = &input.dry_run {
        scope_2540.boolean(*var_2541);
    }
    #[allow(unused_mut)]
    let mut scope_2542 = writer.prefix("NextToken");
    if let Some(var_2543) = &input.next_token {
        scope_2542.string(var_2543);
    }
    #[allow(unused_mut)]
    let mut scope_2544 = writer.prefix("MaxResults");
    if let Some(var_2545) = &input.max_results {
        scope_2544.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2545).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_egress_only_internet_gateways(input: &crate::input::DescribeEgressOnlyInternetGatewaysInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEgressOnlyInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2546 = writer.prefix("DryRun");
    if let Some(var_2547) = &input.dry_run {
        scope_2546.boolean(*var_2547);
    }
    #[allow(unused_mut)]
    let mut scope_2548 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_2549) = &input.egress_only_internet_gateway_ids {
        let mut list_2551 = scope_2548.start_list(true, Some("item"));
        for item_2550 in var_2549 {
            #[allow(unused_mut)]
            let mut entry_2552 = list_2551.entry();
            entry_2552.string(item_2550);
        }
        list_2551.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2553 = writer.prefix("MaxResults");
    if let Some(var_2554) = &input.max_results {
        scope_2553.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2554).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2555 = writer.prefix("NextToken");
    if let Some(var_2556) = &input.next_token {
        scope_2555.string(var_2556);
    }
    #[allow(unused_mut)]
    let mut scope_2557 = writer.prefix("Filter");
    if let Some(var_2558) = &input.filters {
        let mut list_2560 = scope_2557.start_list(true, Some("Filter"));
        for item_2559 in var_2558 {
            #[allow(unused_mut)]
            let mut entry_2561 = list_2560.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2561, item_2559)?;
        }
        list_2560.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_elastic_gpus(input: &crate::input::DescribeElasticGpusInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2562 = writer.prefix("ElasticGpuId");
    if let Some(var_2563) = &input.elastic_gpu_ids {
        let mut list_2565 = scope_2562.start_list(true, Some("item"));
        for item_2564 in var_2563 {
            #[allow(unused_mut)]
            let mut entry_2566 = list_2565.entry();
            entry_2566.string(item_2564);
        }
        list_2565.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2567 = writer.prefix("DryRun");
    if let Some(var_2568) = &input.dry_run {
        scope_2567.boolean(*var_2568);
    }
    #[allow(unused_mut)]
    let mut scope_2569 = writer.prefix("Filter");
    if let Some(var_2570) = &input.filters {
        let mut list_2572 = scope_2569.start_list(true, Some("Filter"));
        for item_2571 in var_2570 {
            #[allow(unused_mut)]
            let mut entry_2573 = list_2572.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2573, item_2571)?;
        }
        list_2572.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2574 = writer.prefix("MaxResults");
    if let Some(var_2575) = &input.max_results {
        scope_2574.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2575).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2576 = writer.prefix("NextToken");
    if let Some(var_2577) = &input.next_token {
        scope_2576.string(var_2577);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_image_tasks(input: &crate::input::DescribeExportImageTasksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2578 = writer.prefix("DryRun");
    if let Some(var_2579) = &input.dry_run {
        scope_2578.boolean(*var_2579);
    }
    #[allow(unused_mut)]
    let mut scope_2580 = writer.prefix("Filter");
    if let Some(var_2581) = &input.filters {
        let mut list_2583 = scope_2580.start_list(true, Some("Filter"));
        for item_2582 in var_2581 {
            #[allow(unused_mut)]
            let mut entry_2584 = list_2583.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2584, item_2582)?;
        }
        list_2583.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2585 = writer.prefix("ExportImageTaskId");
    if let Some(var_2586) = &input.export_image_task_ids {
        let mut list_2588 = scope_2585.start_list(true, Some("ExportImageTaskId"));
        for item_2587 in var_2586 {
            #[allow(unused_mut)]
            let mut entry_2589 = list_2588.entry();
            entry_2589.string(item_2587);
        }
        list_2588.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2590 = writer.prefix("MaxResults");
    if let Some(var_2591) = &input.max_results {
        scope_2590.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2591).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2592 = writer.prefix("NextToken");
    if let Some(var_2593) = &input.next_token {
        scope_2592.string(var_2593);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(input: &crate::input::DescribeExportTasksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2594 = writer.prefix("ExportTaskId");
    if let Some(var_2595) = &input.export_task_ids {
        let mut list_2597 = scope_2594.start_list(true, Some("ExportTaskId"));
        for item_2596 in var_2595 {
            #[allow(unused_mut)]
            let mut entry_2598 = list_2597.entry();
            entry_2598.string(item_2596);
        }
        list_2597.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2599 = writer.prefix("Filter");
    if let Some(var_2600) = &input.filters {
        let mut list_2602 = scope_2599.start_list(true, Some("Filter"));
        for item_2601 in var_2600 {
            #[allow(unused_mut)]
            let mut entry_2603 = list_2602.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2603, item_2601)?;
        }
        list_2602.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_launch_images(input: &crate::input::DescribeFastLaunchImagesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastLaunchImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2604 = writer.prefix("ImageId");
    if let Some(var_2605) = &input.image_ids {
        let mut list_2607 = scope_2604.start_list(true, Some("ImageId"));
        for item_2606 in var_2605 {
            #[allow(unused_mut)]
            let mut entry_2608 = list_2607.entry();
            entry_2608.string(item_2606);
        }
        list_2607.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2609 = writer.prefix("Filter");
    if let Some(var_2610) = &input.filters {
        let mut list_2612 = scope_2609.start_list(true, Some("Filter"));
        for item_2611 in var_2610 {
            #[allow(unused_mut)]
            let mut entry_2613 = list_2612.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2613, item_2611)?;
        }
        list_2612.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2614 = writer.prefix("MaxResults");
    if let Some(var_2615) = &input.max_results {
        scope_2614.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2615).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2616 = writer.prefix("NextToken");
    if let Some(var_2617) = &input.next_token {
        scope_2616.string(var_2617);
    }
    #[allow(unused_mut)]
    let mut scope_2618 = writer.prefix("DryRun");
    if let Some(var_2619) = &input.dry_run {
        scope_2618.boolean(*var_2619);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_snapshot_restores(input: &crate::input::DescribeFastSnapshotRestoresInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2620 = writer.prefix("Filter");
    if let Some(var_2621) = &input.filters {
        let mut list_2623 = scope_2620.start_list(true, Some("Filter"));
        for item_2622 in var_2621 {
            #[allow(unused_mut)]
            let mut entry_2624 = list_2623.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2624, item_2622)?;
        }
        list_2623.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2625 = writer.prefix("MaxResults");
    if let Some(var_2626) = &input.max_results {
        scope_2625.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2626).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2627 = writer.prefix("NextToken");
    if let Some(var_2628) = &input.next_token {
        scope_2627.string(var_2628);
    }
    #[allow(unused_mut)]
    let mut scope_2629 = writer.prefix("DryRun");
    if let Some(var_2630) = &input.dry_run {
        scope_2629.boolean(*var_2630);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_history(input: &crate::input::DescribeFleetHistoryInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2631 = writer.prefix("DryRun");
    if let Some(var_2632) = &input.dry_run {
        scope_2631.boolean(*var_2632);
    }
    #[allow(unused_mut)]
    let mut scope_2633 = writer.prefix("EventType");
    if let Some(var_2634) = &input.event_type {
        scope_2633.string(var_2634.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2635 = writer.prefix("MaxResults");
    if let Some(var_2636) = &input.max_results {
        scope_2635.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2636).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2637 = writer.prefix("NextToken");
    if let Some(var_2638) = &input.next_token {
        scope_2637.string(var_2638);
    }
    #[allow(unused_mut)]
    let mut scope_2639 = writer.prefix("FleetId");
    if let Some(var_2640) = &input.fleet_id {
        scope_2639.string(var_2640);
    }
    #[allow(unused_mut)]
    let mut scope_2641 = writer.prefix("StartTime");
    if let Some(var_2642) = &input.start_time {
        scope_2641.date_time(var_2642, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_instances(input: &crate::input::DescribeFleetInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2643 = writer.prefix("DryRun");
    if let Some(var_2644) = &input.dry_run {
        scope_2643.boolean(*var_2644);
    }
    #[allow(unused_mut)]
    let mut scope_2645 = writer.prefix("MaxResults");
    if let Some(var_2646) = &input.max_results {
        scope_2645.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2646).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2647 = writer.prefix("NextToken");
    if let Some(var_2648) = &input.next_token {
        scope_2647.string(var_2648);
    }
    #[allow(unused_mut)]
    let mut scope_2649 = writer.prefix("FleetId");
    if let Some(var_2650) = &input.fleet_id {
        scope_2649.string(var_2650);
    }
    #[allow(unused_mut)]
    let mut scope_2651 = writer.prefix("Filter");
    if let Some(var_2652) = &input.filters {
        let mut list_2654 = scope_2651.start_list(true, Some("Filter"));
        for item_2653 in var_2652 {
            #[allow(unused_mut)]
            let mut entry_2655 = list_2654.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2655, item_2653)?;
        }
        list_2654.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleets(input: &crate::input::DescribeFleetsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2656 = writer.prefix("DryRun");
    if let Some(var_2657) = &input.dry_run {
        scope_2656.boolean(*var_2657);
    }
    #[allow(unused_mut)]
    let mut scope_2658 = writer.prefix("MaxResults");
    if let Some(var_2659) = &input.max_results {
        scope_2658.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2659).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2660 = writer.prefix("NextToken");
    if let Some(var_2661) = &input.next_token {
        scope_2660.string(var_2661);
    }
    #[allow(unused_mut)]
    let mut scope_2662 = writer.prefix("FleetId");
    if let Some(var_2663) = &input.fleet_ids {
        let mut list_2665 = scope_2662.start_list(true, None);
        for item_2664 in var_2663 {
            #[allow(unused_mut)]
            let mut entry_2666 = list_2665.entry();
            entry_2666.string(item_2664);
        }
        list_2665.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2667 = writer.prefix("Filter");
    if let Some(var_2668) = &input.filters {
        let mut list_2670 = scope_2667.start_list(true, Some("Filter"));
        for item_2669 in var_2668 {
            #[allow(unused_mut)]
            let mut entry_2671 = list_2670.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2671, item_2669)?;
        }
        list_2670.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_flow_logs(input: &crate::input::DescribeFlowLogsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2672 = writer.prefix("DryRun");
    if let Some(var_2673) = &input.dry_run {
        scope_2672.boolean(*var_2673);
    }
    #[allow(unused_mut)]
    let mut scope_2674 = writer.prefix("Filter");
    if let Some(var_2675) = &input.filter {
        let mut list_2677 = scope_2674.start_list(true, Some("Filter"));
        for item_2676 in var_2675 {
            #[allow(unused_mut)]
            let mut entry_2678 = list_2677.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2678, item_2676)?;
        }
        list_2677.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2679 = writer.prefix("FlowLogId");
    if let Some(var_2680) = &input.flow_log_ids {
        let mut list_2682 = scope_2679.start_list(true, Some("item"));
        for item_2681 in var_2680 {
            #[allow(unused_mut)]
            let mut entry_2683 = list_2682.entry();
            entry_2683.string(item_2681);
        }
        list_2682.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2684 = writer.prefix("MaxResults");
    if let Some(var_2685) = &input.max_results {
        scope_2684.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2685).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2686 = writer.prefix("NextToken");
    if let Some(var_2687) = &input.next_token {
        scope_2686.string(var_2687);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_image_attribute(input: &crate::input::DescribeFpgaImageAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2688 = writer.prefix("DryRun");
    if let Some(var_2689) = &input.dry_run {
        scope_2688.boolean(*var_2689);
    }
    #[allow(unused_mut)]
    let mut scope_2690 = writer.prefix("FpgaImageId");
    if let Some(var_2691) = &input.fpga_image_id {
        scope_2690.string(var_2691);
    }
    #[allow(unused_mut)]
    let mut scope_2692 = writer.prefix("Attribute");
    if let Some(var_2693) = &input.attribute {
        scope_2692.string(var_2693.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_images(input: &crate::input::DescribeFpgaImagesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2694 = writer.prefix("DryRun");
    if let Some(var_2695) = &input.dry_run {
        scope_2694.boolean(*var_2695);
    }
    #[allow(unused_mut)]
    let mut scope_2696 = writer.prefix("FpgaImageId");
    if let Some(var_2697) = &input.fpga_image_ids {
        let mut list_2699 = scope_2696.start_list(true, Some("item"));
        for item_2698 in var_2697 {
            #[allow(unused_mut)]
            let mut entry_2700 = list_2699.entry();
            entry_2700.string(item_2698);
        }
        list_2699.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2701 = writer.prefix("Owner");
    if let Some(var_2702) = &input.owners {
        let mut list_2704 = scope_2701.start_list(true, Some("Owner"));
        for item_2703 in var_2702 {
            #[allow(unused_mut)]
            let mut entry_2705 = list_2704.entry();
            entry_2705.string(item_2703);
        }
        list_2704.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2706 = writer.prefix("Filter");
    if let Some(var_2707) = &input.filters {
        let mut list_2709 = scope_2706.start_list(true, Some("Filter"));
        for item_2708 in var_2707 {
            #[allow(unused_mut)]
            let mut entry_2710 = list_2709.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2710, item_2708)?;
        }
        list_2709.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2711 = writer.prefix("NextToken");
    if let Some(var_2712) = &input.next_token {
        scope_2711.string(var_2712);
    }
    #[allow(unused_mut)]
    let mut scope_2713 = writer.prefix("MaxResults");
    if let Some(var_2714) = &input.max_results {
        scope_2713.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2714).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservation_offerings(input: &crate::input::DescribeHostReservationOfferingsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHostReservationOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2715 = writer.prefix("Filter");
    if let Some(var_2716) = &input.filter {
        let mut list_2718 = scope_2715.start_list(true, Some("Filter"));
        for item_2717 in var_2716 {
            #[allow(unused_mut)]
            let mut entry_2719 = list_2718.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2719, item_2717)?;
        }
        list_2718.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2720 = writer.prefix("MaxDuration");
    if let Some(var_2721) = &input.max_duration {
        scope_2720.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2721).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2722 = writer.prefix("MaxResults");
    if let Some(var_2723) = &input.max_results {
        scope_2722.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2723).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2724 = writer.prefix("MinDuration");
    if let Some(var_2725) = &input.min_duration {
        scope_2724.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2725).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2726 = writer.prefix("NextToken");
    if let Some(var_2727) = &input.next_token {
        scope_2726.string(var_2727);
    }
    #[allow(unused_mut)]
    let mut scope_2728 = writer.prefix("OfferingId");
    if let Some(var_2729) = &input.offering_id {
        scope_2728.string(var_2729);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservations(input: &crate::input::DescribeHostReservationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2730 = writer.prefix("Filter");
    if let Some(var_2731) = &input.filter {
        let mut list_2733 = scope_2730.start_list(true, Some("Filter"));
        for item_2732 in var_2731 {
            #[allow(unused_mut)]
            let mut entry_2734 = list_2733.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2734, item_2732)?;
        }
        list_2733.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2735 = writer.prefix("HostReservationIdSet");
    if let Some(var_2736) = &input.host_reservation_id_set {
        let mut list_2738 = scope_2735.start_list(true, Some("item"));
        for item_2737 in var_2736 {
            #[allow(unused_mut)]
            let mut entry_2739 = list_2738.entry();
            entry_2739.string(item_2737);
        }
        list_2738.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2740 = writer.prefix("MaxResults");
    if let Some(var_2741) = &input.max_results {
        scope_2740.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2741).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2742 = writer.prefix("NextToken");
    if let Some(var_2743) = &input.next_token {
        scope_2742.string(var_2743);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hosts(input: &crate::input::DescribeHostsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2744 = writer.prefix("Filter");
    if let Some(var_2745) = &input.filter {
        let mut list_2747 = scope_2744.start_list(true, Some("Filter"));
        for item_2746 in var_2745 {
            #[allow(unused_mut)]
            let mut entry_2748 = list_2747.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2748, item_2746)?;
        }
        list_2747.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2749 = writer.prefix("HostId");
    if let Some(var_2750) = &input.host_ids {
        let mut list_2752 = scope_2749.start_list(true, Some("item"));
        for item_2751 in var_2750 {
            #[allow(unused_mut)]
            let mut entry_2753 = list_2752.entry();
            entry_2753.string(item_2751);
        }
        list_2752.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2754 = writer.prefix("MaxResults");
    if let Some(var_2755) = &input.max_results {
        scope_2754.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2755).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2756 = writer.prefix("NextToken");
    if let Some(var_2757) = &input.next_token {
        scope_2756.string(var_2757);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_iam_instance_profile_associations(input: &crate::input::DescribeIamInstanceProfileAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIamInstanceProfileAssociations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2758 = writer.prefix("AssociationId");
    if let Some(var_2759) = &input.association_ids {
        let mut list_2761 = scope_2758.start_list(true, Some("AssociationId"));
        for item_2760 in var_2759 {
            #[allow(unused_mut)]
            let mut entry_2762 = list_2761.entry();
            entry_2762.string(item_2760);
        }
        list_2761.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2763 = writer.prefix("Filter");
    if let Some(var_2764) = &input.filters {
        let mut list_2766 = scope_2763.start_list(true, Some("Filter"));
        for item_2765 in var_2764 {
            #[allow(unused_mut)]
            let mut entry_2767 = list_2766.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2767, item_2765)?;
        }
        list_2766.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2768 = writer.prefix("MaxResults");
    if let Some(var_2769) = &input.max_results {
        scope_2768.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2769).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2770 = writer.prefix("NextToken");
    if let Some(var_2771) = &input.next_token {
        scope_2770.string(var_2771);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_identity_id_format(input: &crate::input::DescribeIdentityIdFormatInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2772 = writer.prefix("PrincipalArn");
    if let Some(var_2773) = &input.principal_arn {
        scope_2772.string(var_2773);
    }
    #[allow(unused_mut)]
    let mut scope_2774 = writer.prefix("Resource");
    if let Some(var_2775) = &input.resource {
        scope_2774.string(var_2775);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_id_format(input: &crate::input::DescribeIdFormatInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2776 = writer.prefix("Resource");
    if let Some(var_2777) = &input.resource {
        scope_2776.string(var_2777);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_image_attribute(input: &crate::input::DescribeImageAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2778 = writer.prefix("Attribute");
    if let Some(var_2779) = &input.attribute {
        scope_2778.string(var_2779.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2780 = writer.prefix("ImageId");
    if let Some(var_2781) = &input.image_id {
        scope_2780.string(var_2781);
    }
    #[allow(unused_mut)]
    let mut scope_2782 = writer.prefix("DryRun");
    if let Some(var_2783) = &input.dry_run {
        scope_2782.boolean(*var_2783);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_images(input: &crate::input::DescribeImagesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2784 = writer.prefix("ExecutableBy");
    if let Some(var_2785) = &input.executable_users {
        let mut list_2787 = scope_2784.start_list(true, Some("ExecutableBy"));
        for item_2786 in var_2785 {
            #[allow(unused_mut)]
            let mut entry_2788 = list_2787.entry();
            entry_2788.string(item_2786);
        }
        list_2787.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2789 = writer.prefix("Filter");
    if let Some(var_2790) = &input.filters {
        let mut list_2792 = scope_2789.start_list(true, Some("Filter"));
        for item_2791 in var_2790 {
            #[allow(unused_mut)]
            let mut entry_2793 = list_2792.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2793, item_2791)?;
        }
        list_2792.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2794 = writer.prefix("ImageId");
    if let Some(var_2795) = &input.image_ids {
        let mut list_2797 = scope_2794.start_list(true, Some("ImageId"));
        for item_2796 in var_2795 {
            #[allow(unused_mut)]
            let mut entry_2798 = list_2797.entry();
            entry_2798.string(item_2796);
        }
        list_2797.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2799 = writer.prefix("Owner");
    if let Some(var_2800) = &input.owners {
        let mut list_2802 = scope_2799.start_list(true, Some("Owner"));
        for item_2801 in var_2800 {
            #[allow(unused_mut)]
            let mut entry_2803 = list_2802.entry();
            entry_2803.string(item_2801);
        }
        list_2802.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2804 = writer.prefix("IncludeDeprecated");
    if let Some(var_2805) = &input.include_deprecated {
        scope_2804.boolean(*var_2805);
    }
    #[allow(unused_mut)]
    let mut scope_2806 = writer.prefix("DryRun");
    if let Some(var_2807) = &input.dry_run {
        scope_2806.boolean(*var_2807);
    }
    #[allow(unused_mut)]
    let mut scope_2808 = writer.prefix("MaxResults");
    if let Some(var_2809) = &input.max_results {
        scope_2808.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2809).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2810 = writer.prefix("NextToken");
    if let Some(var_2811) = &input.next_token {
        scope_2810.string(var_2811);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_image_tasks(input: &crate::input::DescribeImportImageTasksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2812 = writer.prefix("DryRun");
    if let Some(var_2813) = &input.dry_run {
        scope_2812.boolean(*var_2813);
    }
    #[allow(unused_mut)]
    let mut scope_2814 = writer.prefix("Filters");
    if let Some(var_2815) = &input.filters {
        let mut list_2817 = scope_2814.start_list(true, Some("Filter"));
        for item_2816 in var_2815 {
            #[allow(unused_mut)]
            let mut entry_2818 = list_2817.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2818, item_2816)?;
        }
        list_2817.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2819 = writer.prefix("ImportTaskId");
    if let Some(var_2820) = &input.import_task_ids {
        let mut list_2822 = scope_2819.start_list(true, Some("ImportTaskId"));
        for item_2821 in var_2820 {
            #[allow(unused_mut)]
            let mut entry_2823 = list_2822.entry();
            entry_2823.string(item_2821);
        }
        list_2822.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2824 = writer.prefix("MaxResults");
    if let Some(var_2825) = &input.max_results {
        scope_2824.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2825).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2826 = writer.prefix("NextToken");
    if let Some(var_2827) = &input.next_token {
        scope_2826.string(var_2827);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_snapshot_tasks(input: &crate::input::DescribeImportSnapshotTasksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2828 = writer.prefix("DryRun");
    if let Some(var_2829) = &input.dry_run {
        scope_2828.boolean(*var_2829);
    }
    #[allow(unused_mut)]
    let mut scope_2830 = writer.prefix("Filters");
    if let Some(var_2831) = &input.filters {
        let mut list_2833 = scope_2830.start_list(true, Some("Filter"));
        for item_2832 in var_2831 {
            #[allow(unused_mut)]
            let mut entry_2834 = list_2833.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2834, item_2832)?;
        }
        list_2833.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2835 = writer.prefix("ImportTaskId");
    if let Some(var_2836) = &input.import_task_ids {
        let mut list_2838 = scope_2835.start_list(true, Some("ImportTaskId"));
        for item_2837 in var_2836 {
            #[allow(unused_mut)]
            let mut entry_2839 = list_2838.entry();
            entry_2839.string(item_2837);
        }
        list_2838.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2840 = writer.prefix("MaxResults");
    if let Some(var_2841) = &input.max_results {
        scope_2840.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2841).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2842 = writer.prefix("NextToken");
    if let Some(var_2843) = &input.next_token {
        scope_2842.string(var_2843);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_attribute(input: &crate::input::DescribeInstanceAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2844 = writer.prefix("Attribute");
    if let Some(var_2845) = &input.attribute {
        scope_2844.string(var_2845.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2846 = writer.prefix("DryRun");
    if let Some(var_2847) = &input.dry_run {
        scope_2846.boolean(*var_2847);
    }
    #[allow(unused_mut)]
    let mut scope_2848 = writer.prefix("InstanceId");
    if let Some(var_2849) = &input.instance_id {
        scope_2848.string(var_2849);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_credit_specifications(input: &crate::input::DescribeInstanceCreditSpecificationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceCreditSpecifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2850 = writer.prefix("DryRun");
    if let Some(var_2851) = &input.dry_run {
        scope_2850.boolean(*var_2851);
    }
    #[allow(unused_mut)]
    let mut scope_2852 = writer.prefix("Filter");
    if let Some(var_2853) = &input.filters {
        let mut list_2855 = scope_2852.start_list(true, Some("Filter"));
        for item_2854 in var_2853 {
            #[allow(unused_mut)]
            let mut entry_2856 = list_2855.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2856, item_2854)?;
        }
        list_2855.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2857 = writer.prefix("InstanceId");
    if let Some(var_2858) = &input.instance_ids {
        let mut list_2860 = scope_2857.start_list(true, Some("InstanceId"));
        for item_2859 in var_2858 {
            #[allow(unused_mut)]
            let mut entry_2861 = list_2860.entry();
            entry_2861.string(item_2859);
        }
        list_2860.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2862 = writer.prefix("MaxResults");
    if let Some(var_2863) = &input.max_results {
        scope_2862.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2863).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2864 = writer.prefix("NextToken");
    if let Some(var_2865) = &input.next_token {
        scope_2864.string(var_2865);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_notification_attributes(input: &crate::input::DescribeInstanceEventNotificationAttributesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventNotificationAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2866 = writer.prefix("DryRun");
    if let Some(var_2867) = &input.dry_run {
        scope_2866.boolean(*var_2867);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_windows(input: &crate::input::DescribeInstanceEventWindowsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventWindows", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2868 = writer.prefix("DryRun");
    if let Some(var_2869) = &input.dry_run {
        scope_2868.boolean(*var_2869);
    }
    #[allow(unused_mut)]
    let mut scope_2870 = writer.prefix("InstanceEventWindowId");
    if let Some(var_2871) = &input.instance_event_window_ids {
        let mut list_2873 = scope_2870.start_list(true, Some("InstanceEventWindowId"));
        for item_2872 in var_2871 {
            #[allow(unused_mut)]
            let mut entry_2874 = list_2873.entry();
            entry_2874.string(item_2872);
        }
        list_2873.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2875 = writer.prefix("Filter");
    if let Some(var_2876) = &input.filters {
        let mut list_2878 = scope_2875.start_list(true, Some("Filter"));
        for item_2877 in var_2876 {
            #[allow(unused_mut)]
            let mut entry_2879 = list_2878.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2879, item_2877)?;
        }
        list_2878.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2880 = writer.prefix("MaxResults");
    if let Some(var_2881) = &input.max_results {
        scope_2880.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2881).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2882 = writer.prefix("NextToken");
    if let Some(var_2883) = &input.next_token {
        scope_2882.string(var_2883);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances(input: &crate::input::DescribeInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2884 = writer.prefix("Filter");
    if let Some(var_2885) = &input.filters {
        let mut list_2887 = scope_2884.start_list(true, Some("Filter"));
        for item_2886 in var_2885 {
            #[allow(unused_mut)]
            let mut entry_2888 = list_2887.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2888, item_2886)?;
        }
        list_2887.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2889 = writer.prefix("InstanceId");
    if let Some(var_2890) = &input.instance_ids {
        let mut list_2892 = scope_2889.start_list(true, Some("InstanceId"));
        for item_2891 in var_2890 {
            #[allow(unused_mut)]
            let mut entry_2893 = list_2892.entry();
            entry_2893.string(item_2891);
        }
        list_2892.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2894 = writer.prefix("DryRun");
    if let Some(var_2895) = &input.dry_run {
        scope_2894.boolean(*var_2895);
    }
    #[allow(unused_mut)]
    let mut scope_2896 = writer.prefix("MaxResults");
    if let Some(var_2897) = &input.max_results {
        scope_2896.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2897).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2898 = writer.prefix("NextToken");
    if let Some(var_2899) = &input.next_token {
        scope_2898.string(var_2899);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_status(input: &crate::input::DescribeInstanceStatusInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2900 = writer.prefix("Filter");
    if let Some(var_2901) = &input.filters {
        let mut list_2903 = scope_2900.start_list(true, Some("Filter"));
        for item_2902 in var_2901 {
            #[allow(unused_mut)]
            let mut entry_2904 = list_2903.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2904, item_2902)?;
        }
        list_2903.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2905 = writer.prefix("InstanceId");
    if let Some(var_2906) = &input.instance_ids {
        let mut list_2908 = scope_2905.start_list(true, Some("InstanceId"));
        for item_2907 in var_2906 {
            #[allow(unused_mut)]
            let mut entry_2909 = list_2908.entry();
            entry_2909.string(item_2907);
        }
        list_2908.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2910 = writer.prefix("MaxResults");
    if let Some(var_2911) = &input.max_results {
        scope_2910.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2911).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2912 = writer.prefix("NextToken");
    if let Some(var_2913) = &input.next_token {
        scope_2912.string(var_2913);
    }
    #[allow(unused_mut)]
    let mut scope_2914 = writer.prefix("DryRun");
    if let Some(var_2915) = &input.dry_run {
        scope_2914.boolean(*var_2915);
    }
    #[allow(unused_mut)]
    let mut scope_2916 = writer.prefix("IncludeAllInstances");
    if let Some(var_2917) = &input.include_all_instances {
        scope_2916.boolean(*var_2917);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_type_offerings(input: &crate::input::DescribeInstanceTypeOfferingsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2918 = writer.prefix("DryRun");
    if let Some(var_2919) = &input.dry_run {
        scope_2918.boolean(*var_2919);
    }
    #[allow(unused_mut)]
    let mut scope_2920 = writer.prefix("LocationType");
    if let Some(var_2921) = &input.location_type {
        scope_2920.string(var_2921.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2922 = writer.prefix("Filter");
    if let Some(var_2923) = &input.filters {
        let mut list_2925 = scope_2922.start_list(true, Some("Filter"));
        for item_2924 in var_2923 {
            #[allow(unused_mut)]
            let mut entry_2926 = list_2925.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2926, item_2924)?;
        }
        list_2925.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2927 = writer.prefix("MaxResults");
    if let Some(var_2928) = &input.max_results {
        scope_2927.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2928).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2929 = writer.prefix("NextToken");
    if let Some(var_2930) = &input.next_token {
        scope_2929.string(var_2930);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_types(input: &crate::input::DescribeInstanceTypesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2931 = writer.prefix("DryRun");
    if let Some(var_2932) = &input.dry_run {
        scope_2931.boolean(*var_2932);
    }
    #[allow(unused_mut)]
    let mut scope_2933 = writer.prefix("InstanceType");
    if let Some(var_2934) = &input.instance_types {
        let mut list_2936 = scope_2933.start_list(true, None);
        for item_2935 in var_2934 {
            #[allow(unused_mut)]
            let mut entry_2937 = list_2936.entry();
            entry_2937.string(item_2935.as_str());
        }
        list_2936.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2938 = writer.prefix("Filter");
    if let Some(var_2939) = &input.filters {
        let mut list_2941 = scope_2938.start_list(true, Some("Filter"));
        for item_2940 in var_2939 {
            #[allow(unused_mut)]
            let mut entry_2942 = list_2941.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2942, item_2940)?;
        }
        list_2941.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2943 = writer.prefix("MaxResults");
    if let Some(var_2944) = &input.max_results {
        scope_2943.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2944).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2945 = writer.prefix("NextToken");
    if let Some(var_2946) = &input.next_token {
        scope_2945.string(var_2946);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_internet_gateways(input: &crate::input::DescribeInternetGatewaysInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2947 = writer.prefix("Filter");
    if let Some(var_2948) = &input.filters {
        let mut list_2950 = scope_2947.start_list(true, Some("Filter"));
        for item_2949 in var_2948 {
            #[allow(unused_mut)]
            let mut entry_2951 = list_2950.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2951, item_2949)?;
        }
        list_2950.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2952 = writer.prefix("DryRun");
    if let Some(var_2953) = &input.dry_run {
        scope_2952.boolean(*var_2953);
    }
    #[allow(unused_mut)]
    let mut scope_2954 = writer.prefix("InternetGatewayId");
    if let Some(var_2955) = &input.internet_gateway_ids {
        let mut list_2957 = scope_2954.start_list(true, Some("item"));
        for item_2956 in var_2955 {
            #[allow(unused_mut)]
            let mut entry_2958 = list_2957.entry();
            entry_2958.string(item_2956);
        }
        list_2957.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2959 = writer.prefix("NextToken");
    if let Some(var_2960) = &input.next_token {
        scope_2959.string(var_2960);
    }
    #[allow(unused_mut)]
    let mut scope_2961 = writer.prefix("MaxResults");
    if let Some(var_2962) = &input.max_results {
        scope_2961.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2962).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_pools(input: &crate::input::DescribeIpamPoolsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2963 = writer.prefix("DryRun");
    if let Some(var_2964) = &input.dry_run {
        scope_2963.boolean(*var_2964);
    }
    #[allow(unused_mut)]
    let mut scope_2965 = writer.prefix("Filter");
    if let Some(var_2966) = &input.filters {
        let mut list_2968 = scope_2965.start_list(true, Some("Filter"));
        for item_2967 in var_2966 {
            #[allow(unused_mut)]
            let mut entry_2969 = list_2968.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2969, item_2967)?;
        }
        list_2968.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2970 = writer.prefix("MaxResults");
    if let Some(var_2971) = &input.max_results {
        scope_2970.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2971).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2972 = writer.prefix("NextToken");
    if let Some(var_2973) = &input.next_token {
        scope_2972.string(var_2973);
    }
    #[allow(unused_mut)]
    let mut scope_2974 = writer.prefix("IpamPoolId");
    if let Some(var_2975) = &input.ipam_pool_ids {
        let mut list_2977 = scope_2974.start_list(true, Some("item"));
        for item_2976 in var_2975 {
            #[allow(unused_mut)]
            let mut entry_2978 = list_2977.entry();
            entry_2978.string(item_2976);
        }
        list_2977.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipams(input: &crate::input::DescribeIpamsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpams", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2979 = writer.prefix("DryRun");
    if let Some(var_2980) = &input.dry_run {
        scope_2979.boolean(*var_2980);
    }
    #[allow(unused_mut)]
    let mut scope_2981 = writer.prefix("Filter");
    if let Some(var_2982) = &input.filters {
        let mut list_2984 = scope_2981.start_list(true, Some("Filter"));
        for item_2983 in var_2982 {
            #[allow(unused_mut)]
            let mut entry_2985 = list_2984.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2985, item_2983)?;
        }
        list_2984.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2986 = writer.prefix("MaxResults");
    if let Some(var_2987) = &input.max_results {
        scope_2986.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2987).into()));
    }
    #[allow(unused_mut)]
    let mut scope_2988 = writer.prefix("NextToken");
    if let Some(var_2989) = &input.next_token {
        scope_2988.string(var_2989);
    }
    #[allow(unused_mut)]
    let mut scope_2990 = writer.prefix("IpamId");
    if let Some(var_2991) = &input.ipam_ids {
        let mut list_2993 = scope_2990.start_list(true, Some("item"));
        for item_2992 in var_2991 {
            #[allow(unused_mut)]
            let mut entry_2994 = list_2993.entry();
            entry_2994.string(item_2992);
        }
        list_2993.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_scopes(input: &crate::input::DescribeIpamScopesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamScopes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2995 = writer.prefix("DryRun");
    if let Some(var_2996) = &input.dry_run {
        scope_2995.boolean(*var_2996);
    }
    #[allow(unused_mut)]
    let mut scope_2997 = writer.prefix("Filter");
    if let Some(var_2998) = &input.filters {
        let mut list_3000 = scope_2997.start_list(true, Some("Filter"));
        for item_2999 in var_2998 {
            #[allow(unused_mut)]
            let mut entry_3001 = list_3000.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3001, item_2999)?;
        }
        list_3000.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3002 = writer.prefix("MaxResults");
    if let Some(var_3003) = &input.max_results {
        scope_3002.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3003).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3004 = writer.prefix("NextToken");
    if let Some(var_3005) = &input.next_token {
        scope_3004.string(var_3005);
    }
    #[allow(unused_mut)]
    let mut scope_3006 = writer.prefix("IpamScopeId");
    if let Some(var_3007) = &input.ipam_scope_ids {
        let mut list_3009 = scope_3006.start_list(true, Some("item"));
        for item_3008 in var_3007 {
            #[allow(unused_mut)]
            let mut entry_3010 = list_3009.entry();
            entry_3010.string(item_3008);
        }
        list_3009.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipv6_pools(input: &crate::input::DescribeIpv6PoolsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3011 = writer.prefix("PoolId");
    if let Some(var_3012) = &input.pool_ids {
        let mut list_3014 = scope_3011.start_list(true, Some("item"));
        for item_3013 in var_3012 {
            #[allow(unused_mut)]
            let mut entry_3015 = list_3014.entry();
            entry_3015.string(item_3013);
        }
        list_3014.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3016 = writer.prefix("NextToken");
    if let Some(var_3017) = &input.next_token {
        scope_3016.string(var_3017);
    }
    #[allow(unused_mut)]
    let mut scope_3018 = writer.prefix("MaxResults");
    if let Some(var_3019) = &input.max_results {
        scope_3018.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3019).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3020 = writer.prefix("DryRun");
    if let Some(var_3021) = &input.dry_run {
        scope_3020.boolean(*var_3021);
    }
    #[allow(unused_mut)]
    let mut scope_3022 = writer.prefix("Filter");
    if let Some(var_3023) = &input.filters {
        let mut list_3025 = scope_3022.start_list(true, Some("Filter"));
        for item_3024 in var_3023 {
            #[allow(unused_mut)]
            let mut entry_3026 = list_3025.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3026, item_3024)?;
        }
        list_3025.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_key_pairs(input: &crate::input::DescribeKeyPairsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3027 = writer.prefix("Filter");
    if let Some(var_3028) = &input.filters {
        let mut list_3030 = scope_3027.start_list(true, Some("Filter"));
        for item_3029 in var_3028 {
            #[allow(unused_mut)]
            let mut entry_3031 = list_3030.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3031, item_3029)?;
        }
        list_3030.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3032 = writer.prefix("KeyName");
    if let Some(var_3033) = &input.key_names {
        let mut list_3035 = scope_3032.start_list(true, Some("KeyName"));
        for item_3034 in var_3033 {
            #[allow(unused_mut)]
            let mut entry_3036 = list_3035.entry();
            entry_3036.string(item_3034);
        }
        list_3035.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3037 = writer.prefix("KeyPairId");
    if let Some(var_3038) = &input.key_pair_ids {
        let mut list_3040 = scope_3037.start_list(true, Some("KeyPairId"));
        for item_3039 in var_3038 {
            #[allow(unused_mut)]
            let mut entry_3041 = list_3040.entry();
            entry_3041.string(item_3039);
        }
        list_3040.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3042 = writer.prefix("DryRun");
    if let Some(var_3043) = &input.dry_run {
        scope_3042.boolean(*var_3043);
    }
    #[allow(unused_mut)]
    let mut scope_3044 = writer.prefix("IncludePublicKey");
    if let Some(var_3045) = &input.include_public_key {
        scope_3044.boolean(*var_3045);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_templates(input: &crate::input::DescribeLaunchTemplatesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3046 = writer.prefix("DryRun");
    if let Some(var_3047) = &input.dry_run {
        scope_3046.boolean(*var_3047);
    }
    #[allow(unused_mut)]
    let mut scope_3048 = writer.prefix("LaunchTemplateId");
    if let Some(var_3049) = &input.launch_template_ids {
        let mut list_3051 = scope_3048.start_list(true, Some("item"));
        for item_3050 in var_3049 {
            #[allow(unused_mut)]
            let mut entry_3052 = list_3051.entry();
            entry_3052.string(item_3050);
        }
        list_3051.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3053 = writer.prefix("LaunchTemplateName");
    if let Some(var_3054) = &input.launch_template_names {
        let mut list_3056 = scope_3053.start_list(true, Some("item"));
        for item_3055 in var_3054 {
            #[allow(unused_mut)]
            let mut entry_3057 = list_3056.entry();
            entry_3057.string(item_3055);
        }
        list_3056.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3058 = writer.prefix("Filter");
    if let Some(var_3059) = &input.filters {
        let mut list_3061 = scope_3058.start_list(true, Some("Filter"));
        for item_3060 in var_3059 {
            #[allow(unused_mut)]
            let mut entry_3062 = list_3061.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3062, item_3060)?;
        }
        list_3061.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3063 = writer.prefix("NextToken");
    if let Some(var_3064) = &input.next_token {
        scope_3063.string(var_3064);
    }
    #[allow(unused_mut)]
    let mut scope_3065 = writer.prefix("MaxResults");
    if let Some(var_3066) = &input.max_results {
        scope_3065.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3066).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_template_versions(input: &crate::input::DescribeLaunchTemplateVersionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3067 = writer.prefix("DryRun");
    if let Some(var_3068) = &input.dry_run {
        scope_3067.boolean(*var_3068);
    }
    #[allow(unused_mut)]
    let mut scope_3069 = writer.prefix("LaunchTemplateId");
    if let Some(var_3070) = &input.launch_template_id {
        scope_3069.string(var_3070);
    }
    #[allow(unused_mut)]
    let mut scope_3071 = writer.prefix("LaunchTemplateName");
    if let Some(var_3072) = &input.launch_template_name {
        scope_3071.string(var_3072);
    }
    #[allow(unused_mut)]
    let mut scope_3073 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_3074) = &input.versions {
        let mut list_3076 = scope_3073.start_list(true, Some("item"));
        for item_3075 in var_3074 {
            #[allow(unused_mut)]
            let mut entry_3077 = list_3076.entry();
            entry_3077.string(item_3075);
        }
        list_3076.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3078 = writer.prefix("MinVersion");
    if let Some(var_3079) = &input.min_version {
        scope_3078.string(var_3079);
    }
    #[allow(unused_mut)]
    let mut scope_3080 = writer.prefix("MaxVersion");
    if let Some(var_3081) = &input.max_version {
        scope_3080.string(var_3081);
    }
    #[allow(unused_mut)]
    let mut scope_3082 = writer.prefix("NextToken");
    if let Some(var_3083) = &input.next_token {
        scope_3082.string(var_3083);
    }
    #[allow(unused_mut)]
    let mut scope_3084 = writer.prefix("MaxResults");
    if let Some(var_3085) = &input.max_results {
        scope_3084.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3085).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3086 = writer.prefix("Filter");
    if let Some(var_3087) = &input.filters {
        let mut list_3089 = scope_3086.start_list(true, Some("Filter"));
        for item_3088 in var_3087 {
            #[allow(unused_mut)]
            let mut entry_3090 = list_3089.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3090, item_3088)?;
        }
        list_3089.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_tables(input: &crate::input::DescribeLocalGatewayRouteTablesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGatewayRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3091 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_3092) = &input.local_gateway_route_table_ids {
        let mut list_3094 = scope_3091.start_list(true, Some("item"));
        for item_3093 in var_3092 {
            #[allow(unused_mut)]
            let mut entry_3095 = list_3094.entry();
            entry_3095.string(item_3093);
        }
        list_3094.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3096 = writer.prefix("Filter");
    if let Some(var_3097) = &input.filters {
        let mut list_3099 = scope_3096.start_list(true, Some("Filter"));
        for item_3098 in var_3097 {
            #[allow(unused_mut)]
            let mut entry_3100 = list_3099.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3100, item_3098)?;
        }
        list_3099.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3101 = writer.prefix("MaxResults");
    if let Some(var_3102) = &input.max_results {
        scope_3101.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3102).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3103 = writer.prefix("NextToken");
    if let Some(var_3104) = &input.next_token {
        scope_3103.string(var_3104);
    }
    #[allow(unused_mut)]
    let mut scope_3105 = writer.prefix("DryRun");
    if let Some(var_3106) = &input.dry_run {
        scope_3105.boolean(*var_3106);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_virtual_interface_group_associations(input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3107 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_3108) = &input.local_gateway_route_table_virtual_interface_group_association_ids {
        let mut list_3110 = scope_3107.start_list(true, Some("item"));
        for item_3109 in var_3108 {
            #[allow(unused_mut)]
            let mut entry_3111 = list_3110.entry();
            entry_3111.string(item_3109);
        }
        list_3110.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3112 = writer.prefix("Filter");
    if let Some(var_3113) = &input.filters {
        let mut list_3115 = scope_3112.start_list(true, Some("Filter"));
        for item_3114 in var_3113 {
            #[allow(unused_mut)]
            let mut entry_3116 = list_3115.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3116, item_3114)?;
        }
        list_3115.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3117 = writer.prefix("MaxResults");
    if let Some(var_3118) = &input.max_results {
        scope_3117.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3118).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3119 = writer.prefix("NextToken");
    if let Some(var_3120) = &input.next_token {
        scope_3119.string(var_3120);
    }
    #[allow(unused_mut)]
    let mut scope_3121 = writer.prefix("DryRun");
    if let Some(var_3122) = &input.dry_run {
        scope_3121.boolean(*var_3122);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_vpc_associations(input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGatewayRouteTableVpcAssociations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3123 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_3124) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_3126 = scope_3123.start_list(true, Some("item"));
        for item_3125 in var_3124 {
            #[allow(unused_mut)]
            let mut entry_3127 = list_3126.entry();
            entry_3127.string(item_3125);
        }
        list_3126.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3128 = writer.prefix("Filter");
    if let Some(var_3129) = &input.filters {
        let mut list_3131 = scope_3128.start_list(true, Some("Filter"));
        for item_3130 in var_3129 {
            #[allow(unused_mut)]
            let mut entry_3132 = list_3131.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3132, item_3130)?;
        }
        list_3131.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3133 = writer.prefix("MaxResults");
    if let Some(var_3134) = &input.max_results {
        scope_3133.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3134).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3135 = writer.prefix("NextToken");
    if let Some(var_3136) = &input.next_token {
        scope_3135.string(var_3136);
    }
    #[allow(unused_mut)]
    let mut scope_3137 = writer.prefix("DryRun");
    if let Some(var_3138) = &input.dry_run {
        scope_3137.boolean(*var_3138);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateways(input: &crate::input::DescribeLocalGatewaysInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3139 = writer.prefix("LocalGatewayId");
    if let Some(var_3140) = &input.local_gateway_ids {
        let mut list_3142 = scope_3139.start_list(true, Some("item"));
        for item_3141 in var_3140 {
            #[allow(unused_mut)]
            let mut entry_3143 = list_3142.entry();
            entry_3143.string(item_3141);
        }
        list_3142.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3144 = writer.prefix("Filter");
    if let Some(var_3145) = &input.filters {
        let mut list_3147 = scope_3144.start_list(true, Some("Filter"));
        for item_3146 in var_3145 {
            #[allow(unused_mut)]
            let mut entry_3148 = list_3147.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3148, item_3146)?;
        }
        list_3147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3149 = writer.prefix("MaxResults");
    if let Some(var_3150) = &input.max_results {
        scope_3149.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3150).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3151 = writer.prefix("NextToken");
    if let Some(var_3152) = &input.next_token {
        scope_3151.string(var_3152);
    }
    #[allow(unused_mut)]
    let mut scope_3153 = writer.prefix("DryRun");
    if let Some(var_3154) = &input.dry_run {
        scope_3153.boolean(*var_3154);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interface_groups(input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGatewayVirtualInterfaceGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3155 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_3156) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_3158 = scope_3155.start_list(true, Some("item"));
        for item_3157 in var_3156 {
            #[allow(unused_mut)]
            let mut entry_3159 = list_3158.entry();
            entry_3159.string(item_3157);
        }
        list_3158.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3160 = writer.prefix("Filter");
    if let Some(var_3161) = &input.filters {
        let mut list_3163 = scope_3160.start_list(true, Some("Filter"));
        for item_3162 in var_3161 {
            #[allow(unused_mut)]
            let mut entry_3164 = list_3163.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3164, item_3162)?;
        }
        list_3163.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3165 = writer.prefix("MaxResults");
    if let Some(var_3166) = &input.max_results {
        scope_3165.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3166).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3167 = writer.prefix("NextToken");
    if let Some(var_3168) = &input.next_token {
        scope_3167.string(var_3168);
    }
    #[allow(unused_mut)]
    let mut scope_3169 = writer.prefix("DryRun");
    if let Some(var_3170) = &input.dry_run {
        scope_3169.boolean(*var_3170);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interfaces(input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGatewayVirtualInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3171 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_3172) = &input.local_gateway_virtual_interface_ids {
        let mut list_3174 = scope_3171.start_list(true, Some("item"));
        for item_3173 in var_3172 {
            #[allow(unused_mut)]
            let mut entry_3175 = list_3174.entry();
            entry_3175.string(item_3173);
        }
        list_3174.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3176 = writer.prefix("Filter");
    if let Some(var_3177) = &input.filters {
        let mut list_3179 = scope_3176.start_list(true, Some("Filter"));
        for item_3178 in var_3177 {
            #[allow(unused_mut)]
            let mut entry_3180 = list_3179.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3180, item_3178)?;
        }
        list_3179.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3181 = writer.prefix("MaxResults");
    if let Some(var_3182) = &input.max_results {
        scope_3181.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3182).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3183 = writer.prefix("NextToken");
    if let Some(var_3184) = &input.next_token {
        scope_3183.string(var_3184);
    }
    #[allow(unused_mut)]
    let mut scope_3185 = writer.prefix("DryRun");
    if let Some(var_3186) = &input.dry_run {
        scope_3185.boolean(*var_3186);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_managed_prefix_lists(input: &crate::input::DescribeManagedPrefixListsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3187 = writer.prefix("DryRun");
    if let Some(var_3188) = &input.dry_run {
        scope_3187.boolean(*var_3188);
    }
    #[allow(unused_mut)]
    let mut scope_3189 = writer.prefix("Filter");
    if let Some(var_3190) = &input.filters {
        let mut list_3192 = scope_3189.start_list(true, Some("Filter"));
        for item_3191 in var_3190 {
            #[allow(unused_mut)]
            let mut entry_3193 = list_3192.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3193, item_3191)?;
        }
        list_3192.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3194 = writer.prefix("MaxResults");
    if let Some(var_3195) = &input.max_results {
        scope_3194.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3195).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3196 = writer.prefix("NextToken");
    if let Some(var_3197) = &input.next_token {
        scope_3196.string(var_3197);
    }
    #[allow(unused_mut)]
    let mut scope_3198 = writer.prefix("PrefixListId");
    if let Some(var_3199) = &input.prefix_list_ids {
        let mut list_3201 = scope_3198.start_list(true, Some("item"));
        for item_3200 in var_3199 {
            #[allow(unused_mut)]
            let mut entry_3202 = list_3201.entry();
            entry_3202.string(item_3200);
        }
        list_3201.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_moving_addresses(input: &crate::input::DescribeMovingAddressesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3203 = writer.prefix("Filter");
    if let Some(var_3204) = &input.filters {
        let mut list_3206 = scope_3203.start_list(true, Some("Filter"));
        for item_3205 in var_3204 {
            #[allow(unused_mut)]
            let mut entry_3207 = list_3206.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3207, item_3205)?;
        }
        list_3206.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3208 = writer.prefix("DryRun");
    if let Some(var_3209) = &input.dry_run {
        scope_3208.boolean(*var_3209);
    }
    #[allow(unused_mut)]
    let mut scope_3210 = writer.prefix("MaxResults");
    if let Some(var_3211) = &input.max_results {
        scope_3210.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3211).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3212 = writer.prefix("NextToken");
    if let Some(var_3213) = &input.next_token {
        scope_3212.string(var_3213);
    }
    #[allow(unused_mut)]
    let mut scope_3214 = writer.prefix("PublicIp");
    if let Some(var_3215) = &input.public_ips {
        let mut list_3217 = scope_3214.start_list(true, Some("item"));
        for item_3216 in var_3215 {
            #[allow(unused_mut)]
            let mut entry_3218 = list_3217.entry();
            entry_3218.string(item_3216);
        }
        list_3217.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_nat_gateways(input: &crate::input::DescribeNatGatewaysInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3219 = writer.prefix("DryRun");
    if let Some(var_3220) = &input.dry_run {
        scope_3219.boolean(*var_3220);
    }
    #[allow(unused_mut)]
    let mut scope_3221 = writer.prefix("Filter");
    if let Some(var_3222) = &input.filter {
        let mut list_3224 = scope_3221.start_list(true, Some("Filter"));
        for item_3223 in var_3222 {
            #[allow(unused_mut)]
            let mut entry_3225 = list_3224.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3225, item_3223)?;
        }
        list_3224.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3226 = writer.prefix("MaxResults");
    if let Some(var_3227) = &input.max_results {
        scope_3226.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3227).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3228 = writer.prefix("NatGatewayId");
    if let Some(var_3229) = &input.nat_gateway_ids {
        let mut list_3231 = scope_3228.start_list(true, Some("item"));
        for item_3230 in var_3229 {
            #[allow(unused_mut)]
            let mut entry_3232 = list_3231.entry();
            entry_3232.string(item_3230);
        }
        list_3231.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3233 = writer.prefix("NextToken");
    if let Some(var_3234) = &input.next_token {
        scope_3233.string(var_3234);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_acls(input: &crate::input::DescribeNetworkAclsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3235 = writer.prefix("Filter");
    if let Some(var_3236) = &input.filters {
        let mut list_3238 = scope_3235.start_list(true, Some("Filter"));
        for item_3237 in var_3236 {
            #[allow(unused_mut)]
            let mut entry_3239 = list_3238.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3239, item_3237)?;
        }
        list_3238.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3240 = writer.prefix("DryRun");
    if let Some(var_3241) = &input.dry_run {
        scope_3240.boolean(*var_3241);
    }
    #[allow(unused_mut)]
    let mut scope_3242 = writer.prefix("NetworkAclId");
    if let Some(var_3243) = &input.network_acl_ids {
        let mut list_3245 = scope_3242.start_list(true, Some("item"));
        for item_3244 in var_3243 {
            #[allow(unused_mut)]
            let mut entry_3246 = list_3245.entry();
            entry_3246.string(item_3244);
        }
        list_3245.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3247 = writer.prefix("NextToken");
    if let Some(var_3248) = &input.next_token {
        scope_3247.string(var_3248);
    }
    #[allow(unused_mut)]
    let mut scope_3249 = writer.prefix("MaxResults");
    if let Some(var_3250) = &input.max_results {
        scope_3249.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3250).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scope_analyses(input: &crate::input::DescribeNetworkInsightsAccessScopeAnalysesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsAccessScopeAnalyses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3251 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_3252) = &input.network_insights_access_scope_analysis_ids {
        let mut list_3254 = scope_3251.start_list(true, Some("item"));
        for item_3253 in var_3252 {
            #[allow(unused_mut)]
            let mut entry_3255 = list_3254.entry();
            entry_3255.string(item_3253);
        }
        list_3254.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3256 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_3257) = &input.network_insights_access_scope_id {
        scope_3256.string(var_3257);
    }
    #[allow(unused_mut)]
    let mut scope_3258 = writer.prefix("AnalysisStartTimeBegin");
    if let Some(var_3259) = &input.analysis_start_time_begin {
        scope_3258.date_time(var_3259, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3260 = writer.prefix("AnalysisStartTimeEnd");
    if let Some(var_3261) = &input.analysis_start_time_end {
        scope_3260.date_time(var_3261, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3262 = writer.prefix("Filter");
    if let Some(var_3263) = &input.filters {
        let mut list_3265 = scope_3262.start_list(true, Some("Filter"));
        for item_3264 in var_3263 {
            #[allow(unused_mut)]
            let mut entry_3266 = list_3265.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3266, item_3264)?;
        }
        list_3265.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3267 = writer.prefix("MaxResults");
    if let Some(var_3268) = &input.max_results {
        scope_3267.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3268).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3269 = writer.prefix("DryRun");
    if let Some(var_3270) = &input.dry_run {
        scope_3269.boolean(*var_3270);
    }
    #[allow(unused_mut)]
    let mut scope_3271 = writer.prefix("NextToken");
    if let Some(var_3272) = &input.next_token {
        scope_3271.string(var_3272);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scopes(input: &crate::input::DescribeNetworkInsightsAccessScopesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsAccessScopes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3273 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_3274) = &input.network_insights_access_scope_ids {
        let mut list_3276 = scope_3273.start_list(true, Some("item"));
        for item_3275 in var_3274 {
            #[allow(unused_mut)]
            let mut entry_3277 = list_3276.entry();
            entry_3277.string(item_3275);
        }
        list_3276.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3278 = writer.prefix("Filter");
    if let Some(var_3279) = &input.filters {
        let mut list_3281 = scope_3278.start_list(true, Some("Filter"));
        for item_3280 in var_3279 {
            #[allow(unused_mut)]
            let mut entry_3282 = list_3281.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3282, item_3280)?;
        }
        list_3281.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3283 = writer.prefix("MaxResults");
    if let Some(var_3284) = &input.max_results {
        scope_3283.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3284).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3285 = writer.prefix("DryRun");
    if let Some(var_3286) = &input.dry_run {
        scope_3285.boolean(*var_3286);
    }
    #[allow(unused_mut)]
    let mut scope_3287 = writer.prefix("NextToken");
    if let Some(var_3288) = &input.next_token {
        scope_3287.string(var_3288);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_analyses(input: &crate::input::DescribeNetworkInsightsAnalysesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsAnalyses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3289 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_3290) = &input.network_insights_analysis_ids {
        let mut list_3292 = scope_3289.start_list(true, Some("item"));
        for item_3291 in var_3290 {
            #[allow(unused_mut)]
            let mut entry_3293 = list_3292.entry();
            entry_3293.string(item_3291);
        }
        list_3292.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3294 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3295) = &input.network_insights_path_id {
        scope_3294.string(var_3295);
    }
    #[allow(unused_mut)]
    let mut scope_3296 = writer.prefix("AnalysisStartTime");
    if let Some(var_3297) = &input.analysis_start_time {
        scope_3296.date_time(var_3297, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3298 = writer.prefix("AnalysisEndTime");
    if let Some(var_3299) = &input.analysis_end_time {
        scope_3298.date_time(var_3299, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3300 = writer.prefix("Filter");
    if let Some(var_3301) = &input.filters {
        let mut list_3303 = scope_3300.start_list(true, Some("Filter"));
        for item_3302 in var_3301 {
            #[allow(unused_mut)]
            let mut entry_3304 = list_3303.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3304, item_3302)?;
        }
        list_3303.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3305 = writer.prefix("MaxResults");
    if let Some(var_3306) = &input.max_results {
        scope_3305.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3306).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3307 = writer.prefix("DryRun");
    if let Some(var_3308) = &input.dry_run {
        scope_3307.boolean(*var_3308);
    }
    #[allow(unused_mut)]
    let mut scope_3309 = writer.prefix("NextToken");
    if let Some(var_3310) = &input.next_token {
        scope_3309.string(var_3310);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_paths(input: &crate::input::DescribeNetworkInsightsPathsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3311 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3312) = &input.network_insights_path_ids {
        let mut list_3314 = scope_3311.start_list(true, Some("item"));
        for item_3313 in var_3312 {
            #[allow(unused_mut)]
            let mut entry_3315 = list_3314.entry();
            entry_3315.string(item_3313);
        }
        list_3314.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3316 = writer.prefix("Filter");
    if let Some(var_3317) = &input.filters {
        let mut list_3319 = scope_3316.start_list(true, Some("Filter"));
        for item_3318 in var_3317 {
            #[allow(unused_mut)]
            let mut entry_3320 = list_3319.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3320, item_3318)?;
        }
        list_3319.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3321 = writer.prefix("MaxResults");
    if let Some(var_3322) = &input.max_results {
        scope_3321.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3322).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3323 = writer.prefix("DryRun");
    if let Some(var_3324) = &input.dry_run {
        scope_3323.boolean(*var_3324);
    }
    #[allow(unused_mut)]
    let mut scope_3325 = writer.prefix("NextToken");
    if let Some(var_3326) = &input.next_token {
        scope_3325.string(var_3326);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_attribute(input: &crate::input::DescribeNetworkInterfaceAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3327 = writer.prefix("Attribute");
    if let Some(var_3328) = &input.attribute {
        scope_3327.string(var_3328.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3329 = writer.prefix("DryRun");
    if let Some(var_3330) = &input.dry_run {
        scope_3329.boolean(*var_3330);
    }
    #[allow(unused_mut)]
    let mut scope_3331 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3332) = &input.network_interface_id {
        scope_3331.string(var_3332);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_permissions(input: &crate::input::DescribeNetworkInterfacePermissionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfacePermissions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3333 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_3334) = &input.network_interface_permission_ids {
        let mut list_3336 = scope_3333.start_list(true, None);
        for item_3335 in var_3334 {
            #[allow(unused_mut)]
            let mut entry_3337 = list_3336.entry();
            entry_3337.string(item_3335);
        }
        list_3336.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3338 = writer.prefix("Filter");
    if let Some(var_3339) = &input.filters {
        let mut list_3341 = scope_3338.start_list(true, Some("Filter"));
        for item_3340 in var_3339 {
            #[allow(unused_mut)]
            let mut entry_3342 = list_3341.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3342, item_3340)?;
        }
        list_3341.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3343 = writer.prefix("NextToken");
    if let Some(var_3344) = &input.next_token {
        scope_3343.string(var_3344);
    }
    #[allow(unused_mut)]
    let mut scope_3345 = writer.prefix("MaxResults");
    if let Some(var_3346) = &input.max_results {
        scope_3345.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3346).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interfaces(input: &crate::input::DescribeNetworkInterfacesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3347 = writer.prefix("Filter");
    if let Some(var_3348) = &input.filters {
        let mut list_3350 = scope_3347.start_list(true, Some("Filter"));
        for item_3349 in var_3348 {
            #[allow(unused_mut)]
            let mut entry_3351 = list_3350.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3351, item_3349)?;
        }
        list_3350.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3352 = writer.prefix("DryRun");
    if let Some(var_3353) = &input.dry_run {
        scope_3352.boolean(*var_3353);
    }
    #[allow(unused_mut)]
    let mut scope_3354 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3355) = &input.network_interface_ids {
        let mut list_3357 = scope_3354.start_list(true, Some("item"));
        for item_3356 in var_3355 {
            #[allow(unused_mut)]
            let mut entry_3358 = list_3357.entry();
            entry_3358.string(item_3356);
        }
        list_3357.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3359 = writer.prefix("NextToken");
    if let Some(var_3360) = &input.next_token {
        scope_3359.string(var_3360);
    }
    #[allow(unused_mut)]
    let mut scope_3361 = writer.prefix("MaxResults");
    if let Some(var_3362) = &input.max_results {
        scope_3361.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3362).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_placement_groups(input: &crate::input::DescribePlacementGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3363 = writer.prefix("Filter");
    if let Some(var_3364) = &input.filters {
        let mut list_3366 = scope_3363.start_list(true, Some("Filter"));
        for item_3365 in var_3364 {
            #[allow(unused_mut)]
            let mut entry_3367 = list_3366.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3367, item_3365)?;
        }
        list_3366.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3368 = writer.prefix("DryRun");
    if let Some(var_3369) = &input.dry_run {
        scope_3368.boolean(*var_3369);
    }
    #[allow(unused_mut)]
    let mut scope_3370 = writer.prefix("GroupName");
    if let Some(var_3371) = &input.group_names {
        let mut list_3373 = scope_3370.start_list(true, None);
        for item_3372 in var_3371 {
            #[allow(unused_mut)]
            let mut entry_3374 = list_3373.entry();
            entry_3374.string(item_3372);
        }
        list_3373.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3375 = writer.prefix("GroupId");
    if let Some(var_3376) = &input.group_ids {
        let mut list_3378 = scope_3375.start_list(true, Some("GroupId"));
        for item_3377 in var_3376 {
            #[allow(unused_mut)]
            let mut entry_3379 = list_3378.entry();
            entry_3379.string(item_3377);
        }
        list_3378.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_prefix_lists(input: &crate::input::DescribePrefixListsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3380 = writer.prefix("DryRun");
    if let Some(var_3381) = &input.dry_run {
        scope_3380.boolean(*var_3381);
    }
    #[allow(unused_mut)]
    let mut scope_3382 = writer.prefix("Filter");
    if let Some(var_3383) = &input.filters {
        let mut list_3385 = scope_3382.start_list(true, Some("Filter"));
        for item_3384 in var_3383 {
            #[allow(unused_mut)]
            let mut entry_3386 = list_3385.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3386, item_3384)?;
        }
        list_3385.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3387 = writer.prefix("MaxResults");
    if let Some(var_3388) = &input.max_results {
        scope_3387.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3388).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3389 = writer.prefix("NextToken");
    if let Some(var_3390) = &input.next_token {
        scope_3389.string(var_3390);
    }
    #[allow(unused_mut)]
    let mut scope_3391 = writer.prefix("PrefixListId");
    if let Some(var_3392) = &input.prefix_list_ids {
        let mut list_3394 = scope_3391.start_list(true, Some("item"));
        for item_3393 in var_3392 {
            #[allow(unused_mut)]
            let mut entry_3395 = list_3394.entry();
            entry_3395.string(item_3393);
        }
        list_3394.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_principal_id_format(input: &crate::input::DescribePrincipalIdFormatInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3396 = writer.prefix("DryRun");
    if let Some(var_3397) = &input.dry_run {
        scope_3396.boolean(*var_3397);
    }
    #[allow(unused_mut)]
    let mut scope_3398 = writer.prefix("Resource");
    if let Some(var_3399) = &input.resources {
        let mut list_3401 = scope_3398.start_list(true, Some("item"));
        for item_3400 in var_3399 {
            #[allow(unused_mut)]
            let mut entry_3402 = list_3401.entry();
            entry_3402.string(item_3400);
        }
        list_3401.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3403 = writer.prefix("MaxResults");
    if let Some(var_3404) = &input.max_results {
        scope_3403.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3404).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3405 = writer.prefix("NextToken");
    if let Some(var_3406) = &input.next_token {
        scope_3405.string(var_3406);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_public_ipv4_pools(input: &crate::input::DescribePublicIpv4PoolsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3407 = writer.prefix("PoolId");
    if let Some(var_3408) = &input.pool_ids {
        let mut list_3410 = scope_3407.start_list(true, Some("item"));
        for item_3409 in var_3408 {
            #[allow(unused_mut)]
            let mut entry_3411 = list_3410.entry();
            entry_3411.string(item_3409);
        }
        list_3410.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3412 = writer.prefix("NextToken");
    if let Some(var_3413) = &input.next_token {
        scope_3412.string(var_3413);
    }
    #[allow(unused_mut)]
    let mut scope_3414 = writer.prefix("MaxResults");
    if let Some(var_3415) = &input.max_results {
        scope_3414.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3415).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3416 = writer.prefix("Filter");
    if let Some(var_3417) = &input.filters {
        let mut list_3419 = scope_3416.start_list(true, Some("Filter"));
        for item_3418 in var_3417 {
            #[allow(unused_mut)]
            let mut entry_3420 = list_3419.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3420, item_3418)?;
        }
        list_3419.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_regions(input: &crate::input::DescribeRegionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3421 = writer.prefix("Filter");
    if let Some(var_3422) = &input.filters {
        let mut list_3424 = scope_3421.start_list(true, Some("Filter"));
        for item_3423 in var_3422 {
            #[allow(unused_mut)]
            let mut entry_3425 = list_3424.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3425, item_3423)?;
        }
        list_3424.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3426 = writer.prefix("RegionName");
    if let Some(var_3427) = &input.region_names {
        let mut list_3429 = scope_3426.start_list(true, Some("RegionName"));
        for item_3428 in var_3427 {
            #[allow(unused_mut)]
            let mut entry_3430 = list_3429.entry();
            entry_3430.string(item_3428);
        }
        list_3429.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3431 = writer.prefix("DryRun");
    if let Some(var_3432) = &input.dry_run {
        scope_3431.boolean(*var_3432);
    }
    #[allow(unused_mut)]
    let mut scope_3433 = writer.prefix("AllRegions");
    if let Some(var_3434) = &input.all_regions {
        scope_3433.boolean(*var_3434);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replace_root_volume_tasks(input: &crate::input::DescribeReplaceRootVolumeTasksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeReplaceRootVolumeTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3435 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_3436) = &input.replace_root_volume_task_ids {
        let mut list_3438 = scope_3435.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_3437 in var_3436 {
            #[allow(unused_mut)]
            let mut entry_3439 = list_3438.entry();
            entry_3439.string(item_3437);
        }
        list_3438.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3440 = writer.prefix("Filter");
    if let Some(var_3441) = &input.filters {
        let mut list_3443 = scope_3440.start_list(true, Some("Filter"));
        for item_3442 in var_3441 {
            #[allow(unused_mut)]
            let mut entry_3444 = list_3443.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3444, item_3442)?;
        }
        list_3443.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3445 = writer.prefix("MaxResults");
    if let Some(var_3446) = &input.max_results {
        scope_3445.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3446).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3447 = writer.prefix("NextToken");
    if let Some(var_3448) = &input.next_token {
        scope_3447.string(var_3448);
    }
    #[allow(unused_mut)]
    let mut scope_3449 = writer.prefix("DryRun");
    if let Some(var_3450) = &input.dry_run {
        scope_3449.boolean(*var_3450);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances(input: &crate::input::DescribeReservedInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3451 = writer.prefix("Filter");
    if let Some(var_3452) = &input.filters {
        let mut list_3454 = scope_3451.start_list(true, Some("Filter"));
        for item_3453 in var_3452 {
            #[allow(unused_mut)]
            let mut entry_3455 = list_3454.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3455, item_3453)?;
        }
        list_3454.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3456 = writer.prefix("OfferingClass");
    if let Some(var_3457) = &input.offering_class {
        scope_3456.string(var_3457.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3458 = writer.prefix("ReservedInstancesId");
    if let Some(var_3459) = &input.reserved_instances_ids {
        let mut list_3461 = scope_3458.start_list(true, Some("ReservedInstancesId"));
        for item_3460 in var_3459 {
            #[allow(unused_mut)]
            let mut entry_3462 = list_3461.entry();
            entry_3462.string(item_3460);
        }
        list_3461.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3463 = writer.prefix("DryRun");
    if let Some(var_3464) = &input.dry_run {
        scope_3463.boolean(*var_3464);
    }
    #[allow(unused_mut)]
    let mut scope_3465 = writer.prefix("OfferingType");
    if let Some(var_3466) = &input.offering_type {
        scope_3465.string(var_3466.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_listings(input: &crate::input::DescribeReservedInstancesListingsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstancesListings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3467 = writer.prefix("Filter");
    if let Some(var_3468) = &input.filters {
        let mut list_3470 = scope_3467.start_list(true, Some("Filter"));
        for item_3469 in var_3468 {
            #[allow(unused_mut)]
            let mut entry_3471 = list_3470.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3471, item_3469)?;
        }
        list_3470.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3472 = writer.prefix("ReservedInstancesId");
    if let Some(var_3473) = &input.reserved_instances_id {
        scope_3472.string(var_3473);
    }
    #[allow(unused_mut)]
    let mut scope_3474 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_3475) = &input.reserved_instances_listing_id {
        scope_3474.string(var_3475);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_modifications(input: &crate::input::DescribeReservedInstancesModificationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstancesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3476 = writer.prefix("Filter");
    if let Some(var_3477) = &input.filters {
        let mut list_3479 = scope_3476.start_list(true, Some("Filter"));
        for item_3478 in var_3477 {
            #[allow(unused_mut)]
            let mut entry_3480 = list_3479.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3480, item_3478)?;
        }
        list_3479.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3481 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_3482) = &input.reserved_instances_modification_ids {
        let mut list_3484 = scope_3481.start_list(true, Some("ReservedInstancesModificationId"));
        for item_3483 in var_3482 {
            #[allow(unused_mut)]
            let mut entry_3485 = list_3484.entry();
            entry_3485.string(item_3483);
        }
        list_3484.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3486 = writer.prefix("NextToken");
    if let Some(var_3487) = &input.next_token {
        scope_3486.string(var_3487);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_offerings(input: &crate::input::DescribeReservedInstancesOfferingsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstancesOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3488 = writer.prefix("AvailabilityZone");
    if let Some(var_3489) = &input.availability_zone {
        scope_3488.string(var_3489);
    }
    #[allow(unused_mut)]
    let mut scope_3490 = writer.prefix("Filter");
    if let Some(var_3491) = &input.filters {
        let mut list_3493 = scope_3490.start_list(true, Some("Filter"));
        for item_3492 in var_3491 {
            #[allow(unused_mut)]
            let mut entry_3494 = list_3493.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3494, item_3492)?;
        }
        list_3493.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3495 = writer.prefix("IncludeMarketplace");
    if let Some(var_3496) = &input.include_marketplace {
        scope_3495.boolean(*var_3496);
    }
    #[allow(unused_mut)]
    let mut scope_3497 = writer.prefix("InstanceType");
    if let Some(var_3498) = &input.instance_type {
        scope_3497.string(var_3498.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3499 = writer.prefix("MaxDuration");
    if let Some(var_3500) = &input.max_duration {
        scope_3499.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3500).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3501 = writer.prefix("MaxInstanceCount");
    if let Some(var_3502) = &input.max_instance_count {
        scope_3501.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3502).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3503 = writer.prefix("MinDuration");
    if let Some(var_3504) = &input.min_duration {
        scope_3503.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3504).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3505 = writer.prefix("OfferingClass");
    if let Some(var_3506) = &input.offering_class {
        scope_3505.string(var_3506.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3507 = writer.prefix("ProductDescription");
    if let Some(var_3508) = &input.product_description {
        scope_3507.string(var_3508.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3509 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_3510) = &input.reserved_instances_offering_ids {
        let mut list_3512 = scope_3509.start_list(true, None);
        for item_3511 in var_3510 {
            #[allow(unused_mut)]
            let mut entry_3513 = list_3512.entry();
            entry_3513.string(item_3511);
        }
        list_3512.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3514 = writer.prefix("DryRun");
    if let Some(var_3515) = &input.dry_run {
        scope_3514.boolean(*var_3515);
    }
    #[allow(unused_mut)]
    let mut scope_3516 = writer.prefix("InstanceTenancy");
    if let Some(var_3517) = &input.instance_tenancy {
        scope_3516.string(var_3517.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3518 = writer.prefix("MaxResults");
    if let Some(var_3519) = &input.max_results {
        scope_3518.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3519).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3520 = writer.prefix("NextToken");
    if let Some(var_3521) = &input.next_token {
        scope_3520.string(var_3521);
    }
    #[allow(unused_mut)]
    let mut scope_3522 = writer.prefix("OfferingType");
    if let Some(var_3523) = &input.offering_type {
        scope_3522.string(var_3523.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_route_tables(input: &crate::input::DescribeRouteTablesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3524 = writer.prefix("Filter");
    if let Some(var_3525) = &input.filters {
        let mut list_3527 = scope_3524.start_list(true, Some("Filter"));
        for item_3526 in var_3525 {
            #[allow(unused_mut)]
            let mut entry_3528 = list_3527.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3528, item_3526)?;
        }
        list_3527.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3529 = writer.prefix("DryRun");
    if let Some(var_3530) = &input.dry_run {
        scope_3529.boolean(*var_3530);
    }
    #[allow(unused_mut)]
    let mut scope_3531 = writer.prefix("RouteTableId");
    if let Some(var_3532) = &input.route_table_ids {
        let mut list_3534 = scope_3531.start_list(true, Some("item"));
        for item_3533 in var_3532 {
            #[allow(unused_mut)]
            let mut entry_3535 = list_3534.entry();
            entry_3535.string(item_3533);
        }
        list_3534.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3536 = writer.prefix("NextToken");
    if let Some(var_3537) = &input.next_token {
        scope_3536.string(var_3537);
    }
    #[allow(unused_mut)]
    let mut scope_3538 = writer.prefix("MaxResults");
    if let Some(var_3539) = &input.max_results {
        scope_3538.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3539).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instance_availability(input: &crate::input::DescribeScheduledInstanceAvailabilityInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstanceAvailability", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3540 = writer.prefix("DryRun");
    if let Some(var_3541) = &input.dry_run {
        scope_3540.boolean(*var_3541);
    }
    #[allow(unused_mut)]
    let mut scope_3542 = writer.prefix("Filter");
    if let Some(var_3543) = &input.filters {
        let mut list_3545 = scope_3542.start_list(true, Some("Filter"));
        for item_3544 in var_3543 {
            #[allow(unused_mut)]
            let mut entry_3546 = list_3545.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3546, item_3544)?;
        }
        list_3545.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3547 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_3548) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_date_time_range_request(scope_3547, var_3548)?;
    }
    #[allow(unused_mut)]
    let mut scope_3549 = writer.prefix("MaxResults");
    if let Some(var_3550) = &input.max_results {
        scope_3549.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3550).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3551 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_3552) = &input.max_slot_duration_in_hours {
        scope_3551.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3552).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3553 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_3554) = &input.min_slot_duration_in_hours {
        scope_3553.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3554).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3555 = writer.prefix("NextToken");
    if let Some(var_3556) = &input.next_token {
        scope_3555.string(var_3556);
    }
    #[allow(unused_mut)]
    let mut scope_3557 = writer.prefix("Recurrence");
    if let Some(var_3558) = &input.recurrence {
        crate::query_ser::serialize_structure_crate_model_scheduled_instance_recurrence_request(scope_3557, var_3558)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instances(input: &crate::input::DescribeScheduledInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3559 = writer.prefix("DryRun");
    if let Some(var_3560) = &input.dry_run {
        scope_3559.boolean(*var_3560);
    }
    #[allow(unused_mut)]
    let mut scope_3561 = writer.prefix("Filter");
    if let Some(var_3562) = &input.filters {
        let mut list_3564 = scope_3561.start_list(true, Some("Filter"));
        for item_3563 in var_3562 {
            #[allow(unused_mut)]
            let mut entry_3565 = list_3564.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3565, item_3563)?;
        }
        list_3564.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3566 = writer.prefix("MaxResults");
    if let Some(var_3567) = &input.max_results {
        scope_3566.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3567).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3568 = writer.prefix("NextToken");
    if let Some(var_3569) = &input.next_token {
        scope_3568.string(var_3569);
    }
    #[allow(unused_mut)]
    let mut scope_3570 = writer.prefix("ScheduledInstanceId");
    if let Some(var_3571) = &input.scheduled_instance_ids {
        let mut list_3573 = scope_3570.start_list(true, Some("ScheduledInstanceId"));
        for item_3572 in var_3571 {
            #[allow(unused_mut)]
            let mut entry_3574 = list_3573.entry();
            entry_3574.string(item_3572);
        }
        list_3573.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3575 = writer.prefix("SlotStartTimeRange");
    if let Some(var_3576) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_start_time_range_request(scope_3575, var_3576)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_references(input: &crate::input::DescribeSecurityGroupReferencesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupReferences", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3577 = writer.prefix("DryRun");
    if let Some(var_3578) = &input.dry_run {
        scope_3577.boolean(*var_3578);
    }
    #[allow(unused_mut)]
    let mut scope_3579 = writer.prefix("GroupId");
    if let Some(var_3580) = &input.group_id {
        let mut list_3582 = scope_3579.start_list(true, Some("item"));
        for item_3581 in var_3580 {
            #[allow(unused_mut)]
            let mut entry_3583 = list_3582.entry();
            entry_3583.string(item_3581);
        }
        list_3582.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_rules(input: &crate::input::DescribeSecurityGroupRulesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3584 = writer.prefix("Filter");
    if let Some(var_3585) = &input.filters {
        let mut list_3587 = scope_3584.start_list(true, Some("Filter"));
        for item_3586 in var_3585 {
            #[allow(unused_mut)]
            let mut entry_3588 = list_3587.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3588, item_3586)?;
        }
        list_3587.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3589 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_3590) = &input.security_group_rule_ids {
        let mut list_3592 = scope_3589.start_list(true, Some("item"));
        for item_3591 in var_3590 {
            #[allow(unused_mut)]
            let mut entry_3593 = list_3592.entry();
            entry_3593.string(item_3591);
        }
        list_3592.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3594 = writer.prefix("DryRun");
    if let Some(var_3595) = &input.dry_run {
        scope_3594.boolean(*var_3595);
    }
    #[allow(unused_mut)]
    let mut scope_3596 = writer.prefix("NextToken");
    if let Some(var_3597) = &input.next_token {
        scope_3596.string(var_3597);
    }
    #[allow(unused_mut)]
    let mut scope_3598 = writer.prefix("MaxResults");
    if let Some(var_3599) = &input.max_results {
        scope_3598.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3599).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_groups(input: &crate::input::DescribeSecurityGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3600 = writer.prefix("Filter");
    if let Some(var_3601) = &input.filters {
        let mut list_3603 = scope_3600.start_list(true, Some("Filter"));
        for item_3602 in var_3601 {
            #[allow(unused_mut)]
            let mut entry_3604 = list_3603.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3604, item_3602)?;
        }
        list_3603.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3605 = writer.prefix("GroupId");
    if let Some(var_3606) = &input.group_ids {
        let mut list_3608 = scope_3605.start_list(true, Some("groupId"));
        for item_3607 in var_3606 {
            #[allow(unused_mut)]
            let mut entry_3609 = list_3608.entry();
            entry_3609.string(item_3607);
        }
        list_3608.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3610 = writer.prefix("GroupName");
    if let Some(var_3611) = &input.group_names {
        let mut list_3613 = scope_3610.start_list(true, Some("GroupName"));
        for item_3612 in var_3611 {
            #[allow(unused_mut)]
            let mut entry_3614 = list_3613.entry();
            entry_3614.string(item_3612);
        }
        list_3613.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3615 = writer.prefix("DryRun");
    if let Some(var_3616) = &input.dry_run {
        scope_3615.boolean(*var_3616);
    }
    #[allow(unused_mut)]
    let mut scope_3617 = writer.prefix("NextToken");
    if let Some(var_3618) = &input.next_token {
        scope_3617.string(var_3618);
    }
    #[allow(unused_mut)]
    let mut scope_3619 = writer.prefix("MaxResults");
    if let Some(var_3620) = &input.max_results {
        scope_3619.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3620).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_attribute(input: &crate::input::DescribeSnapshotAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3621 = writer.prefix("Attribute");
    if let Some(var_3622) = &input.attribute {
        scope_3621.string(var_3622.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3623 = writer.prefix("SnapshotId");
    if let Some(var_3624) = &input.snapshot_id {
        scope_3623.string(var_3624);
    }
    #[allow(unused_mut)]
    let mut scope_3625 = writer.prefix("DryRun");
    if let Some(var_3626) = &input.dry_run {
        scope_3625.boolean(*var_3626);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(input: &crate::input::DescribeSnapshotsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3627 = writer.prefix("Filter");
    if let Some(var_3628) = &input.filters {
        let mut list_3630 = scope_3627.start_list(true, Some("Filter"));
        for item_3629 in var_3628 {
            #[allow(unused_mut)]
            let mut entry_3631 = list_3630.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3631, item_3629)?;
        }
        list_3630.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3632 = writer.prefix("MaxResults");
    if let Some(var_3633) = &input.max_results {
        scope_3632.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3633).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3634 = writer.prefix("NextToken");
    if let Some(var_3635) = &input.next_token {
        scope_3634.string(var_3635);
    }
    #[allow(unused_mut)]
    let mut scope_3636 = writer.prefix("Owner");
    if let Some(var_3637) = &input.owner_ids {
        let mut list_3639 = scope_3636.start_list(true, Some("Owner"));
        for item_3638 in var_3637 {
            #[allow(unused_mut)]
            let mut entry_3640 = list_3639.entry();
            entry_3640.string(item_3638);
        }
        list_3639.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3641 = writer.prefix("RestorableBy");
    if let Some(var_3642) = &input.restorable_by_user_ids {
        let mut list_3644 = scope_3641.start_list(true, None);
        for item_3643 in var_3642 {
            #[allow(unused_mut)]
            let mut entry_3645 = list_3644.entry();
            entry_3645.string(item_3643);
        }
        list_3644.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3646 = writer.prefix("SnapshotId");
    if let Some(var_3647) = &input.snapshot_ids {
        let mut list_3649 = scope_3646.start_list(true, Some("SnapshotId"));
        for item_3648 in var_3647 {
            #[allow(unused_mut)]
            let mut entry_3650 = list_3649.entry();
            entry_3650.string(item_3648);
        }
        list_3649.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3651 = writer.prefix("DryRun");
    if let Some(var_3652) = &input.dry_run {
        scope_3651.boolean(*var_3652);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_tier_status(input: &crate::input::DescribeSnapshotTierStatusInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotTierStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3653 = writer.prefix("Filter");
    if let Some(var_3654) = &input.filters {
        let mut list_3656 = scope_3653.start_list(true, Some("Filter"));
        for item_3655 in var_3654 {
            #[allow(unused_mut)]
            let mut entry_3657 = list_3656.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3657, item_3655)?;
        }
        list_3656.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3658 = writer.prefix("DryRun");
    if let Some(var_3659) = &input.dry_run {
        scope_3658.boolean(*var_3659);
    }
    #[allow(unused_mut)]
    let mut scope_3660 = writer.prefix("NextToken");
    if let Some(var_3661) = &input.next_token {
        scope_3660.string(var_3661);
    }
    #[allow(unused_mut)]
    let mut scope_3662 = writer.prefix("MaxResults");
    if let Some(var_3663) = &input.max_results {
        scope_3662.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3663).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_datafeed_subscription(input: &crate::input::DescribeSpotDatafeedSubscriptionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3664 = writer.prefix("DryRun");
    if let Some(var_3665) = &input.dry_run {
        scope_3664.boolean(*var_3665);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_instances(input: &crate::input::DescribeSpotFleetInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3666 = writer.prefix("DryRun");
    if let Some(var_3667) = &input.dry_run {
        scope_3666.boolean(*var_3667);
    }
    #[allow(unused_mut)]
    let mut scope_3668 = writer.prefix("MaxResults");
    if let Some(var_3669) = &input.max_results {
        scope_3668.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3669).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3670 = writer.prefix("NextToken");
    if let Some(var_3671) = &input.next_token {
        scope_3670.string(var_3671);
    }
    #[allow(unused_mut)]
    let mut scope_3672 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3673) = &input.spot_fleet_request_id {
        scope_3672.string(var_3673);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_request_history(input: &crate::input::DescribeSpotFleetRequestHistoryInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequestHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3674 = writer.prefix("DryRun");
    if let Some(var_3675) = &input.dry_run {
        scope_3674.boolean(*var_3675);
    }
    #[allow(unused_mut)]
    let mut scope_3676 = writer.prefix("EventType");
    if let Some(var_3677) = &input.event_type {
        scope_3676.string(var_3677.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3678 = writer.prefix("MaxResults");
    if let Some(var_3679) = &input.max_results {
        scope_3678.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3679).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3680 = writer.prefix("NextToken");
    if let Some(var_3681) = &input.next_token {
        scope_3680.string(var_3681);
    }
    #[allow(unused_mut)]
    let mut scope_3682 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3683) = &input.spot_fleet_request_id {
        scope_3682.string(var_3683);
    }
    #[allow(unused_mut)]
    let mut scope_3684 = writer.prefix("StartTime");
    if let Some(var_3685) = &input.start_time {
        scope_3684.date_time(var_3685, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_requests(input: &crate::input::DescribeSpotFleetRequestsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3686 = writer.prefix("DryRun");
    if let Some(var_3687) = &input.dry_run {
        scope_3686.boolean(*var_3687);
    }
    #[allow(unused_mut)]
    let mut scope_3688 = writer.prefix("MaxResults");
    if let Some(var_3689) = &input.max_results {
        scope_3688.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3689).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3690 = writer.prefix("NextToken");
    if let Some(var_3691) = &input.next_token {
        scope_3690.string(var_3691);
    }
    #[allow(unused_mut)]
    let mut scope_3692 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3693) = &input.spot_fleet_request_ids {
        let mut list_3695 = scope_3692.start_list(true, Some("item"));
        for item_3694 in var_3693 {
            #[allow(unused_mut)]
            let mut entry_3696 = list_3695.entry();
            entry_3696.string(item_3694);
        }
        list_3695.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_instance_requests(input: &crate::input::DescribeSpotInstanceRequestsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3697 = writer.prefix("Filter");
    if let Some(var_3698) = &input.filters {
        let mut list_3700 = scope_3697.start_list(true, Some("Filter"));
        for item_3699 in var_3698 {
            #[allow(unused_mut)]
            let mut entry_3701 = list_3700.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3701, item_3699)?;
        }
        list_3700.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3702 = writer.prefix("DryRun");
    if let Some(var_3703) = &input.dry_run {
        scope_3702.boolean(*var_3703);
    }
    #[allow(unused_mut)]
    let mut scope_3704 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_3705) = &input.spot_instance_request_ids {
        let mut list_3707 = scope_3704.start_list(true, Some("SpotInstanceRequestId"));
        for item_3706 in var_3705 {
            #[allow(unused_mut)]
            let mut entry_3708 = list_3707.entry();
            entry_3708.string(item_3706);
        }
        list_3707.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3709 = writer.prefix("NextToken");
    if let Some(var_3710) = &input.next_token {
        scope_3709.string(var_3710);
    }
    #[allow(unused_mut)]
    let mut scope_3711 = writer.prefix("MaxResults");
    if let Some(var_3712) = &input.max_results {
        scope_3711.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3712).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_price_history(input: &crate::input::DescribeSpotPriceHistoryInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3713 = writer.prefix("Filter");
    if let Some(var_3714) = &input.filters {
        let mut list_3716 = scope_3713.start_list(true, Some("Filter"));
        for item_3715 in var_3714 {
            #[allow(unused_mut)]
            let mut entry_3717 = list_3716.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3717, item_3715)?;
        }
        list_3716.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3718 = writer.prefix("AvailabilityZone");
    if let Some(var_3719) = &input.availability_zone {
        scope_3718.string(var_3719);
    }
    #[allow(unused_mut)]
    let mut scope_3720 = writer.prefix("DryRun");
    if let Some(var_3721) = &input.dry_run {
        scope_3720.boolean(*var_3721);
    }
    #[allow(unused_mut)]
    let mut scope_3722 = writer.prefix("EndTime");
    if let Some(var_3723) = &input.end_time {
        scope_3722.date_time(var_3723, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3724 = writer.prefix("InstanceType");
    if let Some(var_3725) = &input.instance_types {
        let mut list_3727 = scope_3724.start_list(true, None);
        for item_3726 in var_3725 {
            #[allow(unused_mut)]
            let mut entry_3728 = list_3727.entry();
            entry_3728.string(item_3726.as_str());
        }
        list_3727.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3729 = writer.prefix("MaxResults");
    if let Some(var_3730) = &input.max_results {
        scope_3729.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3730).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3731 = writer.prefix("NextToken");
    if let Some(var_3732) = &input.next_token {
        scope_3731.string(var_3732);
    }
    #[allow(unused_mut)]
    let mut scope_3733 = writer.prefix("ProductDescription");
    if let Some(var_3734) = &input.product_descriptions {
        let mut list_3736 = scope_3733.start_list(true, None);
        for item_3735 in var_3734 {
            #[allow(unused_mut)]
            let mut entry_3737 = list_3736.entry();
            entry_3737.string(item_3735);
        }
        list_3736.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3738 = writer.prefix("StartTime");
    if let Some(var_3739) = &input.start_time {
        scope_3738.date_time(var_3739, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stale_security_groups(input: &crate::input::DescribeStaleSecurityGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3740 = writer.prefix("DryRun");
    if let Some(var_3741) = &input.dry_run {
        scope_3740.boolean(*var_3741);
    }
    #[allow(unused_mut)]
    let mut scope_3742 = writer.prefix("MaxResults");
    if let Some(var_3743) = &input.max_results {
        scope_3742.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3743).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3744 = writer.prefix("NextToken");
    if let Some(var_3745) = &input.next_token {
        scope_3744.string(var_3745);
    }
    #[allow(unused_mut)]
    let mut scope_3746 = writer.prefix("VpcId");
    if let Some(var_3747) = &input.vpc_id {
        scope_3746.string(var_3747);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_store_image_tasks(input: &crate::input::DescribeStoreImageTasksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3748 = writer.prefix("ImageId");
    if let Some(var_3749) = &input.image_ids {
        let mut list_3751 = scope_3748.start_list(true, Some("item"));
        for item_3750 in var_3749 {
            #[allow(unused_mut)]
            let mut entry_3752 = list_3751.entry();
            entry_3752.string(item_3750);
        }
        list_3751.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3753 = writer.prefix("DryRun");
    if let Some(var_3754) = &input.dry_run {
        scope_3753.boolean(*var_3754);
    }
    #[allow(unused_mut)]
    let mut scope_3755 = writer.prefix("Filter");
    if let Some(var_3756) = &input.filters {
        let mut list_3758 = scope_3755.start_list(true, Some("Filter"));
        for item_3757 in var_3756 {
            #[allow(unused_mut)]
            let mut entry_3759 = list_3758.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3759, item_3757)?;
        }
        list_3758.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3760 = writer.prefix("NextToken");
    if let Some(var_3761) = &input.next_token {
        scope_3760.string(var_3761);
    }
    #[allow(unused_mut)]
    let mut scope_3762 = writer.prefix("MaxResults");
    if let Some(var_3763) = &input.max_results {
        scope_3762.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3763).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_subnets(input: &crate::input::DescribeSubnetsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3764 = writer.prefix("Filter");
    if let Some(var_3765) = &input.filters {
        let mut list_3767 = scope_3764.start_list(true, Some("Filter"));
        for item_3766 in var_3765 {
            #[allow(unused_mut)]
            let mut entry_3768 = list_3767.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3768, item_3766)?;
        }
        list_3767.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3769 = writer.prefix("SubnetId");
    if let Some(var_3770) = &input.subnet_ids {
        let mut list_3772 = scope_3769.start_list(true, Some("SubnetId"));
        for item_3771 in var_3770 {
            #[allow(unused_mut)]
            let mut entry_3773 = list_3772.entry();
            entry_3773.string(item_3771);
        }
        list_3772.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3774 = writer.prefix("DryRun");
    if let Some(var_3775) = &input.dry_run {
        scope_3774.boolean(*var_3775);
    }
    #[allow(unused_mut)]
    let mut scope_3776 = writer.prefix("NextToken");
    if let Some(var_3777) = &input.next_token {
        scope_3776.string(var_3777);
    }
    #[allow(unused_mut)]
    let mut scope_3778 = writer.prefix("MaxResults");
    if let Some(var_3779) = &input.max_results {
        scope_3778.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3779).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(input: &crate::input::DescribeTagsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3780 = writer.prefix("DryRun");
    if let Some(var_3781) = &input.dry_run {
        scope_3780.boolean(*var_3781);
    }
    #[allow(unused_mut)]
    let mut scope_3782 = writer.prefix("Filter");
    if let Some(var_3783) = &input.filters {
        let mut list_3785 = scope_3782.start_list(true, Some("Filter"));
        for item_3784 in var_3783 {
            #[allow(unused_mut)]
            let mut entry_3786 = list_3785.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3786, item_3784)?;
        }
        list_3785.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3787 = writer.prefix("MaxResults");
    if let Some(var_3788) = &input.max_results {
        scope_3787.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3788).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3789 = writer.prefix("NextToken");
    if let Some(var_3790) = &input.next_token {
        scope_3789.string(var_3790);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_filters(input: &crate::input::DescribeTrafficMirrorFiltersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3791 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3792) = &input.traffic_mirror_filter_ids {
        let mut list_3794 = scope_3791.start_list(true, Some("item"));
        for item_3793 in var_3792 {
            #[allow(unused_mut)]
            let mut entry_3795 = list_3794.entry();
            entry_3795.string(item_3793);
        }
        list_3794.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3796 = writer.prefix("DryRun");
    if let Some(var_3797) = &input.dry_run {
        scope_3796.boolean(*var_3797);
    }
    #[allow(unused_mut)]
    let mut scope_3798 = writer.prefix("Filter");
    if let Some(var_3799) = &input.filters {
        let mut list_3801 = scope_3798.start_list(true, Some("Filter"));
        for item_3800 in var_3799 {
            #[allow(unused_mut)]
            let mut entry_3802 = list_3801.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3802, item_3800)?;
        }
        list_3801.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3803 = writer.prefix("MaxResults");
    if let Some(var_3804) = &input.max_results {
        scope_3803.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3804).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3805 = writer.prefix("NextToken");
    if let Some(var_3806) = &input.next_token {
        scope_3805.string(var_3806);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_sessions(input: &crate::input::DescribeTrafficMirrorSessionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3807 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3808) = &input.traffic_mirror_session_ids {
        let mut list_3810 = scope_3807.start_list(true, Some("item"));
        for item_3809 in var_3808 {
            #[allow(unused_mut)]
            let mut entry_3811 = list_3810.entry();
            entry_3811.string(item_3809);
        }
        list_3810.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3812 = writer.prefix("DryRun");
    if let Some(var_3813) = &input.dry_run {
        scope_3812.boolean(*var_3813);
    }
    #[allow(unused_mut)]
    let mut scope_3814 = writer.prefix("Filter");
    if let Some(var_3815) = &input.filters {
        let mut list_3817 = scope_3814.start_list(true, Some("Filter"));
        for item_3816 in var_3815 {
            #[allow(unused_mut)]
            let mut entry_3818 = list_3817.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3818, item_3816)?;
        }
        list_3817.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3819 = writer.prefix("MaxResults");
    if let Some(var_3820) = &input.max_results {
        scope_3819.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3820).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3821 = writer.prefix("NextToken");
    if let Some(var_3822) = &input.next_token {
        scope_3821.string(var_3822);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_targets(input: &crate::input::DescribeTrafficMirrorTargetsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3823 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3824) = &input.traffic_mirror_target_ids {
        let mut list_3826 = scope_3823.start_list(true, Some("item"));
        for item_3825 in var_3824 {
            #[allow(unused_mut)]
            let mut entry_3827 = list_3826.entry();
            entry_3827.string(item_3825);
        }
        list_3826.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3828 = writer.prefix("DryRun");
    if let Some(var_3829) = &input.dry_run {
        scope_3828.boolean(*var_3829);
    }
    #[allow(unused_mut)]
    let mut scope_3830 = writer.prefix("Filter");
    if let Some(var_3831) = &input.filters {
        let mut list_3833 = scope_3830.start_list(true, Some("Filter"));
        for item_3832 in var_3831 {
            #[allow(unused_mut)]
            let mut entry_3834 = list_3833.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3834, item_3832)?;
        }
        list_3833.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3835 = writer.prefix("MaxResults");
    if let Some(var_3836) = &input.max_results {
        scope_3835.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3836).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3837 = writer.prefix("NextToken");
    if let Some(var_3838) = &input.next_token {
        scope_3837.string(var_3838);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_attachments(input: &crate::input::DescribeTransitGatewayAttachmentsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayAttachments", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3839 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3840) = &input.transit_gateway_attachment_ids {
        let mut list_3842 = scope_3839.start_list(true, None);
        for item_3841 in var_3840 {
            #[allow(unused_mut)]
            let mut entry_3843 = list_3842.entry();
            entry_3843.string(item_3841);
        }
        list_3842.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3844 = writer.prefix("Filter");
    if let Some(var_3845) = &input.filters {
        let mut list_3847 = scope_3844.start_list(true, Some("Filter"));
        for item_3846 in var_3845 {
            #[allow(unused_mut)]
            let mut entry_3848 = list_3847.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3848, item_3846)?;
        }
        list_3847.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3849 = writer.prefix("MaxResults");
    if let Some(var_3850) = &input.max_results {
        scope_3849.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3850).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3851 = writer.prefix("NextToken");
    if let Some(var_3852) = &input.next_token {
        scope_3851.string(var_3852);
    }
    #[allow(unused_mut)]
    let mut scope_3853 = writer.prefix("DryRun");
    if let Some(var_3854) = &input.dry_run {
        scope_3853.boolean(*var_3854);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connect_peers(input: &crate::input::DescribeTransitGatewayConnectPeersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayConnectPeers", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3855 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3856) = &input.transit_gateway_connect_peer_ids {
        let mut list_3858 = scope_3855.start_list(true, Some("item"));
        for item_3857 in var_3856 {
            #[allow(unused_mut)]
            let mut entry_3859 = list_3858.entry();
            entry_3859.string(item_3857);
        }
        list_3858.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3860 = writer.prefix("Filter");
    if let Some(var_3861) = &input.filters {
        let mut list_3863 = scope_3860.start_list(true, Some("Filter"));
        for item_3862 in var_3861 {
            #[allow(unused_mut)]
            let mut entry_3864 = list_3863.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3864, item_3862)?;
        }
        list_3863.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3865 = writer.prefix("MaxResults");
    if let Some(var_3866) = &input.max_results {
        scope_3865.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3866).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3867 = writer.prefix("NextToken");
    if let Some(var_3868) = &input.next_token {
        scope_3867.string(var_3868);
    }
    #[allow(unused_mut)]
    let mut scope_3869 = writer.prefix("DryRun");
    if let Some(var_3870) = &input.dry_run {
        scope_3869.boolean(*var_3870);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connects(input: &crate::input::DescribeTransitGatewayConnectsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayConnects", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3871 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3872) = &input.transit_gateway_attachment_ids {
        let mut list_3874 = scope_3871.start_list(true, None);
        for item_3873 in var_3872 {
            #[allow(unused_mut)]
            let mut entry_3875 = list_3874.entry();
            entry_3875.string(item_3873);
        }
        list_3874.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3876 = writer.prefix("Filter");
    if let Some(var_3877) = &input.filters {
        let mut list_3879 = scope_3876.start_list(true, Some("Filter"));
        for item_3878 in var_3877 {
            #[allow(unused_mut)]
            let mut entry_3880 = list_3879.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3880, item_3878)?;
        }
        list_3879.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3881 = writer.prefix("MaxResults");
    if let Some(var_3882) = &input.max_results {
        scope_3881.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3882).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3883 = writer.prefix("NextToken");
    if let Some(var_3884) = &input.next_token {
        scope_3883.string(var_3884);
    }
    #[allow(unused_mut)]
    let mut scope_3885 = writer.prefix("DryRun");
    if let Some(var_3886) = &input.dry_run {
        scope_3885.boolean(*var_3886);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_multicast_domains(input: &crate::input::DescribeTransitGatewayMulticastDomainsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayMulticastDomains", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3887 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3888) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3890 = scope_3887.start_list(true, Some("item"));
        for item_3889 in var_3888 {
            #[allow(unused_mut)]
            let mut entry_3891 = list_3890.entry();
            entry_3891.string(item_3889);
        }
        list_3890.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3892 = writer.prefix("Filter");
    if let Some(var_3893) = &input.filters {
        let mut list_3895 = scope_3892.start_list(true, Some("Filter"));
        for item_3894 in var_3893 {
            #[allow(unused_mut)]
            let mut entry_3896 = list_3895.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3896, item_3894)?;
        }
        list_3895.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3897 = writer.prefix("MaxResults");
    if let Some(var_3898) = &input.max_results {
        scope_3897.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3898).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3899 = writer.prefix("NextToken");
    if let Some(var_3900) = &input.next_token {
        scope_3899.string(var_3900);
    }
    #[allow(unused_mut)]
    let mut scope_3901 = writer.prefix("DryRun");
    if let Some(var_3902) = &input.dry_run {
        scope_3901.boolean(*var_3902);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_peering_attachments(input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayPeeringAttachments", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3903 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3904) = &input.transit_gateway_attachment_ids {
        let mut list_3906 = scope_3903.start_list(true, None);
        for item_3905 in var_3904 {
            #[allow(unused_mut)]
            let mut entry_3907 = list_3906.entry();
            entry_3907.string(item_3905);
        }
        list_3906.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3908 = writer.prefix("Filter");
    if let Some(var_3909) = &input.filters {
        let mut list_3911 = scope_3908.start_list(true, Some("Filter"));
        for item_3910 in var_3909 {
            #[allow(unused_mut)]
            let mut entry_3912 = list_3911.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3912, item_3910)?;
        }
        list_3911.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3913 = writer.prefix("MaxResults");
    if let Some(var_3914) = &input.max_results {
        scope_3913.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3914).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3915 = writer.prefix("NextToken");
    if let Some(var_3916) = &input.next_token {
        scope_3915.string(var_3916);
    }
    #[allow(unused_mut)]
    let mut scope_3917 = writer.prefix("DryRun");
    if let Some(var_3918) = &input.dry_run {
        scope_3917.boolean(*var_3918);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_policy_tables(input: &crate::input::DescribeTransitGatewayPolicyTablesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayPolicyTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3919 = writer.prefix("TransitGatewayPolicyTableIds");
    if let Some(var_3920) = &input.transit_gateway_policy_table_ids {
        let mut list_3922 = scope_3919.start_list(true, Some("item"));
        for item_3921 in var_3920 {
            #[allow(unused_mut)]
            let mut entry_3923 = list_3922.entry();
            entry_3923.string(item_3921);
        }
        list_3922.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3924 = writer.prefix("Filter");
    if let Some(var_3925) = &input.filters {
        let mut list_3927 = scope_3924.start_list(true, Some("Filter"));
        for item_3926 in var_3925 {
            #[allow(unused_mut)]
            let mut entry_3928 = list_3927.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3928, item_3926)?;
        }
        list_3927.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3929 = writer.prefix("MaxResults");
    if let Some(var_3930) = &input.max_results {
        scope_3929.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3930).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3931 = writer.prefix("NextToken");
    if let Some(var_3932) = &input.next_token {
        scope_3931.string(var_3932);
    }
    #[allow(unused_mut)]
    let mut scope_3933 = writer.prefix("DryRun");
    if let Some(var_3934) = &input.dry_run {
        scope_3933.boolean(*var_3934);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_table_announcements(input: &crate::input::DescribeTransitGatewayRouteTableAnnouncementsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayRouteTableAnnouncements", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3935 = writer.prefix("TransitGatewayRouteTableAnnouncementIds");
    if let Some(var_3936) = &input.transit_gateway_route_table_announcement_ids {
        let mut list_3938 = scope_3935.start_list(true, Some("item"));
        for item_3937 in var_3936 {
            #[allow(unused_mut)]
            let mut entry_3939 = list_3938.entry();
            entry_3939.string(item_3937);
        }
        list_3938.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3940 = writer.prefix("Filter");
    if let Some(var_3941) = &input.filters {
        let mut list_3943 = scope_3940.start_list(true, Some("Filter"));
        for item_3942 in var_3941 {
            #[allow(unused_mut)]
            let mut entry_3944 = list_3943.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3944, item_3942)?;
        }
        list_3943.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3945 = writer.prefix("MaxResults");
    if let Some(var_3946) = &input.max_results {
        scope_3945.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3946).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3947 = writer.prefix("NextToken");
    if let Some(var_3948) = &input.next_token {
        scope_3947.string(var_3948);
    }
    #[allow(unused_mut)]
    let mut scope_3949 = writer.prefix("DryRun");
    if let Some(var_3950) = &input.dry_run {
        scope_3949.boolean(*var_3950);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_tables(input: &crate::input::DescribeTransitGatewayRouteTablesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3951 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3952) = &input.transit_gateway_route_table_ids {
        let mut list_3954 = scope_3951.start_list(true, Some("item"));
        for item_3953 in var_3952 {
            #[allow(unused_mut)]
            let mut entry_3955 = list_3954.entry();
            entry_3955.string(item_3953);
        }
        list_3954.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3956 = writer.prefix("Filter");
    if let Some(var_3957) = &input.filters {
        let mut list_3959 = scope_3956.start_list(true, Some("Filter"));
        for item_3958 in var_3957 {
            #[allow(unused_mut)]
            let mut entry_3960 = list_3959.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3960, item_3958)?;
        }
        list_3959.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3961 = writer.prefix("MaxResults");
    if let Some(var_3962) = &input.max_results {
        scope_3961.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3962).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3963 = writer.prefix("NextToken");
    if let Some(var_3964) = &input.next_token {
        scope_3963.string(var_3964);
    }
    #[allow(unused_mut)]
    let mut scope_3965 = writer.prefix("DryRun");
    if let Some(var_3966) = &input.dry_run {
        scope_3965.boolean(*var_3966);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateways(input: &crate::input::DescribeTransitGatewaysInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3967 = writer.prefix("TransitGatewayIds");
    if let Some(var_3968) = &input.transit_gateway_ids {
        let mut list_3970 = scope_3967.start_list(true, Some("item"));
        for item_3969 in var_3968 {
            #[allow(unused_mut)]
            let mut entry_3971 = list_3970.entry();
            entry_3971.string(item_3969);
        }
        list_3970.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3972 = writer.prefix("Filter");
    if let Some(var_3973) = &input.filters {
        let mut list_3975 = scope_3972.start_list(true, Some("Filter"));
        for item_3974 in var_3973 {
            #[allow(unused_mut)]
            let mut entry_3976 = list_3975.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3976, item_3974)?;
        }
        list_3975.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3977 = writer.prefix("MaxResults");
    if let Some(var_3978) = &input.max_results {
        scope_3977.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3978).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3979 = writer.prefix("NextToken");
    if let Some(var_3980) = &input.next_token {
        scope_3979.string(var_3980);
    }
    #[allow(unused_mut)]
    let mut scope_3981 = writer.prefix("DryRun");
    if let Some(var_3982) = &input.dry_run {
        scope_3981.boolean(*var_3982);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_vpc_attachments(input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayVpcAttachments", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3983 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3984) = &input.transit_gateway_attachment_ids {
        let mut list_3986 = scope_3983.start_list(true, None);
        for item_3985 in var_3984 {
            #[allow(unused_mut)]
            let mut entry_3987 = list_3986.entry();
            entry_3987.string(item_3985);
        }
        list_3986.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3988 = writer.prefix("Filter");
    if let Some(var_3989) = &input.filters {
        let mut list_3991 = scope_3988.start_list(true, Some("Filter"));
        for item_3990 in var_3989 {
            #[allow(unused_mut)]
            let mut entry_3992 = list_3991.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3992, item_3990)?;
        }
        list_3991.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3993 = writer.prefix("MaxResults");
    if let Some(var_3994) = &input.max_results {
        scope_3993.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3994).into()));
    }
    #[allow(unused_mut)]
    let mut scope_3995 = writer.prefix("NextToken");
    if let Some(var_3996) = &input.next_token {
        scope_3995.string(var_3996);
    }
    #[allow(unused_mut)]
    let mut scope_3997 = writer.prefix("DryRun");
    if let Some(var_3998) = &input.dry_run {
        scope_3997.boolean(*var_3998);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_trunk_interface_associations(input: &crate::input::DescribeTrunkInterfaceAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrunkInterfaceAssociations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3999 = writer.prefix("AssociationId");
    if let Some(var_4000) = &input.association_ids {
        let mut list_4002 = scope_3999.start_list(true, Some("item"));
        for item_4001 in var_4000 {
            #[allow(unused_mut)]
            let mut entry_4003 = list_4002.entry();
            entry_4003.string(item_4001);
        }
        list_4002.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4004 = writer.prefix("DryRun");
    if let Some(var_4005) = &input.dry_run {
        scope_4004.boolean(*var_4005);
    }
    #[allow(unused_mut)]
    let mut scope_4006 = writer.prefix("Filter");
    if let Some(var_4007) = &input.filters {
        let mut list_4009 = scope_4006.start_list(true, Some("Filter"));
        for item_4008 in var_4007 {
            #[allow(unused_mut)]
            let mut entry_4010 = list_4009.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4010, item_4008)?;
        }
        list_4009.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4011 = writer.prefix("NextToken");
    if let Some(var_4012) = &input.next_token {
        scope_4011.string(var_4012);
    }
    #[allow(unused_mut)]
    let mut scope_4013 = writer.prefix("MaxResults");
    if let Some(var_4014) = &input.max_results {
        scope_4013.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4014).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_verified_access_endpoints(input: &crate::input::DescribeVerifiedAccessEndpointsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVerifiedAccessEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4015 = writer.prefix("VerifiedAccessEndpointId");
    if let Some(var_4016) = &input.verified_access_endpoint_ids {
        let mut list_4018 = scope_4015.start_list(true, Some("item"));
        for item_4017 in var_4016 {
            #[allow(unused_mut)]
            let mut entry_4019 = list_4018.entry();
            entry_4019.string(item_4017);
        }
        list_4018.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4020 = writer.prefix("VerifiedAccessInstanceId");
    if let Some(var_4021) = &input.verified_access_instance_id {
        scope_4020.string(var_4021);
    }
    #[allow(unused_mut)]
    let mut scope_4022 = writer.prefix("VerifiedAccessGroupId");
    if let Some(var_4023) = &input.verified_access_group_id {
        scope_4022.string(var_4023);
    }
    #[allow(unused_mut)]
    let mut scope_4024 = writer.prefix("MaxResults");
    if let Some(var_4025) = &input.max_results {
        scope_4024.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4025).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4026 = writer.prefix("NextToken");
    if let Some(var_4027) = &input.next_token {
        scope_4026.string(var_4027);
    }
    #[allow(unused_mut)]
    let mut scope_4028 = writer.prefix("Filter");
    if let Some(var_4029) = &input.filters {
        let mut list_4031 = scope_4028.start_list(true, Some("Filter"));
        for item_4030 in var_4029 {
            #[allow(unused_mut)]
            let mut entry_4032 = list_4031.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4032, item_4030)?;
        }
        list_4031.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4033 = writer.prefix("DryRun");
    if let Some(var_4034) = &input.dry_run {
        scope_4033.boolean(*var_4034);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_verified_access_groups(input: &crate::input::DescribeVerifiedAccessGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVerifiedAccessGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4035 = writer.prefix("VerifiedAccessGroupId");
    if let Some(var_4036) = &input.verified_access_group_ids {
        let mut list_4038 = scope_4035.start_list(true, Some("item"));
        for item_4037 in var_4036 {
            #[allow(unused_mut)]
            let mut entry_4039 = list_4038.entry();
            entry_4039.string(item_4037);
        }
        list_4038.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4040 = writer.prefix("VerifiedAccessInstanceId");
    if let Some(var_4041) = &input.verified_access_instance_id {
        scope_4040.string(var_4041);
    }
    #[allow(unused_mut)]
    let mut scope_4042 = writer.prefix("MaxResults");
    if let Some(var_4043) = &input.max_results {
        scope_4042.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4043).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4044 = writer.prefix("NextToken");
    if let Some(var_4045) = &input.next_token {
        scope_4044.string(var_4045);
    }
    #[allow(unused_mut)]
    let mut scope_4046 = writer.prefix("Filter");
    if let Some(var_4047) = &input.filters {
        let mut list_4049 = scope_4046.start_list(true, Some("Filter"));
        for item_4048 in var_4047 {
            #[allow(unused_mut)]
            let mut entry_4050 = list_4049.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4050, item_4048)?;
        }
        list_4049.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4051 = writer.prefix("DryRun");
    if let Some(var_4052) = &input.dry_run {
        scope_4051.boolean(*var_4052);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_verified_access_instance_logging_configurations(input: &crate::input::DescribeVerifiedAccessInstanceLoggingConfigurationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVerifiedAccessInstanceLoggingConfigurations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4053 = writer.prefix("VerifiedAccessInstanceId");
    if let Some(var_4054) = &input.verified_access_instance_ids {
        let mut list_4056 = scope_4053.start_list(true, Some("item"));
        for item_4055 in var_4054 {
            #[allow(unused_mut)]
            let mut entry_4057 = list_4056.entry();
            entry_4057.string(item_4055);
        }
        list_4056.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4058 = writer.prefix("MaxResults");
    if let Some(var_4059) = &input.max_results {
        scope_4058.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4059).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4060 = writer.prefix("NextToken");
    if let Some(var_4061) = &input.next_token {
        scope_4060.string(var_4061);
    }
    #[allow(unused_mut)]
    let mut scope_4062 = writer.prefix("Filter");
    if let Some(var_4063) = &input.filters {
        let mut list_4065 = scope_4062.start_list(true, Some("Filter"));
        for item_4064 in var_4063 {
            #[allow(unused_mut)]
            let mut entry_4066 = list_4065.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4066, item_4064)?;
        }
        list_4065.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4067 = writer.prefix("DryRun");
    if let Some(var_4068) = &input.dry_run {
        scope_4067.boolean(*var_4068);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_verified_access_instances(input: &crate::input::DescribeVerifiedAccessInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVerifiedAccessInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4069 = writer.prefix("VerifiedAccessInstanceId");
    if let Some(var_4070) = &input.verified_access_instance_ids {
        let mut list_4072 = scope_4069.start_list(true, Some("item"));
        for item_4071 in var_4070 {
            #[allow(unused_mut)]
            let mut entry_4073 = list_4072.entry();
            entry_4073.string(item_4071);
        }
        list_4072.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4074 = writer.prefix("MaxResults");
    if let Some(var_4075) = &input.max_results {
        scope_4074.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4075).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4076 = writer.prefix("NextToken");
    if let Some(var_4077) = &input.next_token {
        scope_4076.string(var_4077);
    }
    #[allow(unused_mut)]
    let mut scope_4078 = writer.prefix("Filter");
    if let Some(var_4079) = &input.filters {
        let mut list_4081 = scope_4078.start_list(true, Some("Filter"));
        for item_4080 in var_4079 {
            #[allow(unused_mut)]
            let mut entry_4082 = list_4081.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4082, item_4080)?;
        }
        list_4081.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4083 = writer.prefix("DryRun");
    if let Some(var_4084) = &input.dry_run {
        scope_4083.boolean(*var_4084);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_verified_access_trust_providers(input: &crate::input::DescribeVerifiedAccessTrustProvidersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVerifiedAccessTrustProviders", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4085 = writer.prefix("VerifiedAccessTrustProviderId");
    if let Some(var_4086) = &input.verified_access_trust_provider_ids {
        let mut list_4088 = scope_4085.start_list(true, Some("item"));
        for item_4087 in var_4086 {
            #[allow(unused_mut)]
            let mut entry_4089 = list_4088.entry();
            entry_4089.string(item_4087);
        }
        list_4088.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4090 = writer.prefix("MaxResults");
    if let Some(var_4091) = &input.max_results {
        scope_4090.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4091).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4092 = writer.prefix("NextToken");
    if let Some(var_4093) = &input.next_token {
        scope_4092.string(var_4093);
    }
    #[allow(unused_mut)]
    let mut scope_4094 = writer.prefix("Filter");
    if let Some(var_4095) = &input.filters {
        let mut list_4097 = scope_4094.start_list(true, Some("Filter"));
        for item_4096 in var_4095 {
            #[allow(unused_mut)]
            let mut entry_4098 = list_4097.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4098, item_4096)?;
        }
        list_4097.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4099 = writer.prefix("DryRun");
    if let Some(var_4100) = &input.dry_run {
        scope_4099.boolean(*var_4100);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_attribute(input: &crate::input::DescribeVolumeAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4101 = writer.prefix("Attribute");
    if let Some(var_4102) = &input.attribute {
        scope_4101.string(var_4102.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4103 = writer.prefix("VolumeId");
    if let Some(var_4104) = &input.volume_id {
        scope_4103.string(var_4104);
    }
    #[allow(unused_mut)]
    let mut scope_4105 = writer.prefix("DryRun");
    if let Some(var_4106) = &input.dry_run {
        scope_4105.boolean(*var_4106);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes(input: &crate::input::DescribeVolumesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4107 = writer.prefix("Filter");
    if let Some(var_4108) = &input.filters {
        let mut list_4110 = scope_4107.start_list(true, Some("Filter"));
        for item_4109 in var_4108 {
            #[allow(unused_mut)]
            let mut entry_4111 = list_4110.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4111, item_4109)?;
        }
        list_4110.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4112 = writer.prefix("VolumeId");
    if let Some(var_4113) = &input.volume_ids {
        let mut list_4115 = scope_4112.start_list(true, Some("VolumeId"));
        for item_4114 in var_4113 {
            #[allow(unused_mut)]
            let mut entry_4116 = list_4115.entry();
            entry_4116.string(item_4114);
        }
        list_4115.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4117 = writer.prefix("DryRun");
    if let Some(var_4118) = &input.dry_run {
        scope_4117.boolean(*var_4118);
    }
    #[allow(unused_mut)]
    let mut scope_4119 = writer.prefix("MaxResults");
    if let Some(var_4120) = &input.max_results {
        scope_4119.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4120).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4121 = writer.prefix("NextToken");
    if let Some(var_4122) = &input.next_token {
        scope_4121.string(var_4122);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes_modifications(input: &crate::input::DescribeVolumesModificationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4123 = writer.prefix("DryRun");
    if let Some(var_4124) = &input.dry_run {
        scope_4123.boolean(*var_4124);
    }
    #[allow(unused_mut)]
    let mut scope_4125 = writer.prefix("VolumeId");
    if let Some(var_4126) = &input.volume_ids {
        let mut list_4128 = scope_4125.start_list(true, Some("VolumeId"));
        for item_4127 in var_4126 {
            #[allow(unused_mut)]
            let mut entry_4129 = list_4128.entry();
            entry_4129.string(item_4127);
        }
        list_4128.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4130 = writer.prefix("Filter");
    if let Some(var_4131) = &input.filters {
        let mut list_4133 = scope_4130.start_list(true, Some("Filter"));
        for item_4132 in var_4131 {
            #[allow(unused_mut)]
            let mut entry_4134 = list_4133.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4134, item_4132)?;
        }
        list_4133.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4135 = writer.prefix("NextToken");
    if let Some(var_4136) = &input.next_token {
        scope_4135.string(var_4136);
    }
    #[allow(unused_mut)]
    let mut scope_4137 = writer.prefix("MaxResults");
    if let Some(var_4138) = &input.max_results {
        scope_4137.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4138).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_status(input: &crate::input::DescribeVolumeStatusInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4139 = writer.prefix("Filter");
    if let Some(var_4140) = &input.filters {
        let mut list_4142 = scope_4139.start_list(true, Some("Filter"));
        for item_4141 in var_4140 {
            #[allow(unused_mut)]
            let mut entry_4143 = list_4142.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4143, item_4141)?;
        }
        list_4142.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4144 = writer.prefix("MaxResults");
    if let Some(var_4145) = &input.max_results {
        scope_4144.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4145).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4146 = writer.prefix("NextToken");
    if let Some(var_4147) = &input.next_token {
        scope_4146.string(var_4147);
    }
    #[allow(unused_mut)]
    let mut scope_4148 = writer.prefix("VolumeId");
    if let Some(var_4149) = &input.volume_ids {
        let mut list_4151 = scope_4148.start_list(true, Some("VolumeId"));
        for item_4150 in var_4149 {
            #[allow(unused_mut)]
            let mut entry_4152 = list_4151.entry();
            entry_4152.string(item_4150);
        }
        list_4151.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4153 = writer.prefix("DryRun");
    if let Some(var_4154) = &input.dry_run {
        scope_4153.boolean(*var_4154);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_attribute(input: &crate::input::DescribeVpcAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4155 = writer.prefix("Attribute");
    if let Some(var_4156) = &input.attribute {
        scope_4155.string(var_4156.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4157 = writer.prefix("VpcId");
    if let Some(var_4158) = &input.vpc_id {
        scope_4157.string(var_4158);
    }
    #[allow(unused_mut)]
    let mut scope_4159 = writer.prefix("DryRun");
    if let Some(var_4160) = &input.dry_run {
        scope_4159.boolean(*var_4160);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link(input: &crate::input::DescribeVpcClassicLinkInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4161 = writer.prefix("Filter");
    if let Some(var_4162) = &input.filters {
        let mut list_4164 = scope_4161.start_list(true, Some("Filter"));
        for item_4163 in var_4162 {
            #[allow(unused_mut)]
            let mut entry_4165 = list_4164.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4165, item_4163)?;
        }
        list_4164.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4166 = writer.prefix("DryRun");
    if let Some(var_4167) = &input.dry_run {
        scope_4166.boolean(*var_4167);
    }
    #[allow(unused_mut)]
    let mut scope_4168 = writer.prefix("VpcId");
    if let Some(var_4169) = &input.vpc_ids {
        let mut list_4171 = scope_4168.start_list(true, Some("VpcId"));
        for item_4170 in var_4169 {
            #[allow(unused_mut)]
            let mut entry_4172 = list_4171.entry();
            entry_4172.string(item_4170);
        }
        list_4171.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link_dns_support(input: &crate::input::DescribeVpcClassicLinkDnsSupportInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4173 = writer.prefix("MaxResults");
    if let Some(var_4174) = &input.max_results {
        scope_4173.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4174).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4175 = writer.prefix("NextToken");
    if let Some(var_4176) = &input.next_token {
        scope_4175.string(var_4176);
    }
    #[allow(unused_mut)]
    let mut scope_4177 = writer.prefix("VpcIds");
    if let Some(var_4178) = &input.vpc_ids {
        let mut list_4180 = scope_4177.start_list(true, Some("VpcId"));
        for item_4179 in var_4178 {
            #[allow(unused_mut)]
            let mut entry_4181 = list_4180.entry();
            entry_4181.string(item_4179);
        }
        list_4180.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connection_notifications(input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointConnectionNotifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4182 = writer.prefix("DryRun");
    if let Some(var_4183) = &input.dry_run {
        scope_4182.boolean(*var_4183);
    }
    #[allow(unused_mut)]
    let mut scope_4184 = writer.prefix("ConnectionNotificationId");
    if let Some(var_4185) = &input.connection_notification_id {
        scope_4184.string(var_4185);
    }
    #[allow(unused_mut)]
    let mut scope_4186 = writer.prefix("Filter");
    if let Some(var_4187) = &input.filters {
        let mut list_4189 = scope_4186.start_list(true, Some("Filter"));
        for item_4188 in var_4187 {
            #[allow(unused_mut)]
            let mut entry_4190 = list_4189.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4190, item_4188)?;
        }
        list_4189.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4191 = writer.prefix("MaxResults");
    if let Some(var_4192) = &input.max_results {
        scope_4191.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4192).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4193 = writer.prefix("NextToken");
    if let Some(var_4194) = &input.next_token {
        scope_4193.string(var_4194);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connections(input: &crate::input::DescribeVpcEndpointConnectionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4195 = writer.prefix("DryRun");
    if let Some(var_4196) = &input.dry_run {
        scope_4195.boolean(*var_4196);
    }
    #[allow(unused_mut)]
    let mut scope_4197 = writer.prefix("Filter");
    if let Some(var_4198) = &input.filters {
        let mut list_4200 = scope_4197.start_list(true, Some("Filter"));
        for item_4199 in var_4198 {
            #[allow(unused_mut)]
            let mut entry_4201 = list_4200.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4201, item_4199)?;
        }
        list_4200.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4202 = writer.prefix("MaxResults");
    if let Some(var_4203) = &input.max_results {
        scope_4202.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4203).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4204 = writer.prefix("NextToken");
    if let Some(var_4205) = &input.next_token {
        scope_4204.string(var_4205);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoints(input: &crate::input::DescribeVpcEndpointsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4206 = writer.prefix("DryRun");
    if let Some(var_4207) = &input.dry_run {
        scope_4206.boolean(*var_4207);
    }
    #[allow(unused_mut)]
    let mut scope_4208 = writer.prefix("VpcEndpointId");
    if let Some(var_4209) = &input.vpc_endpoint_ids {
        let mut list_4211 = scope_4208.start_list(true, Some("item"));
        for item_4210 in var_4209 {
            #[allow(unused_mut)]
            let mut entry_4212 = list_4211.entry();
            entry_4212.string(item_4210);
        }
        list_4211.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4213 = writer.prefix("Filter");
    if let Some(var_4214) = &input.filters {
        let mut list_4216 = scope_4213.start_list(true, Some("Filter"));
        for item_4215 in var_4214 {
            #[allow(unused_mut)]
            let mut entry_4217 = list_4216.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4217, item_4215)?;
        }
        list_4216.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4218 = writer.prefix("MaxResults");
    if let Some(var_4219) = &input.max_results {
        scope_4218.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4219).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4220 = writer.prefix("NextToken");
    if let Some(var_4221) = &input.next_token {
        scope_4220.string(var_4221);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_configurations(input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServiceConfigurations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4222 = writer.prefix("DryRun");
    if let Some(var_4223) = &input.dry_run {
        scope_4222.boolean(*var_4223);
    }
    #[allow(unused_mut)]
    let mut scope_4224 = writer.prefix("ServiceId");
    if let Some(var_4225) = &input.service_ids {
        let mut list_4227 = scope_4224.start_list(true, Some("item"));
        for item_4226 in var_4225 {
            #[allow(unused_mut)]
            let mut entry_4228 = list_4227.entry();
            entry_4228.string(item_4226);
        }
        list_4227.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4229 = writer.prefix("Filter");
    if let Some(var_4230) = &input.filters {
        let mut list_4232 = scope_4229.start_list(true, Some("Filter"));
        for item_4231 in var_4230 {
            #[allow(unused_mut)]
            let mut entry_4233 = list_4232.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4233, item_4231)?;
        }
        list_4232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4234 = writer.prefix("MaxResults");
    if let Some(var_4235) = &input.max_results {
        scope_4234.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4235).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4236 = writer.prefix("NextToken");
    if let Some(var_4237) = &input.next_token {
        scope_4236.string(var_4237);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_permissions(input: &crate::input::DescribeVpcEndpointServicePermissionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServicePermissions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4238 = writer.prefix("DryRun");
    if let Some(var_4239) = &input.dry_run {
        scope_4238.boolean(*var_4239);
    }
    #[allow(unused_mut)]
    let mut scope_4240 = writer.prefix("ServiceId");
    if let Some(var_4241) = &input.service_id {
        scope_4240.string(var_4241);
    }
    #[allow(unused_mut)]
    let mut scope_4242 = writer.prefix("Filter");
    if let Some(var_4243) = &input.filters {
        let mut list_4245 = scope_4242.start_list(true, Some("Filter"));
        for item_4244 in var_4243 {
            #[allow(unused_mut)]
            let mut entry_4246 = list_4245.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4246, item_4244)?;
        }
        list_4245.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4247 = writer.prefix("MaxResults");
    if let Some(var_4248) = &input.max_results {
        scope_4247.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4248).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4249 = writer.prefix("NextToken");
    if let Some(var_4250) = &input.next_token {
        scope_4249.string(var_4250);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_services(input: &crate::input::DescribeVpcEndpointServicesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4251 = writer.prefix("DryRun");
    if let Some(var_4252) = &input.dry_run {
        scope_4251.boolean(*var_4252);
    }
    #[allow(unused_mut)]
    let mut scope_4253 = writer.prefix("ServiceName");
    if let Some(var_4254) = &input.service_names {
        let mut list_4256 = scope_4253.start_list(true, Some("item"));
        for item_4255 in var_4254 {
            #[allow(unused_mut)]
            let mut entry_4257 = list_4256.entry();
            entry_4257.string(item_4255);
        }
        list_4256.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4258 = writer.prefix("Filter");
    if let Some(var_4259) = &input.filters {
        let mut list_4261 = scope_4258.start_list(true, Some("Filter"));
        for item_4260 in var_4259 {
            #[allow(unused_mut)]
            let mut entry_4262 = list_4261.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4262, item_4260)?;
        }
        list_4261.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4263 = writer.prefix("MaxResults");
    if let Some(var_4264) = &input.max_results {
        scope_4263.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4264).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4265 = writer.prefix("NextToken");
    if let Some(var_4266) = &input.next_token {
        scope_4265.string(var_4266);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_peering_connections(input: &crate::input::DescribeVpcPeeringConnectionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4267 = writer.prefix("Filter");
    if let Some(var_4268) = &input.filters {
        let mut list_4270 = scope_4267.start_list(true, Some("Filter"));
        for item_4269 in var_4268 {
            #[allow(unused_mut)]
            let mut entry_4271 = list_4270.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4271, item_4269)?;
        }
        list_4270.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4272 = writer.prefix("DryRun");
    if let Some(var_4273) = &input.dry_run {
        scope_4272.boolean(*var_4273);
    }
    #[allow(unused_mut)]
    let mut scope_4274 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_4275) = &input.vpc_peering_connection_ids {
        let mut list_4277 = scope_4274.start_list(true, Some("item"));
        for item_4276 in var_4275 {
            #[allow(unused_mut)]
            let mut entry_4278 = list_4277.entry();
            entry_4278.string(item_4276);
        }
        list_4277.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4279 = writer.prefix("NextToken");
    if let Some(var_4280) = &input.next_token {
        scope_4279.string(var_4280);
    }
    #[allow(unused_mut)]
    let mut scope_4281 = writer.prefix("MaxResults");
    if let Some(var_4282) = &input.max_results {
        scope_4281.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4282).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpcs(input: &crate::input::DescribeVpcsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4283 = writer.prefix("Filter");
    if let Some(var_4284) = &input.filters {
        let mut list_4286 = scope_4283.start_list(true, Some("Filter"));
        for item_4285 in var_4284 {
            #[allow(unused_mut)]
            let mut entry_4287 = list_4286.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4287, item_4285)?;
        }
        list_4286.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4288 = writer.prefix("VpcId");
    if let Some(var_4289) = &input.vpc_ids {
        let mut list_4291 = scope_4288.start_list(true, Some("VpcId"));
        for item_4290 in var_4289 {
            #[allow(unused_mut)]
            let mut entry_4292 = list_4291.entry();
            entry_4292.string(item_4290);
        }
        list_4291.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4293 = writer.prefix("DryRun");
    if let Some(var_4294) = &input.dry_run {
        scope_4293.boolean(*var_4294);
    }
    #[allow(unused_mut)]
    let mut scope_4295 = writer.prefix("NextToken");
    if let Some(var_4296) = &input.next_token {
        scope_4295.string(var_4296);
    }
    #[allow(unused_mut)]
    let mut scope_4297 = writer.prefix("MaxResults");
    if let Some(var_4298) = &input.max_results {
        scope_4297.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4298).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_connections(input: &crate::input::DescribeVpnConnectionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4299 = writer.prefix("Filter");
    if let Some(var_4300) = &input.filters {
        let mut list_4302 = scope_4299.start_list(true, Some("Filter"));
        for item_4301 in var_4300 {
            #[allow(unused_mut)]
            let mut entry_4303 = list_4302.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4303, item_4301)?;
        }
        list_4302.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4304 = writer.prefix("VpnConnectionId");
    if let Some(var_4305) = &input.vpn_connection_ids {
        let mut list_4307 = scope_4304.start_list(true, Some("VpnConnectionId"));
        for item_4306 in var_4305 {
            #[allow(unused_mut)]
            let mut entry_4308 = list_4307.entry();
            entry_4308.string(item_4306);
        }
        list_4307.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4309 = writer.prefix("DryRun");
    if let Some(var_4310) = &input.dry_run {
        scope_4309.boolean(*var_4310);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_gateways(input: &crate::input::DescribeVpnGatewaysInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4311 = writer.prefix("Filter");
    if let Some(var_4312) = &input.filters {
        let mut list_4314 = scope_4311.start_list(true, Some("Filter"));
        for item_4313 in var_4312 {
            #[allow(unused_mut)]
            let mut entry_4315 = list_4314.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4315, item_4313)?;
        }
        list_4314.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4316 = writer.prefix("VpnGatewayId");
    if let Some(var_4317) = &input.vpn_gateway_ids {
        let mut list_4319 = scope_4316.start_list(true, Some("VpnGatewayId"));
        for item_4318 in var_4317 {
            #[allow(unused_mut)]
            let mut entry_4320 = list_4319.entry();
            entry_4320.string(item_4318);
        }
        list_4319.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4321 = writer.prefix("DryRun");
    if let Some(var_4322) = &input.dry_run {
        scope_4321.boolean(*var_4322);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_classic_link_vpc(input: &crate::input::DetachClassicLinkVpcInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4323 = writer.prefix("DryRun");
    if let Some(var_4324) = &input.dry_run {
        scope_4323.boolean(*var_4324);
    }
    #[allow(unused_mut)]
    let mut scope_4325 = writer.prefix("InstanceId");
    if let Some(var_4326) = &input.instance_id {
        scope_4325.string(var_4326);
    }
    #[allow(unused_mut)]
    let mut scope_4327 = writer.prefix("VpcId");
    if let Some(var_4328) = &input.vpc_id {
        scope_4327.string(var_4328);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_internet_gateway(input: &crate::input::DetachInternetGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4329 = writer.prefix("DryRun");
    if let Some(var_4330) = &input.dry_run {
        scope_4329.boolean(*var_4330);
    }
    #[allow(unused_mut)]
    let mut scope_4331 = writer.prefix("InternetGatewayId");
    if let Some(var_4332) = &input.internet_gateway_id {
        scope_4331.string(var_4332);
    }
    #[allow(unused_mut)]
    let mut scope_4333 = writer.prefix("VpcId");
    if let Some(var_4334) = &input.vpc_id {
        scope_4333.string(var_4334);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_network_interface(input: &crate::input::DetachNetworkInterfaceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4335 = writer.prefix("AttachmentId");
    if let Some(var_4336) = &input.attachment_id {
        scope_4335.string(var_4336);
    }
    #[allow(unused_mut)]
    let mut scope_4337 = writer.prefix("DryRun");
    if let Some(var_4338) = &input.dry_run {
        scope_4337.boolean(*var_4338);
    }
    #[allow(unused_mut)]
    let mut scope_4339 = writer.prefix("Force");
    if let Some(var_4340) = &input.force {
        scope_4339.boolean(*var_4340);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_verified_access_trust_provider(input: &crate::input::DetachVerifiedAccessTrustProviderInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVerifiedAccessTrustProvider", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4341 = writer.prefix("VerifiedAccessInstanceId");
    if let Some(var_4342) = &input.verified_access_instance_id {
        scope_4341.string(var_4342);
    }
    #[allow(unused_mut)]
    let mut scope_4343 = writer.prefix("VerifiedAccessTrustProviderId");
    if let Some(var_4344) = &input.verified_access_trust_provider_id {
        scope_4343.string(var_4344);
    }
    #[allow(unused_mut)]
    let mut scope_4345 = writer.prefix("ClientToken");
    if let Some(var_4346) = &input.client_token {
        scope_4345.string(var_4346);
    }
    #[allow(unused_mut)]
    let mut scope_4347 = writer.prefix("DryRun");
    if let Some(var_4348) = &input.dry_run {
        scope_4347.boolean(*var_4348);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_volume(input: &crate::input::DetachVolumeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4349 = writer.prefix("Device");
    if let Some(var_4350) = &input.device {
        scope_4349.string(var_4350);
    }
    #[allow(unused_mut)]
    let mut scope_4351 = writer.prefix("Force");
    if let Some(var_4352) = &input.force {
        scope_4351.boolean(*var_4352);
    }
    #[allow(unused_mut)]
    let mut scope_4353 = writer.prefix("InstanceId");
    if let Some(var_4354) = &input.instance_id {
        scope_4353.string(var_4354);
    }
    #[allow(unused_mut)]
    let mut scope_4355 = writer.prefix("VolumeId");
    if let Some(var_4356) = &input.volume_id {
        scope_4355.string(var_4356);
    }
    #[allow(unused_mut)]
    let mut scope_4357 = writer.prefix("DryRun");
    if let Some(var_4358) = &input.dry_run {
        scope_4357.boolean(*var_4358);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_vpn_gateway(input: &crate::input::DetachVpnGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4359 = writer.prefix("VpcId");
    if let Some(var_4360) = &input.vpc_id {
        scope_4359.string(var_4360);
    }
    #[allow(unused_mut)]
    let mut scope_4361 = writer.prefix("VpnGatewayId");
    if let Some(var_4362) = &input.vpn_gateway_id {
        scope_4361.string(var_4362);
    }
    #[allow(unused_mut)]
    let mut scope_4363 = writer.prefix("DryRun");
    if let Some(var_4364) = &input.dry_run {
        scope_4363.boolean(*var_4364);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_address_transfer(input: &crate::input::DisableAddressTransferInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableAddressTransfer", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4365 = writer.prefix("AllocationId");
    if let Some(var_4366) = &input.allocation_id {
        scope_4365.string(var_4366);
    }
    #[allow(unused_mut)]
    let mut scope_4367 = writer.prefix("DryRun");
    if let Some(var_4368) = &input.dry_run {
        scope_4367.boolean(*var_4368);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_aws_network_performance_metric_subscription(input: &crate::input::DisableAwsNetworkPerformanceMetricSubscriptionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableAwsNetworkPerformanceMetricSubscription", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4369 = writer.prefix("Source");
    if let Some(var_4370) = &input.source {
        scope_4369.string(var_4370);
    }
    #[allow(unused_mut)]
    let mut scope_4371 = writer.prefix("Destination");
    if let Some(var_4372) = &input.destination {
        scope_4371.string(var_4372);
    }
    #[allow(unused_mut)]
    let mut scope_4373 = writer.prefix("Metric");
    if let Some(var_4374) = &input.metric {
        scope_4373.string(var_4374.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4375 = writer.prefix("Statistic");
    if let Some(var_4376) = &input.statistic {
        scope_4375.string(var_4376.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4377 = writer.prefix("DryRun");
    if let Some(var_4378) = &input.dry_run {
        scope_4377.boolean(*var_4378);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ebs_encryption_by_default(input: &crate::input::DisableEbsEncryptionByDefaultInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4379 = writer.prefix("DryRun");
    if let Some(var_4380) = &input.dry_run {
        scope_4379.boolean(*var_4380);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_launch(input: &crate::input::DisableFastLaunchInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4381 = writer.prefix("ImageId");
    if let Some(var_4382) = &input.image_id {
        scope_4381.string(var_4382);
    }
    #[allow(unused_mut)]
    let mut scope_4383 = writer.prefix("Force");
    if let Some(var_4384) = &input.force {
        scope_4383.boolean(*var_4384);
    }
    #[allow(unused_mut)]
    let mut scope_4385 = writer.prefix("DryRun");
    if let Some(var_4386) = &input.dry_run {
        scope_4385.boolean(*var_4386);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_snapshot_restores(input: &crate::input::DisableFastSnapshotRestoresInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4387 = writer.prefix("AvailabilityZone");
    if let Some(var_4388) = &input.availability_zones {
        let mut list_4390 = scope_4387.start_list(true, Some("AvailabilityZone"));
        for item_4389 in var_4388 {
            #[allow(unused_mut)]
            let mut entry_4391 = list_4390.entry();
            entry_4391.string(item_4389);
        }
        list_4390.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4392 = writer.prefix("SourceSnapshotId");
    if let Some(var_4393) = &input.source_snapshot_ids {
        let mut list_4395 = scope_4392.start_list(true, Some("SnapshotId"));
        for item_4394 in var_4393 {
            #[allow(unused_mut)]
            let mut entry_4396 = list_4395.entry();
            entry_4396.string(item_4394);
        }
        list_4395.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4397 = writer.prefix("DryRun");
    if let Some(var_4398) = &input.dry_run {
        scope_4397.boolean(*var_4398);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_image_deprecation(input: &crate::input::DisableImageDeprecationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4399 = writer.prefix("ImageId");
    if let Some(var_4400) = &input.image_id {
        scope_4399.string(var_4400);
    }
    #[allow(unused_mut)]
    let mut scope_4401 = writer.prefix("DryRun");
    if let Some(var_4402) = &input.dry_run {
        scope_4401.boolean(*var_4402);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ipam_organization_admin_account(input: &crate::input::DisableIpamOrganizationAdminAccountInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableIpamOrganizationAdminAccount", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4403 = writer.prefix("DryRun");
    if let Some(var_4404) = &input.dry_run {
        scope_4403.boolean(*var_4404);
    }
    #[allow(unused_mut)]
    let mut scope_4405 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4406) = &input.delegated_admin_account_id {
        scope_4405.string(var_4406);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_serial_console_access(input: &crate::input::DisableSerialConsoleAccessInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4407 = writer.prefix("DryRun");
    if let Some(var_4408) = &input.dry_run {
        scope_4407.boolean(*var_4408);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_transit_gateway_route_table_propagation(input: &crate::input::DisableTransitGatewayRouteTablePropagationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableTransitGatewayRouteTablePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4409 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4410) = &input.transit_gateway_route_table_id {
        scope_4409.string(var_4410);
    }
    #[allow(unused_mut)]
    let mut scope_4411 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4412) = &input.transit_gateway_attachment_id {
        scope_4411.string(var_4412);
    }
    #[allow(unused_mut)]
    let mut scope_4413 = writer.prefix("DryRun");
    if let Some(var_4414) = &input.dry_run {
        scope_4413.boolean(*var_4414);
    }
    #[allow(unused_mut)]
    let mut scope_4415 = writer.prefix("TransitGatewayRouteTableAnnouncementId");
    if let Some(var_4416) = &input.transit_gateway_route_table_announcement_id {
        scope_4415.string(var_4416);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vgw_route_propagation(input: &crate::input::DisableVgwRoutePropagationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4417 = writer.prefix("GatewayId");
    if let Some(var_4418) = &input.gateway_id {
        scope_4417.string(var_4418);
    }
    #[allow(unused_mut)]
    let mut scope_4419 = writer.prefix("RouteTableId");
    if let Some(var_4420) = &input.route_table_id {
        scope_4419.string(var_4420);
    }
    #[allow(unused_mut)]
    let mut scope_4421 = writer.prefix("DryRun");
    if let Some(var_4422) = &input.dry_run {
        scope_4421.boolean(*var_4422);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link(input: &crate::input::DisableVpcClassicLinkInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4423 = writer.prefix("DryRun");
    if let Some(var_4424) = &input.dry_run {
        scope_4423.boolean(*var_4424);
    }
    #[allow(unused_mut)]
    let mut scope_4425 = writer.prefix("VpcId");
    if let Some(var_4426) = &input.vpc_id {
        scope_4425.string(var_4426);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link_dns_support(input: &crate::input::DisableVpcClassicLinkDnsSupportInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4427 = writer.prefix("VpcId");
    if let Some(var_4428) = &input.vpc_id {
        scope_4427.string(var_4428);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_address(input: &crate::input::DisassociateAddressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4429 = writer.prefix("AssociationId");
    if let Some(var_4430) = &input.association_id {
        scope_4429.string(var_4430);
    }
    #[allow(unused_mut)]
    let mut scope_4431 = writer.prefix("PublicIp");
    if let Some(var_4432) = &input.public_ip {
        scope_4431.string(var_4432);
    }
    #[allow(unused_mut)]
    let mut scope_4433 = writer.prefix("DryRun");
    if let Some(var_4434) = &input.dry_run {
        scope_4433.boolean(*var_4434);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_client_vpn_target_network(input: &crate::input::DisassociateClientVpnTargetNetworkInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateClientVpnTargetNetwork", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4435 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4436) = &input.client_vpn_endpoint_id {
        scope_4435.string(var_4436);
    }
    #[allow(unused_mut)]
    let mut scope_4437 = writer.prefix("AssociationId");
    if let Some(var_4438) = &input.association_id {
        scope_4437.string(var_4438);
    }
    #[allow(unused_mut)]
    let mut scope_4439 = writer.prefix("DryRun");
    if let Some(var_4440) = &input.dry_run {
        scope_4439.boolean(*var_4440);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_enclave_certificate_iam_role(input: &crate::input::DisassociateEnclaveCertificateIamRoleInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateEnclaveCertificateIamRole", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4441 = writer.prefix("CertificateArn");
    if let Some(var_4442) = &input.certificate_arn {
        scope_4441.string(var_4442);
    }
    #[allow(unused_mut)]
    let mut scope_4443 = writer.prefix("RoleArn");
    if let Some(var_4444) = &input.role_arn {
        scope_4443.string(var_4444);
    }
    #[allow(unused_mut)]
    let mut scope_4445 = writer.prefix("DryRun");
    if let Some(var_4446) = &input.dry_run {
        scope_4445.boolean(*var_4446);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_iam_instance_profile(input: &crate::input::DisassociateIamInstanceProfileInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4447 = writer.prefix("AssociationId");
    if let Some(var_4448) = &input.association_id {
        scope_4447.string(var_4448);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_instance_event_window(input: &crate::input::DisassociateInstanceEventWindowInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4449 = writer.prefix("DryRun");
    if let Some(var_4450) = &input.dry_run {
        scope_4449.boolean(*var_4450);
    }
    #[allow(unused_mut)]
    let mut scope_4451 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4452) = &input.instance_event_window_id {
        scope_4451.string(var_4452);
    }
    #[allow(unused_mut)]
    let mut scope_4453 = writer.prefix("AssociationTarget");
    if let Some(var_4454) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_disassociation_request(scope_4453, var_4454)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_route_table(input: &crate::input::DisassociateRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4455 = writer.prefix("AssociationId");
    if let Some(var_4456) = &input.association_id {
        scope_4455.string(var_4456);
    }
    #[allow(unused_mut)]
    let mut scope_4457 = writer.prefix("DryRun");
    if let Some(var_4458) = &input.dry_run {
        scope_4457.boolean(*var_4458);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_subnet_cidr_block(input: &crate::input::DisassociateSubnetCidrBlockInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4459 = writer.prefix("AssociationId");
    if let Some(var_4460) = &input.association_id {
        scope_4459.string(var_4460);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_multicast_domain(input: &crate::input::DisassociateTransitGatewayMulticastDomainInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTransitGatewayMulticastDomain", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4461 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4462) = &input.transit_gateway_multicast_domain_id {
        scope_4461.string(var_4462);
    }
    #[allow(unused_mut)]
    let mut scope_4463 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4464) = &input.transit_gateway_attachment_id {
        scope_4463.string(var_4464);
    }
    #[allow(unused_mut)]
    let mut scope_4465 = writer.prefix("SubnetIds");
    if let Some(var_4466) = &input.subnet_ids {
        let mut list_4468 = scope_4465.start_list(true, Some("item"));
        for item_4467 in var_4466 {
            #[allow(unused_mut)]
            let mut entry_4469 = list_4468.entry();
            entry_4469.string(item_4467);
        }
        list_4468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4470 = writer.prefix("DryRun");
    if let Some(var_4471) = &input.dry_run {
        scope_4470.boolean(*var_4471);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_policy_table(input: &crate::input::DisassociateTransitGatewayPolicyTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTransitGatewayPolicyTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4472 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_4473) = &input.transit_gateway_policy_table_id {
        scope_4472.string(var_4473);
    }
    #[allow(unused_mut)]
    let mut scope_4474 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4475) = &input.transit_gateway_attachment_id {
        scope_4474.string(var_4475);
    }
    #[allow(unused_mut)]
    let mut scope_4476 = writer.prefix("DryRun");
    if let Some(var_4477) = &input.dry_run {
        scope_4476.boolean(*var_4477);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_route_table(input: &crate::input::DisassociateTransitGatewayRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4478 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4479) = &input.transit_gateway_route_table_id {
        scope_4478.string(var_4479);
    }
    #[allow(unused_mut)]
    let mut scope_4480 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4481) = &input.transit_gateway_attachment_id {
        scope_4480.string(var_4481);
    }
    #[allow(unused_mut)]
    let mut scope_4482 = writer.prefix("DryRun");
    if let Some(var_4483) = &input.dry_run {
        scope_4482.boolean(*var_4483);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_trunk_interface(input: &crate::input::DisassociateTrunkInterfaceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4484 = writer.prefix("AssociationId");
    if let Some(var_4485) = &input.association_id {
        scope_4484.string(var_4485);
    }
    #[allow(unused_mut)]
    let mut scope_4486 = writer.prefix("ClientToken");
    if let Some(var_4487) = &input.client_token {
        scope_4486.string(var_4487);
    }
    #[allow(unused_mut)]
    let mut scope_4488 = writer.prefix("DryRun");
    if let Some(var_4489) = &input.dry_run {
        scope_4488.boolean(*var_4489);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_vpc_cidr_block(input: &crate::input::DisassociateVpcCidrBlockInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4490 = writer.prefix("AssociationId");
    if let Some(var_4491) = &input.association_id {
        scope_4490.string(var_4491);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_address_transfer(input: &crate::input::EnableAddressTransferInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableAddressTransfer", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4492 = writer.prefix("AllocationId");
    if let Some(var_4493) = &input.allocation_id {
        scope_4492.string(var_4493);
    }
    #[allow(unused_mut)]
    let mut scope_4494 = writer.prefix("TransferAccountId");
    if let Some(var_4495) = &input.transfer_account_id {
        scope_4494.string(var_4495);
    }
    #[allow(unused_mut)]
    let mut scope_4496 = writer.prefix("DryRun");
    if let Some(var_4497) = &input.dry_run {
        scope_4496.boolean(*var_4497);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_aws_network_performance_metric_subscription(input: &crate::input::EnableAwsNetworkPerformanceMetricSubscriptionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableAwsNetworkPerformanceMetricSubscription", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4498 = writer.prefix("Source");
    if let Some(var_4499) = &input.source {
        scope_4498.string(var_4499);
    }
    #[allow(unused_mut)]
    let mut scope_4500 = writer.prefix("Destination");
    if let Some(var_4501) = &input.destination {
        scope_4500.string(var_4501);
    }
    #[allow(unused_mut)]
    let mut scope_4502 = writer.prefix("Metric");
    if let Some(var_4503) = &input.metric {
        scope_4502.string(var_4503.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4504 = writer.prefix("Statistic");
    if let Some(var_4505) = &input.statistic {
        scope_4504.string(var_4505.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4506 = writer.prefix("DryRun");
    if let Some(var_4507) = &input.dry_run {
        scope_4506.boolean(*var_4507);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ebs_encryption_by_default(input: &crate::input::EnableEbsEncryptionByDefaultInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4508 = writer.prefix("DryRun");
    if let Some(var_4509) = &input.dry_run {
        scope_4508.boolean(*var_4509);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_launch(input: &crate::input::EnableFastLaunchInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4510 = writer.prefix("ImageId");
    if let Some(var_4511) = &input.image_id {
        scope_4510.string(var_4511);
    }
    #[allow(unused_mut)]
    let mut scope_4512 = writer.prefix("ResourceType");
    if let Some(var_4513) = &input.resource_type {
        scope_4512.string(var_4513);
    }
    #[allow(unused_mut)]
    let mut scope_4514 = writer.prefix("SnapshotConfiguration");
    if let Some(var_4515) = &input.snapshot_configuration {
        crate::query_ser::serialize_structure_crate_model_fast_launch_snapshot_configuration_request(scope_4514, var_4515)?;
    }
    #[allow(unused_mut)]
    let mut scope_4516 = writer.prefix("LaunchTemplate");
    if let Some(var_4517) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_fast_launch_launch_template_specification_request(scope_4516, var_4517)?;
    }
    #[allow(unused_mut)]
    let mut scope_4518 = writer.prefix("MaxParallelLaunches");
    if let Some(var_4519) = &input.max_parallel_launches {
        scope_4518.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4519).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4520 = writer.prefix("DryRun");
    if let Some(var_4521) = &input.dry_run {
        scope_4520.boolean(*var_4521);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_snapshot_restores(input: &crate::input::EnableFastSnapshotRestoresInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4522 = writer.prefix("AvailabilityZone");
    if let Some(var_4523) = &input.availability_zones {
        let mut list_4525 = scope_4522.start_list(true, Some("AvailabilityZone"));
        for item_4524 in var_4523 {
            #[allow(unused_mut)]
            let mut entry_4526 = list_4525.entry();
            entry_4526.string(item_4524);
        }
        list_4525.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4527 = writer.prefix("SourceSnapshotId");
    if let Some(var_4528) = &input.source_snapshot_ids {
        let mut list_4530 = scope_4527.start_list(true, Some("SnapshotId"));
        for item_4529 in var_4528 {
            #[allow(unused_mut)]
            let mut entry_4531 = list_4530.entry();
            entry_4531.string(item_4529);
        }
        list_4530.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4532 = writer.prefix("DryRun");
    if let Some(var_4533) = &input.dry_run {
        scope_4532.boolean(*var_4533);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_image_deprecation(input: &crate::input::EnableImageDeprecationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4534 = writer.prefix("ImageId");
    if let Some(var_4535) = &input.image_id {
        scope_4534.string(var_4535);
    }
    #[allow(unused_mut)]
    let mut scope_4536 = writer.prefix("DeprecateAt");
    if let Some(var_4537) = &input.deprecate_at {
        scope_4536.date_time(var_4537, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4538 = writer.prefix("DryRun");
    if let Some(var_4539) = &input.dry_run {
        scope_4538.boolean(*var_4539);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ipam_organization_admin_account(input: &crate::input::EnableIpamOrganizationAdminAccountInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableIpamOrganizationAdminAccount", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4540 = writer.prefix("DryRun");
    if let Some(var_4541) = &input.dry_run {
        scope_4540.boolean(*var_4541);
    }
    #[allow(unused_mut)]
    let mut scope_4542 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4543) = &input.delegated_admin_account_id {
        scope_4542.string(var_4543);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_reachability_analyzer_organization_sharing(input: &crate::input::EnableReachabilityAnalyzerOrganizationSharingInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableReachabilityAnalyzerOrganizationSharing", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4544 = writer.prefix("DryRun");
    if let Some(var_4545) = &input.dry_run {
        scope_4544.boolean(*var_4545);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_serial_console_access(input: &crate::input::EnableSerialConsoleAccessInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4546 = writer.prefix("DryRun");
    if let Some(var_4547) = &input.dry_run {
        scope_4546.boolean(*var_4547);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_transit_gateway_route_table_propagation(input: &crate::input::EnableTransitGatewayRouteTablePropagationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableTransitGatewayRouteTablePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4548 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4549) = &input.transit_gateway_route_table_id {
        scope_4548.string(var_4549);
    }
    #[allow(unused_mut)]
    let mut scope_4550 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4551) = &input.transit_gateway_attachment_id {
        scope_4550.string(var_4551);
    }
    #[allow(unused_mut)]
    let mut scope_4552 = writer.prefix("DryRun");
    if let Some(var_4553) = &input.dry_run {
        scope_4552.boolean(*var_4553);
    }
    #[allow(unused_mut)]
    let mut scope_4554 = writer.prefix("TransitGatewayRouteTableAnnouncementId");
    if let Some(var_4555) = &input.transit_gateway_route_table_announcement_id {
        scope_4554.string(var_4555);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vgw_route_propagation(input: &crate::input::EnableVgwRoutePropagationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4556 = writer.prefix("GatewayId");
    if let Some(var_4557) = &input.gateway_id {
        scope_4556.string(var_4557);
    }
    #[allow(unused_mut)]
    let mut scope_4558 = writer.prefix("RouteTableId");
    if let Some(var_4559) = &input.route_table_id {
        scope_4558.string(var_4559);
    }
    #[allow(unused_mut)]
    let mut scope_4560 = writer.prefix("DryRun");
    if let Some(var_4561) = &input.dry_run {
        scope_4560.boolean(*var_4561);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_volume_io(input: &crate::input::EnableVolumeIoInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4562 = writer.prefix("DryRun");
    if let Some(var_4563) = &input.dry_run {
        scope_4562.boolean(*var_4563);
    }
    #[allow(unused_mut)]
    let mut scope_4564 = writer.prefix("VolumeId");
    if let Some(var_4565) = &input.volume_id {
        scope_4564.string(var_4565);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link(input: &crate::input::EnableVpcClassicLinkInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4566 = writer.prefix("DryRun");
    if let Some(var_4567) = &input.dry_run {
        scope_4566.boolean(*var_4567);
    }
    #[allow(unused_mut)]
    let mut scope_4568 = writer.prefix("VpcId");
    if let Some(var_4569) = &input.vpc_id {
        scope_4568.string(var_4569);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link_dns_support(input: &crate::input::EnableVpcClassicLinkDnsSupportInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4570 = writer.prefix("VpcId");
    if let Some(var_4571) = &input.vpc_id {
        scope_4570.string(var_4571);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_certificate_revocation_list(input: &crate::input::ExportClientVpnClientCertificateRevocationListInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportClientVpnClientCertificateRevocationList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4572 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4573) = &input.client_vpn_endpoint_id {
        scope_4572.string(var_4573);
    }
    #[allow(unused_mut)]
    let mut scope_4574 = writer.prefix("DryRun");
    if let Some(var_4575) = &input.dry_run {
        scope_4574.boolean(*var_4575);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_configuration(input: &crate::input::ExportClientVpnClientConfigurationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportClientVpnClientConfiguration", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4576 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4577) = &input.client_vpn_endpoint_id {
        scope_4576.string(var_4577);
    }
    #[allow(unused_mut)]
    let mut scope_4578 = writer.prefix("DryRun");
    if let Some(var_4579) = &input.dry_run {
        scope_4578.boolean(*var_4579);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_image(input: &crate::input::ExportImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4580 = writer.prefix("ClientToken");
    if let Some(var_4581) = &input.client_token {
        scope_4580.string(var_4581);
    }
    #[allow(unused_mut)]
    let mut scope_4582 = writer.prefix("Description");
    if let Some(var_4583) = &input.description {
        scope_4582.string(var_4583);
    }
    #[allow(unused_mut)]
    let mut scope_4584 = writer.prefix("DiskImageFormat");
    if let Some(var_4585) = &input.disk_image_format {
        scope_4584.string(var_4585.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4586 = writer.prefix("DryRun");
    if let Some(var_4587) = &input.dry_run {
        scope_4586.boolean(*var_4587);
    }
    #[allow(unused_mut)]
    let mut scope_4588 = writer.prefix("ImageId");
    if let Some(var_4589) = &input.image_id {
        scope_4588.string(var_4589);
    }
    #[allow(unused_mut)]
    let mut scope_4590 = writer.prefix("S3ExportLocation");
    if let Some(var_4591) = &input.s3_export_location {
        crate::query_ser::serialize_structure_crate_model_export_task_s3_location_request(scope_4590, var_4591)?;
    }
    #[allow(unused_mut)]
    let mut scope_4592 = writer.prefix("RoleName");
    if let Some(var_4593) = &input.role_name {
        scope_4592.string(var_4593);
    }
    #[allow(unused_mut)]
    let mut scope_4594 = writer.prefix("TagSpecification");
    if let Some(var_4595) = &input.tag_specifications {
        let mut list_4597 = scope_4594.start_list(true, Some("item"));
        for item_4596 in var_4595 {
            #[allow(unused_mut)]
            let mut entry_4598 = list_4597.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_4598, item_4596)?;
        }
        list_4597.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_transit_gateway_routes(input: &crate::input::ExportTransitGatewayRoutesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4599 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4600) = &input.transit_gateway_route_table_id {
        scope_4599.string(var_4600);
    }
    #[allow(unused_mut)]
    let mut scope_4601 = writer.prefix("Filter");
    if let Some(var_4602) = &input.filters {
        let mut list_4604 = scope_4601.start_list(true, Some("Filter"));
        for item_4603 in var_4602 {
            #[allow(unused_mut)]
            let mut entry_4605 = list_4604.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4605, item_4603)?;
        }
        list_4604.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4606 = writer.prefix("S3Bucket");
    if let Some(var_4607) = &input.s3_bucket {
        scope_4606.string(var_4607);
    }
    #[allow(unused_mut)]
    let mut scope_4608 = writer.prefix("DryRun");
    if let Some(var_4609) = &input.dry_run {
        scope_4608.boolean(*var_4609);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_enclave_certificate_iam_roles(input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetAssociatedEnclaveCertificateIamRoles", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4610 = writer.prefix("CertificateArn");
    if let Some(var_4611) = &input.certificate_arn {
        scope_4610.string(var_4611);
    }
    #[allow(unused_mut)]
    let mut scope_4612 = writer.prefix("DryRun");
    if let Some(var_4613) = &input.dry_run {
        scope_4612.boolean(*var_4613);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_ipv6_pool_cidrs(input: &crate::input::GetAssociatedIpv6PoolCidrsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4614 = writer.prefix("PoolId");
    if let Some(var_4615) = &input.pool_id {
        scope_4614.string(var_4615);
    }
    #[allow(unused_mut)]
    let mut scope_4616 = writer.prefix("NextToken");
    if let Some(var_4617) = &input.next_token {
        scope_4616.string(var_4617);
    }
    #[allow(unused_mut)]
    let mut scope_4618 = writer.prefix("MaxResults");
    if let Some(var_4619) = &input.max_results {
        scope_4618.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4619).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4620 = writer.prefix("DryRun");
    if let Some(var_4621) = &input.dry_run {
        scope_4620.boolean(*var_4621);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_aws_network_performance_data(input: &crate::input::GetAwsNetworkPerformanceDataInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetAwsNetworkPerformanceData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4622 = writer.prefix("DataQuery");
    if let Some(var_4623) = &input.data_queries {
        let mut list_4625 = scope_4622.start_list(true, None);
        for item_4624 in var_4623 {
            #[allow(unused_mut)]
            let mut entry_4626 = list_4625.entry();
            crate::query_ser::serialize_structure_crate_model_data_query(entry_4626, item_4624)?;
        }
        list_4625.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4627 = writer.prefix("StartTime");
    if let Some(var_4628) = &input.start_time {
        scope_4627.date_time(var_4628, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4629 = writer.prefix("EndTime");
    if let Some(var_4630) = &input.end_time {
        scope_4629.date_time(var_4630, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4631 = writer.prefix("MaxResults");
    if let Some(var_4632) = &input.max_results {
        scope_4631.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4632).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4633 = writer.prefix("NextToken");
    if let Some(var_4634) = &input.next_token {
        scope_4633.string(var_4634);
    }
    #[allow(unused_mut)]
    let mut scope_4635 = writer.prefix("DryRun");
    if let Some(var_4636) = &input.dry_run {
        scope_4635.boolean(*var_4636);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_capacity_reservation_usage(input: &crate::input::GetCapacityReservationUsageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4637 = writer.prefix("CapacityReservationId");
    if let Some(var_4638) = &input.capacity_reservation_id {
        scope_4637.string(var_4638);
    }
    #[allow(unused_mut)]
    let mut scope_4639 = writer.prefix("NextToken");
    if let Some(var_4640) = &input.next_token {
        scope_4639.string(var_4640);
    }
    #[allow(unused_mut)]
    let mut scope_4641 = writer.prefix("MaxResults");
    if let Some(var_4642) = &input.max_results {
        scope_4641.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4642).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4643 = writer.prefix("DryRun");
    if let Some(var_4644) = &input.dry_run {
        scope_4643.boolean(*var_4644);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_coip_pool_usage(input: &crate::input::GetCoipPoolUsageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4645 = writer.prefix("PoolId");
    if let Some(var_4646) = &input.pool_id {
        scope_4645.string(var_4646);
    }
    #[allow(unused_mut)]
    let mut scope_4647 = writer.prefix("Filter");
    if let Some(var_4648) = &input.filters {
        let mut list_4650 = scope_4647.start_list(true, Some("Filter"));
        for item_4649 in var_4648 {
            #[allow(unused_mut)]
            let mut entry_4651 = list_4650.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4651, item_4649)?;
        }
        list_4650.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4652 = writer.prefix("MaxResults");
    if let Some(var_4653) = &input.max_results {
        scope_4652.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4653).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4654 = writer.prefix("NextToken");
    if let Some(var_4655) = &input.next_token {
        scope_4654.string(var_4655);
    }
    #[allow(unused_mut)]
    let mut scope_4656 = writer.prefix("DryRun");
    if let Some(var_4657) = &input.dry_run {
        scope_4656.boolean(*var_4657);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_output(input: &crate::input::GetConsoleOutputInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4658 = writer.prefix("InstanceId");
    if let Some(var_4659) = &input.instance_id {
        scope_4658.string(var_4659);
    }
    #[allow(unused_mut)]
    let mut scope_4660 = writer.prefix("DryRun");
    if let Some(var_4661) = &input.dry_run {
        scope_4660.boolean(*var_4661);
    }
    #[allow(unused_mut)]
    let mut scope_4662 = writer.prefix("Latest");
    if let Some(var_4663) = &input.latest {
        scope_4662.boolean(*var_4663);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_screenshot(input: &crate::input::GetConsoleScreenshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4664 = writer.prefix("DryRun");
    if let Some(var_4665) = &input.dry_run {
        scope_4664.boolean(*var_4665);
    }
    #[allow(unused_mut)]
    let mut scope_4666 = writer.prefix("InstanceId");
    if let Some(var_4667) = &input.instance_id {
        scope_4666.string(var_4667);
    }
    #[allow(unused_mut)]
    let mut scope_4668 = writer.prefix("WakeUp");
    if let Some(var_4669) = &input.wake_up {
        scope_4668.boolean(*var_4669);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_default_credit_specification(input: &crate::input::GetDefaultCreditSpecificationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4670 = writer.prefix("DryRun");
    if let Some(var_4671) = &input.dry_run {
        scope_4670.boolean(*var_4671);
    }
    #[allow(unused_mut)]
    let mut scope_4672 = writer.prefix("InstanceFamily");
    if let Some(var_4673) = &input.instance_family {
        scope_4672.string(var_4673.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_default_kms_key_id(input: &crate::input::GetEbsDefaultKmsKeyIdInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4674 = writer.prefix("DryRun");
    if let Some(var_4675) = &input.dry_run {
        scope_4674.boolean(*var_4675);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_encryption_by_default(input: &crate::input::GetEbsEncryptionByDefaultInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4676 = writer.prefix("DryRun");
    if let Some(var_4677) = &input.dry_run {
        scope_4676.boolean(*var_4677);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_flow_logs_integration_template(input: &crate::input::GetFlowLogsIntegrationTemplateInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetFlowLogsIntegrationTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4678 = writer.prefix("DryRun");
    if let Some(var_4679) = &input.dry_run {
        scope_4678.boolean(*var_4679);
    }
    #[allow(unused_mut)]
    let mut scope_4680 = writer.prefix("FlowLogId");
    if let Some(var_4681) = &input.flow_log_id {
        scope_4680.string(var_4681);
    }
    #[allow(unused_mut)]
    let mut scope_4682 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_4683) = &input.config_delivery_s3_destination_arn {
        scope_4682.string(var_4683);
    }
    #[allow(unused_mut)]
    let mut scope_4684 = writer.prefix("IntegrateService");
    if let Some(var_4685) = &input.integrate_services {
        crate::query_ser::serialize_structure_crate_model_integrate_services(scope_4684, var_4685)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_groups_for_capacity_reservation(input: &crate::input::GetGroupsForCapacityReservationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetGroupsForCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4686 = writer.prefix("CapacityReservationId");
    if let Some(var_4687) = &input.capacity_reservation_id {
        scope_4686.string(var_4687);
    }
    #[allow(unused_mut)]
    let mut scope_4688 = writer.prefix("NextToken");
    if let Some(var_4689) = &input.next_token {
        scope_4688.string(var_4689);
    }
    #[allow(unused_mut)]
    let mut scope_4690 = writer.prefix("MaxResults");
    if let Some(var_4691) = &input.max_results {
        scope_4690.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4691).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4692 = writer.prefix("DryRun");
    if let Some(var_4693) = &input.dry_run {
        scope_4692.boolean(*var_4693);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_host_reservation_purchase_preview(input: &crate::input::GetHostReservationPurchasePreviewInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetHostReservationPurchasePreview", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4694 = writer.prefix("HostIdSet");
    if let Some(var_4695) = &input.host_id_set {
        let mut list_4697 = scope_4694.start_list(true, Some("item"));
        for item_4696 in var_4695 {
            #[allow(unused_mut)]
            let mut entry_4698 = list_4697.entry();
            entry_4698.string(item_4696);
        }
        list_4697.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4699 = writer.prefix("OfferingId");
    if let Some(var_4700) = &input.offering_id {
        scope_4699.string(var_4700);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_types_from_instance_requirements(input: &crate::input::GetInstanceTypesFromInstanceRequirementsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetInstanceTypesFromInstanceRequirements", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4701 = writer.prefix("DryRun");
    if let Some(var_4702) = &input.dry_run {
        scope_4701.boolean(*var_4702);
    }
    #[allow(unused_mut)]
    let mut scope_4703 = writer.prefix("ArchitectureType");
    if let Some(var_4704) = &input.architecture_types {
        let mut list_4706 = scope_4703.start_list(true, Some("item"));
        for item_4705 in var_4704 {
            #[allow(unused_mut)]
            let mut entry_4707 = list_4706.entry();
            entry_4707.string(item_4705.as_str());
        }
        list_4706.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4708 = writer.prefix("VirtualizationType");
    if let Some(var_4709) = &input.virtualization_types {
        let mut list_4711 = scope_4708.start_list(true, Some("item"));
        for item_4710 in var_4709 {
            #[allow(unused_mut)]
            let mut entry_4712 = list_4711.entry();
            entry_4712.string(item_4710.as_str());
        }
        list_4711.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4713 = writer.prefix("InstanceRequirements");
    if let Some(var_4714) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(scope_4713, var_4714)?;
    }
    #[allow(unused_mut)]
    let mut scope_4715 = writer.prefix("MaxResults");
    if let Some(var_4716) = &input.max_results {
        scope_4715.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4716).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4717 = writer.prefix("NextToken");
    if let Some(var_4718) = &input.next_token {
        scope_4717.string(var_4718);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_uefi_data(input: &crate::input::GetInstanceUefiDataInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetInstanceUefiData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4719 = writer.prefix("InstanceId");
    if let Some(var_4720) = &input.instance_id {
        scope_4719.string(var_4720);
    }
    #[allow(unused_mut)]
    let mut scope_4721 = writer.prefix("DryRun");
    if let Some(var_4722) = &input.dry_run {
        scope_4721.boolean(*var_4722);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_address_history(input: &crate::input::GetIpamAddressHistoryInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamAddressHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4723 = writer.prefix("DryRun");
    if let Some(var_4724) = &input.dry_run {
        scope_4723.boolean(*var_4724);
    }
    #[allow(unused_mut)]
    let mut scope_4725 = writer.prefix("Cidr");
    if let Some(var_4726) = &input.cidr {
        scope_4725.string(var_4726);
    }
    #[allow(unused_mut)]
    let mut scope_4727 = writer.prefix("IpamScopeId");
    if let Some(var_4728) = &input.ipam_scope_id {
        scope_4727.string(var_4728);
    }
    #[allow(unused_mut)]
    let mut scope_4729 = writer.prefix("VpcId");
    if let Some(var_4730) = &input.vpc_id {
        scope_4729.string(var_4730);
    }
    #[allow(unused_mut)]
    let mut scope_4731 = writer.prefix("StartTime");
    if let Some(var_4732) = &input.start_time {
        scope_4731.date_time(var_4732, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4733 = writer.prefix("EndTime");
    if let Some(var_4734) = &input.end_time {
        scope_4733.date_time(var_4734, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4735 = writer.prefix("MaxResults");
    if let Some(var_4736) = &input.max_results {
        scope_4735.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4736).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4737 = writer.prefix("NextToken");
    if let Some(var_4738) = &input.next_token {
        scope_4737.string(var_4738);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_allocations(input: &crate::input::GetIpamPoolAllocationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolAllocations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4739 = writer.prefix("DryRun");
    if let Some(var_4740) = &input.dry_run {
        scope_4739.boolean(*var_4740);
    }
    #[allow(unused_mut)]
    let mut scope_4741 = writer.prefix("IpamPoolId");
    if let Some(var_4742) = &input.ipam_pool_id {
        scope_4741.string(var_4742);
    }
    #[allow(unused_mut)]
    let mut scope_4743 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_4744) = &input.ipam_pool_allocation_id {
        scope_4743.string(var_4744);
    }
    #[allow(unused_mut)]
    let mut scope_4745 = writer.prefix("Filter");
    if let Some(var_4746) = &input.filters {
        let mut list_4748 = scope_4745.start_list(true, Some("Filter"));
        for item_4747 in var_4746 {
            #[allow(unused_mut)]
            let mut entry_4749 = list_4748.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4749, item_4747)?;
        }
        list_4748.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4750 = writer.prefix("MaxResults");
    if let Some(var_4751) = &input.max_results {
        scope_4750.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4751).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4752 = writer.prefix("NextToken");
    if let Some(var_4753) = &input.next_token {
        scope_4752.string(var_4753);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_cidrs(input: &crate::input::GetIpamPoolCidrsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4754 = writer.prefix("DryRun");
    if let Some(var_4755) = &input.dry_run {
        scope_4754.boolean(*var_4755);
    }
    #[allow(unused_mut)]
    let mut scope_4756 = writer.prefix("IpamPoolId");
    if let Some(var_4757) = &input.ipam_pool_id {
        scope_4756.string(var_4757);
    }
    #[allow(unused_mut)]
    let mut scope_4758 = writer.prefix("Filter");
    if let Some(var_4759) = &input.filters {
        let mut list_4761 = scope_4758.start_list(true, Some("Filter"));
        for item_4760 in var_4759 {
            #[allow(unused_mut)]
            let mut entry_4762 = list_4761.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4762, item_4760)?;
        }
        list_4761.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4763 = writer.prefix("MaxResults");
    if let Some(var_4764) = &input.max_results {
        scope_4763.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4764).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4765 = writer.prefix("NextToken");
    if let Some(var_4766) = &input.next_token {
        scope_4765.string(var_4766);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_resource_cidrs(input: &crate::input::GetIpamResourceCidrsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamResourceCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4767 = writer.prefix("DryRun");
    if let Some(var_4768) = &input.dry_run {
        scope_4767.boolean(*var_4768);
    }
    #[allow(unused_mut)]
    let mut scope_4769 = writer.prefix("Filter");
    if let Some(var_4770) = &input.filters {
        let mut list_4772 = scope_4769.start_list(true, Some("Filter"));
        for item_4771 in var_4770 {
            #[allow(unused_mut)]
            let mut entry_4773 = list_4772.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4773, item_4771)?;
        }
        list_4772.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4774 = writer.prefix("MaxResults");
    if let Some(var_4775) = &input.max_results {
        scope_4774.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4775).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4776 = writer.prefix("NextToken");
    if let Some(var_4777) = &input.next_token {
        scope_4776.string(var_4777);
    }
    #[allow(unused_mut)]
    let mut scope_4778 = writer.prefix("IpamScopeId");
    if let Some(var_4779) = &input.ipam_scope_id {
        scope_4778.string(var_4779);
    }
    #[allow(unused_mut)]
    let mut scope_4780 = writer.prefix("IpamPoolId");
    if let Some(var_4781) = &input.ipam_pool_id {
        scope_4780.string(var_4781);
    }
    #[allow(unused_mut)]
    let mut scope_4782 = writer.prefix("ResourceId");
    if let Some(var_4783) = &input.resource_id {
        scope_4782.string(var_4783);
    }
    #[allow(unused_mut)]
    let mut scope_4784 = writer.prefix("ResourceType");
    if let Some(var_4785) = &input.resource_type {
        scope_4784.string(var_4785.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4786 = writer.prefix("ResourceTag");
    if let Some(var_4787) = &input.resource_tag {
        crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(scope_4786, var_4787)?;
    }
    #[allow(unused_mut)]
    let mut scope_4788 = writer.prefix("ResourceOwner");
    if let Some(var_4789) = &input.resource_owner {
        scope_4788.string(var_4789);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_launch_template_data(input: &crate::input::GetLaunchTemplateDataInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4790 = writer.prefix("DryRun");
    if let Some(var_4791) = &input.dry_run {
        scope_4790.boolean(*var_4791);
    }
    #[allow(unused_mut)]
    let mut scope_4792 = writer.prefix("InstanceId");
    if let Some(var_4793) = &input.instance_id {
        scope_4792.string(var_4793);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_associations(input: &crate::input::GetManagedPrefixListAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListAssociations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4794 = writer.prefix("DryRun");
    if let Some(var_4795) = &input.dry_run {
        scope_4794.boolean(*var_4795);
    }
    #[allow(unused_mut)]
    let mut scope_4796 = writer.prefix("PrefixListId");
    if let Some(var_4797) = &input.prefix_list_id {
        scope_4796.string(var_4797);
    }
    #[allow(unused_mut)]
    let mut scope_4798 = writer.prefix("MaxResults");
    if let Some(var_4799) = &input.max_results {
        scope_4798.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4799).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4800 = writer.prefix("NextToken");
    if let Some(var_4801) = &input.next_token {
        scope_4800.string(var_4801);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_entries(input: &crate::input::GetManagedPrefixListEntriesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4802 = writer.prefix("DryRun");
    if let Some(var_4803) = &input.dry_run {
        scope_4802.boolean(*var_4803);
    }
    #[allow(unused_mut)]
    let mut scope_4804 = writer.prefix("PrefixListId");
    if let Some(var_4805) = &input.prefix_list_id {
        scope_4804.string(var_4805);
    }
    #[allow(unused_mut)]
    let mut scope_4806 = writer.prefix("TargetVersion");
    if let Some(var_4807) = &input.target_version {
        scope_4806.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4807).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4808 = writer.prefix("MaxResults");
    if let Some(var_4809) = &input.max_results {
        scope_4808.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4809).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4810 = writer.prefix("NextToken");
    if let Some(var_4811) = &input.next_token {
        scope_4810.string(var_4811);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_analysis_findings(input: &crate::input::GetNetworkInsightsAccessScopeAnalysisFindingsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetNetworkInsightsAccessScopeAnalysisFindings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4812 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_4813) = &input.network_insights_access_scope_analysis_id {
        scope_4812.string(var_4813);
    }
    #[allow(unused_mut)]
    let mut scope_4814 = writer.prefix("MaxResults");
    if let Some(var_4815) = &input.max_results {
        scope_4814.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4815).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4816 = writer.prefix("NextToken");
    if let Some(var_4817) = &input.next_token {
        scope_4816.string(var_4817);
    }
    #[allow(unused_mut)]
    let mut scope_4818 = writer.prefix("DryRun");
    if let Some(var_4819) = &input.dry_run {
        scope_4818.boolean(*var_4819);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_content(input: &crate::input::GetNetworkInsightsAccessScopeContentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetNetworkInsightsAccessScopeContent", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4820 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_4821) = &input.network_insights_access_scope_id {
        scope_4820.string(var_4821);
    }
    #[allow(unused_mut)]
    let mut scope_4822 = writer.prefix("DryRun");
    if let Some(var_4823) = &input.dry_run {
        scope_4822.boolean(*var_4823);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_password_data(input: &crate::input::GetPasswordDataInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4824 = writer.prefix("InstanceId");
    if let Some(var_4825) = &input.instance_id {
        scope_4824.string(var_4825);
    }
    #[allow(unused_mut)]
    let mut scope_4826 = writer.prefix("DryRun");
    if let Some(var_4827) = &input.dry_run {
        scope_4826.boolean(*var_4827);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_instances_exchange_quote(input: &crate::input::GetReservedInstancesExchangeQuoteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetReservedInstancesExchangeQuote", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4828 = writer.prefix("DryRun");
    if let Some(var_4829) = &input.dry_run {
        scope_4828.boolean(*var_4829);
    }
    #[allow(unused_mut)]
    let mut scope_4830 = writer.prefix("ReservedInstanceId");
    if let Some(var_4831) = &input.reserved_instance_ids {
        let mut list_4833 = scope_4830.start_list(true, Some("ReservedInstanceId"));
        for item_4832 in var_4831 {
            #[allow(unused_mut)]
            let mut entry_4834 = list_4833.entry();
            entry_4834.string(item_4832);
        }
        list_4833.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4835 = writer.prefix("TargetConfiguration");
    if let Some(var_4836) = &input.target_configurations {
        let mut list_4838 = scope_4835.start_list(true, Some("TargetConfigurationRequest"));
        for item_4837 in var_4836 {
            #[allow(unused_mut)]
            let mut entry_4839 = list_4838.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(entry_4839, item_4837)?;
        }
        list_4838.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_serial_console_access_status(input: &crate::input::GetSerialConsoleAccessStatusInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4840 = writer.prefix("DryRun");
    if let Some(var_4841) = &input.dry_run {
        scope_4840.boolean(*var_4841);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_spot_placement_scores(input: &crate::input::GetSpotPlacementScoresInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetSpotPlacementScores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4842 = writer.prefix("InstanceType");
    if let Some(var_4843) = &input.instance_types {
        let mut list_4845 = scope_4842.start_list(true, None);
        for item_4844 in var_4843 {
            #[allow(unused_mut)]
            let mut entry_4846 = list_4845.entry();
            entry_4846.string(item_4844);
        }
        list_4845.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4847 = writer.prefix("TargetCapacity");
    if let Some(var_4848) = &input.target_capacity {
        scope_4847.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4848).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4849 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_4850) = &input.target_capacity_unit_type {
        scope_4849.string(var_4850.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4851 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_4852) = &input.single_availability_zone {
        scope_4851.boolean(*var_4852);
    }
    #[allow(unused_mut)]
    let mut scope_4853 = writer.prefix("RegionName");
    if let Some(var_4854) = &input.region_names {
        let mut list_4856 = scope_4853.start_list(true, None);
        for item_4855 in var_4854 {
            #[allow(unused_mut)]
            let mut entry_4857 = list_4856.entry();
            entry_4857.string(item_4855);
        }
        list_4856.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4858 = writer.prefix("InstanceRequirementsWithMetadata");
    if let Some(var_4859) = &input.instance_requirements_with_metadata {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_with_metadata_request(scope_4858, var_4859)?;
    }
    #[allow(unused_mut)]
    let mut scope_4860 = writer.prefix("DryRun");
    if let Some(var_4861) = &input.dry_run {
        scope_4860.boolean(*var_4861);
    }
    #[allow(unused_mut)]
    let mut scope_4862 = writer.prefix("MaxResults");
    if let Some(var_4863) = &input.max_results {
        scope_4862.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4863).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4864 = writer.prefix("NextToken");
    if let Some(var_4865) = &input.next_token {
        scope_4864.string(var_4865);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_subnet_cidr_reservations(input: &crate::input::GetSubnetCidrReservationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetSubnetCidrReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4866 = writer.prefix("Filter");
    if let Some(var_4867) = &input.filters {
        let mut list_4869 = scope_4866.start_list(true, Some("Filter"));
        for item_4868 in var_4867 {
            #[allow(unused_mut)]
            let mut entry_4870 = list_4869.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4870, item_4868)?;
        }
        list_4869.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4871 = writer.prefix("SubnetId");
    if let Some(var_4872) = &input.subnet_id {
        scope_4871.string(var_4872);
    }
    #[allow(unused_mut)]
    let mut scope_4873 = writer.prefix("DryRun");
    if let Some(var_4874) = &input.dry_run {
        scope_4873.boolean(*var_4874);
    }
    #[allow(unused_mut)]
    let mut scope_4875 = writer.prefix("NextToken");
    if let Some(var_4876) = &input.next_token {
        scope_4875.string(var_4876);
    }
    #[allow(unused_mut)]
    let mut scope_4877 = writer.prefix("MaxResults");
    if let Some(var_4878) = &input.max_results {
        scope_4877.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4878).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_attachment_propagations(input: &crate::input::GetTransitGatewayAttachmentPropagationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetTransitGatewayAttachmentPropagations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4879 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4880) = &input.transit_gateway_attachment_id {
        scope_4879.string(var_4880);
    }
    #[allow(unused_mut)]
    let mut scope_4881 = writer.prefix("Filter");
    if let Some(var_4882) = &input.filters {
        let mut list_4884 = scope_4881.start_list(true, Some("Filter"));
        for item_4883 in var_4882 {
            #[allow(unused_mut)]
            let mut entry_4885 = list_4884.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4885, item_4883)?;
        }
        list_4884.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4886 = writer.prefix("MaxResults");
    if let Some(var_4887) = &input.max_results {
        scope_4886.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4887).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4888 = writer.prefix("NextToken");
    if let Some(var_4889) = &input.next_token {
        scope_4888.string(var_4889);
    }
    #[allow(unused_mut)]
    let mut scope_4890 = writer.prefix("DryRun");
    if let Some(var_4891) = &input.dry_run {
        scope_4890.boolean(*var_4891);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_multicast_domain_associations(input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetTransitGatewayMulticastDomainAssociations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4892 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4893) = &input.transit_gateway_multicast_domain_id {
        scope_4892.string(var_4893);
    }
    #[allow(unused_mut)]
    let mut scope_4894 = writer.prefix("Filter");
    if let Some(var_4895) = &input.filters {
        let mut list_4897 = scope_4894.start_list(true, Some("Filter"));
        for item_4896 in var_4895 {
            #[allow(unused_mut)]
            let mut entry_4898 = list_4897.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4898, item_4896)?;
        }
        list_4897.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4899 = writer.prefix("MaxResults");
    if let Some(var_4900) = &input.max_results {
        scope_4899.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4900).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4901 = writer.prefix("NextToken");
    if let Some(var_4902) = &input.next_token {
        scope_4901.string(var_4902);
    }
    #[allow(unused_mut)]
    let mut scope_4903 = writer.prefix("DryRun");
    if let Some(var_4904) = &input.dry_run {
        scope_4903.boolean(*var_4904);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_policy_table_associations(input: &crate::input::GetTransitGatewayPolicyTableAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetTransitGatewayPolicyTableAssociations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4905 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_4906) = &input.transit_gateway_policy_table_id {
        scope_4905.string(var_4906);
    }
    #[allow(unused_mut)]
    let mut scope_4907 = writer.prefix("Filter");
    if let Some(var_4908) = &input.filters {
        let mut list_4910 = scope_4907.start_list(true, Some("Filter"));
        for item_4909 in var_4908 {
            #[allow(unused_mut)]
            let mut entry_4911 = list_4910.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4911, item_4909)?;
        }
        list_4910.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4912 = writer.prefix("MaxResults");
    if let Some(var_4913) = &input.max_results {
        scope_4912.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4913).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4914 = writer.prefix("NextToken");
    if let Some(var_4915) = &input.next_token {
        scope_4914.string(var_4915);
    }
    #[allow(unused_mut)]
    let mut scope_4916 = writer.prefix("DryRun");
    if let Some(var_4917) = &input.dry_run {
        scope_4916.boolean(*var_4917);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_policy_table_entries(input: &crate::input::GetTransitGatewayPolicyTableEntriesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetTransitGatewayPolicyTableEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4918 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_4919) = &input.transit_gateway_policy_table_id {
        scope_4918.string(var_4919);
    }
    #[allow(unused_mut)]
    let mut scope_4920 = writer.prefix("Filter");
    if let Some(var_4921) = &input.filters {
        let mut list_4923 = scope_4920.start_list(true, Some("Filter"));
        for item_4922 in var_4921 {
            #[allow(unused_mut)]
            let mut entry_4924 = list_4923.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4924, item_4922)?;
        }
        list_4923.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4925 = writer.prefix("MaxResults");
    if let Some(var_4926) = &input.max_results {
        scope_4925.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4926).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4927 = writer.prefix("NextToken");
    if let Some(var_4928) = &input.next_token {
        scope_4927.string(var_4928);
    }
    #[allow(unused_mut)]
    let mut scope_4929 = writer.prefix("DryRun");
    if let Some(var_4930) = &input.dry_run {
        scope_4929.boolean(*var_4930);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_prefix_list_references(input: &crate::input::GetTransitGatewayPrefixListReferencesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetTransitGatewayPrefixListReferences", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4931 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4932) = &input.transit_gateway_route_table_id {
        scope_4931.string(var_4932);
    }
    #[allow(unused_mut)]
    let mut scope_4933 = writer.prefix("Filter");
    if let Some(var_4934) = &input.filters {
        let mut list_4936 = scope_4933.start_list(true, Some("Filter"));
        for item_4935 in var_4934 {
            #[allow(unused_mut)]
            let mut entry_4937 = list_4936.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4937, item_4935)?;
        }
        list_4936.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4938 = writer.prefix("MaxResults");
    if let Some(var_4939) = &input.max_results {
        scope_4938.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4939).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4940 = writer.prefix("NextToken");
    if let Some(var_4941) = &input.next_token {
        scope_4940.string(var_4941);
    }
    #[allow(unused_mut)]
    let mut scope_4942 = writer.prefix("DryRun");
    if let Some(var_4943) = &input.dry_run {
        scope_4942.boolean(*var_4943);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_associations(input: &crate::input::GetTransitGatewayRouteTableAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetTransitGatewayRouteTableAssociations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4944 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4945) = &input.transit_gateway_route_table_id {
        scope_4944.string(var_4945);
    }
    #[allow(unused_mut)]
    let mut scope_4946 = writer.prefix("Filter");
    if let Some(var_4947) = &input.filters {
        let mut list_4949 = scope_4946.start_list(true, Some("Filter"));
        for item_4948 in var_4947 {
            #[allow(unused_mut)]
            let mut entry_4950 = list_4949.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4950, item_4948)?;
        }
        list_4949.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4951 = writer.prefix("MaxResults");
    if let Some(var_4952) = &input.max_results {
        scope_4951.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4952).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4953 = writer.prefix("NextToken");
    if let Some(var_4954) = &input.next_token {
        scope_4953.string(var_4954);
    }
    #[allow(unused_mut)]
    let mut scope_4955 = writer.prefix("DryRun");
    if let Some(var_4956) = &input.dry_run {
        scope_4955.boolean(*var_4956);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_propagations(input: &crate::input::GetTransitGatewayRouteTablePropagationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetTransitGatewayRouteTablePropagations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4957 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4958) = &input.transit_gateway_route_table_id {
        scope_4957.string(var_4958);
    }
    #[allow(unused_mut)]
    let mut scope_4959 = writer.prefix("Filter");
    if let Some(var_4960) = &input.filters {
        let mut list_4962 = scope_4959.start_list(true, Some("Filter"));
        for item_4961 in var_4960 {
            #[allow(unused_mut)]
            let mut entry_4963 = list_4962.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4963, item_4961)?;
        }
        list_4962.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4964 = writer.prefix("MaxResults");
    if let Some(var_4965) = &input.max_results {
        scope_4964.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4965).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4966 = writer.prefix("NextToken");
    if let Some(var_4967) = &input.next_token {
        scope_4966.string(var_4967);
    }
    #[allow(unused_mut)]
    let mut scope_4968 = writer.prefix("DryRun");
    if let Some(var_4969) = &input.dry_run {
        scope_4968.boolean(*var_4969);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_verified_access_endpoint_policy(input: &crate::input::GetVerifiedAccessEndpointPolicyInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetVerifiedAccessEndpointPolicy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4970 = writer.prefix("VerifiedAccessEndpointId");
    if let Some(var_4971) = &input.verified_access_endpoint_id {
        scope_4970.string(var_4971);
    }
    #[allow(unused_mut)]
    let mut scope_4972 = writer.prefix("DryRun");
    if let Some(var_4973) = &input.dry_run {
        scope_4972.boolean(*var_4973);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_verified_access_group_policy(input: &crate::input::GetVerifiedAccessGroupPolicyInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetVerifiedAccessGroupPolicy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4974 = writer.prefix("VerifiedAccessGroupId");
    if let Some(var_4975) = &input.verified_access_group_id {
        scope_4974.string(var_4975);
    }
    #[allow(unused_mut)]
    let mut scope_4976 = writer.prefix("DryRun");
    if let Some(var_4977) = &input.dry_run {
        scope_4976.boolean(*var_4977);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_sample_configuration(input: &crate::input::GetVpnConnectionDeviceSampleConfigurationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetVpnConnectionDeviceSampleConfiguration", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4978 = writer.prefix("VpnConnectionId");
    if let Some(var_4979) = &input.vpn_connection_id {
        scope_4978.string(var_4979);
    }
    #[allow(unused_mut)]
    let mut scope_4980 = writer.prefix("VpnConnectionDeviceTypeId");
    if let Some(var_4981) = &input.vpn_connection_device_type_id {
        scope_4980.string(var_4981);
    }
    #[allow(unused_mut)]
    let mut scope_4982 = writer.prefix("InternetKeyExchangeVersion");
    if let Some(var_4983) = &input.internet_key_exchange_version {
        scope_4982.string(var_4983);
    }
    #[allow(unused_mut)]
    let mut scope_4984 = writer.prefix("DryRun");
    if let Some(var_4985) = &input.dry_run {
        scope_4984.boolean(*var_4985);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_types(input: &crate::input::GetVpnConnectionDeviceTypesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetVpnConnectionDeviceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4986 = writer.prefix("MaxResults");
    if let Some(var_4987) = &input.max_results {
        scope_4986.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4987).into()));
    }
    #[allow(unused_mut)]
    let mut scope_4988 = writer.prefix("NextToken");
    if let Some(var_4989) = &input.next_token {
        scope_4988.string(var_4989);
    }
    #[allow(unused_mut)]
    let mut scope_4990 = writer.prefix("DryRun");
    if let Some(var_4991) = &input.dry_run {
        scope_4990.boolean(*var_4991);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_client_vpn_client_certificate_revocation_list(input: &crate::input::ImportClientVpnClientCertificateRevocationListInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportClientVpnClientCertificateRevocationList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4992 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4993) = &input.client_vpn_endpoint_id {
        scope_4992.string(var_4993);
    }
    #[allow(unused_mut)]
    let mut scope_4994 = writer.prefix("CertificateRevocationList");
    if let Some(var_4995) = &input.certificate_revocation_list {
        scope_4994.string(var_4995);
    }
    #[allow(unused_mut)]
    let mut scope_4996 = writer.prefix("DryRun");
    if let Some(var_4997) = &input.dry_run {
        scope_4996.boolean(*var_4997);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_image(input: &crate::input::ImportImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4998 = writer.prefix("Architecture");
    if let Some(var_4999) = &input.architecture {
        scope_4998.string(var_4999);
    }
    #[allow(unused_mut)]
    let mut scope_5000 = writer.prefix("ClientData");
    if let Some(var_5001) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_5000, var_5001)?;
    }
    #[allow(unused_mut)]
    let mut scope_5002 = writer.prefix("ClientToken");
    if let Some(var_5003) = &input.client_token {
        scope_5002.string(var_5003);
    }
    #[allow(unused_mut)]
    let mut scope_5004 = writer.prefix("Description");
    if let Some(var_5005) = &input.description {
        scope_5004.string(var_5005);
    }
    #[allow(unused_mut)]
    let mut scope_5006 = writer.prefix("DiskContainer");
    if let Some(var_5007) = &input.disk_containers {
        let mut list_5009 = scope_5006.start_list(true, Some("item"));
        for item_5008 in var_5007 {
            #[allow(unused_mut)]
            let mut entry_5010 = list_5009.entry();
            crate::query_ser::serialize_structure_crate_model_image_disk_container(entry_5010, item_5008)?;
        }
        list_5009.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5011 = writer.prefix("DryRun");
    if let Some(var_5012) = &input.dry_run {
        scope_5011.boolean(*var_5012);
    }
    #[allow(unused_mut)]
    let mut scope_5013 = writer.prefix("Encrypted");
    if let Some(var_5014) = &input.encrypted {
        scope_5013.boolean(*var_5014);
    }
    #[allow(unused_mut)]
    let mut scope_5015 = writer.prefix("Hypervisor");
    if let Some(var_5016) = &input.hypervisor {
        scope_5015.string(var_5016);
    }
    #[allow(unused_mut)]
    let mut scope_5017 = writer.prefix("KmsKeyId");
    if let Some(var_5018) = &input.kms_key_id {
        scope_5017.string(var_5018);
    }
    #[allow(unused_mut)]
    let mut scope_5019 = writer.prefix("LicenseType");
    if let Some(var_5020) = &input.license_type {
        scope_5019.string(var_5020);
    }
    #[allow(unused_mut)]
    let mut scope_5021 = writer.prefix("Platform");
    if let Some(var_5022) = &input.platform {
        scope_5021.string(var_5022);
    }
    #[allow(unused_mut)]
    let mut scope_5023 = writer.prefix("RoleName");
    if let Some(var_5024) = &input.role_name {
        scope_5023.string(var_5024);
    }
    #[allow(unused_mut)]
    let mut scope_5025 = writer.prefix("LicenseSpecifications");
    if let Some(var_5026) = &input.license_specifications {
        let mut list_5028 = scope_5025.start_list(true, Some("item"));
        for item_5027 in var_5026 {
            #[allow(unused_mut)]
            let mut entry_5029 = list_5028.entry();
            crate::query_ser::serialize_structure_crate_model_import_image_license_configuration_request(entry_5029, item_5027)?;
        }
        list_5028.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5030 = writer.prefix("TagSpecification");
    if let Some(var_5031) = &input.tag_specifications {
        let mut list_5033 = scope_5030.start_list(true, Some("item"));
        for item_5032 in var_5031 {
            #[allow(unused_mut)]
            let mut entry_5034 = list_5033.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_5034, item_5032)?;
        }
        list_5033.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5035 = writer.prefix("UsageOperation");
    if let Some(var_5036) = &input.usage_operation {
        scope_5035.string(var_5036);
    }
    #[allow(unused_mut)]
    let mut scope_5037 = writer.prefix("BootMode");
    if let Some(var_5038) = &input.boot_mode {
        scope_5037.string(var_5038.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_instance(input: &crate::input::ImportInstanceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5039 = writer.prefix("Description");
    if let Some(var_5040) = &input.description {
        scope_5039.string(var_5040);
    }
    #[allow(unused_mut)]
    let mut scope_5041 = writer.prefix("DiskImage");
    if let Some(var_5042) = &input.disk_images {
        let mut list_5044 = scope_5041.start_list(true, None);
        for item_5043 in var_5042 {
            #[allow(unused_mut)]
            let mut entry_5045 = list_5044.entry();
            crate::query_ser::serialize_structure_crate_model_disk_image(entry_5045, item_5043)?;
        }
        list_5044.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5046 = writer.prefix("DryRun");
    if let Some(var_5047) = &input.dry_run {
        scope_5046.boolean(*var_5047);
    }
    #[allow(unused_mut)]
    let mut scope_5048 = writer.prefix("LaunchSpecification");
    if let Some(var_5049) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_import_instance_launch_specification(scope_5048, var_5049)?;
    }
    #[allow(unused_mut)]
    let mut scope_5050 = writer.prefix("Platform");
    if let Some(var_5051) = &input.platform {
        scope_5050.string(var_5051.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_key_pair(input: &crate::input::ImportKeyPairInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5052 = writer.prefix("DryRun");
    if let Some(var_5053) = &input.dry_run {
        scope_5052.boolean(*var_5053);
    }
    #[allow(unused_mut)]
    let mut scope_5054 = writer.prefix("KeyName");
    if let Some(var_5055) = &input.key_name {
        scope_5054.string(var_5055);
    }
    #[allow(unused_mut)]
    let mut scope_5056 = writer.prefix("PublicKeyMaterial");
    if let Some(var_5057) = &input.public_key_material {
        scope_5056.string(&aws_smithy_types::base64::encode(var_5057));
    }
    #[allow(unused_mut)]
    let mut scope_5058 = writer.prefix("TagSpecification");
    if let Some(var_5059) = &input.tag_specifications {
        let mut list_5061 = scope_5058.start_list(true, Some("item"));
        for item_5060 in var_5059 {
            #[allow(unused_mut)]
            let mut entry_5062 = list_5061.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_5062, item_5060)?;
        }
        list_5061.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_snapshot(input: &crate::input::ImportSnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5063 = writer.prefix("ClientData");
    if let Some(var_5064) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_5063, var_5064)?;
    }
    #[allow(unused_mut)]
    let mut scope_5065 = writer.prefix("ClientToken");
    if let Some(var_5066) = &input.client_token {
        scope_5065.string(var_5066);
    }
    #[allow(unused_mut)]
    let mut scope_5067 = writer.prefix("Description");
    if let Some(var_5068) = &input.description {
        scope_5067.string(var_5068);
    }
    #[allow(unused_mut)]
    let mut scope_5069 = writer.prefix("DiskContainer");
    if let Some(var_5070) = &input.disk_container {
        crate::query_ser::serialize_structure_crate_model_snapshot_disk_container(scope_5069, var_5070)?;
    }
    #[allow(unused_mut)]
    let mut scope_5071 = writer.prefix("DryRun");
    if let Some(var_5072) = &input.dry_run {
        scope_5071.boolean(*var_5072);
    }
    #[allow(unused_mut)]
    let mut scope_5073 = writer.prefix("Encrypted");
    if let Some(var_5074) = &input.encrypted {
        scope_5073.boolean(*var_5074);
    }
    #[allow(unused_mut)]
    let mut scope_5075 = writer.prefix("KmsKeyId");
    if let Some(var_5076) = &input.kms_key_id {
        scope_5075.string(var_5076);
    }
    #[allow(unused_mut)]
    let mut scope_5077 = writer.prefix("RoleName");
    if let Some(var_5078) = &input.role_name {
        scope_5077.string(var_5078);
    }
    #[allow(unused_mut)]
    let mut scope_5079 = writer.prefix("TagSpecification");
    if let Some(var_5080) = &input.tag_specifications {
        let mut list_5082 = scope_5079.start_list(true, Some("item"));
        for item_5081 in var_5080 {
            #[allow(unused_mut)]
            let mut entry_5083 = list_5082.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_5083, item_5081)?;
        }
        list_5082.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_volume(input: &crate::input::ImportVolumeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5084 = writer.prefix("AvailabilityZone");
    if let Some(var_5085) = &input.availability_zone {
        scope_5084.string(var_5085);
    }
    #[allow(unused_mut)]
    let mut scope_5086 = writer.prefix("Description");
    if let Some(var_5087) = &input.description {
        scope_5086.string(var_5087);
    }
    #[allow(unused_mut)]
    let mut scope_5088 = writer.prefix("DryRun");
    if let Some(var_5089) = &input.dry_run {
        scope_5088.boolean(*var_5089);
    }
    #[allow(unused_mut)]
    let mut scope_5090 = writer.prefix("Image");
    if let Some(var_5091) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_5090, var_5091)?;
    }
    #[allow(unused_mut)]
    let mut scope_5092 = writer.prefix("Volume");
    if let Some(var_5093) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_5092, var_5093)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_images_in_recycle_bin(input: &crate::input::ListImagesInRecycleBinInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListImagesInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5094 = writer.prefix("ImageId");
    if let Some(var_5095) = &input.image_ids {
        let mut list_5097 = scope_5094.start_list(true, Some("ImageId"));
        for item_5096 in var_5095 {
            #[allow(unused_mut)]
            let mut entry_5098 = list_5097.entry();
            entry_5098.string(item_5096);
        }
        list_5097.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5099 = writer.prefix("NextToken");
    if let Some(var_5100) = &input.next_token {
        scope_5099.string(var_5100);
    }
    #[allow(unused_mut)]
    let mut scope_5101 = writer.prefix("MaxResults");
    if let Some(var_5102) = &input.max_results {
        scope_5101.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5102).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5103 = writer.prefix("DryRun");
    if let Some(var_5104) = &input.dry_run {
        scope_5103.boolean(*var_5104);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_snapshots_in_recycle_bin(input: &crate::input::ListSnapshotsInRecycleBinInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListSnapshotsInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5105 = writer.prefix("MaxResults");
    if let Some(var_5106) = &input.max_results {
        scope_5105.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5106).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5107 = writer.prefix("NextToken");
    if let Some(var_5108) = &input.next_token {
        scope_5107.string(var_5108);
    }
    #[allow(unused_mut)]
    let mut scope_5109 = writer.prefix("SnapshotId");
    if let Some(var_5110) = &input.snapshot_ids {
        let mut list_5112 = scope_5109.start_list(true, Some("SnapshotId"));
        for item_5111 in var_5110 {
            #[allow(unused_mut)]
            let mut entry_5113 = list_5112.entry();
            entry_5113.string(item_5111);
        }
        list_5112.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5114 = writer.prefix("DryRun");
    if let Some(var_5115) = &input.dry_run {
        scope_5114.boolean(*var_5115);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_address_attribute(input: &crate::input::ModifyAddressAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5116 = writer.prefix("AllocationId");
    if let Some(var_5117) = &input.allocation_id {
        scope_5116.string(var_5117);
    }
    #[allow(unused_mut)]
    let mut scope_5118 = writer.prefix("DomainName");
    if let Some(var_5119) = &input.domain_name {
        scope_5118.string(var_5119);
    }
    #[allow(unused_mut)]
    let mut scope_5120 = writer.prefix("DryRun");
    if let Some(var_5121) = &input.dry_run {
        scope_5120.boolean(*var_5121);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_availability_zone_group(input: &crate::input::ModifyAvailabilityZoneGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5122 = writer.prefix("GroupName");
    if let Some(var_5123) = &input.group_name {
        scope_5122.string(var_5123);
    }
    #[allow(unused_mut)]
    let mut scope_5124 = writer.prefix("OptInStatus");
    if let Some(var_5125) = &input.opt_in_status {
        scope_5124.string(var_5125.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5126 = writer.prefix("DryRun");
    if let Some(var_5127) = &input.dry_run {
        scope_5126.boolean(*var_5127);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation(input: &crate::input::ModifyCapacityReservationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5128 = writer.prefix("CapacityReservationId");
    if let Some(var_5129) = &input.capacity_reservation_id {
        scope_5128.string(var_5129);
    }
    #[allow(unused_mut)]
    let mut scope_5130 = writer.prefix("InstanceCount");
    if let Some(var_5131) = &input.instance_count {
        scope_5130.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5131).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5132 = writer.prefix("EndDate");
    if let Some(var_5133) = &input.end_date {
        scope_5132.date_time(var_5133, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5134 = writer.prefix("EndDateType");
    if let Some(var_5135) = &input.end_date_type {
        scope_5134.string(var_5135.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5136 = writer.prefix("Accept");
    if let Some(var_5137) = &input.accept {
        scope_5136.boolean(*var_5137);
    }
    #[allow(unused_mut)]
    let mut scope_5138 = writer.prefix("DryRun");
    if let Some(var_5139) = &input.dry_run {
        scope_5138.boolean(*var_5139);
    }
    #[allow(unused_mut)]
    let mut scope_5140 = writer.prefix("AdditionalInfo");
    if let Some(var_5141) = &input.additional_info {
        scope_5140.string(var_5141);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation_fleet(input: &crate::input::ModifyCapacityReservationFleetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservationFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5142 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_5143) = &input.capacity_reservation_fleet_id {
        scope_5142.string(var_5143);
    }
    #[allow(unused_mut)]
    let mut scope_5144 = writer.prefix("TotalTargetCapacity");
    if let Some(var_5145) = &input.total_target_capacity {
        scope_5144.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5145).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5146 = writer.prefix("EndDate");
    if let Some(var_5147) = &input.end_date {
        scope_5146.date_time(var_5147, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5148 = writer.prefix("DryRun");
    if let Some(var_5149) = &input.dry_run {
        scope_5148.boolean(*var_5149);
    }
    #[allow(unused_mut)]
    let mut scope_5150 = writer.prefix("RemoveEndDate");
    if let Some(var_5151) = &input.remove_end_date {
        scope_5150.boolean(*var_5151);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_client_vpn_endpoint(input: &crate::input::ModifyClientVpnEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5152 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5153) = &input.client_vpn_endpoint_id {
        scope_5152.string(var_5153);
    }
    #[allow(unused_mut)]
    let mut scope_5154 = writer.prefix("ServerCertificateArn");
    if let Some(var_5155) = &input.server_certificate_arn {
        scope_5154.string(var_5155);
    }
    #[allow(unused_mut)]
    let mut scope_5156 = writer.prefix("ConnectionLogOptions");
    if let Some(var_5157) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(scope_5156, var_5157)?;
    }
    #[allow(unused_mut)]
    let mut scope_5158 = writer.prefix("DnsServers");
    if let Some(var_5159) = &input.dns_servers {
        crate::query_ser::serialize_structure_crate_model_dns_servers_options_modify_structure(scope_5158, var_5159)?;
    }
    #[allow(unused_mut)]
    let mut scope_5160 = writer.prefix("VpnPort");
    if let Some(var_5161) = &input.vpn_port {
        scope_5160.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5161).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5162 = writer.prefix("Description");
    if let Some(var_5163) = &input.description {
        scope_5162.string(var_5163);
    }
    #[allow(unused_mut)]
    let mut scope_5164 = writer.prefix("SplitTunnel");
    if let Some(var_5165) = &input.split_tunnel {
        scope_5164.boolean(*var_5165);
    }
    #[allow(unused_mut)]
    let mut scope_5166 = writer.prefix("DryRun");
    if let Some(var_5167) = &input.dry_run {
        scope_5166.boolean(*var_5167);
    }
    #[allow(unused_mut)]
    let mut scope_5168 = writer.prefix("SecurityGroupId");
    if let Some(var_5169) = &input.security_group_ids {
        let mut list_5171 = scope_5168.start_list(true, Some("item"));
        for item_5170 in var_5169 {
            #[allow(unused_mut)]
            let mut entry_5172 = list_5171.entry();
            entry_5172.string(item_5170);
        }
        list_5171.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5173 = writer.prefix("VpcId");
    if let Some(var_5174) = &input.vpc_id {
        scope_5173.string(var_5174);
    }
    #[allow(unused_mut)]
    let mut scope_5175 = writer.prefix("SelfServicePortal");
    if let Some(var_5176) = &input.self_service_portal {
        scope_5175.string(var_5176.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5177 = writer.prefix("ClientConnectOptions");
    if let Some(var_5178) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(scope_5177, var_5178)?;
    }
    #[allow(unused_mut)]
    let mut scope_5179 = writer.prefix("SessionTimeoutHours");
    if let Some(var_5180) = &input.session_timeout_hours {
        scope_5179.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5180).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5181 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_5182) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(scope_5181, var_5182)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_default_credit_specification(input: &crate::input::ModifyDefaultCreditSpecificationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5183 = writer.prefix("DryRun");
    if let Some(var_5184) = &input.dry_run {
        scope_5183.boolean(*var_5184);
    }
    #[allow(unused_mut)]
    let mut scope_5185 = writer.prefix("InstanceFamily");
    if let Some(var_5186) = &input.instance_family {
        scope_5185.string(var_5186.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5187 = writer.prefix("CpuCredits");
    if let Some(var_5188) = &input.cpu_credits {
        scope_5187.string(var_5188);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ebs_default_kms_key_id(input: &crate::input::ModifyEbsDefaultKmsKeyIdInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5189 = writer.prefix("KmsKeyId");
    if let Some(var_5190) = &input.kms_key_id {
        scope_5189.string(var_5190);
    }
    #[allow(unused_mut)]
    let mut scope_5191 = writer.prefix("DryRun");
    if let Some(var_5192) = &input.dry_run {
        scope_5191.boolean(*var_5192);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fleet(input: &crate::input::ModifyFleetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5193 = writer.prefix("DryRun");
    if let Some(var_5194) = &input.dry_run {
        scope_5193.boolean(*var_5194);
    }
    #[allow(unused_mut)]
    let mut scope_5195 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_5196) = &input.excess_capacity_termination_policy {
        scope_5195.string(var_5196.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5197 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_5198) = &input.launch_template_configs {
        let mut list_5200 = scope_5197.start_list(true, Some("item"));
        for item_5199 in var_5198 {
            #[allow(unused_mut)]
            let mut entry_5201 = list_5200.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(entry_5201, item_5199)?;
        }
        list_5200.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5202 = writer.prefix("FleetId");
    if let Some(var_5203) = &input.fleet_id {
        scope_5202.string(var_5203);
    }
    #[allow(unused_mut)]
    let mut scope_5204 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_5205) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(scope_5204, var_5205)?;
    }
    #[allow(unused_mut)]
    let mut scope_5206 = writer.prefix("Context");
    if let Some(var_5207) = &input.context {
        scope_5206.string(var_5207);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fpga_image_attribute(input: &crate::input::ModifyFpgaImageAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5208 = writer.prefix("DryRun");
    if let Some(var_5209) = &input.dry_run {
        scope_5208.boolean(*var_5209);
    }
    #[allow(unused_mut)]
    let mut scope_5210 = writer.prefix("FpgaImageId");
    if let Some(var_5211) = &input.fpga_image_id {
        scope_5210.string(var_5211);
    }
    #[allow(unused_mut)]
    let mut scope_5212 = writer.prefix("Attribute");
    if let Some(var_5213) = &input.attribute {
        scope_5212.string(var_5213.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5214 = writer.prefix("OperationType");
    if let Some(var_5215) = &input.operation_type {
        scope_5214.string(var_5215.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5216 = writer.prefix("UserId");
    if let Some(var_5217) = &input.user_ids {
        let mut list_5219 = scope_5216.start_list(true, Some("UserId"));
        for item_5218 in var_5217 {
            #[allow(unused_mut)]
            let mut entry_5220 = list_5219.entry();
            entry_5220.string(item_5218);
        }
        list_5219.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5221 = writer.prefix("UserGroup");
    if let Some(var_5222) = &input.user_groups {
        let mut list_5224 = scope_5221.start_list(true, Some("UserGroup"));
        for item_5223 in var_5222 {
            #[allow(unused_mut)]
            let mut entry_5225 = list_5224.entry();
            entry_5225.string(item_5223);
        }
        list_5224.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5226 = writer.prefix("ProductCode");
    if let Some(var_5227) = &input.product_codes {
        let mut list_5229 = scope_5226.start_list(true, Some("ProductCode"));
        for item_5228 in var_5227 {
            #[allow(unused_mut)]
            let mut entry_5230 = list_5229.entry();
            entry_5230.string(item_5228);
        }
        list_5229.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5231 = writer.prefix("LoadPermission");
    if let Some(var_5232) = &input.load_permission {
        crate::query_ser::serialize_structure_crate_model_load_permission_modifications(scope_5231, var_5232)?;
    }
    #[allow(unused_mut)]
    let mut scope_5233 = writer.prefix("Description");
    if let Some(var_5234) = &input.description {
        scope_5233.string(var_5234);
    }
    #[allow(unused_mut)]
    let mut scope_5235 = writer.prefix("Name");
    if let Some(var_5236) = &input.name {
        scope_5235.string(var_5236);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_hosts(input: &crate::input::ModifyHostsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5237 = writer.prefix("AutoPlacement");
    if let Some(var_5238) = &input.auto_placement {
        scope_5237.string(var_5238.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5239 = writer.prefix("HostId");
    if let Some(var_5240) = &input.host_ids {
        let mut list_5242 = scope_5239.start_list(true, Some("item"));
        for item_5241 in var_5240 {
            #[allow(unused_mut)]
            let mut entry_5243 = list_5242.entry();
            entry_5243.string(item_5241);
        }
        list_5242.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5244 = writer.prefix("HostRecovery");
    if let Some(var_5245) = &input.host_recovery {
        scope_5244.string(var_5245.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5246 = writer.prefix("InstanceType");
    if let Some(var_5247) = &input.instance_type {
        scope_5246.string(var_5247);
    }
    #[allow(unused_mut)]
    let mut scope_5248 = writer.prefix("InstanceFamily");
    if let Some(var_5249) = &input.instance_family {
        scope_5248.string(var_5249);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_identity_id_format(input: &crate::input::ModifyIdentityIdFormatInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5250 = writer.prefix("PrincipalArn");
    if let Some(var_5251) = &input.principal_arn {
        scope_5250.string(var_5251);
    }
    #[allow(unused_mut)]
    let mut scope_5252 = writer.prefix("Resource");
    if let Some(var_5253) = &input.resource {
        scope_5252.string(var_5253);
    }
    #[allow(unused_mut)]
    let mut scope_5254 = writer.prefix("UseLongIds");
    if let Some(var_5255) = &input.use_long_ids {
        scope_5254.boolean(*var_5255);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_id_format(input: &crate::input::ModifyIdFormatInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5256 = writer.prefix("Resource");
    if let Some(var_5257) = &input.resource {
        scope_5256.string(var_5257);
    }
    #[allow(unused_mut)]
    let mut scope_5258 = writer.prefix("UseLongIds");
    if let Some(var_5259) = &input.use_long_ids {
        scope_5258.boolean(*var_5259);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_image_attribute(input: &crate::input::ModifyImageAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5260 = writer.prefix("Attribute");
    if let Some(var_5261) = &input.attribute {
        scope_5260.string(var_5261);
    }
    #[allow(unused_mut)]
    let mut scope_5262 = writer.prefix("Description");
    if let Some(var_5263) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5262, var_5263)?;
    }
    #[allow(unused_mut)]
    let mut scope_5264 = writer.prefix("ImageId");
    if let Some(var_5265) = &input.image_id {
        scope_5264.string(var_5265);
    }
    #[allow(unused_mut)]
    let mut scope_5266 = writer.prefix("LaunchPermission");
    if let Some(var_5267) = &input.launch_permission {
        crate::query_ser::serialize_structure_crate_model_launch_permission_modifications(scope_5266, var_5267)?;
    }
    #[allow(unused_mut)]
    let mut scope_5268 = writer.prefix("OperationType");
    if let Some(var_5269) = &input.operation_type {
        scope_5268.string(var_5269.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5270 = writer.prefix("ProductCode");
    if let Some(var_5271) = &input.product_codes {
        let mut list_5273 = scope_5270.start_list(true, Some("ProductCode"));
        for item_5272 in var_5271 {
            #[allow(unused_mut)]
            let mut entry_5274 = list_5273.entry();
            entry_5274.string(item_5272);
        }
        list_5273.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5275 = writer.prefix("UserGroup");
    if let Some(var_5276) = &input.user_groups {
        let mut list_5278 = scope_5275.start_list(true, Some("UserGroup"));
        for item_5277 in var_5276 {
            #[allow(unused_mut)]
            let mut entry_5279 = list_5278.entry();
            entry_5279.string(item_5277);
        }
        list_5278.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5280 = writer.prefix("UserId");
    if let Some(var_5281) = &input.user_ids {
        let mut list_5283 = scope_5280.start_list(true, Some("UserId"));
        for item_5282 in var_5281 {
            #[allow(unused_mut)]
            let mut entry_5284 = list_5283.entry();
            entry_5284.string(item_5282);
        }
        list_5283.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5285 = writer.prefix("Value");
    if let Some(var_5286) = &input.value {
        scope_5285.string(var_5286);
    }
    #[allow(unused_mut)]
    let mut scope_5287 = writer.prefix("DryRun");
    if let Some(var_5288) = &input.dry_run {
        scope_5287.boolean(*var_5288);
    }
    #[allow(unused_mut)]
    let mut scope_5289 = writer.prefix("OrganizationArn");
    if let Some(var_5290) = &input.organization_arns {
        let mut list_5292 = scope_5289.start_list(true, Some("OrganizationArn"));
        for item_5291 in var_5290 {
            #[allow(unused_mut)]
            let mut entry_5293 = list_5292.entry();
            entry_5293.string(item_5291);
        }
        list_5292.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5294 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_5295) = &input.organizational_unit_arns {
        let mut list_5297 = scope_5294.start_list(true, Some("OrganizationalUnitArn"));
        for item_5296 in var_5295 {
            #[allow(unused_mut)]
            let mut entry_5298 = list_5297.entry();
            entry_5298.string(item_5296);
        }
        list_5297.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_attribute(input: &crate::input::ModifyInstanceAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5299 = writer.prefix("SourceDestCheck");
    if let Some(var_5300) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5299, var_5300)?;
    }
    #[allow(unused_mut)]
    let mut scope_5301 = writer.prefix("Attribute");
    if let Some(var_5302) = &input.attribute {
        scope_5301.string(var_5302.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5303 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5304) = &input.block_device_mappings {
        let mut list_5306 = scope_5303.start_list(true, Some("item"));
        for item_5305 in var_5304 {
            #[allow(unused_mut)]
            let mut entry_5307 = list_5306.entry();
            crate::query_ser::serialize_structure_crate_model_instance_block_device_mapping_specification(entry_5307, item_5305)?;
        }
        list_5306.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5308 = writer.prefix("DisableApiTermination");
    if let Some(var_5309) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5308, var_5309)?;
    }
    #[allow(unused_mut)]
    let mut scope_5310 = writer.prefix("DryRun");
    if let Some(var_5311) = &input.dry_run {
        scope_5310.boolean(*var_5311);
    }
    #[allow(unused_mut)]
    let mut scope_5312 = writer.prefix("EbsOptimized");
    if let Some(var_5313) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5312, var_5313)?;
    }
    #[allow(unused_mut)]
    let mut scope_5314 = writer.prefix("EnaSupport");
    if let Some(var_5315) = &input.ena_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5314, var_5315)?;
    }
    #[allow(unused_mut)]
    let mut scope_5316 = writer.prefix("GroupId");
    if let Some(var_5317) = &input.groups {
        let mut list_5319 = scope_5316.start_list(true, Some("groupId"));
        for item_5318 in var_5317 {
            #[allow(unused_mut)]
            let mut entry_5320 = list_5319.entry();
            entry_5320.string(item_5318);
        }
        list_5319.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5321 = writer.prefix("InstanceId");
    if let Some(var_5322) = &input.instance_id {
        scope_5321.string(var_5322);
    }
    #[allow(unused_mut)]
    let mut scope_5323 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_5324) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5323, var_5324)?;
    }
    #[allow(unused_mut)]
    let mut scope_5325 = writer.prefix("InstanceType");
    if let Some(var_5326) = &input.instance_type {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5325, var_5326)?;
    }
    #[allow(unused_mut)]
    let mut scope_5327 = writer.prefix("Kernel");
    if let Some(var_5328) = &input.kernel {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5327, var_5328)?;
    }
    #[allow(unused_mut)]
    let mut scope_5329 = writer.prefix("Ramdisk");
    if let Some(var_5330) = &input.ramdisk {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5329, var_5330)?;
    }
    #[allow(unused_mut)]
    let mut scope_5331 = writer.prefix("SriovNetSupport");
    if let Some(var_5332) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5331, var_5332)?;
    }
    #[allow(unused_mut)]
    let mut scope_5333 = writer.prefix("UserData");
    if let Some(var_5334) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_blob_attribute_value(scope_5333, var_5334)?;
    }
    #[allow(unused_mut)]
    let mut scope_5335 = writer.prefix("Value");
    if let Some(var_5336) = &input.value {
        scope_5335.string(var_5336);
    }
    #[allow(unused_mut)]
    let mut scope_5337 = writer.prefix("DisableApiStop");
    if let Some(var_5338) = &input.disable_api_stop {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5337, var_5338)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_capacity_reservation_attributes(input: &crate::input::ModifyInstanceCapacityReservationAttributesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceCapacityReservationAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5339 = writer.prefix("InstanceId");
    if let Some(var_5340) = &input.instance_id {
        scope_5339.string(var_5340);
    }
    #[allow(unused_mut)]
    let mut scope_5341 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_5342) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(scope_5341, var_5342)?;
    }
    #[allow(unused_mut)]
    let mut scope_5343 = writer.prefix("DryRun");
    if let Some(var_5344) = &input.dry_run {
        scope_5343.boolean(*var_5344);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_credit_specification(input: &crate::input::ModifyInstanceCreditSpecificationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5345 = writer.prefix("DryRun");
    if let Some(var_5346) = &input.dry_run {
        scope_5345.boolean(*var_5346);
    }
    #[allow(unused_mut)]
    let mut scope_5347 = writer.prefix("ClientToken");
    if let Some(var_5348) = &input.client_token {
        scope_5347.string(var_5348);
    }
    #[allow(unused_mut)]
    let mut scope_5349 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_5350) = &input.instance_credit_specifications {
        let mut list_5352 = scope_5349.start_list(true, Some("item"));
        for item_5351 in var_5350 {
            #[allow(unused_mut)]
            let mut entry_5353 = list_5352.entry();
            crate::query_ser::serialize_structure_crate_model_instance_credit_specification_request(entry_5353, item_5351)?;
        }
        list_5352.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_start_time(input: &crate::input::ModifyInstanceEventStartTimeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5354 = writer.prefix("DryRun");
    if let Some(var_5355) = &input.dry_run {
        scope_5354.boolean(*var_5355);
    }
    #[allow(unused_mut)]
    let mut scope_5356 = writer.prefix("InstanceId");
    if let Some(var_5357) = &input.instance_id {
        scope_5356.string(var_5357);
    }
    #[allow(unused_mut)]
    let mut scope_5358 = writer.prefix("InstanceEventId");
    if let Some(var_5359) = &input.instance_event_id {
        scope_5358.string(var_5359);
    }
    #[allow(unused_mut)]
    let mut scope_5360 = writer.prefix("NotBefore");
    if let Some(var_5361) = &input.not_before {
        scope_5360.date_time(var_5361, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_window(input: &crate::input::ModifyInstanceEventWindowInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5362 = writer.prefix("DryRun");
    if let Some(var_5363) = &input.dry_run {
        scope_5362.boolean(*var_5363);
    }
    #[allow(unused_mut)]
    let mut scope_5364 = writer.prefix("Name");
    if let Some(var_5365) = &input.name {
        scope_5364.string(var_5365);
    }
    #[allow(unused_mut)]
    let mut scope_5366 = writer.prefix("InstanceEventWindowId");
    if let Some(var_5367) = &input.instance_event_window_id {
        scope_5366.string(var_5367);
    }
    #[allow(unused_mut)]
    let mut scope_5368 = writer.prefix("TimeRange");
    if let Some(var_5369) = &input.time_ranges {
        let mut list_5371 = scope_5368.start_list(true, None);
        for item_5370 in var_5369 {
            #[allow(unused_mut)]
            let mut entry_5372 = list_5371.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_5372, item_5370)?;
        }
        list_5371.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5373 = writer.prefix("CronExpression");
    if let Some(var_5374) = &input.cron_expression {
        scope_5373.string(var_5374);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_maintenance_options(input: &crate::input::ModifyInstanceMaintenanceOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMaintenanceOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5375 = writer.prefix("InstanceId");
    if let Some(var_5376) = &input.instance_id {
        scope_5375.string(var_5376);
    }
    #[allow(unused_mut)]
    let mut scope_5377 = writer.prefix("AutoRecovery");
    if let Some(var_5378) = &input.auto_recovery {
        scope_5377.string(var_5378.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5379 = writer.prefix("DryRun");
    if let Some(var_5380) = &input.dry_run {
        scope_5379.boolean(*var_5380);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_metadata_options(input: &crate::input::ModifyInstanceMetadataOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5381 = writer.prefix("InstanceId");
    if let Some(var_5382) = &input.instance_id {
        scope_5381.string(var_5382);
    }
    #[allow(unused_mut)]
    let mut scope_5383 = writer.prefix("HttpTokens");
    if let Some(var_5384) = &input.http_tokens {
        scope_5383.string(var_5384.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5385 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_5386) = &input.http_put_response_hop_limit {
        scope_5385.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5386).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5387 = writer.prefix("HttpEndpoint");
    if let Some(var_5388) = &input.http_endpoint {
        scope_5387.string(var_5388.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5389 = writer.prefix("DryRun");
    if let Some(var_5390) = &input.dry_run {
        scope_5389.boolean(*var_5390);
    }
    #[allow(unused_mut)]
    let mut scope_5391 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_5392) = &input.http_protocol_ipv6 {
        scope_5391.string(var_5392.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5393 = writer.prefix("InstanceMetadataTags");
    if let Some(var_5394) = &input.instance_metadata_tags {
        scope_5393.string(var_5394.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_placement(input: &crate::input::ModifyInstancePlacementInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5395 = writer.prefix("Affinity");
    if let Some(var_5396) = &input.affinity {
        scope_5395.string(var_5396.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5397 = writer.prefix("GroupName");
    if let Some(var_5398) = &input.group_name {
        scope_5397.string(var_5398);
    }
    #[allow(unused_mut)]
    let mut scope_5399 = writer.prefix("HostId");
    if let Some(var_5400) = &input.host_id {
        scope_5399.string(var_5400);
    }
    #[allow(unused_mut)]
    let mut scope_5401 = writer.prefix("InstanceId");
    if let Some(var_5402) = &input.instance_id {
        scope_5401.string(var_5402);
    }
    #[allow(unused_mut)]
    let mut scope_5403 = writer.prefix("Tenancy");
    if let Some(var_5404) = &input.tenancy {
        scope_5403.string(var_5404.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5405 = writer.prefix("PartitionNumber");
    if let Some(var_5406) = &input.partition_number {
        scope_5405.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5406).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5407 = writer.prefix("HostResourceGroupArn");
    if let Some(var_5408) = &input.host_resource_group_arn {
        scope_5407.string(var_5408);
    }
    #[allow(unused_mut)]
    let mut scope_5409 = writer.prefix("GroupId");
    if let Some(var_5410) = &input.group_id {
        scope_5409.string(var_5410);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam(input: &crate::input::ModifyIpamInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5411 = writer.prefix("DryRun");
    if let Some(var_5412) = &input.dry_run {
        scope_5411.boolean(*var_5412);
    }
    #[allow(unused_mut)]
    let mut scope_5413 = writer.prefix("IpamId");
    if let Some(var_5414) = &input.ipam_id {
        scope_5413.string(var_5414);
    }
    #[allow(unused_mut)]
    let mut scope_5415 = writer.prefix("Description");
    if let Some(var_5416) = &input.description {
        scope_5415.string(var_5416);
    }
    #[allow(unused_mut)]
    let mut scope_5417 = writer.prefix("AddOperatingRegion");
    if let Some(var_5418) = &input.add_operating_regions {
        let mut list_5420 = scope_5417.start_list(true, None);
        for item_5419 in var_5418 {
            #[allow(unused_mut)]
            let mut entry_5421 = list_5420.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(entry_5421, item_5419)?;
        }
        list_5420.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5422 = writer.prefix("RemoveOperatingRegion");
    if let Some(var_5423) = &input.remove_operating_regions {
        let mut list_5425 = scope_5422.start_list(true, None);
        for item_5424 in var_5423 {
            #[allow(unused_mut)]
            let mut entry_5426 = list_5425.entry();
            crate::query_ser::serialize_structure_crate_model_remove_ipam_operating_region(entry_5426, item_5424)?;
        }
        list_5425.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_pool(input: &crate::input::ModifyIpamPoolInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5427 = writer.prefix("DryRun");
    if let Some(var_5428) = &input.dry_run {
        scope_5427.boolean(*var_5428);
    }
    #[allow(unused_mut)]
    let mut scope_5429 = writer.prefix("IpamPoolId");
    if let Some(var_5430) = &input.ipam_pool_id {
        scope_5429.string(var_5430);
    }
    #[allow(unused_mut)]
    let mut scope_5431 = writer.prefix("Description");
    if let Some(var_5432) = &input.description {
        scope_5431.string(var_5432);
    }
    #[allow(unused_mut)]
    let mut scope_5433 = writer.prefix("AutoImport");
    if let Some(var_5434) = &input.auto_import {
        scope_5433.boolean(*var_5434);
    }
    #[allow(unused_mut)]
    let mut scope_5435 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_5436) = &input.allocation_min_netmask_length {
        scope_5435.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5436).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5437 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_5438) = &input.allocation_max_netmask_length {
        scope_5437.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5438).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5439 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_5440) = &input.allocation_default_netmask_length {
        scope_5439.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5440).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5441 = writer.prefix("ClearAllocationDefaultNetmaskLength");
    if let Some(var_5442) = &input.clear_allocation_default_netmask_length {
        scope_5441.boolean(*var_5442);
    }
    #[allow(unused_mut)]
    let mut scope_5443 = writer.prefix("AddAllocationResourceTag");
    if let Some(var_5444) = &input.add_allocation_resource_tags {
        let mut list_5446 = scope_5443.start_list(true, Some("item"));
        for item_5445 in var_5444 {
            #[allow(unused_mut)]
            let mut entry_5447 = list_5446.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(entry_5447, item_5445)?;
        }
        list_5446.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5448 = writer.prefix("RemoveAllocationResourceTag");
    if let Some(var_5449) = &input.remove_allocation_resource_tags {
        let mut list_5451 = scope_5448.start_list(true, Some("item"));
        for item_5450 in var_5449 {
            #[allow(unused_mut)]
            let mut entry_5452 = list_5451.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(entry_5452, item_5450)?;
        }
        list_5451.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_resource_cidr(input: &crate::input::ModifyIpamResourceCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamResourceCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5453 = writer.prefix("DryRun");
    if let Some(var_5454) = &input.dry_run {
        scope_5453.boolean(*var_5454);
    }
    #[allow(unused_mut)]
    let mut scope_5455 = writer.prefix("ResourceId");
    if let Some(var_5456) = &input.resource_id {
        scope_5455.string(var_5456);
    }
    #[allow(unused_mut)]
    let mut scope_5457 = writer.prefix("ResourceCidr");
    if let Some(var_5458) = &input.resource_cidr {
        scope_5457.string(var_5458);
    }
    #[allow(unused_mut)]
    let mut scope_5459 = writer.prefix("ResourceRegion");
    if let Some(var_5460) = &input.resource_region {
        scope_5459.string(var_5460);
    }
    #[allow(unused_mut)]
    let mut scope_5461 = writer.prefix("CurrentIpamScopeId");
    if let Some(var_5462) = &input.current_ipam_scope_id {
        scope_5461.string(var_5462);
    }
    #[allow(unused_mut)]
    let mut scope_5463 = writer.prefix("DestinationIpamScopeId");
    if let Some(var_5464) = &input.destination_ipam_scope_id {
        scope_5463.string(var_5464);
    }
    #[allow(unused_mut)]
    let mut scope_5465 = writer.prefix("Monitored");
    if let Some(var_5466) = &input.monitored {
        scope_5465.boolean(*var_5466);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_scope(input: &crate::input::ModifyIpamScopeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5467 = writer.prefix("DryRun");
    if let Some(var_5468) = &input.dry_run {
        scope_5467.boolean(*var_5468);
    }
    #[allow(unused_mut)]
    let mut scope_5469 = writer.prefix("IpamScopeId");
    if let Some(var_5470) = &input.ipam_scope_id {
        scope_5469.string(var_5470);
    }
    #[allow(unused_mut)]
    let mut scope_5471 = writer.prefix("Description");
    if let Some(var_5472) = &input.description {
        scope_5471.string(var_5472);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_launch_template(input: &crate::input::ModifyLaunchTemplateInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5473 = writer.prefix("DryRun");
    if let Some(var_5474) = &input.dry_run {
        scope_5473.boolean(*var_5474);
    }
    #[allow(unused_mut)]
    let mut scope_5475 = writer.prefix("ClientToken");
    if let Some(var_5476) = &input.client_token {
        scope_5475.string(var_5476);
    }
    #[allow(unused_mut)]
    let mut scope_5477 = writer.prefix("LaunchTemplateId");
    if let Some(var_5478) = &input.launch_template_id {
        scope_5477.string(var_5478);
    }
    #[allow(unused_mut)]
    let mut scope_5479 = writer.prefix("LaunchTemplateName");
    if let Some(var_5480) = &input.launch_template_name {
        scope_5479.string(var_5480);
    }
    #[allow(unused_mut)]
    let mut scope_5481 = writer.prefix("SetDefaultVersion");
    if let Some(var_5482) = &input.default_version {
        scope_5481.string(var_5482);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_local_gateway_route(input: &crate::input::ModifyLocalGatewayRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5483 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5484) = &input.destination_cidr_block {
        scope_5483.string(var_5484);
    }
    #[allow(unused_mut)]
    let mut scope_5485 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_5486) = &input.local_gateway_route_table_id {
        scope_5485.string(var_5486);
    }
    #[allow(unused_mut)]
    let mut scope_5487 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_5488) = &input.local_gateway_virtual_interface_group_id {
        scope_5487.string(var_5488);
    }
    #[allow(unused_mut)]
    let mut scope_5489 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5490) = &input.network_interface_id {
        scope_5489.string(var_5490);
    }
    #[allow(unused_mut)]
    let mut scope_5491 = writer.prefix("DryRun");
    if let Some(var_5492) = &input.dry_run {
        scope_5491.boolean(*var_5492);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_managed_prefix_list(input: &crate::input::ModifyManagedPrefixListInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5493 = writer.prefix("DryRun");
    if let Some(var_5494) = &input.dry_run {
        scope_5493.boolean(*var_5494);
    }
    #[allow(unused_mut)]
    let mut scope_5495 = writer.prefix("PrefixListId");
    if let Some(var_5496) = &input.prefix_list_id {
        scope_5495.string(var_5496);
    }
    #[allow(unused_mut)]
    let mut scope_5497 = writer.prefix("CurrentVersion");
    if let Some(var_5498) = &input.current_version {
        scope_5497.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5498).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5499 = writer.prefix("PrefixListName");
    if let Some(var_5500) = &input.prefix_list_name {
        scope_5499.string(var_5500);
    }
    #[allow(unused_mut)]
    let mut scope_5501 = writer.prefix("AddEntry");
    if let Some(var_5502) = &input.add_entries {
        let mut list_5504 = scope_5501.start_list(true, None);
        for item_5503 in var_5502 {
            #[allow(unused_mut)]
            let mut entry_5505 = list_5504.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(entry_5505, item_5503)?;
        }
        list_5504.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5506 = writer.prefix("RemoveEntry");
    if let Some(var_5507) = &input.remove_entries {
        let mut list_5509 = scope_5506.start_list(true, None);
        for item_5508 in var_5507 {
            #[allow(unused_mut)]
            let mut entry_5510 = list_5509.entry();
            crate::query_ser::serialize_structure_crate_model_remove_prefix_list_entry(entry_5510, item_5508)?;
        }
        list_5509.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5511 = writer.prefix("MaxEntries");
    if let Some(var_5512) = &input.max_entries {
        scope_5511.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5512).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_network_interface_attribute(input: &crate::input::ModifyNetworkInterfaceAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5513 = writer.prefix("Attachment");
    if let Some(var_5514) = &input.attachment {
        crate::query_ser::serialize_structure_crate_model_network_interface_attachment_changes(scope_5513, var_5514)?;
    }
    #[allow(unused_mut)]
    let mut scope_5515 = writer.prefix("Description");
    if let Some(var_5516) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5515, var_5516)?;
    }
    #[allow(unused_mut)]
    let mut scope_5517 = writer.prefix("DryRun");
    if let Some(var_5518) = &input.dry_run {
        scope_5517.boolean(*var_5518);
    }
    #[allow(unused_mut)]
    let mut scope_5519 = writer.prefix("SecurityGroupId");
    if let Some(var_5520) = &input.groups {
        let mut list_5522 = scope_5519.start_list(true, Some("SecurityGroupId"));
        for item_5521 in var_5520 {
            #[allow(unused_mut)]
            let mut entry_5523 = list_5522.entry();
            entry_5523.string(item_5521);
        }
        list_5522.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5524 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5525) = &input.network_interface_id {
        scope_5524.string(var_5525);
    }
    #[allow(unused_mut)]
    let mut scope_5526 = writer.prefix("SourceDestCheck");
    if let Some(var_5527) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5526, var_5527)?;
    }
    #[allow(unused_mut)]
    let mut scope_5528 = writer.prefix("EnaSrdSpecification");
    if let Some(var_5529) = &input.ena_srd_specification {
        crate::query_ser::serialize_structure_crate_model_ena_srd_specification(scope_5528, var_5529)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_private_dns_name_options(input: &crate::input::ModifyPrivateDnsNameOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyPrivateDnsNameOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5530 = writer.prefix("DryRun");
    if let Some(var_5531) = &input.dry_run {
        scope_5530.boolean(*var_5531);
    }
    #[allow(unused_mut)]
    let mut scope_5532 = writer.prefix("InstanceId");
    if let Some(var_5533) = &input.instance_id {
        scope_5532.string(var_5533);
    }
    #[allow(unused_mut)]
    let mut scope_5534 = writer.prefix("PrivateDnsHostnameType");
    if let Some(var_5535) = &input.private_dns_hostname_type {
        scope_5534.string(var_5535.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5536 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_5537) = &input.enable_resource_name_dns_a_record {
        scope_5536.boolean(*var_5537);
    }
    #[allow(unused_mut)]
    let mut scope_5538 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_5539) = &input.enable_resource_name_dns_aaaa_record {
        scope_5538.boolean(*var_5539);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_reserved_instances(input: &crate::input::ModifyReservedInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5540 = writer.prefix("ReservedInstancesId");
    if let Some(var_5541) = &input.reserved_instances_ids {
        let mut list_5543 = scope_5540.start_list(true, Some("ReservedInstancesId"));
        for item_5542 in var_5541 {
            #[allow(unused_mut)]
            let mut entry_5544 = list_5543.entry();
            entry_5544.string(item_5542);
        }
        list_5543.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5545 = writer.prefix("ClientToken");
    if let Some(var_5546) = &input.client_token {
        scope_5545.string(var_5546);
    }
    #[allow(unused_mut)]
    let mut scope_5547 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_5548) = &input.target_configurations {
        let mut list_5550 = scope_5547.start_list(true, Some("item"));
        for item_5549 in var_5548 {
            #[allow(unused_mut)]
            let mut entry_5551 = list_5550.entry();
            crate::query_ser::serialize_structure_crate_model_reserved_instances_configuration(entry_5551, item_5549)?;
        }
        list_5550.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_security_group_rules(input: &crate::input::ModifySecurityGroupRulesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifySecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5552 = writer.prefix("GroupId");
    if let Some(var_5553) = &input.group_id {
        scope_5552.string(var_5553);
    }
    #[allow(unused_mut)]
    let mut scope_5554 = writer.prefix("SecurityGroupRule");
    if let Some(var_5555) = &input.security_group_rules {
        let mut list_5557 = scope_5554.start_list(true, Some("item"));
        for item_5556 in var_5555 {
            #[allow(unused_mut)]
            let mut entry_5558 = list_5557.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_update(entry_5558, item_5556)?;
        }
        list_5557.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5559 = writer.prefix("DryRun");
    if let Some(var_5560) = &input.dry_run {
        scope_5559.boolean(*var_5560);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_attribute(input: &crate::input::ModifySnapshotAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5561 = writer.prefix("Attribute");
    if let Some(var_5562) = &input.attribute {
        scope_5561.string(var_5562.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5563 = writer.prefix("CreateVolumePermission");
    if let Some(var_5564) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_crate_model_create_volume_permission_modifications(scope_5563, var_5564)?;
    }
    #[allow(unused_mut)]
    let mut scope_5565 = writer.prefix("UserGroup");
    if let Some(var_5566) = &input.group_names {
        let mut list_5568 = scope_5565.start_list(true, Some("GroupName"));
        for item_5567 in var_5566 {
            #[allow(unused_mut)]
            let mut entry_5569 = list_5568.entry();
            entry_5569.string(item_5567);
        }
        list_5568.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5570 = writer.prefix("OperationType");
    if let Some(var_5571) = &input.operation_type {
        scope_5570.string(var_5571.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5572 = writer.prefix("SnapshotId");
    if let Some(var_5573) = &input.snapshot_id {
        scope_5572.string(var_5573);
    }
    #[allow(unused_mut)]
    let mut scope_5574 = writer.prefix("UserId");
    if let Some(var_5575) = &input.user_ids {
        let mut list_5577 = scope_5574.start_list(true, Some("UserId"));
        for item_5576 in var_5575 {
            #[allow(unused_mut)]
            let mut entry_5578 = list_5577.entry();
            entry_5578.string(item_5576);
        }
        list_5577.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5579 = writer.prefix("DryRun");
    if let Some(var_5580) = &input.dry_run {
        scope_5579.boolean(*var_5580);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_tier(input: &crate::input::ModifySnapshotTierInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5581 = writer.prefix("SnapshotId");
    if let Some(var_5582) = &input.snapshot_id {
        scope_5581.string(var_5582);
    }
    #[allow(unused_mut)]
    let mut scope_5583 = writer.prefix("StorageTier");
    if let Some(var_5584) = &input.storage_tier {
        scope_5583.string(var_5584.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5585 = writer.prefix("DryRun");
    if let Some(var_5586) = &input.dry_run {
        scope_5585.boolean(*var_5586);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_spot_fleet_request(input: &crate::input::ModifySpotFleetRequestInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5587 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_5588) = &input.excess_capacity_termination_policy {
        scope_5587.string(var_5588.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5589 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_5590) = &input.launch_template_configs {
        let mut list_5592 = scope_5589.start_list(true, Some("item"));
        for item_5591 in var_5590 {
            #[allow(unused_mut)]
            let mut entry_5593 = list_5592.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(entry_5593, item_5591)?;
        }
        list_5592.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5594 = writer.prefix("SpotFleetRequestId");
    if let Some(var_5595) = &input.spot_fleet_request_id {
        scope_5594.string(var_5595);
    }
    #[allow(unused_mut)]
    let mut scope_5596 = writer.prefix("TargetCapacity");
    if let Some(var_5597) = &input.target_capacity {
        scope_5596.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5597).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5598 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_5599) = &input.on_demand_target_capacity {
        scope_5598.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5599).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5600 = writer.prefix("Context");
    if let Some(var_5601) = &input.context {
        scope_5600.string(var_5601);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_subnet_attribute(input: &crate::input::ModifySubnetAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5602 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_5603) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5602, var_5603)?;
    }
    #[allow(unused_mut)]
    let mut scope_5604 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_5605) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5604, var_5605)?;
    }
    #[allow(unused_mut)]
    let mut scope_5606 = writer.prefix("SubnetId");
    if let Some(var_5607) = &input.subnet_id {
        scope_5606.string(var_5607);
    }
    #[allow(unused_mut)]
    let mut scope_5608 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_5609) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5608, var_5609)?;
    }
    #[allow(unused_mut)]
    let mut scope_5610 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_5611) = &input.customer_owned_ipv4_pool {
        scope_5610.string(var_5611);
    }
    #[allow(unused_mut)]
    let mut scope_5612 = writer.prefix("EnableDns64");
    if let Some(var_5613) = &input.enable_dns64 {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5612, var_5613)?;
    }
    #[allow(unused_mut)]
    let mut scope_5614 = writer.prefix("PrivateDnsHostnameTypeOnLaunch");
    if let Some(var_5615) = &input.private_dns_hostname_type_on_launch {
        scope_5614.string(var_5615.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5616 = writer.prefix("EnableResourceNameDnsARecordOnLaunch");
    if let Some(var_5617) = &input.enable_resource_name_dns_a_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5616, var_5617)?;
    }
    #[allow(unused_mut)]
    let mut scope_5618 = writer.prefix("EnableResourceNameDnsAAAARecordOnLaunch");
    if let Some(var_5619) = &input.enable_resource_name_dns_aaaa_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5618, var_5619)?;
    }
    #[allow(unused_mut)]
    let mut scope_5620 = writer.prefix("EnableLniAtDeviceIndex");
    if let Some(var_5621) = &input.enable_lni_at_device_index {
        scope_5620.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5621).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5622 = writer.prefix("DisableLniAtDeviceIndex");
    if let Some(var_5623) = &input.disable_lni_at_device_index {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5622, var_5623)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_network_services(input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterNetworkServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5624 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5625) = &input.traffic_mirror_filter_id {
        scope_5624.string(var_5625);
    }
    #[allow(unused_mut)]
    let mut scope_5626 = writer.prefix("AddNetworkService");
    if let Some(var_5627) = &input.add_network_services {
        let mut list_5629 = scope_5626.start_list(true, Some("item"));
        for item_5628 in var_5627 {
            #[allow(unused_mut)]
            let mut entry_5630 = list_5629.entry();
            entry_5630.string(item_5628.as_str());
        }
        list_5629.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5631 = writer.prefix("RemoveNetworkService");
    if let Some(var_5632) = &input.remove_network_services {
        let mut list_5634 = scope_5631.start_list(true, Some("item"));
        for item_5633 in var_5632 {
            #[allow(unused_mut)]
            let mut entry_5635 = list_5634.entry();
            entry_5635.string(item_5633.as_str());
        }
        list_5634.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5636 = writer.prefix("DryRun");
    if let Some(var_5637) = &input.dry_run {
        scope_5636.boolean(*var_5637);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_rule(input: &crate::input::ModifyTrafficMirrorFilterRuleInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5638 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_5639) = &input.traffic_mirror_filter_rule_id {
        scope_5638.string(var_5639);
    }
    #[allow(unused_mut)]
    let mut scope_5640 = writer.prefix("TrafficDirection");
    if let Some(var_5641) = &input.traffic_direction {
        scope_5640.string(var_5641.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5642 = writer.prefix("RuleNumber");
    if let Some(var_5643) = &input.rule_number {
        scope_5642.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5643).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5644 = writer.prefix("RuleAction");
    if let Some(var_5645) = &input.rule_action {
        scope_5644.string(var_5645.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5646 = writer.prefix("DestinationPortRange");
    if let Some(var_5647) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(scope_5646, var_5647)?;
    }
    #[allow(unused_mut)]
    let mut scope_5648 = writer.prefix("SourcePortRange");
    if let Some(var_5649) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(scope_5648, var_5649)?;
    }
    #[allow(unused_mut)]
    let mut scope_5650 = writer.prefix("Protocol");
    if let Some(var_5651) = &input.protocol {
        scope_5650.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5651).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5652 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5653) = &input.destination_cidr_block {
        scope_5652.string(var_5653);
    }
    #[allow(unused_mut)]
    let mut scope_5654 = writer.prefix("SourceCidrBlock");
    if let Some(var_5655) = &input.source_cidr_block {
        scope_5654.string(var_5655);
    }
    #[allow(unused_mut)]
    let mut scope_5656 = writer.prefix("Description");
    if let Some(var_5657) = &input.description {
        scope_5656.string(var_5657);
    }
    #[allow(unused_mut)]
    let mut scope_5658 = writer.prefix("RemoveField");
    if let Some(var_5659) = &input.remove_fields {
        let mut list_5661 = scope_5658.start_list(true, None);
        for item_5660 in var_5659 {
            #[allow(unused_mut)]
            let mut entry_5662 = list_5661.entry();
            entry_5662.string(item_5660.as_str());
        }
        list_5661.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5663 = writer.prefix("DryRun");
    if let Some(var_5664) = &input.dry_run {
        scope_5663.boolean(*var_5664);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_session(input: &crate::input::ModifyTrafficMirrorSessionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5665 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_5666) = &input.traffic_mirror_session_id {
        scope_5665.string(var_5666);
    }
    #[allow(unused_mut)]
    let mut scope_5667 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_5668) = &input.traffic_mirror_target_id {
        scope_5667.string(var_5668);
    }
    #[allow(unused_mut)]
    let mut scope_5669 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5670) = &input.traffic_mirror_filter_id {
        scope_5669.string(var_5670);
    }
    #[allow(unused_mut)]
    let mut scope_5671 = writer.prefix("PacketLength");
    if let Some(var_5672) = &input.packet_length {
        scope_5671.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5672).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5673 = writer.prefix("SessionNumber");
    if let Some(var_5674) = &input.session_number {
        scope_5673.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5674).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5675 = writer.prefix("VirtualNetworkId");
    if let Some(var_5676) = &input.virtual_network_id {
        scope_5675.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5676).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5677 = writer.prefix("Description");
    if let Some(var_5678) = &input.description {
        scope_5677.string(var_5678);
    }
    #[allow(unused_mut)]
    let mut scope_5679 = writer.prefix("RemoveField");
    if let Some(var_5680) = &input.remove_fields {
        let mut list_5682 = scope_5679.start_list(true, None);
        for item_5681 in var_5680 {
            #[allow(unused_mut)]
            let mut entry_5683 = list_5682.entry();
            entry_5683.string(item_5681.as_str());
        }
        list_5682.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5684 = writer.prefix("DryRun");
    if let Some(var_5685) = &input.dry_run {
        scope_5684.boolean(*var_5685);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway(input: &crate::input::ModifyTransitGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5686 = writer.prefix("TransitGatewayId");
    if let Some(var_5687) = &input.transit_gateway_id {
        scope_5686.string(var_5687);
    }
    #[allow(unused_mut)]
    let mut scope_5688 = writer.prefix("Description");
    if let Some(var_5689) = &input.description {
        scope_5688.string(var_5689);
    }
    #[allow(unused_mut)]
    let mut scope_5690 = writer.prefix("Options");
    if let Some(var_5691) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_options(scope_5690, var_5691)?;
    }
    #[allow(unused_mut)]
    let mut scope_5692 = writer.prefix("DryRun");
    if let Some(var_5693) = &input.dry_run {
        scope_5692.boolean(*var_5693);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_prefix_list_reference(input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGatewayPrefixListReference", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5694 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5695) = &input.transit_gateway_route_table_id {
        scope_5694.string(var_5695);
    }
    #[allow(unused_mut)]
    let mut scope_5696 = writer.prefix("PrefixListId");
    if let Some(var_5697) = &input.prefix_list_id {
        scope_5696.string(var_5697);
    }
    #[allow(unused_mut)]
    let mut scope_5698 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5699) = &input.transit_gateway_attachment_id {
        scope_5698.string(var_5699);
    }
    #[allow(unused_mut)]
    let mut scope_5700 = writer.prefix("Blackhole");
    if let Some(var_5701) = &input.blackhole {
        scope_5700.boolean(*var_5701);
    }
    #[allow(unused_mut)]
    let mut scope_5702 = writer.prefix("DryRun");
    if let Some(var_5703) = &input.dry_run {
        scope_5702.boolean(*var_5703);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_vpc_attachment(input: &crate::input::ModifyTransitGatewayVpcAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5704 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5705) = &input.transit_gateway_attachment_id {
        scope_5704.string(var_5705);
    }
    #[allow(unused_mut)]
    let mut scope_5706 = writer.prefix("AddSubnetIds");
    if let Some(var_5707) = &input.add_subnet_ids {
        let mut list_5709 = scope_5706.start_list(true, Some("item"));
        for item_5708 in var_5707 {
            #[allow(unused_mut)]
            let mut entry_5710 = list_5709.entry();
            entry_5710.string(item_5708);
        }
        list_5709.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5711 = writer.prefix("RemoveSubnetIds");
    if let Some(var_5712) = &input.remove_subnet_ids {
        let mut list_5714 = scope_5711.start_list(true, Some("item"));
        for item_5713 in var_5712 {
            #[allow(unused_mut)]
            let mut entry_5715 = list_5714.entry();
            entry_5715.string(item_5713);
        }
        list_5714.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5716 = writer.prefix("Options");
    if let Some(var_5717) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(scope_5716, var_5717)?;
    }
    #[allow(unused_mut)]
    let mut scope_5718 = writer.prefix("DryRun");
    if let Some(var_5719) = &input.dry_run {
        scope_5718.boolean(*var_5719);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_verified_access_endpoint(input: &crate::input::ModifyVerifiedAccessEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVerifiedAccessEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5720 = writer.prefix("VerifiedAccessEndpointId");
    if let Some(var_5721) = &input.verified_access_endpoint_id {
        scope_5720.string(var_5721);
    }
    #[allow(unused_mut)]
    let mut scope_5722 = writer.prefix("VerifiedAccessGroupId");
    if let Some(var_5723) = &input.verified_access_group_id {
        scope_5722.string(var_5723);
    }
    #[allow(unused_mut)]
    let mut scope_5724 = writer.prefix("LoadBalancerOptions");
    if let Some(var_5725) = &input.load_balancer_options {
        crate::query_ser::serialize_structure_crate_model_modify_verified_access_endpoint_load_balancer_options(scope_5724, var_5725)?;
    }
    #[allow(unused_mut)]
    let mut scope_5726 = writer.prefix("NetworkInterfaceOptions");
    if let Some(var_5727) = &input.network_interface_options {
        crate::query_ser::serialize_structure_crate_model_modify_verified_access_endpoint_eni_options(scope_5726, var_5727)?;
    }
    #[allow(unused_mut)]
    let mut scope_5728 = writer.prefix("Description");
    if let Some(var_5729) = &input.description {
        scope_5728.string(var_5729);
    }
    #[allow(unused_mut)]
    let mut scope_5730 = writer.prefix("ClientToken");
    if let Some(var_5731) = &input.client_token {
        scope_5730.string(var_5731);
    }
    #[allow(unused_mut)]
    let mut scope_5732 = writer.prefix("DryRun");
    if let Some(var_5733) = &input.dry_run {
        scope_5732.boolean(*var_5733);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_verified_access_endpoint_policy(input: &crate::input::ModifyVerifiedAccessEndpointPolicyInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVerifiedAccessEndpointPolicy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5734 = writer.prefix("VerifiedAccessEndpointId");
    if let Some(var_5735) = &input.verified_access_endpoint_id {
        scope_5734.string(var_5735);
    }
    #[allow(unused_mut)]
    let mut scope_5736 = writer.prefix("PolicyEnabled");
    if let Some(var_5737) = &input.policy_enabled {
        scope_5736.boolean(*var_5737);
    }
    #[allow(unused_mut)]
    let mut scope_5738 = writer.prefix("PolicyDocument");
    if let Some(var_5739) = &input.policy_document {
        scope_5738.string(var_5739);
    }
    #[allow(unused_mut)]
    let mut scope_5740 = writer.prefix("ClientToken");
    if let Some(var_5741) = &input.client_token {
        scope_5740.string(var_5741);
    }
    #[allow(unused_mut)]
    let mut scope_5742 = writer.prefix("DryRun");
    if let Some(var_5743) = &input.dry_run {
        scope_5742.boolean(*var_5743);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_verified_access_group(input: &crate::input::ModifyVerifiedAccessGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVerifiedAccessGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5744 = writer.prefix("VerifiedAccessGroupId");
    if let Some(var_5745) = &input.verified_access_group_id {
        scope_5744.string(var_5745);
    }
    #[allow(unused_mut)]
    let mut scope_5746 = writer.prefix("VerifiedAccessInstanceId");
    if let Some(var_5747) = &input.verified_access_instance_id {
        scope_5746.string(var_5747);
    }
    #[allow(unused_mut)]
    let mut scope_5748 = writer.prefix("Description");
    if let Some(var_5749) = &input.description {
        scope_5748.string(var_5749);
    }
    #[allow(unused_mut)]
    let mut scope_5750 = writer.prefix("ClientToken");
    if let Some(var_5751) = &input.client_token {
        scope_5750.string(var_5751);
    }
    #[allow(unused_mut)]
    let mut scope_5752 = writer.prefix("DryRun");
    if let Some(var_5753) = &input.dry_run {
        scope_5752.boolean(*var_5753);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_verified_access_group_policy(input: &crate::input::ModifyVerifiedAccessGroupPolicyInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVerifiedAccessGroupPolicy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5754 = writer.prefix("VerifiedAccessGroupId");
    if let Some(var_5755) = &input.verified_access_group_id {
        scope_5754.string(var_5755);
    }
    #[allow(unused_mut)]
    let mut scope_5756 = writer.prefix("PolicyEnabled");
    if let Some(var_5757) = &input.policy_enabled {
        scope_5756.boolean(*var_5757);
    }
    #[allow(unused_mut)]
    let mut scope_5758 = writer.prefix("PolicyDocument");
    if let Some(var_5759) = &input.policy_document {
        scope_5758.string(var_5759);
    }
    #[allow(unused_mut)]
    let mut scope_5760 = writer.prefix("ClientToken");
    if let Some(var_5761) = &input.client_token {
        scope_5760.string(var_5761);
    }
    #[allow(unused_mut)]
    let mut scope_5762 = writer.prefix("DryRun");
    if let Some(var_5763) = &input.dry_run {
        scope_5762.boolean(*var_5763);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_verified_access_instance(input: &crate::input::ModifyVerifiedAccessInstanceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVerifiedAccessInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5764 = writer.prefix("VerifiedAccessInstanceId");
    if let Some(var_5765) = &input.verified_access_instance_id {
        scope_5764.string(var_5765);
    }
    #[allow(unused_mut)]
    let mut scope_5766 = writer.prefix("Description");
    if let Some(var_5767) = &input.description {
        scope_5766.string(var_5767);
    }
    #[allow(unused_mut)]
    let mut scope_5768 = writer.prefix("DryRun");
    if let Some(var_5769) = &input.dry_run {
        scope_5768.boolean(*var_5769);
    }
    #[allow(unused_mut)]
    let mut scope_5770 = writer.prefix("ClientToken");
    if let Some(var_5771) = &input.client_token {
        scope_5770.string(var_5771);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_verified_access_instance_logging_configuration(input: &crate::input::ModifyVerifiedAccessInstanceLoggingConfigurationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVerifiedAccessInstanceLoggingConfiguration", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5772 = writer.prefix("VerifiedAccessInstanceId");
    if let Some(var_5773) = &input.verified_access_instance_id {
        scope_5772.string(var_5773);
    }
    #[allow(unused_mut)]
    let mut scope_5774 = writer.prefix("AccessLogs");
    if let Some(var_5775) = &input.access_logs {
        crate::query_ser::serialize_structure_crate_model_verified_access_log_options(scope_5774, var_5775)?;
    }
    #[allow(unused_mut)]
    let mut scope_5776 = writer.prefix("DryRun");
    if let Some(var_5777) = &input.dry_run {
        scope_5776.boolean(*var_5777);
    }
    #[allow(unused_mut)]
    let mut scope_5778 = writer.prefix("ClientToken");
    if let Some(var_5779) = &input.client_token {
        scope_5778.string(var_5779);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_verified_access_trust_provider(input: &crate::input::ModifyVerifiedAccessTrustProviderInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVerifiedAccessTrustProvider", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5780 = writer.prefix("VerifiedAccessTrustProviderId");
    if let Some(var_5781) = &input.verified_access_trust_provider_id {
        scope_5780.string(var_5781);
    }
    #[allow(unused_mut)]
    let mut scope_5782 = writer.prefix("OidcOptions");
    if let Some(var_5783) = &input.oidc_options {
        crate::query_ser::serialize_structure_crate_model_modify_verified_access_trust_provider_oidc_options(scope_5782, var_5783)?;
    }
    #[allow(unused_mut)]
    let mut scope_5784 = writer.prefix("Description");
    if let Some(var_5785) = &input.description {
        scope_5784.string(var_5785);
    }
    #[allow(unused_mut)]
    let mut scope_5786 = writer.prefix("DryRun");
    if let Some(var_5787) = &input.dry_run {
        scope_5786.boolean(*var_5787);
    }
    #[allow(unused_mut)]
    let mut scope_5788 = writer.prefix("ClientToken");
    if let Some(var_5789) = &input.client_token {
        scope_5788.string(var_5789);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume(input: &crate::input::ModifyVolumeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5790 = writer.prefix("DryRun");
    if let Some(var_5791) = &input.dry_run {
        scope_5790.boolean(*var_5791);
    }
    #[allow(unused_mut)]
    let mut scope_5792 = writer.prefix("VolumeId");
    if let Some(var_5793) = &input.volume_id {
        scope_5792.string(var_5793);
    }
    #[allow(unused_mut)]
    let mut scope_5794 = writer.prefix("Size");
    if let Some(var_5795) = &input.size {
        scope_5794.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5795).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5796 = writer.prefix("VolumeType");
    if let Some(var_5797) = &input.volume_type {
        scope_5796.string(var_5797.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5798 = writer.prefix("Iops");
    if let Some(var_5799) = &input.iops {
        scope_5798.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5799).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5800 = writer.prefix("Throughput");
    if let Some(var_5801) = &input.throughput {
        scope_5800.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5801).into()));
    }
    #[allow(unused_mut)]
    let mut scope_5802 = writer.prefix("MultiAttachEnabled");
    if let Some(var_5803) = &input.multi_attach_enabled {
        scope_5802.boolean(*var_5803);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume_attribute(input: &crate::input::ModifyVolumeAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5804 = writer.prefix("AutoEnableIO");
    if let Some(var_5805) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5804, var_5805)?;
    }
    #[allow(unused_mut)]
    let mut scope_5806 = writer.prefix("VolumeId");
    if let Some(var_5807) = &input.volume_id {
        scope_5806.string(var_5807);
    }
    #[allow(unused_mut)]
    let mut scope_5808 = writer.prefix("DryRun");
    if let Some(var_5809) = &input.dry_run {
        scope_5808.boolean(*var_5809);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_attribute(input: &crate::input::ModifyVpcAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5810 = writer.prefix("EnableDnsHostnames");
    if let Some(var_5811) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5810, var_5811)?;
    }
    #[allow(unused_mut)]
    let mut scope_5812 = writer.prefix("EnableDnsSupport");
    if let Some(var_5813) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5812, var_5813)?;
    }
    #[allow(unused_mut)]
    let mut scope_5814 = writer.prefix("VpcId");
    if let Some(var_5815) = &input.vpc_id {
        scope_5814.string(var_5815);
    }
    #[allow(unused_mut)]
    let mut scope_5816 = writer.prefix("EnableNetworkAddressUsageMetrics");
    if let Some(var_5817) = &input.enable_network_address_usage_metrics {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5816, var_5817)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint(input: &crate::input::ModifyVpcEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5818 = writer.prefix("DryRun");
    if let Some(var_5819) = &input.dry_run {
        scope_5818.boolean(*var_5819);
    }
    #[allow(unused_mut)]
    let mut scope_5820 = writer.prefix("VpcEndpointId");
    if let Some(var_5821) = &input.vpc_endpoint_id {
        scope_5820.string(var_5821);
    }
    #[allow(unused_mut)]
    let mut scope_5822 = writer.prefix("ResetPolicy");
    if let Some(var_5823) = &input.reset_policy {
        scope_5822.boolean(*var_5823);
    }
    #[allow(unused_mut)]
    let mut scope_5824 = writer.prefix("PolicyDocument");
    if let Some(var_5825) = &input.policy_document {
        scope_5824.string(var_5825);
    }
    #[allow(unused_mut)]
    let mut scope_5826 = writer.prefix("AddRouteTableId");
    if let Some(var_5827) = &input.add_route_table_ids {
        let mut list_5829 = scope_5826.start_list(true, Some("item"));
        for item_5828 in var_5827 {
            #[allow(unused_mut)]
            let mut entry_5830 = list_5829.entry();
            entry_5830.string(item_5828);
        }
        list_5829.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5831 = writer.prefix("RemoveRouteTableId");
    if let Some(var_5832) = &input.remove_route_table_ids {
        let mut list_5834 = scope_5831.start_list(true, Some("item"));
        for item_5833 in var_5832 {
            #[allow(unused_mut)]
            let mut entry_5835 = list_5834.entry();
            entry_5835.string(item_5833);
        }
        list_5834.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5836 = writer.prefix("AddSubnetId");
    if let Some(var_5837) = &input.add_subnet_ids {
        let mut list_5839 = scope_5836.start_list(true, Some("item"));
        for item_5838 in var_5837 {
            #[allow(unused_mut)]
            let mut entry_5840 = list_5839.entry();
            entry_5840.string(item_5838);
        }
        list_5839.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5841 = writer.prefix("RemoveSubnetId");
    if let Some(var_5842) = &input.remove_subnet_ids {
        let mut list_5844 = scope_5841.start_list(true, Some("item"));
        for item_5843 in var_5842 {
            #[allow(unused_mut)]
            let mut entry_5845 = list_5844.entry();
            entry_5845.string(item_5843);
        }
        list_5844.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5846 = writer.prefix("AddSecurityGroupId");
    if let Some(var_5847) = &input.add_security_group_ids {
        let mut list_5849 = scope_5846.start_list(true, Some("item"));
        for item_5848 in var_5847 {
            #[allow(unused_mut)]
            let mut entry_5850 = list_5849.entry();
            entry_5850.string(item_5848);
        }
        list_5849.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5851 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_5852) = &input.remove_security_group_ids {
        let mut list_5854 = scope_5851.start_list(true, Some("item"));
        for item_5853 in var_5852 {
            #[allow(unused_mut)]
            let mut entry_5855 = list_5854.entry();
            entry_5855.string(item_5853);
        }
        list_5854.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5856 = writer.prefix("IpAddressType");
    if let Some(var_5857) = &input.ip_address_type {
        scope_5856.string(var_5857.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5858 = writer.prefix("DnsOptions");
    if let Some(var_5859) = &input.dns_options {
        crate::query_ser::serialize_structure_crate_model_dns_options_specification(scope_5858, var_5859)?;
    }
    #[allow(unused_mut)]
    let mut scope_5860 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_5861) = &input.private_dns_enabled {
        scope_5860.boolean(*var_5861);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_connection_notification(input: &crate::input::ModifyVpcEndpointConnectionNotificationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpointConnectionNotification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5862 = writer.prefix("DryRun");
    if let Some(var_5863) = &input.dry_run {
        scope_5862.boolean(*var_5863);
    }
    #[allow(unused_mut)]
    let mut scope_5864 = writer.prefix("ConnectionNotificationId");
    if let Some(var_5865) = &input.connection_notification_id {
        scope_5864.string(var_5865);
    }
    #[allow(unused_mut)]
    let mut scope_5866 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_5867) = &input.connection_notification_arn {
        scope_5866.string(var_5867);
    }
    #[allow(unused_mut)]
    let mut scope_5868 = writer.prefix("ConnectionEvents");
    if let Some(var_5869) = &input.connection_events {
        let mut list_5871 = scope_5868.start_list(true, Some("item"));
        for item_5870 in var_5869 {
            #[allow(unused_mut)]
            let mut entry_5872 = list_5871.entry();
            entry_5872.string(item_5870);
        }
        list_5871.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_configuration(input: &crate::input::ModifyVpcEndpointServiceConfigurationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpointServiceConfiguration", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5873 = writer.prefix("DryRun");
    if let Some(var_5874) = &input.dry_run {
        scope_5873.boolean(*var_5874);
    }
    #[allow(unused_mut)]
    let mut scope_5875 = writer.prefix("ServiceId");
    if let Some(var_5876) = &input.service_id {
        scope_5875.string(var_5876);
    }
    #[allow(unused_mut)]
    let mut scope_5877 = writer.prefix("PrivateDnsName");
    if let Some(var_5878) = &input.private_dns_name {
        scope_5877.string(var_5878);
    }
    #[allow(unused_mut)]
    let mut scope_5879 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_5880) = &input.remove_private_dns_name {
        scope_5879.boolean(*var_5880);
    }
    #[allow(unused_mut)]
    let mut scope_5881 = writer.prefix("AcceptanceRequired");
    if let Some(var_5882) = &input.acceptance_required {
        scope_5881.boolean(*var_5882);
    }
    #[allow(unused_mut)]
    let mut scope_5883 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_5884) = &input.add_network_load_balancer_arns {
        let mut list_5886 = scope_5883.start_list(true, Some("item"));
        for item_5885 in var_5884 {
            #[allow(unused_mut)]
            let mut entry_5887 = list_5886.entry();
            entry_5887.string(item_5885);
        }
        list_5886.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5888 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_5889) = &input.remove_network_load_balancer_arns {
        let mut list_5891 = scope_5888.start_list(true, Some("item"));
        for item_5890 in var_5889 {
            #[allow(unused_mut)]
            let mut entry_5892 = list_5891.entry();
            entry_5892.string(item_5890);
        }
        list_5891.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5893 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_5894) = &input.add_gateway_load_balancer_arns {
        let mut list_5896 = scope_5893.start_list(true, Some("item"));
        for item_5895 in var_5894 {
            #[allow(unused_mut)]
            let mut entry_5897 = list_5896.entry();
            entry_5897.string(item_5895);
        }
        list_5896.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5898 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_5899) = &input.remove_gateway_load_balancer_arns {
        let mut list_5901 = scope_5898.start_list(true, Some("item"));
        for item_5900 in var_5899 {
            #[allow(unused_mut)]
            let mut entry_5902 = list_5901.entry();
            entry_5902.string(item_5900);
        }
        list_5901.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5903 = writer.prefix("AddSupportedIpAddressType");
    if let Some(var_5904) = &input.add_supported_ip_address_types {
        let mut list_5906 = scope_5903.start_list(true, Some("item"));
        for item_5905 in var_5904 {
            #[allow(unused_mut)]
            let mut entry_5907 = list_5906.entry();
            entry_5907.string(item_5905);
        }
        list_5906.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5908 = writer.prefix("RemoveSupportedIpAddressType");
    if let Some(var_5909) = &input.remove_supported_ip_address_types {
        let mut list_5911 = scope_5908.start_list(true, Some("item"));
        for item_5910 in var_5909 {
            #[allow(unused_mut)]
            let mut entry_5912 = list_5911.entry();
            entry_5912.string(item_5910);
        }
        list_5911.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_payer_responsibility(input: &crate::input::ModifyVpcEndpointServicePayerResponsibilityInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpointServicePayerResponsibility", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5913 = writer.prefix("DryRun");
    if let Some(var_5914) = &input.dry_run {
        scope_5913.boolean(*var_5914);
    }
    #[allow(unused_mut)]
    let mut scope_5915 = writer.prefix("ServiceId");
    if let Some(var_5916) = &input.service_id {
        scope_5915.string(var_5916);
    }
    #[allow(unused_mut)]
    let mut scope_5917 = writer.prefix("PayerResponsibility");
    if let Some(var_5918) = &input.payer_responsibility {
        scope_5917.string(var_5918.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_permissions(input: &crate::input::ModifyVpcEndpointServicePermissionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpointServicePermissions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5919 = writer.prefix("DryRun");
    if let Some(var_5920) = &input.dry_run {
        scope_5919.boolean(*var_5920);
    }
    #[allow(unused_mut)]
    let mut scope_5921 = writer.prefix("ServiceId");
    if let Some(var_5922) = &input.service_id {
        scope_5921.string(var_5922);
    }
    #[allow(unused_mut)]
    let mut scope_5923 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_5924) = &input.add_allowed_principals {
        let mut list_5926 = scope_5923.start_list(true, Some("item"));
        for item_5925 in var_5924 {
            #[allow(unused_mut)]
            let mut entry_5927 = list_5926.entry();
            entry_5927.string(item_5925);
        }
        list_5926.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5928 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_5929) = &input.remove_allowed_principals {
        let mut list_5931 = scope_5928.start_list(true, Some("item"));
        for item_5930 in var_5929 {
            #[allow(unused_mut)]
            let mut entry_5932 = list_5931.entry();
            entry_5932.string(item_5930);
        }
        list_5931.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_peering_connection_options(input: &crate::input::ModifyVpcPeeringConnectionOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcPeeringConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5933 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_5934) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(scope_5933, var_5934)?;
    }
    #[allow(unused_mut)]
    let mut scope_5935 = writer.prefix("DryRun");
    if let Some(var_5936) = &input.dry_run {
        scope_5935.boolean(*var_5936);
    }
    #[allow(unused_mut)]
    let mut scope_5937 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_5938) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(scope_5937, var_5938)?;
    }
    #[allow(unused_mut)]
    let mut scope_5939 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5940) = &input.vpc_peering_connection_id {
        scope_5939.string(var_5940);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_tenancy(input: &crate::input::ModifyVpcTenancyInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5941 = writer.prefix("VpcId");
    if let Some(var_5942) = &input.vpc_id {
        scope_5941.string(var_5942);
    }
    #[allow(unused_mut)]
    let mut scope_5943 = writer.prefix("InstanceTenancy");
    if let Some(var_5944) = &input.instance_tenancy {
        scope_5943.string(var_5944.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5945 = writer.prefix("DryRun");
    if let Some(var_5946) = &input.dry_run {
        scope_5945.boolean(*var_5946);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection(input: &crate::input::ModifyVpnConnectionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5947 = writer.prefix("VpnConnectionId");
    if let Some(var_5948) = &input.vpn_connection_id {
        scope_5947.string(var_5948);
    }
    #[allow(unused_mut)]
    let mut scope_5949 = writer.prefix("TransitGatewayId");
    if let Some(var_5950) = &input.transit_gateway_id {
        scope_5949.string(var_5950);
    }
    #[allow(unused_mut)]
    let mut scope_5951 = writer.prefix("CustomerGatewayId");
    if let Some(var_5952) = &input.customer_gateway_id {
        scope_5951.string(var_5952);
    }
    #[allow(unused_mut)]
    let mut scope_5953 = writer.prefix("VpnGatewayId");
    if let Some(var_5954) = &input.vpn_gateway_id {
        scope_5953.string(var_5954);
    }
    #[allow(unused_mut)]
    let mut scope_5955 = writer.prefix("DryRun");
    if let Some(var_5956) = &input.dry_run {
        scope_5955.boolean(*var_5956);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection_options(input: &crate::input::ModifyVpnConnectionOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5957 = writer.prefix("VpnConnectionId");
    if let Some(var_5958) = &input.vpn_connection_id {
        scope_5957.string(var_5958);
    }
    #[allow(unused_mut)]
    let mut scope_5959 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_5960) = &input.local_ipv4_network_cidr {
        scope_5959.string(var_5960);
    }
    #[allow(unused_mut)]
    let mut scope_5961 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_5962) = &input.remote_ipv4_network_cidr {
        scope_5961.string(var_5962);
    }
    #[allow(unused_mut)]
    let mut scope_5963 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_5964) = &input.local_ipv6_network_cidr {
        scope_5963.string(var_5964);
    }
    #[allow(unused_mut)]
    let mut scope_5965 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_5966) = &input.remote_ipv6_network_cidr {
        scope_5965.string(var_5966);
    }
    #[allow(unused_mut)]
    let mut scope_5967 = writer.prefix("DryRun");
    if let Some(var_5968) = &input.dry_run {
        scope_5967.boolean(*var_5968);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_certificate(input: &crate::input::ModifyVpnTunnelCertificateInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5969 = writer.prefix("VpnConnectionId");
    if let Some(var_5970) = &input.vpn_connection_id {
        scope_5969.string(var_5970);
    }
    #[allow(unused_mut)]
    let mut scope_5971 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5972) = &input.vpn_tunnel_outside_ip_address {
        scope_5971.string(var_5972);
    }
    #[allow(unused_mut)]
    let mut scope_5973 = writer.prefix("DryRun");
    if let Some(var_5974) = &input.dry_run {
        scope_5973.boolean(*var_5974);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_options(input: &crate::input::ModifyVpnTunnelOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5975 = writer.prefix("VpnConnectionId");
    if let Some(var_5976) = &input.vpn_connection_id {
        scope_5975.string(var_5976);
    }
    #[allow(unused_mut)]
    let mut scope_5977 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5978) = &input.vpn_tunnel_outside_ip_address {
        scope_5977.string(var_5978);
    }
    #[allow(unused_mut)]
    let mut scope_5979 = writer.prefix("TunnelOptions");
    if let Some(var_5980) = &input.tunnel_options {
        crate::query_ser::serialize_structure_crate_model_modify_vpn_tunnel_options_specification(scope_5979, var_5980)?;
    }
    #[allow(unused_mut)]
    let mut scope_5981 = writer.prefix("DryRun");
    if let Some(var_5982) = &input.dry_run {
        scope_5981.boolean(*var_5982);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_monitor_instances(input: &crate::input::MonitorInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5983 = writer.prefix("InstanceId");
    if let Some(var_5984) = &input.instance_ids {
        let mut list_5986 = scope_5983.start_list(true, Some("InstanceId"));
        for item_5985 in var_5984 {
            #[allow(unused_mut)]
            let mut entry_5987 = list_5986.entry();
            entry_5987.string(item_5985);
        }
        list_5986.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5988 = writer.prefix("DryRun");
    if let Some(var_5989) = &input.dry_run {
        scope_5988.boolean(*var_5989);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_address_to_vpc(input: &crate::input::MoveAddressToVpcInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5990 = writer.prefix("DryRun");
    if let Some(var_5991) = &input.dry_run {
        scope_5990.boolean(*var_5991);
    }
    #[allow(unused_mut)]
    let mut scope_5992 = writer.prefix("PublicIp");
    if let Some(var_5993) = &input.public_ip {
        scope_5992.string(var_5993);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_byoip_cidr_to_ipam(input: &crate::input::MoveByoipCidrToIpamInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MoveByoipCidrToIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5994 = writer.prefix("DryRun");
    if let Some(var_5995) = &input.dry_run {
        scope_5994.boolean(*var_5995);
    }
    #[allow(unused_mut)]
    let mut scope_5996 = writer.prefix("Cidr");
    if let Some(var_5997) = &input.cidr {
        scope_5996.string(var_5997);
    }
    #[allow(unused_mut)]
    let mut scope_5998 = writer.prefix("IpamPoolId");
    if let Some(var_5999) = &input.ipam_pool_id {
        scope_5998.string(var_5999);
    }
    #[allow(unused_mut)]
    let mut scope_6000 = writer.prefix("IpamPoolOwner");
    if let Some(var_6001) = &input.ipam_pool_owner {
        scope_6000.string(var_6001);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_byoip_cidr(input: &crate::input::ProvisionByoipCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6002 = writer.prefix("Cidr");
    if let Some(var_6003) = &input.cidr {
        scope_6002.string(var_6003);
    }
    #[allow(unused_mut)]
    let mut scope_6004 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_6005) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_cidr_authorization_context(scope_6004, var_6005)?;
    }
    #[allow(unused_mut)]
    let mut scope_6006 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_6007) = &input.publicly_advertisable {
        scope_6006.boolean(*var_6007);
    }
    #[allow(unused_mut)]
    let mut scope_6008 = writer.prefix("Description");
    if let Some(var_6009) = &input.description {
        scope_6008.string(var_6009);
    }
    #[allow(unused_mut)]
    let mut scope_6010 = writer.prefix("DryRun");
    if let Some(var_6011) = &input.dry_run {
        scope_6010.boolean(*var_6011);
    }
    #[allow(unused_mut)]
    let mut scope_6012 = writer.prefix("PoolTagSpecification");
    if let Some(var_6013) = &input.pool_tag_specifications {
        let mut list_6015 = scope_6012.start_list(true, Some("item"));
        for item_6014 in var_6013 {
            #[allow(unused_mut)]
            let mut entry_6016 = list_6015.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_6016, item_6014)?;
        }
        list_6015.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6017 = writer.prefix("MultiRegion");
    if let Some(var_6018) = &input.multi_region {
        scope_6017.boolean(*var_6018);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_ipam_pool_cidr(input: &crate::input::ProvisionIpamPoolCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ProvisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6019 = writer.prefix("DryRun");
    if let Some(var_6020) = &input.dry_run {
        scope_6019.boolean(*var_6020);
    }
    #[allow(unused_mut)]
    let mut scope_6021 = writer.prefix("IpamPoolId");
    if let Some(var_6022) = &input.ipam_pool_id {
        scope_6021.string(var_6022);
    }
    #[allow(unused_mut)]
    let mut scope_6023 = writer.prefix("Cidr");
    if let Some(var_6024) = &input.cidr {
        scope_6023.string(var_6024);
    }
    #[allow(unused_mut)]
    let mut scope_6025 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_6026) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_ipam_cidr_authorization_context(scope_6025, var_6026)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_public_ipv4_pool_cidr(input: &crate::input::ProvisionPublicIpv4PoolCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ProvisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6027 = writer.prefix("DryRun");
    if let Some(var_6028) = &input.dry_run {
        scope_6027.boolean(*var_6028);
    }
    #[allow(unused_mut)]
    let mut scope_6029 = writer.prefix("IpamPoolId");
    if let Some(var_6030) = &input.ipam_pool_id {
        scope_6029.string(var_6030);
    }
    #[allow(unused_mut)]
    let mut scope_6031 = writer.prefix("PoolId");
    if let Some(var_6032) = &input.pool_id {
        scope_6031.string(var_6032);
    }
    #[allow(unused_mut)]
    let mut scope_6033 = writer.prefix("NetmaskLength");
    if let Some(var_6034) = &input.netmask_length {
        scope_6033.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6034).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_host_reservation(input: &crate::input::PurchaseHostReservationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6035 = writer.prefix("ClientToken");
    if let Some(var_6036) = &input.client_token {
        scope_6035.string(var_6036);
    }
    #[allow(unused_mut)]
    let mut scope_6037 = writer.prefix("CurrencyCode");
    if let Some(var_6038) = &input.currency_code {
        scope_6037.string(var_6038.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_6039 = writer.prefix("HostIdSet");
    if let Some(var_6040) = &input.host_id_set {
        let mut list_6042 = scope_6039.start_list(true, Some("item"));
        for item_6041 in var_6040 {
            #[allow(unused_mut)]
            let mut entry_6043 = list_6042.entry();
            entry_6043.string(item_6041);
        }
        list_6042.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6044 = writer.prefix("LimitPrice");
    if let Some(var_6045) = &input.limit_price {
        scope_6044.string(var_6045);
    }
    #[allow(unused_mut)]
    let mut scope_6046 = writer.prefix("OfferingId");
    if let Some(var_6047) = &input.offering_id {
        scope_6046.string(var_6047);
    }
    #[allow(unused_mut)]
    let mut scope_6048 = writer.prefix("TagSpecification");
    if let Some(var_6049) = &input.tag_specifications {
        let mut list_6051 = scope_6048.start_list(true, Some("item"));
        for item_6050 in var_6049 {
            #[allow(unused_mut)]
            let mut entry_6052 = list_6051.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_6052, item_6050)?;
        }
        list_6051.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_instances_offering(input: &crate::input::PurchaseReservedInstancesOfferingInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PurchaseReservedInstancesOffering", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6053 = writer.prefix("InstanceCount");
    if let Some(var_6054) = &input.instance_count {
        scope_6053.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6054).into()));
    }
    #[allow(unused_mut)]
    let mut scope_6055 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_6056) = &input.reserved_instances_offering_id {
        scope_6055.string(var_6056);
    }
    #[allow(unused_mut)]
    let mut scope_6057 = writer.prefix("DryRun");
    if let Some(var_6058) = &input.dry_run {
        scope_6057.boolean(*var_6058);
    }
    #[allow(unused_mut)]
    let mut scope_6059 = writer.prefix("LimitPrice");
    if let Some(var_6060) = &input.limit_price {
        crate::query_ser::serialize_structure_crate_model_reserved_instance_limit_price(scope_6059, var_6060)?;
    }
    #[allow(unused_mut)]
    let mut scope_6061 = writer.prefix("PurchaseTime");
    if let Some(var_6062) = &input.purchase_time {
        scope_6061.date_time(var_6062, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_scheduled_instances(input: &crate::input::PurchaseScheduledInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6063 = writer.prefix("ClientToken");
    if let Some(var_6064) = &input.client_token {
        scope_6063.string(var_6064);
    }
    #[allow(unused_mut)]
    let mut scope_6065 = writer.prefix("DryRun");
    if let Some(var_6066) = &input.dry_run {
        scope_6065.boolean(*var_6066);
    }
    #[allow(unused_mut)]
    let mut scope_6067 = writer.prefix("PurchaseRequest");
    if let Some(var_6068) = &input.purchase_requests {
        let mut list_6070 = scope_6067.start_list(true, Some("PurchaseRequest"));
        for item_6069 in var_6068 {
            #[allow(unused_mut)]
            let mut entry_6071 = list_6070.entry();
            crate::query_ser::serialize_structure_crate_model_purchase_request(entry_6071, item_6069)?;
        }
        list_6070.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_instances(input: &crate::input::RebootInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6072 = writer.prefix("InstanceId");
    if let Some(var_6073) = &input.instance_ids {
        let mut list_6075 = scope_6072.start_list(true, Some("InstanceId"));
        for item_6074 in var_6073 {
            #[allow(unused_mut)]
            let mut entry_6076 = list_6075.entry();
            entry_6076.string(item_6074);
        }
        list_6075.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6077 = writer.prefix("DryRun");
    if let Some(var_6078) = &input.dry_run {
        scope_6077.boolean(*var_6078);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_image(input: &crate::input::RegisterImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6079 = writer.prefix("ImageLocation");
    if let Some(var_6080) = &input.image_location {
        scope_6079.string(var_6080);
    }
    #[allow(unused_mut)]
    let mut scope_6081 = writer.prefix("Architecture");
    if let Some(var_6082) = &input.architecture {
        scope_6081.string(var_6082.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_6083 = writer.prefix("BlockDeviceMapping");
    if let Some(var_6084) = &input.block_device_mappings {
        let mut list_6086 = scope_6083.start_list(true, Some("BlockDeviceMapping"));
        for item_6085 in var_6084 {
            #[allow(unused_mut)]
            let mut entry_6087 = list_6086.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(entry_6087, item_6085)?;
        }
        list_6086.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6088 = writer.prefix("Description");
    if let Some(var_6089) = &input.description {
        scope_6088.string(var_6089);
    }
    #[allow(unused_mut)]
    let mut scope_6090 = writer.prefix("DryRun");
    if let Some(var_6091) = &input.dry_run {
        scope_6090.boolean(*var_6091);
    }
    #[allow(unused_mut)]
    let mut scope_6092 = writer.prefix("EnaSupport");
    if let Some(var_6093) = &input.ena_support {
        scope_6092.boolean(*var_6093);
    }
    #[allow(unused_mut)]
    let mut scope_6094 = writer.prefix("KernelId");
    if let Some(var_6095) = &input.kernel_id {
        scope_6094.string(var_6095);
    }
    #[allow(unused_mut)]
    let mut scope_6096 = writer.prefix("Name");
    if let Some(var_6097) = &input.name {
        scope_6096.string(var_6097);
    }
    #[allow(unused_mut)]
    let mut scope_6098 = writer.prefix("BillingProduct");
    if let Some(var_6099) = &input.billing_products {
        let mut list_6101 = scope_6098.start_list(true, Some("item"));
        for item_6100 in var_6099 {
            #[allow(unused_mut)]
            let mut entry_6102 = list_6101.entry();
            entry_6102.string(item_6100);
        }
        list_6101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6103 = writer.prefix("RamdiskId");
    if let Some(var_6104) = &input.ramdisk_id {
        scope_6103.string(var_6104);
    }
    #[allow(unused_mut)]
    let mut scope_6105 = writer.prefix("RootDeviceName");
    if let Some(var_6106) = &input.root_device_name {
        scope_6105.string(var_6106);
    }
    #[allow(unused_mut)]
    let mut scope_6107 = writer.prefix("SriovNetSupport");
    if let Some(var_6108) = &input.sriov_net_support {
        scope_6107.string(var_6108);
    }
    #[allow(unused_mut)]
    let mut scope_6109 = writer.prefix("VirtualizationType");
    if let Some(var_6110) = &input.virtualization_type {
        scope_6109.string(var_6110);
    }
    #[allow(unused_mut)]
    let mut scope_6111 = writer.prefix("BootMode");
    if let Some(var_6112) = &input.boot_mode {
        scope_6111.string(var_6112.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_6113 = writer.prefix("TpmSupport");
    if let Some(var_6114) = &input.tpm_support {
        scope_6113.string(var_6114.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_6115 = writer.prefix("UefiData");
    if let Some(var_6116) = &input.uefi_data {
        scope_6115.string(var_6116);
    }
    #[allow(unused_mut)]
    let mut scope_6117 = writer.prefix("ImdsSupport");
    if let Some(var_6118) = &input.imds_support {
        scope_6117.string(var_6118.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_instance_event_notification_attributes(input: &crate::input::RegisterInstanceEventNotificationAttributesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterInstanceEventNotificationAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6119 = writer.prefix("DryRun");
    if let Some(var_6120) = &input.dry_run {
        scope_6119.boolean(*var_6120);
    }
    #[allow(unused_mut)]
    let mut scope_6121 = writer.prefix("InstanceTagAttribute");
    if let Some(var_6122) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_register_instance_tag_attribute_request(scope_6121, var_6122)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_members(input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterTransitGatewayMulticastGroupMembers", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6123 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_6124) = &input.transit_gateway_multicast_domain_id {
        scope_6123.string(var_6124);
    }
    #[allow(unused_mut)]
    let mut scope_6125 = writer.prefix("GroupIpAddress");
    if let Some(var_6126) = &input.group_ip_address {
        scope_6125.string(var_6126);
    }
    #[allow(unused_mut)]
    let mut scope_6127 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_6128) = &input.network_interface_ids {
        let mut list_6130 = scope_6127.start_list(true, Some("item"));
        for item_6129 in var_6128 {
            #[allow(unused_mut)]
            let mut entry_6131 = list_6130.entry();
            entry_6131.string(item_6129);
        }
        list_6130.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6132 = writer.prefix("DryRun");
    if let Some(var_6133) = &input.dry_run {
        scope_6132.boolean(*var_6133);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_sources(input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterTransitGatewayMulticastGroupSources", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6134 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_6135) = &input.transit_gateway_multicast_domain_id {
        scope_6134.string(var_6135);
    }
    #[allow(unused_mut)]
    let mut scope_6136 = writer.prefix("GroupIpAddress");
    if let Some(var_6137) = &input.group_ip_address {
        scope_6136.string(var_6137);
    }
    #[allow(unused_mut)]
    let mut scope_6138 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_6139) = &input.network_interface_ids {
        let mut list_6141 = scope_6138.start_list(true, Some("item"));
        for item_6140 in var_6139 {
            #[allow(unused_mut)]
            let mut entry_6142 = list_6141.entry();
            entry_6142.string(item_6140);
        }
        list_6141.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6143 = writer.prefix("DryRun");
    if let Some(var_6144) = &input.dry_run {
        scope_6143.boolean(*var_6144);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_multicast_domain_associations(input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RejectTransitGatewayMulticastDomainAssociations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6145 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_6146) = &input.transit_gateway_multicast_domain_id {
        scope_6145.string(var_6146);
    }
    #[allow(unused_mut)]
    let mut scope_6147 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_6148) = &input.transit_gateway_attachment_id {
        scope_6147.string(var_6148);
    }
    #[allow(unused_mut)]
    let mut scope_6149 = writer.prefix("SubnetIds");
    if let Some(var_6150) = &input.subnet_ids {
        let mut list_6152 = scope_6149.start_list(true, Some("item"));
        for item_6151 in var_6150 {
            #[allow(unused_mut)]
            let mut entry_6153 = list_6152.entry();
            entry_6153.string(item_6151);
        }
        list_6152.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6154 = writer.prefix("DryRun");
    if let Some(var_6155) = &input.dry_run {
        scope_6154.boolean(*var_6155);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_peering_attachment(input: &crate::input::RejectTransitGatewayPeeringAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RejectTransitGatewayPeeringAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6156 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_6157) = &input.transit_gateway_attachment_id {
        scope_6156.string(var_6157);
    }
    #[allow(unused_mut)]
    let mut scope_6158 = writer.prefix("DryRun");
    if let Some(var_6159) = &input.dry_run {
        scope_6158.boolean(*var_6159);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_vpc_attachment(input: &crate::input::RejectTransitGatewayVpcAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RejectTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6160 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_6161) = &input.transit_gateway_attachment_id {
        scope_6160.string(var_6161);
    }
    #[allow(unused_mut)]
    let mut scope_6162 = writer.prefix("DryRun");
    if let Some(var_6163) = &input.dry_run {
        scope_6162.boolean(*var_6163);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_endpoint_connections(input: &crate::input::RejectVpcEndpointConnectionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6164 = writer.prefix("DryRun");
    if let Some(var_6165) = &input.dry_run {
        scope_6164.boolean(*var_6165);
    }
    #[allow(unused_mut)]
    let mut scope_6166 = writer.prefix("ServiceId");
    if let Some(var_6167) = &input.service_id {
        scope_6166.string(var_6167);
    }
    #[allow(unused_mut)]
    let mut scope_6168 = writer.prefix("VpcEndpointId");
    if let Some(var_6169) = &input.vpc_endpoint_ids {
        let mut list_6171 = scope_6168.start_list(true, Some("item"));
        for item_6170 in var_6169 {
            #[allow(unused_mut)]
            let mut entry_6172 = list_6171.entry();
            entry_6172.string(item_6170);
        }
        list_6171.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_peering_connection(input: &crate::input::RejectVpcPeeringConnectionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6173 = writer.prefix("DryRun");
    if let Some(var_6174) = &input.dry_run {
        scope_6173.boolean(*var_6174);
    }
    #[allow(unused_mut)]
    let mut scope_6175 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_6176) = &input.vpc_peering_connection_id {
        scope_6175.string(var_6176);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_address(input: &crate::input::ReleaseAddressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6177 = writer.prefix("AllocationId");
    if let Some(var_6178) = &input.allocation_id {
        scope_6177.string(var_6178);
    }
    #[allow(unused_mut)]
    let mut scope_6179 = writer.prefix("PublicIp");
    if let Some(var_6180) = &input.public_ip {
        scope_6179.string(var_6180);
    }
    #[allow(unused_mut)]
    let mut scope_6181 = writer.prefix("NetworkBorderGroup");
    if let Some(var_6182) = &input.network_border_group {
        scope_6181.string(var_6182);
    }
    #[allow(unused_mut)]
    let mut scope_6183 = writer.prefix("DryRun");
    if let Some(var_6184) = &input.dry_run {
        scope_6183.boolean(*var_6184);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_hosts(input: &crate::input::ReleaseHostsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6185 = writer.prefix("HostId");
    if let Some(var_6186) = &input.host_ids {
        let mut list_6188 = scope_6185.start_list(true, Some("item"));
        for item_6187 in var_6186 {
            #[allow(unused_mut)]
            let mut entry_6189 = list_6188.entry();
            entry_6189.string(item_6187);
        }
        list_6188.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_ipam_pool_allocation(input: &crate::input::ReleaseIpamPoolAllocationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseIpamPoolAllocation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6190 = writer.prefix("DryRun");
    if let Some(var_6191) = &input.dry_run {
        scope_6190.boolean(*var_6191);
    }
    #[allow(unused_mut)]
    let mut scope_6192 = writer.prefix("IpamPoolId");
    if let Some(var_6193) = &input.ipam_pool_id {
        scope_6192.string(var_6193);
    }
    #[allow(unused_mut)]
    let mut scope_6194 = writer.prefix("Cidr");
    if let Some(var_6195) = &input.cidr {
        scope_6194.string(var_6195);
    }
    #[allow(unused_mut)]
    let mut scope_6196 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_6197) = &input.ipam_pool_allocation_id {
        scope_6196.string(var_6197);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_iam_instance_profile_association(input: &crate::input::ReplaceIamInstanceProfileAssociationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceIamInstanceProfileAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6198 = writer.prefix("IamInstanceProfile");
    if let Some(var_6199) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(scope_6198, var_6199)?;
    }
    #[allow(unused_mut)]
    let mut scope_6200 = writer.prefix("AssociationId");
    if let Some(var_6201) = &input.association_id {
        scope_6200.string(var_6201);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_association(input: &crate::input::ReplaceNetworkAclAssociationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6202 = writer.prefix("AssociationId");
    if let Some(var_6203) = &input.association_id {
        scope_6202.string(var_6203);
    }
    #[allow(unused_mut)]
    let mut scope_6204 = writer.prefix("DryRun");
    if let Some(var_6205) = &input.dry_run {
        scope_6204.boolean(*var_6205);
    }
    #[allow(unused_mut)]
    let mut scope_6206 = writer.prefix("NetworkAclId");
    if let Some(var_6207) = &input.network_acl_id {
        scope_6206.string(var_6207);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_entry(input: &crate::input::ReplaceNetworkAclEntryInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6208 = writer.prefix("CidrBlock");
    if let Some(var_6209) = &input.cidr_block {
        scope_6208.string(var_6209);
    }
    #[allow(unused_mut)]
    let mut scope_6210 = writer.prefix("DryRun");
    if let Some(var_6211) = &input.dry_run {
        scope_6210.boolean(*var_6211);
    }
    #[allow(unused_mut)]
    let mut scope_6212 = writer.prefix("Egress");
    if let Some(var_6213) = &input.egress {
        scope_6212.boolean(*var_6213);
    }
    #[allow(unused_mut)]
    let mut scope_6214 = writer.prefix("Icmp");
    if let Some(var_6215) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_6214, var_6215)?;
    }
    #[allow(unused_mut)]
    let mut scope_6216 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_6217) = &input.ipv6_cidr_block {
        scope_6216.string(var_6217);
    }
    #[allow(unused_mut)]
    let mut scope_6218 = writer.prefix("NetworkAclId");
    if let Some(var_6219) = &input.network_acl_id {
        scope_6218.string(var_6219);
    }
    #[allow(unused_mut)]
    let mut scope_6220 = writer.prefix("PortRange");
    if let Some(var_6221) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_6220, var_6221)?;
    }
    #[allow(unused_mut)]
    let mut scope_6222 = writer.prefix("Protocol");
    if let Some(var_6223) = &input.protocol {
        scope_6222.string(var_6223);
    }
    #[allow(unused_mut)]
    let mut scope_6224 = writer.prefix("RuleAction");
    if let Some(var_6225) = &input.rule_action {
        scope_6224.string(var_6225.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_6226 = writer.prefix("RuleNumber");
    if let Some(var_6227) = &input.rule_number {
        scope_6226.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6227).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route(input: &crate::input::ReplaceRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6228 = writer.prefix("DestinationCidrBlock");
    if let Some(var_6229) = &input.destination_cidr_block {
        scope_6228.string(var_6229);
    }
    #[allow(unused_mut)]
    let mut scope_6230 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_6231) = &input.destination_ipv6_cidr_block {
        scope_6230.string(var_6231);
    }
    #[allow(unused_mut)]
    let mut scope_6232 = writer.prefix("DestinationPrefixListId");
    if let Some(var_6233) = &input.destination_prefix_list_id {
        scope_6232.string(var_6233);
    }
    #[allow(unused_mut)]
    let mut scope_6234 = writer.prefix("DryRun");
    if let Some(var_6235) = &input.dry_run {
        scope_6234.boolean(*var_6235);
    }
    #[allow(unused_mut)]
    let mut scope_6236 = writer.prefix("VpcEndpointId");
    if let Some(var_6237) = &input.vpc_endpoint_id {
        scope_6236.string(var_6237);
    }
    #[allow(unused_mut)]
    let mut scope_6238 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_6239) = &input.egress_only_internet_gateway_id {
        scope_6238.string(var_6239);
    }
    #[allow(unused_mut)]
    let mut scope_6240 = writer.prefix("GatewayId");
    if let Some(var_6241) = &input.gateway_id {
        scope_6240.string(var_6241);
    }
    #[allow(unused_mut)]
    let mut scope_6242 = writer.prefix("InstanceId");
    if let Some(var_6243) = &input.instance_id {
        scope_6242.string(var_6243);
    }
    #[allow(unused_mut)]
    let mut scope_6244 = writer.prefix("LocalTarget");
    if let Some(var_6245) = &input.local_target {
        scope_6244.boolean(*var_6245);
    }
    #[allow(unused_mut)]
    let mut scope_6246 = writer.prefix("NatGatewayId");
    if let Some(var_6247) = &input.nat_gateway_id {
        scope_6246.string(var_6247);
    }
    #[allow(unused_mut)]
    let mut scope_6248 = writer.prefix("TransitGatewayId");
    if let Some(var_6249) = &input.transit_gateway_id {
        scope_6248.string(var_6249);
    }
    #[allow(unused_mut)]
    let mut scope_6250 = writer.prefix("LocalGatewayId");
    if let Some(var_6251) = &input.local_gateway_id {
        scope_6250.string(var_6251);
    }
    #[allow(unused_mut)]
    let mut scope_6252 = writer.prefix("CarrierGatewayId");
    if let Some(var_6253) = &input.carrier_gateway_id {
        scope_6252.string(var_6253);
    }
    #[allow(unused_mut)]
    let mut scope_6254 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6255) = &input.network_interface_id {
        scope_6254.string(var_6255);
    }
    #[allow(unused_mut)]
    let mut scope_6256 = writer.prefix("RouteTableId");
    if let Some(var_6257) = &input.route_table_id {
        scope_6256.string(var_6257);
    }
    #[allow(unused_mut)]
    let mut scope_6258 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_6259) = &input.vpc_peering_connection_id {
        scope_6258.string(var_6259);
    }
    #[allow(unused_mut)]
    let mut scope_6260 = writer.prefix("CoreNetworkArn");
    if let Some(var_6261) = &input.core_network_arn {
        scope_6260.string(var_6261);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route_table_association(input: &crate::input::ReplaceRouteTableAssociationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6262 = writer.prefix("AssociationId");
    if let Some(var_6263) = &input.association_id {
        scope_6262.string(var_6263);
    }
    #[allow(unused_mut)]
    let mut scope_6264 = writer.prefix("DryRun");
    if let Some(var_6265) = &input.dry_run {
        scope_6264.boolean(*var_6265);
    }
    #[allow(unused_mut)]
    let mut scope_6266 = writer.prefix("RouteTableId");
    if let Some(var_6267) = &input.route_table_id {
        scope_6266.string(var_6267);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_transit_gateway_route(input: &crate::input::ReplaceTransitGatewayRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6268 = writer.prefix("DestinationCidrBlock");
    if let Some(var_6269) = &input.destination_cidr_block {
        scope_6268.string(var_6269);
    }
    #[allow(unused_mut)]
    let mut scope_6270 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_6271) = &input.transit_gateway_route_table_id {
        scope_6270.string(var_6271);
    }
    #[allow(unused_mut)]
    let mut scope_6272 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_6273) = &input.transit_gateway_attachment_id {
        scope_6272.string(var_6273);
    }
    #[allow(unused_mut)]
    let mut scope_6274 = writer.prefix("Blackhole");
    if let Some(var_6275) = &input.blackhole {
        scope_6274.boolean(*var_6275);
    }
    #[allow(unused_mut)]
    let mut scope_6276 = writer.prefix("DryRun");
    if let Some(var_6277) = &input.dry_run {
        scope_6276.boolean(*var_6277);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_report_instance_status(input: &crate::input::ReportInstanceStatusInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6278 = writer.prefix("Description");
    if let Some(var_6279) = &input.description {
        scope_6278.string(var_6279);
    }
    #[allow(unused_mut)]
    let mut scope_6280 = writer.prefix("DryRun");
    if let Some(var_6281) = &input.dry_run {
        scope_6280.boolean(*var_6281);
    }
    #[allow(unused_mut)]
    let mut scope_6282 = writer.prefix("EndTime");
    if let Some(var_6283) = &input.end_time {
        scope_6282.date_time(var_6283, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_6284 = writer.prefix("InstanceId");
    if let Some(var_6285) = &input.instances {
        let mut list_6287 = scope_6284.start_list(true, Some("InstanceId"));
        for item_6286 in var_6285 {
            #[allow(unused_mut)]
            let mut entry_6288 = list_6287.entry();
            entry_6288.string(item_6286);
        }
        list_6287.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6289 = writer.prefix("ReasonCode");
    if let Some(var_6290) = &input.reason_codes {
        let mut list_6292 = scope_6289.start_list(true, Some("item"));
        for item_6291 in var_6290 {
            #[allow(unused_mut)]
            let mut entry_6293 = list_6292.entry();
            entry_6293.string(item_6291.as_str());
        }
        list_6292.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6294 = writer.prefix("StartTime");
    if let Some(var_6295) = &input.start_time {
        scope_6294.date_time(var_6295, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_6296 = writer.prefix("Status");
    if let Some(var_6297) = &input.status {
        scope_6296.string(var_6297.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_fleet(input: &crate::input::RequestSpotFleetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6298 = writer.prefix("DryRun");
    if let Some(var_6299) = &input.dry_run {
        scope_6298.boolean(*var_6299);
    }
    #[allow(unused_mut)]
    let mut scope_6300 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_6301) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_request_config_data(scope_6300, var_6301)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_instances(input: &crate::input::RequestSpotInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6302 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_6303) = &input.availability_zone_group {
        scope_6302.string(var_6303);
    }
    #[allow(unused_mut)]
    let mut scope_6304 = writer.prefix("BlockDurationMinutes");
    if let Some(var_6305) = &input.block_duration_minutes {
        scope_6304.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6305).into()));
    }
    #[allow(unused_mut)]
    let mut scope_6306 = writer.prefix("ClientToken");
    if let Some(var_6307) = &input.client_token {
        scope_6306.string(var_6307);
    }
    #[allow(unused_mut)]
    let mut scope_6308 = writer.prefix("DryRun");
    if let Some(var_6309) = &input.dry_run {
        scope_6308.boolean(*var_6309);
    }
    #[allow(unused_mut)]
    let mut scope_6310 = writer.prefix("InstanceCount");
    if let Some(var_6311) = &input.instance_count {
        scope_6310.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6311).into()));
    }
    #[allow(unused_mut)]
    let mut scope_6312 = writer.prefix("LaunchGroup");
    if let Some(var_6313) = &input.launch_group {
        scope_6312.string(var_6313);
    }
    #[allow(unused_mut)]
    let mut scope_6314 = writer.prefix("LaunchSpecification");
    if let Some(var_6315) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_request_spot_launch_specification(scope_6314, var_6315)?;
    }
    #[allow(unused_mut)]
    let mut scope_6316 = writer.prefix("SpotPrice");
    if let Some(var_6317) = &input.spot_price {
        scope_6316.string(var_6317);
    }
    #[allow(unused_mut)]
    let mut scope_6318 = writer.prefix("Type");
    if let Some(var_6319) = &input.r#type {
        scope_6318.string(var_6319.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_6320 = writer.prefix("ValidFrom");
    if let Some(var_6321) = &input.valid_from {
        scope_6320.date_time(var_6321, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_6322 = writer.prefix("ValidUntil");
    if let Some(var_6323) = &input.valid_until {
        scope_6322.date_time(var_6323, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_6324 = writer.prefix("TagSpecification");
    if let Some(var_6325) = &input.tag_specifications {
        let mut list_6327 = scope_6324.start_list(true, Some("item"));
        for item_6326 in var_6325 {
            #[allow(unused_mut)]
            let mut entry_6328 = list_6327.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_6328, item_6326)?;
        }
        list_6327.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6329 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_6330) = &input.instance_interruption_behavior {
        scope_6329.string(var_6330.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_address_attribute(input: &crate::input::ResetAddressAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6331 = writer.prefix("AllocationId");
    if let Some(var_6332) = &input.allocation_id {
        scope_6331.string(var_6332);
    }
    #[allow(unused_mut)]
    let mut scope_6333 = writer.prefix("Attribute");
    if let Some(var_6334) = &input.attribute {
        scope_6333.string(var_6334.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_6335 = writer.prefix("DryRun");
    if let Some(var_6336) = &input.dry_run {
        scope_6335.boolean(*var_6336);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_ebs_default_kms_key_id(input: &crate::input::ResetEbsDefaultKmsKeyIdInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6337 = writer.prefix("DryRun");
    if let Some(var_6338) = &input.dry_run {
        scope_6337.boolean(*var_6338);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_fpga_image_attribute(input: &crate::input::ResetFpgaImageAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6339 = writer.prefix("DryRun");
    if let Some(var_6340) = &input.dry_run {
        scope_6339.boolean(*var_6340);
    }
    #[allow(unused_mut)]
    let mut scope_6341 = writer.prefix("FpgaImageId");
    if let Some(var_6342) = &input.fpga_image_id {
        scope_6341.string(var_6342);
    }
    #[allow(unused_mut)]
    let mut scope_6343 = writer.prefix("Attribute");
    if let Some(var_6344) = &input.attribute {
        scope_6343.string(var_6344.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_image_attribute(input: &crate::input::ResetImageAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6345 = writer.prefix("Attribute");
    if let Some(var_6346) = &input.attribute {
        scope_6345.string(var_6346.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_6347 = writer.prefix("ImageId");
    if let Some(var_6348) = &input.image_id {
        scope_6347.string(var_6348);
    }
    #[allow(unused_mut)]
    let mut scope_6349 = writer.prefix("DryRun");
    if let Some(var_6350) = &input.dry_run {
        scope_6349.boolean(*var_6350);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_instance_attribute(input: &crate::input::ResetInstanceAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6351 = writer.prefix("Attribute");
    if let Some(var_6352) = &input.attribute {
        scope_6351.string(var_6352.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_6353 = writer.prefix("DryRun");
    if let Some(var_6354) = &input.dry_run {
        scope_6353.boolean(*var_6354);
    }
    #[allow(unused_mut)]
    let mut scope_6355 = writer.prefix("InstanceId");
    if let Some(var_6356) = &input.instance_id {
        scope_6355.string(var_6356);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_network_interface_attribute(input: &crate::input::ResetNetworkInterfaceAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResetNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6357 = writer.prefix("DryRun");
    if let Some(var_6358) = &input.dry_run {
        scope_6357.boolean(*var_6358);
    }
    #[allow(unused_mut)]
    let mut scope_6359 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6360) = &input.network_interface_id {
        scope_6359.string(var_6360);
    }
    #[allow(unused_mut)]
    let mut scope_6361 = writer.prefix("SourceDestCheck");
    if let Some(var_6362) = &input.source_dest_check {
        scope_6361.string(var_6362);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_snapshot_attribute(input: &crate::input::ResetSnapshotAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6363 = writer.prefix("Attribute");
    if let Some(var_6364) = &input.attribute {
        scope_6363.string(var_6364.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_6365 = writer.prefix("SnapshotId");
    if let Some(var_6366) = &input.snapshot_id {
        scope_6365.string(var_6366);
    }
    #[allow(unused_mut)]
    let mut scope_6367 = writer.prefix("DryRun");
    if let Some(var_6368) = &input.dry_run {
        scope_6367.boolean(*var_6368);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_address_to_classic(input: &crate::input::RestoreAddressToClassicInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6369 = writer.prefix("DryRun");
    if let Some(var_6370) = &input.dry_run {
        scope_6369.boolean(*var_6370);
    }
    #[allow(unused_mut)]
    let mut scope_6371 = writer.prefix("PublicIp");
    if let Some(var_6372) = &input.public_ip {
        scope_6371.string(var_6372);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_image_from_recycle_bin(input: &crate::input::RestoreImageFromRecycleBinInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RestoreImageFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6373 = writer.prefix("ImageId");
    if let Some(var_6374) = &input.image_id {
        scope_6373.string(var_6374);
    }
    #[allow(unused_mut)]
    let mut scope_6375 = writer.prefix("DryRun");
    if let Some(var_6376) = &input.dry_run {
        scope_6375.boolean(*var_6376);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_managed_prefix_list_version(input: &crate::input::RestoreManagedPrefixListVersionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RestoreManagedPrefixListVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6377 = writer.prefix("DryRun");
    if let Some(var_6378) = &input.dry_run {
        scope_6377.boolean(*var_6378);
    }
    #[allow(unused_mut)]
    let mut scope_6379 = writer.prefix("PrefixListId");
    if let Some(var_6380) = &input.prefix_list_id {
        scope_6379.string(var_6380);
    }
    #[allow(unused_mut)]
    let mut scope_6381 = writer.prefix("PreviousVersion");
    if let Some(var_6382) = &input.previous_version {
        scope_6381.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6382).into()));
    }
    #[allow(unused_mut)]
    let mut scope_6383 = writer.prefix("CurrentVersion");
    if let Some(var_6384) = &input.current_version {
        scope_6383.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6384).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_from_recycle_bin(input: &crate::input::RestoreSnapshotFromRecycleBinInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6385 = writer.prefix("SnapshotId");
    if let Some(var_6386) = &input.snapshot_id {
        scope_6385.string(var_6386);
    }
    #[allow(unused_mut)]
    let mut scope_6387 = writer.prefix("DryRun");
    if let Some(var_6388) = &input.dry_run {
        scope_6387.boolean(*var_6388);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_tier(input: &crate::input::RestoreSnapshotTierInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6389 = writer.prefix("SnapshotId");
    if let Some(var_6390) = &input.snapshot_id {
        scope_6389.string(var_6390);
    }
    #[allow(unused_mut)]
    let mut scope_6391 = writer.prefix("TemporaryRestoreDays");
    if let Some(var_6392) = &input.temporary_restore_days {
        scope_6391.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6392).into()));
    }
    #[allow(unused_mut)]
    let mut scope_6393 = writer.prefix("PermanentRestore");
    if let Some(var_6394) = &input.permanent_restore {
        scope_6393.boolean(*var_6394);
    }
    #[allow(unused_mut)]
    let mut scope_6395 = writer.prefix("DryRun");
    if let Some(var_6396) = &input.dry_run {
        scope_6395.boolean(*var_6396);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_client_vpn_ingress(input: &crate::input::RevokeClientVpnIngressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6397 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_6398) = &input.client_vpn_endpoint_id {
        scope_6397.string(var_6398);
    }
    #[allow(unused_mut)]
    let mut scope_6399 = writer.prefix("TargetNetworkCidr");
    if let Some(var_6400) = &input.target_network_cidr {
        scope_6399.string(var_6400);
    }
    #[allow(unused_mut)]
    let mut scope_6401 = writer.prefix("AccessGroupId");
    if let Some(var_6402) = &input.access_group_id {
        scope_6401.string(var_6402);
    }
    #[allow(unused_mut)]
    let mut scope_6403 = writer.prefix("RevokeAllGroups");
    if let Some(var_6404) = &input.revoke_all_groups {
        scope_6403.boolean(*var_6404);
    }
    #[allow(unused_mut)]
    let mut scope_6405 = writer.prefix("DryRun");
    if let Some(var_6406) = &input.dry_run {
        scope_6405.boolean(*var_6406);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_egress(input: &crate::input::RevokeSecurityGroupEgressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6407 = writer.prefix("DryRun");
    if let Some(var_6408) = &input.dry_run {
        scope_6407.boolean(*var_6408);
    }
    #[allow(unused_mut)]
    let mut scope_6409 = writer.prefix("GroupId");
    if let Some(var_6410) = &input.group_id {
        scope_6409.string(var_6410);
    }
    #[allow(unused_mut)]
    let mut scope_6411 = writer.prefix("IpPermissions");
    if let Some(var_6412) = &input.ip_permissions {
        let mut list_6414 = scope_6411.start_list(true, Some("item"));
        for item_6413 in var_6412 {
            #[allow(unused_mut)]
            let mut entry_6415 = list_6414.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6415, item_6413)?;
        }
        list_6414.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6416 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_6417) = &input.security_group_rule_ids {
        let mut list_6419 = scope_6416.start_list(true, Some("item"));
        for item_6418 in var_6417 {
            #[allow(unused_mut)]
            let mut entry_6420 = list_6419.entry();
            entry_6420.string(item_6418);
        }
        list_6419.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6421 = writer.prefix("CidrIp");
    if let Some(var_6422) = &input.cidr_ip {
        scope_6421.string(var_6422);
    }
    #[allow(unused_mut)]
    let mut scope_6423 = writer.prefix("FromPort");
    if let Some(var_6424) = &input.from_port {
        scope_6423.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6424).into()));
    }
    #[allow(unused_mut)]
    let mut scope_6425 = writer.prefix("IpProtocol");
    if let Some(var_6426) = &input.ip_protocol {
        scope_6425.string(var_6426);
    }
    #[allow(unused_mut)]
    let mut scope_6427 = writer.prefix("ToPort");
    if let Some(var_6428) = &input.to_port {
        scope_6427.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6428).into()));
    }
    #[allow(unused_mut)]
    let mut scope_6429 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_6430) = &input.source_security_group_name {
        scope_6429.string(var_6430);
    }
    #[allow(unused_mut)]
    let mut scope_6431 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_6432) = &input.source_security_group_owner_id {
        scope_6431.string(var_6432);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_ingress(input: &crate::input::RevokeSecurityGroupIngressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6433 = writer.prefix("CidrIp");
    if let Some(var_6434) = &input.cidr_ip {
        scope_6433.string(var_6434);
    }
    #[allow(unused_mut)]
    let mut scope_6435 = writer.prefix("FromPort");
    if let Some(var_6436) = &input.from_port {
        scope_6435.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6436).into()));
    }
    #[allow(unused_mut)]
    let mut scope_6437 = writer.prefix("GroupId");
    if let Some(var_6438) = &input.group_id {
        scope_6437.string(var_6438);
    }
    #[allow(unused_mut)]
    let mut scope_6439 = writer.prefix("GroupName");
    if let Some(var_6440) = &input.group_name {
        scope_6439.string(var_6440);
    }
    #[allow(unused_mut)]
    let mut scope_6441 = writer.prefix("IpPermissions");
    if let Some(var_6442) = &input.ip_permissions {
        let mut list_6444 = scope_6441.start_list(true, Some("item"));
        for item_6443 in var_6442 {
            #[allow(unused_mut)]
            let mut entry_6445 = list_6444.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6445, item_6443)?;
        }
        list_6444.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6446 = writer.prefix("IpProtocol");
    if let Some(var_6447) = &input.ip_protocol {
        scope_6446.string(var_6447);
    }
    #[allow(unused_mut)]
    let mut scope_6448 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_6449) = &input.source_security_group_name {
        scope_6448.string(var_6449);
    }
    #[allow(unused_mut)]
    let mut scope_6450 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_6451) = &input.source_security_group_owner_id {
        scope_6450.string(var_6451);
    }
    #[allow(unused_mut)]
    let mut scope_6452 = writer.prefix("ToPort");
    if let Some(var_6453) = &input.to_port {
        scope_6452.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6453).into()));
    }
    #[allow(unused_mut)]
    let mut scope_6454 = writer.prefix("DryRun");
    if let Some(var_6455) = &input.dry_run {
        scope_6454.boolean(*var_6455);
    }
    #[allow(unused_mut)]
    let mut scope_6456 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_6457) = &input.security_group_rule_ids {
        let mut list_6459 = scope_6456.start_list(true, Some("item"));
        for item_6458 in var_6457 {
            #[allow(unused_mut)]
            let mut entry_6460 = list_6459.entry();
            entry_6460.string(item_6458);
        }
        list_6459.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_instances(input: &crate::input::RunInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6461 = writer.prefix("BlockDeviceMapping");
    if let Some(var_6462) = &input.block_device_mappings {
        let mut list_6464 = scope_6461.start_list(true, Some("BlockDeviceMapping"));
        for item_6463 in var_6462 {
            #[allow(unused_mut)]
            let mut entry_6465 = list_6464.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(entry_6465, item_6463)?;
        }
        list_6464.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6466 = writer.prefix("ImageId");
    if let Some(var_6467) = &input.image_id {
        scope_6466.string(var_6467);
    }
    #[allow(unused_mut)]
    let mut scope_6468 = writer.prefix("InstanceType");
    if let Some(var_6469) = &input.instance_type {
        scope_6468.string(var_6469.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_6470 = writer.prefix("Ipv6AddressCount");
    if let Some(var_6471) = &input.ipv6_address_count {
        scope_6470.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6471).into()));
    }
    #[allow(unused_mut)]
    let mut scope_6472 = writer.prefix("Ipv6Address");
    if let Some(var_6473) = &input.ipv6_addresses {
        let mut list_6475 = scope_6472.start_list(true, Some("item"));
        for item_6474 in var_6473 {
            #[allow(unused_mut)]
            let mut entry_6476 = list_6475.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(entry_6476, item_6474)?;
        }
        list_6475.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6477 = writer.prefix("KernelId");
    if let Some(var_6478) = &input.kernel_id {
        scope_6477.string(var_6478);
    }
    #[allow(unused_mut)]
    let mut scope_6479 = writer.prefix("KeyName");
    if let Some(var_6480) = &input.key_name {
        scope_6479.string(var_6480);
    }
    #[allow(unused_mut)]
    let mut scope_6481 = writer.prefix("MaxCount");
    if let Some(var_6482) = &input.max_count {
        scope_6481.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6482).into()));
    }
    #[allow(unused_mut)]
    let mut scope_6483 = writer.prefix("MinCount");
    if let Some(var_6484) = &input.min_count {
        scope_6483.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6484).into()));
    }
    #[allow(unused_mut)]
    let mut scope_6485 = writer.prefix("Monitoring");
    if let Some(var_6486) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(scope_6485, var_6486)?;
    }
    #[allow(unused_mut)]
    let mut scope_6487 = writer.prefix("Placement");
    if let Some(var_6488) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_6487, var_6488)?;
    }
    #[allow(unused_mut)]
    let mut scope_6489 = writer.prefix("RamdiskId");
    if let Some(var_6490) = &input.ramdisk_id {
        scope_6489.string(var_6490);
    }
    #[allow(unused_mut)]
    let mut scope_6491 = writer.prefix("SecurityGroupId");
    if let Some(var_6492) = &input.security_group_ids {
        let mut list_6494 = scope_6491.start_list(true, Some("SecurityGroupId"));
        for item_6493 in var_6492 {
            #[allow(unused_mut)]
            let mut entry_6495 = list_6494.entry();
            entry_6495.string(item_6493);
        }
        list_6494.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6496 = writer.prefix("SecurityGroup");
    if let Some(var_6497) = &input.security_groups {
        let mut list_6499 = scope_6496.start_list(true, Some("SecurityGroup"));
        for item_6498 in var_6497 {
            #[allow(unused_mut)]
            let mut entry_6500 = list_6499.entry();
            entry_6500.string(item_6498);
        }
        list_6499.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6501 = writer.prefix("SubnetId");
    if let Some(var_6502) = &input.subnet_id {
        scope_6501.string(var_6502);
    }
    #[allow(unused_mut)]
    let mut scope_6503 = writer.prefix("UserData");
    if let Some(var_6504) = &input.user_data {
        scope_6503.string(var_6504);
    }
    #[allow(unused_mut)]
    let mut scope_6505 = writer.prefix("AdditionalInfo");
    if let Some(var_6506) = &input.additional_info {
        scope_6505.string(var_6506);
    }
    #[allow(unused_mut)]
    let mut scope_6507 = writer.prefix("ClientToken");
    if let Some(var_6508) = &input.client_token {
        scope_6507.string(var_6508);
    }
    #[allow(unused_mut)]
    let mut scope_6509 = writer.prefix("DisableApiTermination");
    if let Some(var_6510) = &input.disable_api_termination {
        scope_6509.boolean(*var_6510);
    }
    #[allow(unused_mut)]
    let mut scope_6511 = writer.prefix("DryRun");
    if let Some(var_6512) = &input.dry_run {
        scope_6511.boolean(*var_6512);
    }
    #[allow(unused_mut)]
    let mut scope_6513 = writer.prefix("EbsOptimized");
    if let Some(var_6514) = &input.ebs_optimized {
        scope_6513.boolean(*var_6514);
    }
    #[allow(unused_mut)]
    let mut scope_6515 = writer.prefix("IamInstanceProfile");
    if let Some(var_6516) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(scope_6515, var_6516)?;
    }
    #[allow(unused_mut)]
    let mut scope_6517 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_6518) = &input.instance_initiated_shutdown_behavior {
        scope_6517.string(var_6518.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_6519 = writer.prefix("NetworkInterface");
    if let Some(var_6520) = &input.network_interfaces {
        let mut list_6522 = scope_6519.start_list(true, Some("item"));
        for item_6521 in var_6520 {
            #[allow(unused_mut)]
            let mut entry_6523 = list_6522.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_6523, item_6521)?;
        }
        list_6522.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6524 = writer.prefix("PrivateIpAddress");
    if let Some(var_6525) = &input.private_ip_address {
        scope_6524.string(var_6525);
    }
    #[allow(unused_mut)]
    let mut scope_6526 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_6527) = &input.elastic_gpu_specification {
        let mut list_6529 = scope_6526.start_list(true, Some("item"));
        for item_6528 in var_6527 {
            #[allow(unused_mut)]
            let mut entry_6530 = list_6529.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(entry_6530, item_6528)?;
        }
        list_6529.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6531 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_6532) = &input.elastic_inference_accelerators {
        let mut list_6534 = scope_6531.start_list(true, Some("item"));
        for item_6533 in var_6532 {
            #[allow(unused_mut)]
            let mut entry_6535 = list_6534.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_inference_accelerator(entry_6535, item_6533)?;
        }
        list_6534.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6536 = writer.prefix("TagSpecification");
    if let Some(var_6537) = &input.tag_specifications {
        let mut list_6539 = scope_6536.start_list(true, Some("item"));
        for item_6538 in var_6537 {
            #[allow(unused_mut)]
            let mut entry_6540 = list_6539.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_6540, item_6538)?;
        }
        list_6539.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6541 = writer.prefix("LaunchTemplate");
    if let Some(var_6542) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(scope_6541, var_6542)?;
    }
    #[allow(unused_mut)]
    let mut scope_6543 = writer.prefix("InstanceMarketOptions");
    if let Some(var_6544) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_instance_market_options_request(scope_6543, var_6544)?;
    }
    #[allow(unused_mut)]
    let mut scope_6545 = writer.prefix("CreditSpecification");
    if let Some(var_6546) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(scope_6545, var_6546)?;
    }
    #[allow(unused_mut)]
    let mut scope_6547 = writer.prefix("CpuOptions");
    if let Some(var_6548) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_cpu_options_request(scope_6547, var_6548)?;
    }
    #[allow(unused_mut)]
    let mut scope_6549 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_6550) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(scope_6549, var_6550)?;
    }
    #[allow(unused_mut)]
    let mut scope_6551 = writer.prefix("HibernationOptions");
    if let Some(var_6552) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_hibernation_options_request(scope_6551, var_6552)?;
    }
    #[allow(unused_mut)]
    let mut scope_6553 = writer.prefix("LicenseSpecification");
    if let Some(var_6554) = &input.license_specifications {
        let mut list_6556 = scope_6553.start_list(true, Some("item"));
        for item_6555 in var_6554 {
            #[allow(unused_mut)]
            let mut entry_6557 = list_6556.entry();
            crate::query_ser::serialize_structure_crate_model_license_configuration_request(entry_6557, item_6555)?;
        }
        list_6556.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6558 = writer.prefix("MetadataOptions");
    if let Some(var_6559) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options_request(scope_6558, var_6559)?;
    }
    #[allow(unused_mut)]
    let mut scope_6560 = writer.prefix("EnclaveOptions");
    if let Some(var_6561) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_enclave_options_request(scope_6560, var_6561)?;
    }
    #[allow(unused_mut)]
    let mut scope_6562 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_6563) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_private_dns_name_options_request(scope_6562, var_6563)?;
    }
    #[allow(unused_mut)]
    let mut scope_6564 = writer.prefix("MaintenanceOptions");
    if let Some(var_6565) = &input.maintenance_options {
        crate::query_ser::serialize_structure_crate_model_instance_maintenance_options_request(scope_6564, var_6565)?;
    }
    #[allow(unused_mut)]
    let mut scope_6566 = writer.prefix("DisableApiStop");
    if let Some(var_6567) = &input.disable_api_stop {
        scope_6566.boolean(*var_6567);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_scheduled_instances(input: &crate::input::RunScheduledInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6568 = writer.prefix("ClientToken");
    if let Some(var_6569) = &input.client_token {
        scope_6568.string(var_6569);
    }
    #[allow(unused_mut)]
    let mut scope_6570 = writer.prefix("DryRun");
    if let Some(var_6571) = &input.dry_run {
        scope_6570.boolean(*var_6571);
    }
    #[allow(unused_mut)]
    let mut scope_6572 = writer.prefix("InstanceCount");
    if let Some(var_6573) = &input.instance_count {
        scope_6572.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6573).into()));
    }
    #[allow(unused_mut)]
    let mut scope_6574 = writer.prefix("LaunchSpecification");
    if let Some(var_6575) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_launch_specification(scope_6574, var_6575)?;
    }
    #[allow(unused_mut)]
    let mut scope_6576 = writer.prefix("ScheduledInstanceId");
    if let Some(var_6577) = &input.scheduled_instance_id {
        scope_6576.string(var_6577);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_local_gateway_routes(input: &crate::input::SearchLocalGatewayRoutesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6578 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_6579) = &input.local_gateway_route_table_id {
        scope_6578.string(var_6579);
    }
    #[allow(unused_mut)]
    let mut scope_6580 = writer.prefix("Filter");
    if let Some(var_6581) = &input.filters {
        let mut list_6583 = scope_6580.start_list(true, Some("Filter"));
        for item_6582 in var_6581 {
            #[allow(unused_mut)]
            let mut entry_6584 = list_6583.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6584, item_6582)?;
        }
        list_6583.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6585 = writer.prefix("MaxResults");
    if let Some(var_6586) = &input.max_results {
        scope_6585.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6586).into()));
    }
    #[allow(unused_mut)]
    let mut scope_6587 = writer.prefix("NextToken");
    if let Some(var_6588) = &input.next_token {
        scope_6587.string(var_6588);
    }
    #[allow(unused_mut)]
    let mut scope_6589 = writer.prefix("DryRun");
    if let Some(var_6590) = &input.dry_run {
        scope_6589.boolean(*var_6590);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_multicast_groups(input: &crate::input::SearchTransitGatewayMulticastGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayMulticastGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6591 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_6592) = &input.transit_gateway_multicast_domain_id {
        scope_6591.string(var_6592);
    }
    #[allow(unused_mut)]
    let mut scope_6593 = writer.prefix("Filter");
    if let Some(var_6594) = &input.filters {
        let mut list_6596 = scope_6593.start_list(true, Some("Filter"));
        for item_6595 in var_6594 {
            #[allow(unused_mut)]
            let mut entry_6597 = list_6596.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6597, item_6595)?;
        }
        list_6596.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6598 = writer.prefix("MaxResults");
    if let Some(var_6599) = &input.max_results {
        scope_6598.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6599).into()));
    }
    #[allow(unused_mut)]
    let mut scope_6600 = writer.prefix("NextToken");
    if let Some(var_6601) = &input.next_token {
        scope_6600.string(var_6601);
    }
    #[allow(unused_mut)]
    let mut scope_6602 = writer.prefix("DryRun");
    if let Some(var_6603) = &input.dry_run {
        scope_6602.boolean(*var_6603);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_routes(input: &crate::input::SearchTransitGatewayRoutesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6604 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_6605) = &input.transit_gateway_route_table_id {
        scope_6604.string(var_6605);
    }
    #[allow(unused_mut)]
    let mut scope_6606 = writer.prefix("Filter");
    if let Some(var_6607) = &input.filters {
        let mut list_6609 = scope_6606.start_list(true, Some("Filter"));
        for item_6608 in var_6607 {
            #[allow(unused_mut)]
            let mut entry_6610 = list_6609.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6610, item_6608)?;
        }
        list_6609.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6611 = writer.prefix("MaxResults");
    if let Some(var_6612) = &input.max_results {
        scope_6611.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6612).into()));
    }
    #[allow(unused_mut)]
    let mut scope_6613 = writer.prefix("DryRun");
    if let Some(var_6614) = &input.dry_run {
        scope_6613.boolean(*var_6614);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_send_diagnostic_interrupt(input: &crate::input::SendDiagnosticInterruptInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6615 = writer.prefix("InstanceId");
    if let Some(var_6616) = &input.instance_id {
        scope_6615.string(var_6616);
    }
    #[allow(unused_mut)]
    let mut scope_6617 = writer.prefix("DryRun");
    if let Some(var_6618) = &input.dry_run {
        scope_6617.boolean(*var_6618);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instances(input: &crate::input::StartInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6619 = writer.prefix("InstanceId");
    if let Some(var_6620) = &input.instance_ids {
        let mut list_6622 = scope_6619.start_list(true, Some("InstanceId"));
        for item_6621 in var_6620 {
            #[allow(unused_mut)]
            let mut entry_6623 = list_6622.entry();
            entry_6623.string(item_6621);
        }
        list_6622.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6624 = writer.prefix("AdditionalInfo");
    if let Some(var_6625) = &input.additional_info {
        scope_6624.string(var_6625);
    }
    #[allow(unused_mut)]
    let mut scope_6626 = writer.prefix("DryRun");
    if let Some(var_6627) = &input.dry_run {
        scope_6626.boolean(*var_6627);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_access_scope_analysis(input: &crate::input::StartNetworkInsightsAccessScopeAnalysisInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAccessScopeAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6628 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_6629) = &input.network_insights_access_scope_id {
        scope_6628.string(var_6629);
    }
    #[allow(unused_mut)]
    let mut scope_6630 = writer.prefix("DryRun");
    if let Some(var_6631) = &input.dry_run {
        scope_6630.boolean(*var_6631);
    }
    #[allow(unused_mut)]
    let mut scope_6632 = writer.prefix("TagSpecification");
    if let Some(var_6633) = &input.tag_specifications {
        let mut list_6635 = scope_6632.start_list(true, Some("item"));
        for item_6634 in var_6633 {
            #[allow(unused_mut)]
            let mut entry_6636 = list_6635.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_6636, item_6634)?;
        }
        list_6635.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6637 = writer.prefix("ClientToken");
    if let Some(var_6638) = &input.client_token {
        scope_6637.string(var_6638);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_analysis(input: &crate::input::StartNetworkInsightsAnalysisInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6639 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_6640) = &input.network_insights_path_id {
        scope_6639.string(var_6640);
    }
    #[allow(unused_mut)]
    let mut scope_6641 = writer.prefix("AdditionalAccount");
    if let Some(var_6642) = &input.additional_accounts {
        let mut list_6644 = scope_6641.start_list(true, Some("item"));
        for item_6643 in var_6642 {
            #[allow(unused_mut)]
            let mut entry_6645 = list_6644.entry();
            entry_6645.string(item_6643);
        }
        list_6644.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6646 = writer.prefix("FilterInArn");
    if let Some(var_6647) = &input.filter_in_arns {
        let mut list_6649 = scope_6646.start_list(true, Some("item"));
        for item_6648 in var_6647 {
            #[allow(unused_mut)]
            let mut entry_6650 = list_6649.entry();
            entry_6650.string(item_6648);
        }
        list_6649.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6651 = writer.prefix("DryRun");
    if let Some(var_6652) = &input.dry_run {
        scope_6651.boolean(*var_6652);
    }
    #[allow(unused_mut)]
    let mut scope_6653 = writer.prefix("TagSpecification");
    if let Some(var_6654) = &input.tag_specifications {
        let mut list_6656 = scope_6653.start_list(true, Some("item"));
        for item_6655 in var_6654 {
            #[allow(unused_mut)]
            let mut entry_6657 = list_6656.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_6657, item_6655)?;
        }
        list_6656.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6658 = writer.prefix("ClientToken");
    if let Some(var_6659) = &input.client_token {
        scope_6658.string(var_6659);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_vpc_endpoint_service_private_dns_verification(input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartVpcEndpointServicePrivateDnsVerification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6660 = writer.prefix("DryRun");
    if let Some(var_6661) = &input.dry_run {
        scope_6660.boolean(*var_6661);
    }
    #[allow(unused_mut)]
    let mut scope_6662 = writer.prefix("ServiceId");
    if let Some(var_6663) = &input.service_id {
        scope_6662.string(var_6663);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_instances(input: &crate::input::StopInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6664 = writer.prefix("InstanceId");
    if let Some(var_6665) = &input.instance_ids {
        let mut list_6667 = scope_6664.start_list(true, Some("InstanceId"));
        for item_6666 in var_6665 {
            #[allow(unused_mut)]
            let mut entry_6668 = list_6667.entry();
            entry_6668.string(item_6666);
        }
        list_6667.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6669 = writer.prefix("Hibernate");
    if let Some(var_6670) = &input.hibernate {
        scope_6669.boolean(*var_6670);
    }
    #[allow(unused_mut)]
    let mut scope_6671 = writer.prefix("DryRun");
    if let Some(var_6672) = &input.dry_run {
        scope_6671.boolean(*var_6672);
    }
    #[allow(unused_mut)]
    let mut scope_6673 = writer.prefix("Force");
    if let Some(var_6674) = &input.force {
        scope_6673.boolean(*var_6674);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_client_vpn_connections(input: &crate::input::TerminateClientVpnConnectionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6675 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_6676) = &input.client_vpn_endpoint_id {
        scope_6675.string(var_6676);
    }
    #[allow(unused_mut)]
    let mut scope_6677 = writer.prefix("ConnectionId");
    if let Some(var_6678) = &input.connection_id {
        scope_6677.string(var_6678);
    }
    #[allow(unused_mut)]
    let mut scope_6679 = writer.prefix("Username");
    if let Some(var_6680) = &input.username {
        scope_6679.string(var_6680);
    }
    #[allow(unused_mut)]
    let mut scope_6681 = writer.prefix("DryRun");
    if let Some(var_6682) = &input.dry_run {
        scope_6681.boolean(*var_6682);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instances(input: &crate::input::TerminateInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6683 = writer.prefix("InstanceId");
    if let Some(var_6684) = &input.instance_ids {
        let mut list_6686 = scope_6683.start_list(true, Some("InstanceId"));
        for item_6685 in var_6684 {
            #[allow(unused_mut)]
            let mut entry_6687 = list_6686.entry();
            entry_6687.string(item_6685);
        }
        list_6686.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6688 = writer.prefix("DryRun");
    if let Some(var_6689) = &input.dry_run {
        scope_6688.boolean(*var_6689);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_ipv6_addresses(input: &crate::input::UnassignIpv6AddressesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6690 = writer.prefix("Ipv6Addresses");
    if let Some(var_6691) = &input.ipv6_addresses {
        let mut list_6693 = scope_6690.start_list(true, Some("item"));
        for item_6692 in var_6691 {
            #[allow(unused_mut)]
            let mut entry_6694 = list_6693.entry();
            entry_6694.string(item_6692);
        }
        list_6693.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6695 = writer.prefix("Ipv6Prefix");
    if let Some(var_6696) = &input.ipv6_prefixes {
        let mut list_6698 = scope_6695.start_list(true, Some("item"));
        for item_6697 in var_6696 {
            #[allow(unused_mut)]
            let mut entry_6699 = list_6698.entry();
            entry_6699.string(item_6697);
        }
        list_6698.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6700 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6701) = &input.network_interface_id {
        scope_6700.string(var_6701);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_private_ip_addresses(input: &crate::input::UnassignPrivateIpAddressesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6702 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6703) = &input.network_interface_id {
        scope_6702.string(var_6703);
    }
    #[allow(unused_mut)]
    let mut scope_6704 = writer.prefix("PrivateIpAddress");
    if let Some(var_6705) = &input.private_ip_addresses {
        let mut list_6707 = scope_6704.start_list(true, Some("PrivateIpAddress"));
        for item_6706 in var_6705 {
            #[allow(unused_mut)]
            let mut entry_6708 = list_6707.entry();
            entry_6708.string(item_6706);
        }
        list_6707.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6709 = writer.prefix("Ipv4Prefix");
    if let Some(var_6710) = &input.ipv4_prefixes {
        let mut list_6712 = scope_6709.start_list(true, Some("item"));
        for item_6711 in var_6710 {
            #[allow(unused_mut)]
            let mut entry_6713 = list_6712.entry();
            entry_6713.string(item_6711);
        }
        list_6712.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unmonitor_instances(input: &crate::input::UnmonitorInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6714 = writer.prefix("InstanceId");
    if let Some(var_6715) = &input.instance_ids {
        let mut list_6717 = scope_6714.start_list(true, Some("InstanceId"));
        for item_6716 in var_6715 {
            #[allow(unused_mut)]
            let mut entry_6718 = list_6717.entry();
            entry_6718.string(item_6716);
        }
        list_6717.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6719 = writer.prefix("DryRun");
    if let Some(var_6720) = &input.dry_run {
        scope_6719.boolean(*var_6720);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_egress(input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "UpdateSecurityGroupRuleDescriptionsEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6721 = writer.prefix("DryRun");
    if let Some(var_6722) = &input.dry_run {
        scope_6721.boolean(*var_6722);
    }
    #[allow(unused_mut)]
    let mut scope_6723 = writer.prefix("GroupId");
    if let Some(var_6724) = &input.group_id {
        scope_6723.string(var_6724);
    }
    #[allow(unused_mut)]
    let mut scope_6725 = writer.prefix("GroupName");
    if let Some(var_6726) = &input.group_name {
        scope_6725.string(var_6726);
    }
    #[allow(unused_mut)]
    let mut scope_6727 = writer.prefix("IpPermissions");
    if let Some(var_6728) = &input.ip_permissions {
        let mut list_6730 = scope_6727.start_list(true, Some("item"));
        for item_6729 in var_6728 {
            #[allow(unused_mut)]
            let mut entry_6731 = list_6730.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6731, item_6729)?;
        }
        list_6730.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6732 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6733) = &input.security_group_rule_descriptions {
        let mut list_6735 = scope_6732.start_list(true, Some("item"));
        for item_6734 in var_6733 {
            #[allow(unused_mut)]
            let mut entry_6736 = list_6735.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(entry_6736, item_6734)?;
        }
        list_6735.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_ingress(input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "UpdateSecurityGroupRuleDescriptionsIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6737 = writer.prefix("DryRun");
    if let Some(var_6738) = &input.dry_run {
        scope_6737.boolean(*var_6738);
    }
    #[allow(unused_mut)]
    let mut scope_6739 = writer.prefix("GroupId");
    if let Some(var_6740) = &input.group_id {
        scope_6739.string(var_6740);
    }
    #[allow(unused_mut)]
    let mut scope_6741 = writer.prefix("GroupName");
    if let Some(var_6742) = &input.group_name {
        scope_6741.string(var_6742);
    }
    #[allow(unused_mut)]
    let mut scope_6743 = writer.prefix("IpPermissions");
    if let Some(var_6744) = &input.ip_permissions {
        let mut list_6746 = scope_6743.start_list(true, Some("item"));
        for item_6745 in var_6744 {
            #[allow(unused_mut)]
            let mut entry_6747 = list_6746.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6747, item_6745)?;
        }
        list_6746.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6748 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6749) = &input.security_group_rule_descriptions {
        let mut list_6751 = scope_6748.start_list(true, Some("item"));
        for item_6750 in var_6749 {
            #[allow(unused_mut)]
            let mut entry_6752 = list_6751.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(entry_6752, item_6750)?;
        }
        list_6751.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_withdraw_byoip_cidr(input: &crate::input::WithdrawByoipCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6753 = writer.prefix("Cidr");
    if let Some(var_6754) = &input.cidr {
        scope_6753.string(var_6754);
    }
    #[allow(unused_mut)]
    let mut scope_6755 = writer.prefix("DryRun");
    if let Some(var_6756) = &input.dry_run {
        scope_6755.boolean(*var_6756);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

