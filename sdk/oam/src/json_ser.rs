// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_link_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateLinkInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.label_template {
        object.key("LabelTemplate").string(var_1.as_str());
    }
    if let Some(var_2) = &input.resource_types {
        let mut array_3 = object.key("ResourceTypes").start_array();
        for item_4 in var_2 {
             {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.sink_identifier {
        object.key("SinkIdentifier").string(var_5.as_str());
    }
    if let Some(var_6) = &input.tags {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Tags").start_object();
        for (key_8, value_9) in var_6 {
             {
                object_7.key(key_8.as_str()).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_sink_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateSinkInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_10) = &input.name {
        object.key("Name").string(var_10.as_str());
    }
    if let Some(var_11) = &input.tags {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Tags").start_object();
        for (key_13, value_14) in var_11 {
             {
                object_12.key(key_13.as_str()).string(value_14.as_str());
            }
        }
        object_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_link_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteLinkInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_15) = &input.identifier {
        object.key("Identifier").string(var_15.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_sink_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteSinkInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_16) = &input.identifier {
        object.key("Identifier").string(var_16.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_link_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetLinkInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_17) = &input.identifier {
        object.key("Identifier").string(var_17.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_sink_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSinkInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_18) = &input.identifier {
        object.key("Identifier").string(var_18.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_sink_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSinkPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_19) = &input.sink_identifier {
        object.key("SinkIdentifier").string(var_19.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_attached_links_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListAttachedLinksInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_20) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_20).into()));
    }
    if let Some(var_21) = &input.next_token {
        object.key("NextToken").string(var_21.as_str());
    }
    if let Some(var_22) = &input.sink_identifier {
        object.key("SinkIdentifier").string(var_22.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_links_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListLinksInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_23) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_23).into()));
    }
    if let Some(var_24) = &input.next_token {
        object.key("NextToken").string(var_24.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_sinks_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListSinksInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_25) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_25).into()));
    }
    if let Some(var_26) = &input.next_token {
        object.key("NextToken").string(var_26.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_sink_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutSinkPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_27) = &input.policy {
        object.key("Policy").string(var_27.as_str());
    }
    if let Some(var_28) = &input.sink_identifier {
        object.key("SinkIdentifier").string(var_28.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_29) = &input.tags {
        #[allow(unused_mut)]
        let mut object_30 = object.key("Tags").start_object();
        for (key_31, value_32) in var_29 {
             {
                object_30.key(key_31.as_str()).string(value_32.as_str());
            }
        }
        object_30.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_link_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateLinkInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_33) = &input.identifier {
        object.key("Identifier").string(var_33.as_str());
    }
    if let Some(var_34) = &input.resource_types {
        let mut array_35 = object.key("ResourceTypes").start_array();
        for item_36 in var_34 {
             {
                array_35.value().string(item_36.as_str());
            }
        }
        array_35.finish();
    }
    Ok(())
}

