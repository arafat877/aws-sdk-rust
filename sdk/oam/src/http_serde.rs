// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn deser_header_create_link_conflict_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_create_link_internal_service_fault_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_create_link_invalid_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_create_link_missing_required_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_create_link_service_quota_exceeded_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_create_sink_conflict_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_create_sink_internal_service_fault_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_create_sink_invalid_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_create_sink_missing_required_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_create_sink_service_quota_exceeded_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_delete_link_internal_service_fault_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_delete_link_invalid_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_delete_link_missing_required_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_delete_link_resource_not_found_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_delete_sink_conflict_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_delete_sink_internal_service_fault_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_delete_sink_invalid_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_delete_sink_missing_required_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_delete_sink_resource_not_found_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_get_link_internal_service_fault_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_get_link_invalid_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_get_link_missing_required_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_get_link_resource_not_found_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_get_sink_internal_service_fault_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_get_sink_invalid_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_get_sink_missing_required_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_get_sink_resource_not_found_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_get_sink_policy_internal_service_fault_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_get_sink_policy_invalid_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_get_sink_policy_missing_required_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_get_sink_policy_resource_not_found_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_list_attached_links_internal_service_fault_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_list_attached_links_invalid_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_list_attached_links_missing_required_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_list_attached_links_resource_not_found_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_list_links_internal_service_fault_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_list_links_invalid_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_list_links_resource_not_found_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_list_sinks_internal_service_fault_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_list_sinks_invalid_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_list_sinks_resource_not_found_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_list_tags_for_resource_resource_not_found_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_put_sink_policy_internal_service_fault_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_put_sink_policy_invalid_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_put_sink_policy_missing_required_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_put_sink_policy_resource_not_found_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_tag_resource_resource_not_found_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_untag_resource_resource_not_found_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_update_link_internal_service_fault_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_update_link_invalid_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_update_link_missing_required_parameter_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn deser_header_update_link_resource_not_found_exception_amzn_error_type(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<std::string::String>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

