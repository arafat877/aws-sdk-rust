// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_layer_version_permission_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AddLayerVersionPermissionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.action {
        object.key("Action").string(var_1.as_str());
    }
    if let Some(var_2) = &input.organization_id {
        object.key("OrganizationId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.principal {
        object.key("Principal").string(var_3.as_str());
    }
    if let Some(var_4) = &input.statement_id {
        object.key("StatementId").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_add_permission_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AddPermissionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_5) = &input.action {
        object.key("Action").string(var_5.as_str());
    }
    if let Some(var_6) = &input.event_source_token {
        object.key("EventSourceToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.function_url_auth_type {
        object.key("FunctionUrlAuthType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.principal {
        object.key("Principal").string(var_8.as_str());
    }
    if let Some(var_9) = &input.principal_org_id {
        object.key("PrincipalOrgID").string(var_9.as_str());
    }
    if let Some(var_10) = &input.revision_id {
        object.key("RevisionId").string(var_10.as_str());
    }
    if let Some(var_11) = &input.source_account {
        object.key("SourceAccount").string(var_11.as_str());
    }
    if let Some(var_12) = &input.source_arn {
        object.key("SourceArn").string(var_12.as_str());
    }
    if let Some(var_13) = &input.statement_id {
        object.key("StatementId").string(var_13.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_alias_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateAliasInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_14) = &input.description {
        object.key("Description").string(var_14.as_str());
    }
    if let Some(var_15) = &input.function_version {
        object.key("FunctionVersion").string(var_15.as_str());
    }
    if let Some(var_16) = &input.name {
        object.key("Name").string(var_16.as_str());
    }
    if let Some(var_17) = &input.routing_config {
        #[allow(unused_mut)]
        let mut object_18 = object.key("RoutingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_alias_routing_configuration(&mut object_18, var_17)?;
        object_18.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_code_signing_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateCodeSigningConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_19) = &input.allowed_publishers {
        #[allow(unused_mut)]
        let mut object_20 = object.key("AllowedPublishers").start_object();
        crate::json_ser::serialize_structure_crate_model_allowed_publishers(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.code_signing_policies {
        #[allow(unused_mut)]
        let mut object_22 = object.key("CodeSigningPolicies").start_object();
        crate::json_ser::serialize_structure_crate_model_code_signing_policies(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.description {
        object.key("Description").string(var_23.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_event_source_mapping_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateEventSourceMappingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_24) = &input.amazon_managed_kafka_event_source_config {
        #[allow(unused_mut)]
        let mut object_25 = object.key("AmazonManagedKafkaEventSourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_amazon_managed_kafka_event_source_config(&mut object_25, var_24)?;
        object_25.finish();
    }
    if let Some(var_26) = &input.batch_size {
        object.key("BatchSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_26).into()));
    }
    if let Some(var_27) = &input.bisect_batch_on_function_error {
        object.key("BisectBatchOnFunctionError").boolean(*var_27);
    }
    if let Some(var_28) = &input.destination_config {
        #[allow(unused_mut)]
        let mut object_29 = object.key("DestinationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_destination_config(&mut object_29, var_28)?;
        object_29.finish();
    }
    if let Some(var_30) = &input.enabled {
        object.key("Enabled").boolean(*var_30);
    }
    if let Some(var_31) = &input.event_source_arn {
        object.key("EventSourceArn").string(var_31.as_str());
    }
    if let Some(var_32) = &input.filter_criteria {
        #[allow(unused_mut)]
        let mut object_33 = object.key("FilterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_filter_criteria(&mut object_33, var_32)?;
        object_33.finish();
    }
    if let Some(var_34) = &input.function_name {
        object.key("FunctionName").string(var_34.as_str());
    }
    if let Some(var_35) = &input.function_response_types {
        let mut array_36 = object.key("FunctionResponseTypes").start_array();
        for item_37 in var_35 {
             {
                array_36.value().string(item_37.as_str());
            }
        }
        array_36.finish();
    }
    if let Some(var_38) = &input.maximum_batching_window_in_seconds {
        object.key("MaximumBatchingWindowInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_38).into()));
    }
    if let Some(var_39) = &input.maximum_record_age_in_seconds {
        object.key("MaximumRecordAgeInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_39).into()));
    }
    if let Some(var_40) = &input.maximum_retry_attempts {
        object.key("MaximumRetryAttempts").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_40).into()));
    }
    if let Some(var_41) = &input.parallelization_factor {
        object.key("ParallelizationFactor").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_41).into()));
    }
    if let Some(var_42) = &input.queues {
        let mut array_43 = object.key("Queues").start_array();
        for item_44 in var_42 {
             {
                array_43.value().string(item_44.as_str());
            }
        }
        array_43.finish();
    }
    if let Some(var_45) = &input.self_managed_event_source {
        #[allow(unused_mut)]
        let mut object_46 = object.key("SelfManagedEventSource").start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_event_source(&mut object_46, var_45)?;
        object_46.finish();
    }
    if let Some(var_47) = &input.self_managed_kafka_event_source_config {
        #[allow(unused_mut)]
        let mut object_48 = object.key("SelfManagedKafkaEventSourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_kafka_event_source_config(&mut object_48, var_47)?;
        object_48.finish();
    }
    if let Some(var_49) = &input.source_access_configurations {
        let mut array_50 = object.key("SourceAccessConfigurations").start_array();
        for item_51 in var_49 {
             {
                #[allow(unused_mut)]
                let mut object_52 = array_50.value().start_object();
                crate::json_ser::serialize_structure_crate_model_source_access_configuration(&mut object_52, item_51)?;
                object_52.finish();
            }
        }
        array_50.finish();
    }
    if let Some(var_53) = &input.starting_position {
        object.key("StartingPosition").string(var_53.as_str());
    }
    if let Some(var_54) = &input.starting_position_timestamp {
        object.key("StartingPositionTimestamp").date_time(var_54, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_55) = &input.topics {
        let mut array_56 = object.key("Topics").start_array();
        for item_57 in var_55 {
             {
                array_56.value().string(item_57.as_str());
            }
        }
        array_56.finish();
    }
    if let Some(var_58) = &input.tumbling_window_in_seconds {
        object.key("TumblingWindowInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_58).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_function_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateFunctionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_59) = &input.architectures {
        let mut array_60 = object.key("Architectures").start_array();
        for item_61 in var_59 {
             {
                array_60.value().string(item_61.as_str());
            }
        }
        array_60.finish();
    }
    if let Some(var_62) = &input.code {
        #[allow(unused_mut)]
        let mut object_63 = object.key("Code").start_object();
        crate::json_ser::serialize_structure_crate_model_function_code(&mut object_63, var_62)?;
        object_63.finish();
    }
    if let Some(var_64) = &input.code_signing_config_arn {
        object.key("CodeSigningConfigArn").string(var_64.as_str());
    }
    if let Some(var_65) = &input.dead_letter_config {
        #[allow(unused_mut)]
        let mut object_66 = object.key("DeadLetterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_dead_letter_config(&mut object_66, var_65)?;
        object_66.finish();
    }
    if let Some(var_67) = &input.description {
        object.key("Description").string(var_67.as_str());
    }
    if let Some(var_68) = &input.environment {
        #[allow(unused_mut)]
        let mut object_69 = object.key("Environment").start_object();
        crate::json_ser::serialize_structure_crate_model_environment(&mut object_69, var_68)?;
        object_69.finish();
    }
    if let Some(var_70) = &input.ephemeral_storage {
        #[allow(unused_mut)]
        let mut object_71 = object.key("EphemeralStorage").start_object();
        crate::json_ser::serialize_structure_crate_model_ephemeral_storage(&mut object_71, var_70)?;
        object_71.finish();
    }
    if let Some(var_72) = &input.file_system_configs {
        let mut array_73 = object.key("FileSystemConfigs").start_array();
        for item_74 in var_72 {
             {
                #[allow(unused_mut)]
                let mut object_75 = array_73.value().start_object();
                crate::json_ser::serialize_structure_crate_model_file_system_config(&mut object_75, item_74)?;
                object_75.finish();
            }
        }
        array_73.finish();
    }
    if let Some(var_76) = &input.function_name {
        object.key("FunctionName").string(var_76.as_str());
    }
    if let Some(var_77) = &input.handler {
        object.key("Handler").string(var_77.as_str());
    }
    if let Some(var_78) = &input.image_config {
        #[allow(unused_mut)]
        let mut object_79 = object.key("ImageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_image_config(&mut object_79, var_78)?;
        object_79.finish();
    }
    if let Some(var_80) = &input.kms_key_arn {
        object.key("KMSKeyArn").string(var_80.as_str());
    }
    if let Some(var_81) = &input.layers {
        let mut array_82 = object.key("Layers").start_array();
        for item_83 in var_81 {
             {
                array_82.value().string(item_83.as_str());
            }
        }
        array_82.finish();
    }
    if let Some(var_84) = &input.memory_size {
        object.key("MemorySize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_84).into()));
    }
    if let Some(var_85) = &input.package_type {
        object.key("PackageType").string(var_85.as_str());
    }
    if input.publish {
        object.key("Publish").boolean(input.publish);
    }
    if let Some(var_86) = &input.role {
        object.key("Role").string(var_86.as_str());
    }
    if let Some(var_87) = &input.runtime {
        object.key("Runtime").string(var_87.as_str());
    }
    if let Some(var_88) = &input.snap_start {
        #[allow(unused_mut)]
        let mut object_89 = object.key("SnapStart").start_object();
        crate::json_ser::serialize_structure_crate_model_snap_start(&mut object_89, var_88)?;
        object_89.finish();
    }
    if let Some(var_90) = &input.tags {
        #[allow(unused_mut)]
        let mut object_91 = object.key("Tags").start_object();
        for (key_92, value_93) in var_90 {
             {
                object_91.key(key_92.as_str()).string(value_93.as_str());
            }
        }
        object_91.finish();
    }
    if let Some(var_94) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_94).into()));
    }
    if let Some(var_95) = &input.tracing_config {
        #[allow(unused_mut)]
        let mut object_96 = object.key("TracingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_tracing_config(&mut object_96, var_95)?;
        object_96.finish();
    }
    if let Some(var_97) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_98 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_98, var_97)?;
        object_98.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_function_url_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateFunctionUrlConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_99) = &input.auth_type {
        object.key("AuthType").string(var_99.as_str());
    }
    if let Some(var_100) = &input.cors {
        #[allow(unused_mut)]
        let mut object_101 = object.key("Cors").start_object();
        crate::json_ser::serialize_structure_crate_model_cors(&mut object_101, var_100)?;
        object_101.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_publish_layer_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PublishLayerVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_102) = &input.compatible_architectures {
        let mut array_103 = object.key("CompatibleArchitectures").start_array();
        for item_104 in var_102 {
             {
                array_103.value().string(item_104.as_str());
            }
        }
        array_103.finish();
    }
    if let Some(var_105) = &input.compatible_runtimes {
        let mut array_106 = object.key("CompatibleRuntimes").start_array();
        for item_107 in var_105 {
             {
                array_106.value().string(item_107.as_str());
            }
        }
        array_106.finish();
    }
    if let Some(var_108) = &input.content {
        #[allow(unused_mut)]
        let mut object_109 = object.key("Content").start_object();
        crate::json_ser::serialize_structure_crate_model_layer_version_content_input(&mut object_109, var_108)?;
        object_109.finish();
    }
    if let Some(var_110) = &input.description {
        object.key("Description").string(var_110.as_str());
    }
    if let Some(var_111) = &input.license_info {
        object.key("LicenseInfo").string(var_111.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_publish_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PublishVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_112) = &input.code_sha256 {
        object.key("CodeSha256").string(var_112.as_str());
    }
    if let Some(var_113) = &input.description {
        object.key("Description").string(var_113.as_str());
    }
    if let Some(var_114) = &input.revision_id {
        object.key("RevisionId").string(var_114.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_function_code_signing_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutFunctionCodeSigningConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_115) = &input.code_signing_config_arn {
        object.key("CodeSigningConfigArn").string(var_115.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_function_concurrency_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutFunctionConcurrencyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_116) = &input.reserved_concurrent_executions {
        object.key("ReservedConcurrentExecutions").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_116).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_function_event_invoke_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutFunctionEventInvokeConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_117) = &input.destination_config {
        #[allow(unused_mut)]
        let mut object_118 = object.key("DestinationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_destination_config(&mut object_118, var_117)?;
        object_118.finish();
    }
    if let Some(var_119) = &input.maximum_event_age_in_seconds {
        object.key("MaximumEventAgeInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_119).into()));
    }
    if let Some(var_120) = &input.maximum_retry_attempts {
        object.key("MaximumRetryAttempts").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_120).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_provisioned_concurrency_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutProvisionedConcurrencyConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_121) = &input.provisioned_concurrent_executions {
        object.key("ProvisionedConcurrentExecutions").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_121).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_122) = &input.tags {
        #[allow(unused_mut)]
        let mut object_123 = object.key("Tags").start_object();
        for (key_124, value_125) in var_122 {
             {
                object_123.key(key_124.as_str()).string(value_125.as_str());
            }
        }
        object_123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_alias_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateAliasInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_126) = &input.description {
        object.key("Description").string(var_126.as_str());
    }
    if let Some(var_127) = &input.function_version {
        object.key("FunctionVersion").string(var_127.as_str());
    }
    if let Some(var_128) = &input.revision_id {
        object.key("RevisionId").string(var_128.as_str());
    }
    if let Some(var_129) = &input.routing_config {
        #[allow(unused_mut)]
        let mut object_130 = object.key("RoutingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_alias_routing_configuration(&mut object_130, var_129)?;
        object_130.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_code_signing_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateCodeSigningConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_131) = &input.allowed_publishers {
        #[allow(unused_mut)]
        let mut object_132 = object.key("AllowedPublishers").start_object();
        crate::json_ser::serialize_structure_crate_model_allowed_publishers(&mut object_132, var_131)?;
        object_132.finish();
    }
    if let Some(var_133) = &input.code_signing_policies {
        #[allow(unused_mut)]
        let mut object_134 = object.key("CodeSigningPolicies").start_object();
        crate::json_ser::serialize_structure_crate_model_code_signing_policies(&mut object_134, var_133)?;
        object_134.finish();
    }
    if let Some(var_135) = &input.description {
        object.key("Description").string(var_135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_event_source_mapping_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateEventSourceMappingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_136) = &input.batch_size {
        object.key("BatchSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_136).into()));
    }
    if let Some(var_137) = &input.bisect_batch_on_function_error {
        object.key("BisectBatchOnFunctionError").boolean(*var_137);
    }
    if let Some(var_138) = &input.destination_config {
        #[allow(unused_mut)]
        let mut object_139 = object.key("DestinationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_destination_config(&mut object_139, var_138)?;
        object_139.finish();
    }
    if let Some(var_140) = &input.enabled {
        object.key("Enabled").boolean(*var_140);
    }
    if let Some(var_141) = &input.filter_criteria {
        #[allow(unused_mut)]
        let mut object_142 = object.key("FilterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_filter_criteria(&mut object_142, var_141)?;
        object_142.finish();
    }
    if let Some(var_143) = &input.function_name {
        object.key("FunctionName").string(var_143.as_str());
    }
    if let Some(var_144) = &input.function_response_types {
        let mut array_145 = object.key("FunctionResponseTypes").start_array();
        for item_146 in var_144 {
             {
                array_145.value().string(item_146.as_str());
            }
        }
        array_145.finish();
    }
    if let Some(var_147) = &input.maximum_batching_window_in_seconds {
        object.key("MaximumBatchingWindowInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_147).into()));
    }
    if let Some(var_148) = &input.maximum_record_age_in_seconds {
        object.key("MaximumRecordAgeInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_148).into()));
    }
    if let Some(var_149) = &input.maximum_retry_attempts {
        object.key("MaximumRetryAttempts").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_149).into()));
    }
    if let Some(var_150) = &input.parallelization_factor {
        object.key("ParallelizationFactor").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_150).into()));
    }
    if let Some(var_151) = &input.source_access_configurations {
        let mut array_152 = object.key("SourceAccessConfigurations").start_array();
        for item_153 in var_151 {
             {
                #[allow(unused_mut)]
                let mut object_154 = array_152.value().start_object();
                crate::json_ser::serialize_structure_crate_model_source_access_configuration(&mut object_154, item_153)?;
                object_154.finish();
            }
        }
        array_152.finish();
    }
    if let Some(var_155) = &input.tumbling_window_in_seconds {
        object.key("TumblingWindowInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_155).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_function_code_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFunctionCodeInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_156) = &input.architectures {
        let mut array_157 = object.key("Architectures").start_array();
        for item_158 in var_156 {
             {
                array_157.value().string(item_158.as_str());
            }
        }
        array_157.finish();
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    if let Some(var_159) = &input.image_uri {
        object.key("ImageUri").string(var_159.as_str());
    }
    if input.publish {
        object.key("Publish").boolean(input.publish);
    }
    if let Some(var_160) = &input.revision_id {
        object.key("RevisionId").string(var_160.as_str());
    }
    if let Some(var_161) = &input.s3_bucket {
        object.key("S3Bucket").string(var_161.as_str());
    }
    if let Some(var_162) = &input.s3_key {
        object.key("S3Key").string(var_162.as_str());
    }
    if let Some(var_163) = &input.s3_object_version {
        object.key("S3ObjectVersion").string(var_163.as_str());
    }
    if let Some(var_164) = &input.zip_file {
        object.key("ZipFile").string_unchecked(&aws_smithy_types::base64::encode(var_164));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_function_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFunctionConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_165) = &input.dead_letter_config {
        #[allow(unused_mut)]
        let mut object_166 = object.key("DeadLetterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_dead_letter_config(&mut object_166, var_165)?;
        object_166.finish();
    }
    if let Some(var_167) = &input.description {
        object.key("Description").string(var_167.as_str());
    }
    if let Some(var_168) = &input.environment {
        #[allow(unused_mut)]
        let mut object_169 = object.key("Environment").start_object();
        crate::json_ser::serialize_structure_crate_model_environment(&mut object_169, var_168)?;
        object_169.finish();
    }
    if let Some(var_170) = &input.ephemeral_storage {
        #[allow(unused_mut)]
        let mut object_171 = object.key("EphemeralStorage").start_object();
        crate::json_ser::serialize_structure_crate_model_ephemeral_storage(&mut object_171, var_170)?;
        object_171.finish();
    }
    if let Some(var_172) = &input.file_system_configs {
        let mut array_173 = object.key("FileSystemConfigs").start_array();
        for item_174 in var_172 {
             {
                #[allow(unused_mut)]
                let mut object_175 = array_173.value().start_object();
                crate::json_ser::serialize_structure_crate_model_file_system_config(&mut object_175, item_174)?;
                object_175.finish();
            }
        }
        array_173.finish();
    }
    if let Some(var_176) = &input.handler {
        object.key("Handler").string(var_176.as_str());
    }
    if let Some(var_177) = &input.image_config {
        #[allow(unused_mut)]
        let mut object_178 = object.key("ImageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_image_config(&mut object_178, var_177)?;
        object_178.finish();
    }
    if let Some(var_179) = &input.kms_key_arn {
        object.key("KMSKeyArn").string(var_179.as_str());
    }
    if let Some(var_180) = &input.layers {
        let mut array_181 = object.key("Layers").start_array();
        for item_182 in var_180 {
             {
                array_181.value().string(item_182.as_str());
            }
        }
        array_181.finish();
    }
    if let Some(var_183) = &input.memory_size {
        object.key("MemorySize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_183).into()));
    }
    if let Some(var_184) = &input.revision_id {
        object.key("RevisionId").string(var_184.as_str());
    }
    if let Some(var_185) = &input.role {
        object.key("Role").string(var_185.as_str());
    }
    if let Some(var_186) = &input.runtime {
        object.key("Runtime").string(var_186.as_str());
    }
    if let Some(var_187) = &input.snap_start {
        #[allow(unused_mut)]
        let mut object_188 = object.key("SnapStart").start_object();
        crate::json_ser::serialize_structure_crate_model_snap_start(&mut object_188, var_187)?;
        object_188.finish();
    }
    if let Some(var_189) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_189).into()));
    }
    if let Some(var_190) = &input.tracing_config {
        #[allow(unused_mut)]
        let mut object_191 = object.key("TracingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_tracing_config(&mut object_191, var_190)?;
        object_191.finish();
    }
    if let Some(var_192) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_193 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_193, var_192)?;
        object_193.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_function_event_invoke_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFunctionEventInvokeConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_194) = &input.destination_config {
        #[allow(unused_mut)]
        let mut object_195 = object.key("DestinationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_destination_config(&mut object_195, var_194)?;
        object_195.finish();
    }
    if let Some(var_196) = &input.maximum_event_age_in_seconds {
        object.key("MaximumEventAgeInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_196).into()));
    }
    if let Some(var_197) = &input.maximum_retry_attempts {
        object.key("MaximumRetryAttempts").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_197).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_function_url_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFunctionUrlConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_198) = &input.auth_type {
        object.key("AuthType").string(var_198.as_str());
    }
    if let Some(var_199) = &input.cors {
        #[allow(unused_mut)]
        let mut object_200 = object.key("Cors").start_object();
        crate::json_ser::serialize_structure_crate_model_cors(&mut object_200, var_199)?;
        object_200.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_alias_routing_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AliasRoutingConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_201) = &input.additional_version_weights {
        #[allow(unused_mut)]
        let mut object_202 = object.key("AdditionalVersionWeights").start_object();
        for (key_203, value_204) in var_201 {
             {
                object_202.key(key_203.as_str()).number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*value_204).into()));
            }
        }
        object_202.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_allowed_publishers(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AllowedPublishers) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_205) = &input.signing_profile_version_arns {
        let mut array_206 = object.key("SigningProfileVersionArns").start_array();
        for item_207 in var_205 {
             {
                array_206.value().string(item_207.as_str());
            }
        }
        array_206.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_signing_policies(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CodeSigningPolicies) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_208) = &input.untrusted_artifact_on_deployment {
        object.key("UntrustedArtifactOnDeployment").string(var_208.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_amazon_managed_kafka_event_source_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AmazonManagedKafkaEventSourceConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_209) = &input.consumer_group_id {
        object.key("ConsumerGroupId").string(var_209.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_destination_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DestinationConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_210) = &input.on_success {
        #[allow(unused_mut)]
        let mut object_211 = object.key("OnSuccess").start_object();
        crate::json_ser::serialize_structure_crate_model_on_success(&mut object_211, var_210)?;
        object_211.finish();
    }
    if let Some(var_212) = &input.on_failure {
        #[allow(unused_mut)]
        let mut object_213 = object.key("OnFailure").start_object();
        crate::json_ser::serialize_structure_crate_model_on_failure(&mut object_213, var_212)?;
        object_213.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FilterCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_214) = &input.filters {
        let mut array_215 = object.key("Filters").start_array();
        for item_216 in var_214 {
             {
                #[allow(unused_mut)]
                let mut object_217 = array_215.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_217, item_216)?;
                object_217.finish();
            }
        }
        array_215.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_self_managed_event_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SelfManagedEventSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_218) = &input.endpoints {
        #[allow(unused_mut)]
        let mut object_219 = object.key("Endpoints").start_object();
        for (key_220, value_221) in var_218 {
             {
                let mut array_222 = object_219.key(key_220.as_str()).start_array();
                for item_223 in value_221 {
                     {
                        array_222.value().string(item_223.as_str());
                    }
                }
                array_222.finish();
            }
        }
        object_219.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_self_managed_kafka_event_source_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SelfManagedKafkaEventSourceConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_224) = &input.consumer_group_id {
        object.key("ConsumerGroupId").string(var_224.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_access_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SourceAccessConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_225) = &input.r#type {
        object.key("Type").string(var_225.as_str());
    }
    if let Some(var_226) = &input.uri {
        object.key("URI").string(var_226.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_function_code(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FunctionCode) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_227) = &input.zip_file {
        object.key("ZipFile").string_unchecked(&aws_smithy_types::base64::encode(var_227));
    }
    if let Some(var_228) = &input.s3_bucket {
        object.key("S3Bucket").string(var_228.as_str());
    }
    if let Some(var_229) = &input.s3_key {
        object.key("S3Key").string(var_229.as_str());
    }
    if let Some(var_230) = &input.s3_object_version {
        object.key("S3ObjectVersion").string(var_230.as_str());
    }
    if let Some(var_231) = &input.image_uri {
        object.key("ImageUri").string(var_231.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dead_letter_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DeadLetterConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_232) = &input.target_arn {
        object.key("TargetArn").string(var_232.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_environment(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Environment) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_233) = &input.variables {
        #[allow(unused_mut)]
        let mut object_234 = object.key("Variables").start_object();
        for (key_235, value_236) in var_233 {
             {
                object_234.key(key_235.as_str()).string(value_236.as_str());
            }
        }
        object_234.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ephemeral_storage(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EphemeralStorage) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_237) = &input.size {
        object.key("Size").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_237).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_system_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FileSystemConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_238) = &input.arn {
        object.key("Arn").string(var_238.as_str());
    }
    if let Some(var_239) = &input.local_mount_path {
        object.key("LocalMountPath").string(var_239.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ImageConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_240) = &input.entry_point {
        let mut array_241 = object.key("EntryPoint").start_array();
        for item_242 in var_240 {
             {
                array_241.value().string(item_242.as_str());
            }
        }
        array_241.finish();
    }
    if let Some(var_243) = &input.command {
        let mut array_244 = object.key("Command").start_array();
        for item_245 in var_243 {
             {
                array_244.value().string(item_245.as_str());
            }
        }
        array_244.finish();
    }
    if let Some(var_246) = &input.working_directory {
        object.key("WorkingDirectory").string(var_246.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_snap_start(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SnapStart) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_247) = &input.apply_on {
        object.key("ApplyOn").string(var_247.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tracing_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TracingConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_248) = &input.mode {
        object.key("Mode").string(var_248.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::VpcConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_249) = &input.subnet_ids {
        let mut array_250 = object.key("SubnetIds").start_array();
        for item_251 in var_249 {
             {
                array_250.value().string(item_251.as_str());
            }
        }
        array_250.finish();
    }
    if let Some(var_252) = &input.security_group_ids {
        let mut array_253 = object.key("SecurityGroupIds").start_array();
        for item_254 in var_252 {
             {
                array_253.value().string(item_254.as_str());
            }
        }
        array_253.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cors(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Cors) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_255) = &input.allow_credentials {
        object.key("AllowCredentials").boolean(*var_255);
    }
    if let Some(var_256) = &input.allow_headers {
        let mut array_257 = object.key("AllowHeaders").start_array();
        for item_258 in var_256 {
             {
                array_257.value().string(item_258.as_str());
            }
        }
        array_257.finish();
    }
    if let Some(var_259) = &input.allow_methods {
        let mut array_260 = object.key("AllowMethods").start_array();
        for item_261 in var_259 {
             {
                array_260.value().string(item_261.as_str());
            }
        }
        array_260.finish();
    }
    if let Some(var_262) = &input.allow_origins {
        let mut array_263 = object.key("AllowOrigins").start_array();
        for item_264 in var_262 {
             {
                array_263.value().string(item_264.as_str());
            }
        }
        array_263.finish();
    }
    if let Some(var_265) = &input.expose_headers {
        let mut array_266 = object.key("ExposeHeaders").start_array();
        for item_267 in var_265 {
             {
                array_266.value().string(item_267.as_str());
            }
        }
        array_266.finish();
    }
    if let Some(var_268) = &input.max_age {
        object.key("MaxAge").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_268).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_layer_version_content_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LayerVersionContentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_269) = &input.s3_bucket {
        object.key("S3Bucket").string(var_269.as_str());
    }
    if let Some(var_270) = &input.s3_key {
        object.key("S3Key").string(var_270.as_str());
    }
    if let Some(var_271) = &input.s3_object_version {
        object.key("S3ObjectVersion").string(var_271.as_str());
    }
    if let Some(var_272) = &input.zip_file {
        object.key("ZipFile").string_unchecked(&aws_smithy_types::base64::encode(var_272));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_on_success(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OnSuccess) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_273) = &input.destination {
        object.key("Destination").string(var_273.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_on_failure(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OnFailure) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_274) = &input.destination {
        object.key("Destination").string(var_274.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Filter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_275) = &input.pattern {
        object.key("Pattern").string(var_275.as_str());
    }
    Ok(())
}

