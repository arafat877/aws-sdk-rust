// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You donâ€™t have sufficient access to perform this action. Please ensure you have the required permission policies and user accounts and try again.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>A conflict occurred with the request. Please fix any inconsistencies with your resources and try again.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>An issue occurred with the internal server used for your Amazon Kendra Intelligent Ranking service. Please wait a few minutes and try again, or contact <a href="http://aws.amazon.com/contact-us/">Support</a> for help.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>The resource you want to use doesn't exist. Please check you have provided the correct resource and try again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The resource you want to use is unavailable. Please check you have provided the correct resource information and try again.</p>
    ResourceUnavailableException(crate::error::ResourceUnavailableException),
    /// <p>You have exceeded the set limits for your Amazon Kendra Intelligent Ranking service. Please see <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas</a> for more information, or contact <a href="http://aws.amazon.com/contact-us/">Support</a> to inquire about an increase of limits.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling. Please reduce the number of requests and try again.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints set by the Amazon Kendra Intelligent Ranking service. Please provide the correct input and try again.</p>
    ValidationException(crate::error::ValidationException),
    /// 
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    /// 
    /// When logging an error from the SDK, it is recommended that you either wrap the error in
    /// [`DisplayErrorContext`](crate::types::DisplayErrorContext), use another
    /// error reporter library that visits the error's cause/source chain, or call
    /// [`Error::source`](std::error::Error::source) for more details about the underlying cause.
    /// 
    Unhandled(crate::error::Unhandled)
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ResourceUnavailableException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f)
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRescoreExecutionPlanError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateRescoreExecutionPlanError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateRescoreExecutionPlanError> for Error {
    fn from(err: crate::error::CreateRescoreExecutionPlanError) -> Self {
        match err.kind {
            crate::error::CreateRescoreExecutionPlanErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateRescoreExecutionPlanErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateRescoreExecutionPlanErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateRescoreExecutionPlanErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateRescoreExecutionPlanErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateRescoreExecutionPlanErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateRescoreExecutionPlanErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRescoreExecutionPlanError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteRescoreExecutionPlanError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteRescoreExecutionPlanError> for Error {
    fn from(err: crate::error::DeleteRescoreExecutionPlanError) -> Self {
        match err.kind {
            crate::error::DeleteRescoreExecutionPlanErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteRescoreExecutionPlanErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteRescoreExecutionPlanErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteRescoreExecutionPlanErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteRescoreExecutionPlanErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteRescoreExecutionPlanErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteRescoreExecutionPlanErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRescoreExecutionPlanError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeRescoreExecutionPlanError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeRescoreExecutionPlanError> for Error {
    fn from(err: crate::error::DescribeRescoreExecutionPlanError) -> Self {
        match err.kind {
            crate::error::DescribeRescoreExecutionPlanErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribeRescoreExecutionPlanErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeRescoreExecutionPlanErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeRescoreExecutionPlanErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DescribeRescoreExecutionPlanErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeRescoreExecutionPlanErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRescoreExecutionPlansError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListRescoreExecutionPlansError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListRescoreExecutionPlansError> for Error {
    fn from(err: crate::error::ListRescoreExecutionPlansError) -> Self {
        match err.kind {
            crate::error::ListRescoreExecutionPlansErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListRescoreExecutionPlansErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListRescoreExecutionPlansErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListRescoreExecutionPlansErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListRescoreExecutionPlansErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err.kind {
            crate::error::ListTagsForResourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListTagsForResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListTagsForResourceErrorKind::ResourceUnavailableException(inner) => Error::ResourceUnavailableException(inner),
            crate::error::ListTagsForResourceErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListTagsForResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RescoreError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RescoreError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::RescoreError> for Error {
    fn from(err: crate::error::RescoreError) -> Self {
        match err.kind {
            crate::error::RescoreErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::RescoreErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::RescoreErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::RescoreErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::RescoreErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::RescoreErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::RescoreErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err.kind {
            crate::error::TagResourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::TagResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::TagResourceErrorKind::ResourceUnavailableException(inner) => Error::ResourceUnavailableException(inner),
            crate::error::TagResourceErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::TagResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err.kind {
            crate::error::UntagResourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UntagResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UntagResourceErrorKind::ResourceUnavailableException(inner) => Error::ResourceUnavailableException(inner),
            crate::error::UntagResourceErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UntagResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRescoreExecutionPlanError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateRescoreExecutionPlanError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateRescoreExecutionPlanError> for Error {
    fn from(err: crate::error::UpdateRescoreExecutionPlanError) -> Self {
        match err.kind {
            crate::error::UpdateRescoreExecutionPlanErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateRescoreExecutionPlanErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::UpdateRescoreExecutionPlanErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateRescoreExecutionPlanErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateRescoreExecutionPlanErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::UpdateRescoreExecutionPlanErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateRescoreExecutionPlanErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateRescoreExecutionPlanErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl std::error::Error for Error {}

