// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_get_traces_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetTracesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.next_token {
        object.key("NextToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.trace_ids {
        let mut array_3 = object.key("TraceIds").start_array();
        for item_4 in var_2 {
             {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_5) = &input.filter_expression {
        object.key("FilterExpression").string(var_5.as_str());
    }
    if let Some(var_6) = &input.group_name {
        object.key("GroupName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.insights_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("InsightsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_insights_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.tags {
        let mut array_10 = object.key("Tags").start_array();
        for item_11 in var_9 {
             {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_sampling_rule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateSamplingRuleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_13) = &input.sampling_rule {
        #[allow(unused_mut)]
        let mut object_14 = object.key("SamplingRule").start_object();
        crate::json_ser::serialize_structure_crate_model_sampling_rule(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.tags {
        let mut array_16 = object.key("Tags").start_array();
        for item_17 in var_15 {
             {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_19) = &input.group_arn {
        object.key("GroupARN").string(var_19.as_str());
    }
    if let Some(var_20) = &input.group_name {
        object.key("GroupName").string(var_20.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_21) = &input.policy_name {
        object.key("PolicyName").string(var_21.as_str());
    }
    if let Some(var_22) = &input.policy_revision_id {
        object.key("PolicyRevisionId").string(var_22.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_sampling_rule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteSamplingRuleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_23) = &input.rule_arn {
        object.key("RuleARN").string(var_23.as_str());
    }
    if let Some(var_24) = &input.rule_name {
        object.key("RuleName").string(var_24.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_25) = &input.group_arn {
        object.key("GroupARN").string(var_25.as_str());
    }
    if let Some(var_26) = &input.group_name {
        object.key("GroupName").string(var_26.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_groups_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetGroupsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_27) = &input.next_token {
        object.key("NextToken").string(var_27.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_insight_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetInsightInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_28) = &input.insight_id {
        object.key("InsightId").string(var_28.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_insight_events_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetInsightEventsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_29) = &input.insight_id {
        object.key("InsightId").string(var_29.as_str());
    }
    if let Some(var_30) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_30).into()));
    }
    if let Some(var_31) = &input.next_token {
        object.key("NextToken").string(var_31.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_insight_impact_graph_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetInsightImpactGraphInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_32) = &input.end_time {
        object.key("EndTime").date_time(var_32, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_33) = &input.insight_id {
        object.key("InsightId").string(var_33.as_str());
    }
    if let Some(var_34) = &input.next_token {
        object.key("NextToken").string(var_34.as_str());
    }
    if let Some(var_35) = &input.start_time {
        object.key("StartTime").date_time(var_35, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_insight_summaries_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetInsightSummariesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_36) = &input.end_time {
        object.key("EndTime").date_time(var_36, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_37) = &input.group_arn {
        object.key("GroupARN").string(var_37.as_str());
    }
    if let Some(var_38) = &input.group_name {
        object.key("GroupName").string(var_38.as_str());
    }
    if let Some(var_39) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_39).into()));
    }
    if let Some(var_40) = &input.next_token {
        object.key("NextToken").string(var_40.as_str());
    }
    if let Some(var_41) = &input.start_time {
        object.key("StartTime").date_time(var_41, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_42) = &input.states {
        let mut array_43 = object.key("States").start_array();
        for item_44 in var_42 {
             {
                array_43.value().string(item_44.as_str());
            }
        }
        array_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_sampling_rules_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSamplingRulesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_45) = &input.next_token {
        object.key("NextToken").string(var_45.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_sampling_statistic_summaries_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSamplingStatisticSummariesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_46) = &input.next_token {
        object.key("NextToken").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_sampling_targets_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSamplingTargetsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_47) = &input.sampling_statistics_documents {
        let mut array_48 = object.key("SamplingStatisticsDocuments").start_array();
        for item_49 in var_47 {
             {
                #[allow(unused_mut)]
                let mut object_50 = array_48.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sampling_statistics_document(&mut object_50, item_49)?;
                object_50.finish();
            }
        }
        array_48.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_service_graph_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetServiceGraphInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_51) = &input.end_time {
        object.key("EndTime").date_time(var_51, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_52) = &input.group_arn {
        object.key("GroupARN").string(var_52.as_str());
    }
    if let Some(var_53) = &input.group_name {
        object.key("GroupName").string(var_53.as_str());
    }
    if let Some(var_54) = &input.next_token {
        object.key("NextToken").string(var_54.as_str());
    }
    if let Some(var_55) = &input.start_time {
        object.key("StartTime").date_time(var_55, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_time_series_service_statistics_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTimeSeriesServiceStatisticsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_56) = &input.end_time {
        object.key("EndTime").date_time(var_56, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_57) = &input.entity_selector_expression {
        object.key("EntitySelectorExpression").string(var_57.as_str());
    }
    if let Some(var_58) = &input.forecast_statistics {
        object.key("ForecastStatistics").boolean(*var_58);
    }
    if let Some(var_59) = &input.group_arn {
        object.key("GroupARN").string(var_59.as_str());
    }
    if let Some(var_60) = &input.group_name {
        object.key("GroupName").string(var_60.as_str());
    }
    if let Some(var_61) = &input.next_token {
        object.key("NextToken").string(var_61.as_str());
    }
    if let Some(var_62) = &input.period {
        object.key("Period").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_62).into()));
    }
    if let Some(var_63) = &input.start_time {
        object.key("StartTime").date_time(var_63, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_trace_graph_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTraceGraphInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_64) = &input.next_token {
        object.key("NextToken").string(var_64.as_str());
    }
    if let Some(var_65) = &input.trace_ids {
        let mut array_66 = object.key("TraceIds").start_array();
        for item_67 in var_65 {
             {
                array_66.value().string(item_67.as_str());
            }
        }
        array_66.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_trace_summaries_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTraceSummariesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_68) = &input.end_time {
        object.key("EndTime").date_time(var_68, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_69) = &input.filter_expression {
        object.key("FilterExpression").string(var_69.as_str());
    }
    if let Some(var_70) = &input.next_token {
        object.key("NextToken").string(var_70.as_str());
    }
    if let Some(var_71) = &input.sampling {
        object.key("Sampling").boolean(*var_71);
    }
    if let Some(var_72) = &input.sampling_strategy {
        #[allow(unused_mut)]
        let mut object_73 = object.key("SamplingStrategy").start_object();
        crate::json_ser::serialize_structure_crate_model_sampling_strategy(&mut object_73, var_72)?;
        object_73.finish();
    }
    if let Some(var_74) = &input.start_time {
        object.key("StartTime").date_time(var_74, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_75) = &input.time_range_type {
        object.key("TimeRangeType").string(var_75.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resource_policies_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListResourcePoliciesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_76) = &input.next_token {
        object.key("NextToken").string(var_76.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTagsForResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_77) = &input.next_token {
        object.key("NextToken").string(var_77.as_str());
    }
    if let Some(var_78) = &input.resource_arn {
        object.key("ResourceARN").string(var_78.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_encryption_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutEncryptionConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_79) = &input.key_id {
        object.key("KeyId").string(var_79.as_str());
    }
    if let Some(var_80) = &input.r#type {
        object.key("Type").string(var_80.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.bypass_policy_lockout_check {
        object.key("BypassPolicyLockoutCheck").boolean(input.bypass_policy_lockout_check);
    }
    if let Some(var_81) = &input.policy_document {
        object.key("PolicyDocument").string(var_81.as_str());
    }
    if let Some(var_82) = &input.policy_name {
        object.key("PolicyName").string(var_82.as_str());
    }
    if let Some(var_83) = &input.policy_revision_id {
        object.key("PolicyRevisionId").string(var_83.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_telemetry_records_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutTelemetryRecordsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_84) = &input.ec2_instance_id {
        object.key("EC2InstanceId").string(var_84.as_str());
    }
    if let Some(var_85) = &input.hostname {
        object.key("Hostname").string(var_85.as_str());
    }
    if let Some(var_86) = &input.resource_arn {
        object.key("ResourceARN").string(var_86.as_str());
    }
    if let Some(var_87) = &input.telemetry_records {
        let mut array_88 = object.key("TelemetryRecords").start_array();
        for item_89 in var_87 {
             {
                #[allow(unused_mut)]
                let mut object_90 = array_88.value().start_object();
                crate::json_ser::serialize_structure_crate_model_telemetry_record(&mut object_90, item_89)?;
                object_90.finish();
            }
        }
        array_88.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_trace_segments_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutTraceSegmentsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_91) = &input.trace_segment_documents {
        let mut array_92 = object.key("TraceSegmentDocuments").start_array();
        for item_93 in var_91 {
             {
                array_92.value().string(item_93.as_str());
            }
        }
        array_92.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_94) = &input.resource_arn {
        object.key("ResourceARN").string(var_94.as_str());
    }
    if let Some(var_95) = &input.tags {
        let mut array_96 = object.key("Tags").start_array();
        for item_97 in var_95 {
             {
                #[allow(unused_mut)]
                let mut object_98 = array_96.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_98, item_97)?;
                object_98.finish();
            }
        }
        array_96.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UntagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_99) = &input.resource_arn {
        object.key("ResourceARN").string(var_99.as_str());
    }
    if let Some(var_100) = &input.tag_keys {
        let mut array_101 = object.key("TagKeys").start_array();
        for item_102 in var_100 {
             {
                array_101.value().string(item_102.as_str());
            }
        }
        array_101.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_103) = &input.filter_expression {
        object.key("FilterExpression").string(var_103.as_str());
    }
    if let Some(var_104) = &input.group_arn {
        object.key("GroupARN").string(var_104.as_str());
    }
    if let Some(var_105) = &input.group_name {
        object.key("GroupName").string(var_105.as_str());
    }
    if let Some(var_106) = &input.insights_configuration {
        #[allow(unused_mut)]
        let mut object_107 = object.key("InsightsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_insights_configuration(&mut object_107, var_106)?;
        object_107.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_sampling_rule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateSamplingRuleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_108) = &input.sampling_rule_update {
        #[allow(unused_mut)]
        let mut object_109 = object.key("SamplingRuleUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_sampling_rule_update(&mut object_109, var_108)?;
        object_109.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_insights_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InsightsConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_110) = &input.insights_enabled {
        object.key("InsightsEnabled").boolean(*var_110);
    }
    if let Some(var_111) = &input.notifications_enabled {
        object.key("NotificationsEnabled").boolean(*var_111);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Tag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_112) = &input.key {
        object.key("Key").string(var_112.as_str());
    }
    if let Some(var_113) = &input.value {
        object.key("Value").string(var_113.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sampling_rule(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SamplingRule) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_114) = &input.rule_name {
        object.key("RuleName").string(var_114.as_str());
    }
    if let Some(var_115) = &input.rule_arn {
        object.key("RuleARN").string(var_115.as_str());
    }
    if let Some(var_116) = &input.resource_arn {
        object.key("ResourceARN").string(var_116.as_str());
    }
     {
        object.key("Priority").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.priority).into()));
    }
     {
        object.key("FixedRate").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((input.fixed_rate).into()));
    }
     {
        object.key("ReservoirSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.reservoir_size).into()));
    }
    if let Some(var_117) = &input.service_name {
        object.key("ServiceName").string(var_117.as_str());
    }
    if let Some(var_118) = &input.service_type {
        object.key("ServiceType").string(var_118.as_str());
    }
    if let Some(var_119) = &input.host {
        object.key("Host").string(var_119.as_str());
    }
    if let Some(var_120) = &input.http_method {
        object.key("HTTPMethod").string(var_120.as_str());
    }
    if let Some(var_121) = &input.url_path {
        object.key("URLPath").string(var_121.as_str());
    }
     {
        object.key("Version").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.version).into()));
    }
    if let Some(var_122) = &input.attributes {
        #[allow(unused_mut)]
        let mut object_123 = object.key("Attributes").start_object();
        for (key_124, value_125) in var_122 {
             {
                object_123.key(key_124.as_str()).string(value_125.as_str());
            }
        }
        object_123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sampling_statistics_document(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SamplingStatisticsDocument) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_126) = &input.rule_name {
        object.key("RuleName").string(var_126.as_str());
    }
    if let Some(var_127) = &input.client_id {
        object.key("ClientID").string(var_127.as_str());
    }
    if let Some(var_128) = &input.timestamp {
        object.key("Timestamp").date_time(var_128, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
     {
        object.key("RequestCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.request_count).into()));
    }
     {
        object.key("SampledCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.sampled_count).into()));
    }
    if input.borrow_count != 0 {
        object.key("BorrowCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.borrow_count).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sampling_strategy(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SamplingStrategy) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_129) = &input.name {
        object.key("Name").string(var_129.as_str());
    }
    if let Some(var_130) = &input.value {
        object.key("Value").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_130).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_telemetry_record(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TelemetryRecord) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_131) = &input.timestamp {
        object.key("Timestamp").date_time(var_131, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_132) = &input.segments_received_count {
        object.key("SegmentsReceivedCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_132).into()));
    }
    if let Some(var_133) = &input.segments_sent_count {
        object.key("SegmentsSentCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_133).into()));
    }
    if let Some(var_134) = &input.segments_spillover_count {
        object.key("SegmentsSpilloverCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_134).into()));
    }
    if let Some(var_135) = &input.segments_rejected_count {
        object.key("SegmentsRejectedCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_135).into()));
    }
    if let Some(var_136) = &input.backend_connection_errors {
        #[allow(unused_mut)]
        let mut object_137 = object.key("BackendConnectionErrors").start_object();
        crate::json_ser::serialize_structure_crate_model_backend_connection_errors(&mut object_137, var_136)?;
        object_137.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sampling_rule_update(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SamplingRuleUpdate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_138) = &input.rule_name {
        object.key("RuleName").string(var_138.as_str());
    }
    if let Some(var_139) = &input.rule_arn {
        object.key("RuleARN").string(var_139.as_str());
    }
    if let Some(var_140) = &input.resource_arn {
        object.key("ResourceARN").string(var_140.as_str());
    }
    if let Some(var_141) = &input.priority {
        object.key("Priority").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_141).into()));
    }
    if let Some(var_142) = &input.fixed_rate {
        object.key("FixedRate").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_142).into()));
    }
    if let Some(var_143) = &input.reservoir_size {
        object.key("ReservoirSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_143).into()));
    }
    if let Some(var_144) = &input.host {
        object.key("Host").string(var_144.as_str());
    }
    if let Some(var_145) = &input.service_name {
        object.key("ServiceName").string(var_145.as_str());
    }
    if let Some(var_146) = &input.service_type {
        object.key("ServiceType").string(var_146.as_str());
    }
    if let Some(var_147) = &input.http_method {
        object.key("HTTPMethod").string(var_147.as_str());
    }
    if let Some(var_148) = &input.url_path {
        object.key("URLPath").string(var_148.as_str());
    }
    if let Some(var_149) = &input.attributes {
        #[allow(unused_mut)]
        let mut object_150 = object.key("Attributes").start_object();
        for (key_151, value_152) in var_149 {
             {
                object_150.key(key_151.as_str()).string(value_152.as_str());
            }
        }
        object_150.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_backend_connection_errors(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::BackendConnectionErrors) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_153) = &input.timeout_count {
        object.key("TimeoutCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_153).into()));
    }
    if let Some(var_154) = &input.connection_refused_count {
        object.key("ConnectionRefusedCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_154).into()));
    }
    if let Some(var_155) = &input.http_code4_xx_count {
        object.key("HTTPCode4XXCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_155).into()));
    }
    if let Some(var_156) = &input.http_code5_xx_count {
        object.key("HTTPCode5XXCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_156).into()));
    }
    if let Some(var_157) = &input.unknown_host_count {
        object.key("UnknownHostCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_157).into()));
    }
    if let Some(var_158) = &input.other_count {
        object.key("OtherCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_158).into()));
    }
    Ok(())
}

