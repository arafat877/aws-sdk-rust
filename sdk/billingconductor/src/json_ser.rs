// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_accounts_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateAccountsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.account_ids {
        let mut array_2 = object.key("AccountIds").start_array();
        for item_3 in var_1 {
             {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.arn {
        object.key("Arn").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_pricing_rules_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociatePricingRulesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_5) = &input.arn {
        object.key("Arn").string(var_5.as_str());
    }
    if let Some(var_6) = &input.pricing_rule_arns {
        let mut array_7 = object.key("PricingRuleArns").start_array();
        for item_8 in var_6 {
             {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_associate_resources_to_custom_line_item_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchAssociateResourcesToCustomLineItemInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_9) = &input.billing_period_range {
        #[allow(unused_mut)]
        let mut object_10 = object.key("BillingPeriodRange").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_line_item_billing_period_range(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.resource_arns {
        let mut array_12 = object.key("ResourceArns").start_array();
        for item_13 in var_11 {
             {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.target_arn {
        object.key("TargetArn").string(var_14.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_disassociate_resources_from_custom_line_item_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchDisassociateResourcesFromCustomLineItemInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_15) = &input.billing_period_range {
        #[allow(unused_mut)]
        let mut object_16 = object.key("BillingPeriodRange").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_line_item_billing_period_range(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.resource_arns {
        let mut array_18 = object.key("ResourceArns").start_array();
        for item_19 in var_17 {
             {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.target_arn {
        object.key("TargetArn").string(var_20.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_billing_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateBillingGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_21) = &input.account_grouping {
        #[allow(unused_mut)]
        let mut object_22 = object.key("AccountGrouping").start_object();
        crate::json_ser::serialize_structure_crate_model_account_grouping(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.computation_preference {
        #[allow(unused_mut)]
        let mut object_24 = object.key("ComputationPreference").start_object();
        crate::json_ser::serialize_structure_crate_model_computation_preference(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.description {
        object.key("Description").string(var_25.as_str());
    }
    if let Some(var_26) = &input.name {
        object.key("Name").string(var_26.as_str());
    }
    if let Some(var_27) = &input.primary_account_id {
        object.key("PrimaryAccountId").string(var_27.as_str());
    }
    if let Some(var_28) = &input.tags {
        #[allow(unused_mut)]
        let mut object_29 = object.key("Tags").start_object();
        for (key_30, value_31) in var_28 {
             {
                object_29.key(key_30.as_str()).string(value_31.as_str());
            }
        }
        object_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_custom_line_item_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateCustomLineItemInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_32) = &input.billing_group_arn {
        object.key("BillingGroupArn").string(var_32.as_str());
    }
    if let Some(var_33) = &input.billing_period_range {
        #[allow(unused_mut)]
        let mut object_34 = object.key("BillingPeriodRange").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_line_item_billing_period_range(&mut object_34, var_33)?;
        object_34.finish();
    }
    if let Some(var_35) = &input.charge_details {
        #[allow(unused_mut)]
        let mut object_36 = object.key("ChargeDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_line_item_charge_details(&mut object_36, var_35)?;
        object_36.finish();
    }
    if let Some(var_37) = &input.description {
        object.key("Description").string(var_37.as_str());
    }
    if let Some(var_38) = &input.name {
        object.key("Name").string(var_38.as_str());
    }
    if let Some(var_39) = &input.tags {
        #[allow(unused_mut)]
        let mut object_40 = object.key("Tags").start_object();
        for (key_41, value_42) in var_39 {
             {
                object_40.key(key_41.as_str()).string(value_42.as_str());
            }
        }
        object_40.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_pricing_plan_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreatePricingPlanInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_43) = &input.description {
        object.key("Description").string(var_43.as_str());
    }
    if let Some(var_44) = &input.name {
        object.key("Name").string(var_44.as_str());
    }
    if let Some(var_45) = &input.pricing_rule_arns {
        let mut array_46 = object.key("PricingRuleArns").start_array();
        for item_47 in var_45 {
             {
                array_46.value().string(item_47.as_str());
            }
        }
        array_46.finish();
    }
    if let Some(var_48) = &input.tags {
        #[allow(unused_mut)]
        let mut object_49 = object.key("Tags").start_object();
        for (key_50, value_51) in var_48 {
             {
                object_49.key(key_50.as_str()).string(value_51.as_str());
            }
        }
        object_49.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_pricing_rule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreatePricingRuleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_52) = &input.billing_entity {
        object.key("BillingEntity").string(var_52.as_str());
    }
    if let Some(var_53) = &input.description {
        object.key("Description").string(var_53.as_str());
    }
    if let Some(var_54) = &input.modifier_percentage {
        object.key("ModifierPercentage").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_54).into()));
    }
    if let Some(var_55) = &input.name {
        object.key("Name").string(var_55.as_str());
    }
    if let Some(var_56) = &input.scope {
        object.key("Scope").string(var_56.as_str());
    }
    if let Some(var_57) = &input.service {
        object.key("Service").string(var_57.as_str());
    }
    if let Some(var_58) = &input.tags {
        #[allow(unused_mut)]
        let mut object_59 = object.key("Tags").start_object();
        for (key_60, value_61) in var_58 {
             {
                object_59.key(key_60.as_str()).string(value_61.as_str());
            }
        }
        object_59.finish();
    }
    if let Some(var_62) = &input.tiering {
        #[allow(unused_mut)]
        let mut object_63 = object.key("Tiering").start_object();
        crate::json_ser::serialize_structure_crate_model_create_tiering_input(&mut object_63, var_62)?;
        object_63.finish();
    }
    if let Some(var_64) = &input.r#type {
        object.key("Type").string(var_64.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_billing_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteBillingGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_65) = &input.arn {
        object.key("Arn").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_custom_line_item_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteCustomLineItemInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_66) = &input.arn {
        object.key("Arn").string(var_66.as_str());
    }
    if let Some(var_67) = &input.billing_period_range {
        #[allow(unused_mut)]
        let mut object_68 = object.key("BillingPeriodRange").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_line_item_billing_period_range(&mut object_68, var_67)?;
        object_68.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_pricing_plan_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeletePricingPlanInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_69) = &input.arn {
        object.key("Arn").string(var_69.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_pricing_rule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeletePricingRuleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_70) = &input.arn {
        object.key("Arn").string(var_70.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_accounts_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateAccountsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_71) = &input.account_ids {
        let mut array_72 = object.key("AccountIds").start_array();
        for item_73 in var_71 {
             {
                array_72.value().string(item_73.as_str());
            }
        }
        array_72.finish();
    }
    if let Some(var_74) = &input.arn {
        object.key("Arn").string(var_74.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_pricing_rules_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociatePricingRulesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_75) = &input.arn {
        object.key("Arn").string(var_75.as_str());
    }
    if let Some(var_76) = &input.pricing_rule_arns {
        let mut array_77 = object.key("PricingRuleArns").start_array();
        for item_78 in var_76 {
             {
                array_77.value().string(item_78.as_str());
            }
        }
        array_77.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_account_associations_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListAccountAssociationsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_79) = &input.billing_period {
        object.key("BillingPeriod").string(var_79.as_str());
    }
    if let Some(var_80) = &input.filters {
        #[allow(unused_mut)]
        let mut object_81 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_list_account_associations_filter(&mut object_81, var_80)?;
        object_81.finish();
    }
    if let Some(var_82) = &input.next_token {
        object.key("NextToken").string(var_82.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_billing_group_cost_reports_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListBillingGroupCostReportsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_83) = &input.billing_period {
        object.key("BillingPeriod").string(var_83.as_str());
    }
    if let Some(var_84) = &input.filters {
        #[allow(unused_mut)]
        let mut object_85 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_list_billing_group_cost_reports_filter(&mut object_85, var_84)?;
        object_85.finish();
    }
    if let Some(var_86) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_86).into()));
    }
    if let Some(var_87) = &input.next_token {
        object.key("NextToken").string(var_87.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_billing_groups_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListBillingGroupsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_88) = &input.billing_period {
        object.key("BillingPeriod").string(var_88.as_str());
    }
    if let Some(var_89) = &input.filters {
        #[allow(unused_mut)]
        let mut object_90 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_list_billing_groups_filter(&mut object_90, var_89)?;
        object_90.finish();
    }
    if let Some(var_91) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_91).into()));
    }
    if let Some(var_92) = &input.next_token {
        object.key("NextToken").string(var_92.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_custom_line_items_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCustomLineItemsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_93) = &input.billing_period {
        object.key("BillingPeriod").string(var_93.as_str());
    }
    if let Some(var_94) = &input.filters {
        #[allow(unused_mut)]
        let mut object_95 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_list_custom_line_items_filter(&mut object_95, var_94)?;
        object_95.finish();
    }
    if let Some(var_96) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_96).into()));
    }
    if let Some(var_97) = &input.next_token {
        object.key("NextToken").string(var_97.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_custom_line_item_versions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCustomLineItemVersionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_98) = &input.arn {
        object.key("Arn").string(var_98.as_str());
    }
    if let Some(var_99) = &input.filters {
        #[allow(unused_mut)]
        let mut object_100 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_list_custom_line_item_versions_filter(&mut object_100, var_99)?;
        object_100.finish();
    }
    if let Some(var_101) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_101).into()));
    }
    if let Some(var_102) = &input.next_token {
        object.key("NextToken").string(var_102.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pricing_plans_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListPricingPlansInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_103) = &input.billing_period {
        object.key("BillingPeriod").string(var_103.as_str());
    }
    if let Some(var_104) = &input.filters {
        #[allow(unused_mut)]
        let mut object_105 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_list_pricing_plans_filter(&mut object_105, var_104)?;
        object_105.finish();
    }
    if let Some(var_106) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_106).into()));
    }
    if let Some(var_107) = &input.next_token {
        object.key("NextToken").string(var_107.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pricing_plans_associated_with_pricing_rule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListPricingPlansAssociatedWithPricingRuleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_108) = &input.billing_period {
        object.key("BillingPeriod").string(var_108.as_str());
    }
    if let Some(var_109) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_109).into()));
    }
    if let Some(var_110) = &input.next_token {
        object.key("NextToken").string(var_110.as_str());
    }
    if let Some(var_111) = &input.pricing_rule_arn {
        object.key("PricingRuleArn").string(var_111.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pricing_rules_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListPricingRulesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_112) = &input.billing_period {
        object.key("BillingPeriod").string(var_112.as_str());
    }
    if let Some(var_113) = &input.filters {
        #[allow(unused_mut)]
        let mut object_114 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_list_pricing_rules_filter(&mut object_114, var_113)?;
        object_114.finish();
    }
    if let Some(var_115) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_115).into()));
    }
    if let Some(var_116) = &input.next_token {
        object.key("NextToken").string(var_116.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pricing_rules_associated_to_pricing_plan_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListPricingRulesAssociatedToPricingPlanInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_117) = &input.billing_period {
        object.key("BillingPeriod").string(var_117.as_str());
    }
    if let Some(var_118) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_118).into()));
    }
    if let Some(var_119) = &input.next_token {
        object.key("NextToken").string(var_119.as_str());
    }
    if let Some(var_120) = &input.pricing_plan_arn {
        object.key("PricingPlanArn").string(var_120.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resources_associated_to_custom_line_item_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListResourcesAssociatedToCustomLineItemInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_121) = &input.arn {
        object.key("Arn").string(var_121.as_str());
    }
    if let Some(var_122) = &input.billing_period {
        object.key("BillingPeriod").string(var_122.as_str());
    }
    if let Some(var_123) = &input.filters {
        #[allow(unused_mut)]
        let mut object_124 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_list_resources_associated_to_custom_line_item_filter(&mut object_124, var_123)?;
        object_124.finish();
    }
    if let Some(var_125) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_125).into()));
    }
    if let Some(var_126) = &input.next_token {
        object.key("NextToken").string(var_126.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_127) = &input.tags {
        #[allow(unused_mut)]
        let mut object_128 = object.key("Tags").start_object();
        for (key_129, value_130) in var_127 {
             {
                object_128.key(key_129.as_str()).string(value_130.as_str());
            }
        }
        object_128.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_billing_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateBillingGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_131) = &input.arn {
        object.key("Arn").string(var_131.as_str());
    }
    if let Some(var_132) = &input.computation_preference {
        #[allow(unused_mut)]
        let mut object_133 = object.key("ComputationPreference").start_object();
        crate::json_ser::serialize_structure_crate_model_computation_preference(&mut object_133, var_132)?;
        object_133.finish();
    }
    if let Some(var_134) = &input.description {
        object.key("Description").string(var_134.as_str());
    }
    if let Some(var_135) = &input.name {
        object.key("Name").string(var_135.as_str());
    }
    if let Some(var_136) = &input.status {
        object.key("Status").string(var_136.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_custom_line_item_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateCustomLineItemInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_137) = &input.arn {
        object.key("Arn").string(var_137.as_str());
    }
    if let Some(var_138) = &input.billing_period_range {
        #[allow(unused_mut)]
        let mut object_139 = object.key("BillingPeriodRange").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_line_item_billing_period_range(&mut object_139, var_138)?;
        object_139.finish();
    }
    if let Some(var_140) = &input.charge_details {
        #[allow(unused_mut)]
        let mut object_141 = object.key("ChargeDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_update_custom_line_item_charge_details(&mut object_141, var_140)?;
        object_141.finish();
    }
    if let Some(var_142) = &input.description {
        object.key("Description").string(var_142.as_str());
    }
    if let Some(var_143) = &input.name {
        object.key("Name").string(var_143.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_pricing_plan_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdatePricingPlanInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_144) = &input.arn {
        object.key("Arn").string(var_144.as_str());
    }
    if let Some(var_145) = &input.description {
        object.key("Description").string(var_145.as_str());
    }
    if let Some(var_146) = &input.name {
        object.key("Name").string(var_146.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_pricing_rule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdatePricingRuleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_147) = &input.arn {
        object.key("Arn").string(var_147.as_str());
    }
    if let Some(var_148) = &input.description {
        object.key("Description").string(var_148.as_str());
    }
    if let Some(var_149) = &input.modifier_percentage {
        object.key("ModifierPercentage").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_149).into()));
    }
    if let Some(var_150) = &input.name {
        object.key("Name").string(var_150.as_str());
    }
    if let Some(var_151) = &input.tiering {
        #[allow(unused_mut)]
        let mut object_152 = object.key("Tiering").start_object();
        crate::json_ser::serialize_structure_crate_model_update_tiering_input(&mut object_152, var_151)?;
        object_152.finish();
    }
    if let Some(var_153) = &input.r#type {
        object.key("Type").string(var_153.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_line_item_billing_period_range(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CustomLineItemBillingPeriodRange) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_154) = &input.inclusive_start_billing_period {
        object.key("InclusiveStartBillingPeriod").string(var_154.as_str());
    }
    if let Some(var_155) = &input.exclusive_end_billing_period {
        object.key("ExclusiveEndBillingPeriod").string(var_155.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_grouping(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AccountGrouping) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_156) = &input.linked_account_ids {
        let mut array_157 = object.key("LinkedAccountIds").start_array();
        for item_158 in var_156 {
             {
                array_157.value().string(item_158.as_str());
            }
        }
        array_157.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_computation_preference(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ComputationPreference) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_159) = &input.pricing_plan_arn {
        object.key("PricingPlanArn").string(var_159.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_line_item_charge_details(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CustomLineItemChargeDetails) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_160) = &input.flat {
        #[allow(unused_mut)]
        let mut object_161 = object.key("Flat").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_line_item_flat_charge_details(&mut object_161, var_160)?;
        object_161.finish();
    }
    if let Some(var_162) = &input.percentage {
        #[allow(unused_mut)]
        let mut object_163 = object.key("Percentage").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_line_item_percentage_charge_details(&mut object_163, var_162)?;
        object_163.finish();
    }
    if let Some(var_164) = &input.r#type {
        object.key("Type").string(var_164.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_tiering_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CreateTieringInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_165) = &input.free_tier {
        #[allow(unused_mut)]
        let mut object_166 = object.key("FreeTier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_free_tier_config(&mut object_166, var_165)?;
        object_166.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_account_associations_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ListAccountAssociationsFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_167) = &input.association {
        object.key("Association").string(var_167.as_str());
    }
    if let Some(var_168) = &input.account_id {
        object.key("AccountId").string(var_168.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_billing_group_cost_reports_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ListBillingGroupCostReportsFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_169) = &input.billing_group_arns {
        let mut array_170 = object.key("BillingGroupArns").start_array();
        for item_171 in var_169 {
             {
                array_170.value().string(item_171.as_str());
            }
        }
        array_170.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_billing_groups_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ListBillingGroupsFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_172) = &input.arns {
        let mut array_173 = object.key("Arns").start_array();
        for item_174 in var_172 {
             {
                array_173.value().string(item_174.as_str());
            }
        }
        array_173.finish();
    }
    if let Some(var_175) = &input.pricing_plan {
        object.key("PricingPlan").string(var_175.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_custom_line_items_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ListCustomLineItemsFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_176) = &input.names {
        let mut array_177 = object.key("Names").start_array();
        for item_178 in var_176 {
             {
                array_177.value().string(item_178.as_str());
            }
        }
        array_177.finish();
    }
    if let Some(var_179) = &input.billing_groups {
        let mut array_180 = object.key("BillingGroups").start_array();
        for item_181 in var_179 {
             {
                array_180.value().string(item_181.as_str());
            }
        }
        array_180.finish();
    }
    if let Some(var_182) = &input.arns {
        let mut array_183 = object.key("Arns").start_array();
        for item_184 in var_182 {
             {
                array_183.value().string(item_184.as_str());
            }
        }
        array_183.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_custom_line_item_versions_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ListCustomLineItemVersionsFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_185) = &input.billing_period_range {
        #[allow(unused_mut)]
        let mut object_186 = object.key("BillingPeriodRange").start_object();
        crate::json_ser::serialize_structure_crate_model_list_custom_line_item_versions_billing_period_range_filter(&mut object_186, var_185)?;
        object_186.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_pricing_plans_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ListPricingPlansFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_187) = &input.arns {
        let mut array_188 = object.key("Arns").start_array();
        for item_189 in var_187 {
             {
                array_188.value().string(item_189.as_str());
            }
        }
        array_188.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_pricing_rules_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ListPricingRulesFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_190) = &input.arns {
        let mut array_191 = object.key("Arns").start_array();
        for item_192 in var_190 {
             {
                array_191.value().string(item_192.as_str());
            }
        }
        array_191.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_resources_associated_to_custom_line_item_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ListResourcesAssociatedToCustomLineItemFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_193) = &input.relationship {
        object.key("Relationship").string(var_193.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_custom_line_item_charge_details(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateCustomLineItemChargeDetails) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_194) = &input.flat {
        #[allow(unused_mut)]
        let mut object_195 = object.key("Flat").start_object();
        crate::json_ser::serialize_structure_crate_model_update_custom_line_item_flat_charge_details(&mut object_195, var_194)?;
        object_195.finish();
    }
    if let Some(var_196) = &input.percentage {
        #[allow(unused_mut)]
        let mut object_197 = object.key("Percentage").start_object();
        crate::json_ser::serialize_structure_crate_model_update_custom_line_item_percentage_charge_details(&mut object_197, var_196)?;
        object_197.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_tiering_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateTieringInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_198) = &input.free_tier {
        #[allow(unused_mut)]
        let mut object_199 = object.key("FreeTier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_free_tier_config(&mut object_199, var_198)?;
        object_199.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_line_item_flat_charge_details(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CustomLineItemFlatChargeDetails) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_200) = &input.charge_value {
        object.key("ChargeValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_200).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_line_item_percentage_charge_details(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CustomLineItemPercentageChargeDetails) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_201) = &input.percentage_value {
        object.key("PercentageValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_201).into()));
    }
    if let Some(var_202) = &input.associated_values {
        let mut array_203 = object.key("AssociatedValues").start_array();
        for item_204 in var_202 {
             {
                array_203.value().string(item_204.as_str());
            }
        }
        array_203.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_free_tier_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CreateFreeTierConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_205) = &input.activated {
        object.key("Activated").boolean(*var_205);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_custom_line_item_versions_billing_period_range_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ListCustomLineItemVersionsBillingPeriodRangeFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_206) = &input.start_billing_period {
        object.key("StartBillingPeriod").string(var_206.as_str());
    }
    if let Some(var_207) = &input.end_billing_period {
        object.key("EndBillingPeriod").string(var_207.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_custom_line_item_flat_charge_details(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateCustomLineItemFlatChargeDetails) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_208) = &input.charge_value {
        object.key("ChargeValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_208).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_custom_line_item_percentage_charge_details(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateCustomLineItemPercentageChargeDetails) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_209) = &input.percentage_value {
        object.key("PercentageValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_209).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_free_tier_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateFreeTierConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_210) = &input.activated {
        object.key("Activated").boolean(*var_210);
    }
    Ok(())
}

