// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn deser_header_create_cluster_throttling_exception_retry_after_seconds(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_1 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_1.len() > 1 {
                                Err(aws_smithy_http::header::ParseError::new(format!("expected one item but found {}", var_1.len())))
                            } else {
                                let mut var_1 = var_1;
                                Ok(var_1.pop())
                            }
}

pub(crate) fn deser_header_create_cluster_snapshot_throttling_exception_retry_after_seconds(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_2 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_2.len() > 1 {
                                Err(aws_smithy_http::header::ParseError::new(format!("expected one item but found {}", var_2.len())))
                            } else {
                                let mut var_2 = var_2;
                                Ok(var_2.pop())
                            }
}

pub(crate) fn deser_header_delete_cluster_throttling_exception_retry_after_seconds(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_3 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_3.len() > 1 {
                                Err(aws_smithy_http::header::ParseError::new(format!("expected one item but found {}", var_3.len())))
                            } else {
                                let mut var_3 = var_3;
                                Ok(var_3.pop())
                            }
}

pub(crate) fn deser_header_delete_cluster_snapshot_throttling_exception_retry_after_seconds(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_4 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_4.len() > 1 {
                                Err(aws_smithy_http::header::ParseError::new(format!("expected one item but found {}", var_4.len())))
                            } else {
                                let mut var_4 = var_4;
                                Ok(var_4.pop())
                            }
}

pub(crate) fn deser_header_get_cluster_throttling_exception_retry_after_seconds(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_5 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_5.len() > 1 {
                                Err(aws_smithy_http::header::ParseError::new(format!("expected one item but found {}", var_5.len())))
                            } else {
                                let mut var_5 = var_5;
                                Ok(var_5.pop())
                            }
}

pub(crate) fn deser_header_get_cluster_snapshot_throttling_exception_retry_after_seconds(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_6 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_6.len() > 1 {
                                Err(aws_smithy_http::header::ParseError::new(format!("expected one item but found {}", var_6.len())))
                            } else {
                                let mut var_6 = var_6;
                                Ok(var_6.pop())
                            }
}

pub(crate) fn deser_header_list_clusters_throttling_exception_retry_after_seconds(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_7 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_7.len() > 1 {
                                Err(aws_smithy_http::header::ParseError::new(format!("expected one item but found {}", var_7.len())))
                            } else {
                                let mut var_7 = var_7;
                                Ok(var_7.pop())
                            }
}

pub(crate) fn deser_header_list_cluster_snapshots_throttling_exception_retry_after_seconds(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_8 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_8.len() > 1 {
                                Err(aws_smithy_http::header::ParseError::new(format!("expected one item but found {}", var_8.len())))
                            } else {
                                let mut var_8 = var_8;
                                Ok(var_8.pop())
                            }
}

pub(crate) fn deser_header_list_tags_for_resource_throttling_exception_retry_after_seconds(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_9 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_9.len() > 1 {
                                Err(aws_smithy_http::header::ParseError::new(format!("expected one item but found {}", var_9.len())))
                            } else {
                                let mut var_9 = var_9;
                                Ok(var_9.pop())
                            }
}

pub(crate) fn deser_header_restore_cluster_from_snapshot_throttling_exception_retry_after_seconds(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_10 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_10.len() > 1 {
                                Err(aws_smithy_http::header::ParseError::new(format!("expected one item but found {}", var_10.len())))
                            } else {
                                let mut var_10 = var_10;
                                Ok(var_10.pop())
                            }
}

pub(crate) fn deser_header_tag_resource_throttling_exception_retry_after_seconds(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_11 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_11.len() > 1 {
                                Err(aws_smithy_http::header::ParseError::new(format!("expected one item but found {}", var_11.len())))
                            } else {
                                let mut var_11 = var_11;
                                Ok(var_11.pop())
                            }
}

pub(crate) fn deser_header_untag_resource_throttling_exception_retry_after_seconds(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_12 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_12.len() > 1 {
                                Err(aws_smithy_http::header::ParseError::new(format!("expected one item but found {}", var_12.len())))
                            } else {
                                let mut var_12 = var_12;
                                Ok(var_12.pop())
                            }
}

pub(crate) fn deser_header_update_cluster_throttling_exception_retry_after_seconds(header_map: &http::HeaderMap) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_13 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_13.len() > 1 {
                                Err(aws_smithy_http::header::ParseError::new(format!("expected one item but found {}", var_13.len())))
                            } else {
                                let mut var_13 = var_13;
                                Ok(var_13.pop())
                            }
}

